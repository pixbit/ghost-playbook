{"db":[{"meta":{"exported_on":1431317051111,"version":"003"},"data":{"posts":[{"id":3,"uuid":"a6655970-20a9-4a53-ab1f-4b22a5b0f841","title":"Building Angular.js and Node.js with the MEAN stack: Course Introduction","slug":"building-angular-js-and-node-js-with-the-mean-stack-course-introduction","markdown":"###### NodeJS ######\n\nWe are living in a world where **NodeJS** is gaining market share at a rapid pace and is now making significant inroads in the enterprise.\n\n> Major companies are announcing shifts to **Node** as a key component of their web development.\n\n---\n\n###### MongoDB ######\n\n**MongoDB** is definitely one of the most popular. It stores its data in a format called **BSON**, which is just a **binary representation of JSON**. **MongoDB** also uses **JavaScript** as its **native query language**.\n\n---\n\n###### JavaScript ######\n\nWith these inventions, suddenly it became possible to build an entire web applications using only JavaScript across all the tiers. Each tier still requires significantly different coding paradigms, but now at least the language can be the same.\n\n---\n\n###### MEAN App from scratch ######\n\nIn this course we are going to learn how to build an application with the **MEAN** Stack.\n\n> We will build a realistic application end to end, starting from absolutely nothing, just an empty folder and develop it line by line.\n\n1. We create our walking skeleton which will be **every layer from the client all the way through to the database**.\n- Next, we'll get right to business by getting our **application out on the web**. We'll learn how to deploy it to Heroku, a popular and free hosting service.\n- Then, we'll go back to the code and lay the ground work for our **user interface**.\n- The next step will be to **implement authentication and authorization** for our application. We'll use the **passport** module for this, which is one of the more popular **Node modules for authentication**.\n- After that we will **set up tests for our client-side code**. We won't do a bunch of testing, but we will get it set up.\n- After that, we'll create **entities using a RESTful interface** by implementing our **sign-up page to create new users**.\n- In the next module we'll **implement the user profile page**, which will teach us all about **updating data with the MEAN Stack**.\n- The next module will be a **list page**, which we will use to learn about **sorting, filtering, and caching data**.\n- And in our last module, we'll implement a **details page**, which will teach us about **selecting and caching single entities**.\n\nAt this point we will have a complete application that will have all the pieces of a real application and could easily be used as a starting point for any kind of application with relatively few changes.\n\n---\n\n<a class=\"prev-article\" href=\"http://www.pluralsight.com\" style=\"width: 50%;\">Pluralsight</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-course-introduction-prerequisites\" style=\"float: right;width: 50%;text-align: right;\">Prerequisites</a>\n","html":"<h6 id=\"nodejs\">NodeJS</h6>\n\n<p>We are living in a world where <strong>NodeJS</strong> is gaining market share at a rapid pace and is now making significant inroads in the enterprise.</p>\n\n<blockquote>\n  <p>Major companies are announcing shifts to <strong>Node</strong> as a key component of their web development.</p>\n</blockquote>\n\n<hr />\n\n<h6 id=\"mongodb\">MongoDB</h6>\n\n<p><strong>MongoDB</strong> is definitely one of the most popular. It stores its data in a format called <strong>BSON</strong>, which is just a <strong>binary representation of JSON</strong>. <strong>MongoDB</strong> also uses <strong>JavaScript</strong> as its <strong>native query language</strong>.</p>\n\n<hr />\n\n<h6 id=\"javascript\">JavaScript</h6>\n\n<p>With these inventions, suddenly it became possible to build an entire web applications using only JavaScript across all the tiers. Each tier still requires significantly different coding paradigms, but now at least the language can be the same.</p>\n\n<hr />\n\n<h6 id=\"meanappfromscratch\">MEAN App from scratch</h6>\n\n<p>In this course we are going to learn how to build an application with the <strong>MEAN</strong> Stack.</p>\n\n<blockquote>\n  <p>We will build a realistic application end to end, starting from absolutely nothing, just an empty folder and develop it line by line.</p>\n</blockquote>\n\n<ol>\n<li>We create our walking skeleton which will be <strong>every layer from the client all the way through to the database</strong>.  </li>\n<li>Next, we'll get right to business by getting our <strong>application out on the web</strong>. We'll learn how to deploy it to Heroku, a popular and free hosting service.</li>\n<li>Then, we'll go back to the code and lay the ground work for our <strong>user interface</strong>.</li>\n<li>The next step will be to <strong>implement authentication and authorization</strong> for our application. We'll use the <strong>passport</strong> module for this, which is one of the more popular <strong>Node modules for authentication</strong>.</li>\n<li>After that we will <strong>set up tests for our client-side code</strong>. We won't do a bunch of testing, but we will get it set up.</li>\n<li>After that, we'll create <strong>entities using a RESTful interface</strong> by implementing our <strong>sign-up page to create new users</strong>.</li>\n<li>In the next module we'll <strong>implement the user profile page</strong>, which will teach us all about <strong>updating data with the MEAN Stack</strong>.</li>\n<li>The next module will be a <strong>list page</strong>, which we will use to learn about <strong>sorting, filtering, and caching data</strong>.</li>\n<li>And in our last module, we'll implement a <strong>details page</strong>, which will teach us about <strong>selecting and caching single entities</strong>.</li>\n</ol>\n\n<p>At this point we will have a complete application that will have all the pieces of a real application and could easily be used as a starting point for any kind of application with relatively few changes.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"http://www.pluralsight.com\" style=\"width: 50%;\">Pluralsight</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-course-introduction-prerequisites\" style=\"float: right;width: 50%;text-align: right;\">Prerequisites</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":1424195435832,"created_by":3,"updated_at":1429064018748,"updated_by":1,"published_at":1424195578920,"published_by":3},{"id":4,"uuid":"6ceb7f2c-78aa-482e-abcb-e879724fa991","title":"Building Angular.js and Node.js with the MEAN stack: Prerequisites","slug":"building-angular-js-and-node-js-with-the-mean-stack-course-introduction-prerequisites","markdown":"##### Angular #####\n\nWe will be using **AngularJS**, but we won't cover the basics of it.\n\n- Link to [Angular Course](http://www.pluralsight.com/courses/angularjs-get-started)\n\n##### Node #####\n\nThe next prerequisite is **NodeJS**. The first thing you will need to get anywhere with this course is to have **Node** installed.\n\nIf you simply know **JavaScript** and have **Node** installed, you can still get through this course.\n\nUnderstanding the **commonJS pattern of requiring independencies** with **Node** will be helpful.\n\nAs will understanding the **basic error handling pattern in Node**.  Although this is by no means a prerequisite, using a Node version manager is a great idea.\n\n<input type=\"checkbox\"> Install Node.\n<input type=\"checkbox\"> Understand JS pattern of requiring independencies with Node.\n<input type=\"checkbox\"> Understand basic error handling pattern in Node.\n<input type=\"checkbox\"> Know how to use a Node version manager\n\n- Link to [Introduction to Node.js](http://www.pluralsight.com/courses/node-intro) [12/2012]\n- Link to [Node Application Patterns](http://www.pluralsight.com/courses/node-application-patterns) [07/2012]\n- Link to [Building Web Apps With Node.js](http://www.pluralsight.com/courses/building-web-apps-nodejs) [08/2014]\n\n##### MongoDB #####\n\nThe next main prerequisite is **MongoDB**. Like **Node**, you will have to have it **installed and running** in order to get anywhere with this course and we won't cover that topic at all.\n\nOther than that, you don't really need much **MongoDB** knowledge.\n\n- Link to [Introduction to Mongoose for Node.js and MongoDB](http://www.pluralsight.com/courses/mongoose-for-nodejs-mongodb) [11/2014]\n\n- [ ] Install MongoDB.\n\n##### Express #####\n\n**Express** and just like the other three, we won't spend much time explaining all the basics of **Express**, but of all the prerequisites mentioned so far, this one will be the least important.\n\nYou can easily follow along and pick up Express through this course.\n\n- Link to Angular Course: http://www.google.com\n- Link to Notes Repo: http://www.google.com\n- Link to Notes: http://www.google.com\n\n##### Javascript #####\n\nOne obvious prerequisite to the course if **JavaScript** itself. Highly recommend you watch Pluralsight's course on **JavaScript** fundamentals. If you have even a passing familiarity with **JavaScript**, you will be just fine for this course.\n\nNothing we do will really test your **JavaScript** chops.\n\n##### Testing with Karma #####\n\nIn one of the modules we will be using **Karma** to test our client-side code.\n\nI won't be showing you how to install **Karma**, which can sometimes be a bit tricky, so if you are completely new to **Karma**, it might be in your best interest to watch the relevant parts of my course on **testing client-side JavaScript**.\n\nIn the module on testing utilities, there is a clip all about **Karma**, how to install and use it.\n\nBe sure to watch that if you have any issues with **Karma**.\n\n- Link to Angular Course: http://www.google.com\n- Link to Notes Repo: http://www.google.com\n- Link to Notes: http://www.google.com\n\n##### Testing with Mocha #####\n\nWe will be using **Mocha**. If you don't know anything about **Mocha**, you can probably pick up enough to follow along in this course, but if you want to do your own testing, you will definitely want to learn more about **Mocha**.\n\nMy course on **testing client-side JavaScript** has an entire module on **Mocha**.\n\n- Link to Angular Course: http://www.google.com\n- Link to Notes Repo: http://www.google.com\n- Link to Notes: http://www.google.com\n\n##### CSS pre-processor Stylus #####\n\n**Stylus** is a CSS pre-processor. Nothing that we will do with **Stylus** is complex so even a passing knowledge of it will do. You can really just follow along if you have never used **Stylus** and be just fine.\n\n##### Git #####\n\n**Git** is required to deploy to **Heroku**, so if you don't care to deploy to Heroku then you can safely skip **Git**, but if you aren't familiar with **Git**, then it would really benefit you to take the time to learn it.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-course-introduction\" style=\"width: 50%;\">Course Intro</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-course-introduction-versions\" style=\"float: right;width: 50%;text-align: right;\">Versions</a>\n","html":"<h5 id=\"angular\">Angular</h5>\n\n<p>We will be using <strong>AngularJS</strong>, but we won't cover the basics of it.</p>\n\n<ul>\n<li>Link to <a href=\"http://www.pluralsight.com/courses/angularjs-get-started\">Angular Course</a></li>\n</ul>\n\n<h5 id=\"node\">Node</h5>\n\n<p>The next prerequisite is <strong>NodeJS</strong>. The first thing you will need to get anywhere with this course is to have <strong>Node</strong> installed.</p>\n\n<p>If you simply know <strong>JavaScript</strong> and have <strong>Node</strong> installed, you can still get through this course.</p>\n\n<p>Understanding the <strong>commonJS pattern of requiring independencies</strong> with <strong>Node</strong> will be helpful.</p>\n\n<p>As will understanding the <strong>basic error handling pattern in Node</strong>.  Although this is by no means a prerequisite, using a Node version manager is a great idea.</p>\n\n<p><input type=\"checkbox\"> Install Node. <br />\n<input type=\"checkbox\"> Understand JS pattern of requiring independencies with Node. <br />\n<input type=\"checkbox\"> Understand basic error handling pattern in Node. <br />\n<input type=\"checkbox\"> Know how to use a Node version manager</p>\n\n<ul>\n<li>Link to <a href=\"http://www.pluralsight.com/courses/node-intro\">Introduction to Node.js</a> [12/2012]</li>\n<li>Link to <a href=\"http://www.pluralsight.com/courses/node-application-patterns\">Node Application Patterns</a> [07/2012]</li>\n<li>Link to <a href=\"http://www.pluralsight.com/courses/building-web-apps-nodejs\">Building Web Apps With Node.js</a> [08/2014]</li>\n</ul>\n\n<h5 id=\"mongodb\">MongoDB</h5>\n\n<p>The next main prerequisite is <strong>MongoDB</strong>. Like <strong>Node</strong>, you will have to have it <strong>installed and running</strong> in order to get anywhere with this course and we won't cover that topic at all.</p>\n\n<p>Other than that, you don't really need much <strong>MongoDB</strong> knowledge.</p>\n\n<ul>\n<li><p>Link to <a href=\"http://www.pluralsight.com/courses/mongoose-for-nodejs-mongodb\">Introduction to Mongoose for Node.js and MongoDB</a> [11/2014]</p></li>\n<li><p>[ ] Install MongoDB.</p></li>\n</ul>\n\n<h5 id=\"express\">Express</h5>\n\n<p><strong>Express</strong> and just like the other three, we won't spend much time explaining all the basics of <strong>Express</strong>, but of all the prerequisites mentioned so far, this one will be the least important.</p>\n\n<p>You can easily follow along and pick up Express through this course.</p>\n\n<ul>\n<li>Link to Angular Course: <a href=\"http://www.google.com\">http://www.google.com</a></li>\n<li>Link to Notes Repo: <a href=\"http://www.google.com\">http://www.google.com</a></li>\n<li>Link to Notes: <a href=\"http://www.google.com\">http://www.google.com</a></li>\n</ul>\n\n<h5 id=\"javascript\">Javascript</h5>\n\n<p>One obvious prerequisite to the course if <strong>JavaScript</strong> itself. Highly recommend you watch Pluralsight's course on <strong>JavaScript</strong> fundamentals. If you have even a passing familiarity with <strong>JavaScript</strong>, you will be just fine for this course.</p>\n\n<p>Nothing we do will really test your <strong>JavaScript</strong> chops.</p>\n\n<h5 id=\"testingwithkarma\">Testing with Karma</h5>\n\n<p>In one of the modules we will be using <strong>Karma</strong> to test our client-side code.</p>\n\n<p>I won't be showing you how to install <strong>Karma</strong>, which can sometimes be a bit tricky, so if you are completely new to <strong>Karma</strong>, it might be in your best interest to watch the relevant parts of my course on <strong>testing client-side JavaScript</strong>.</p>\n\n<p>In the module on testing utilities, there is a clip all about <strong>Karma</strong>, how to install and use it.</p>\n\n<p>Be sure to watch that if you have any issues with <strong>Karma</strong>.</p>\n\n<ul>\n<li>Link to Angular Course: <a href=\"http://www.google.com\">http://www.google.com</a></li>\n<li>Link to Notes Repo: <a href=\"http://www.google.com\">http://www.google.com</a></li>\n<li>Link to Notes: <a href=\"http://www.google.com\">http://www.google.com</a></li>\n</ul>\n\n<h5 id=\"testingwithmocha\">Testing with Mocha</h5>\n\n<p>We will be using <strong>Mocha</strong>. If you don't know anything about <strong>Mocha</strong>, you can probably pick up enough to follow along in this course, but if you want to do your own testing, you will definitely want to learn more about <strong>Mocha</strong>.</p>\n\n<p>My course on <strong>testing client-side JavaScript</strong> has an entire module on <strong>Mocha</strong>.</p>\n\n<ul>\n<li>Link to Angular Course: <a href=\"http://www.google.com\">http://www.google.com</a></li>\n<li>Link to Notes Repo: <a href=\"http://www.google.com\">http://www.google.com</a></li>\n<li>Link to Notes: <a href=\"http://www.google.com\">http://www.google.com</a></li>\n</ul>\n\n<h5 id=\"csspreprocessorstylus\">CSS pre-processor Stylus</h5>\n\n<p><strong>Stylus</strong> is a CSS pre-processor. Nothing that we will do with <strong>Stylus</strong> is complex so even a passing knowledge of it will do. You can really just follow along if you have never used <strong>Stylus</strong> and be just fine.</p>\n\n<h5 id=\"git\">Git</h5>\n\n<p><strong>Git</strong> is required to deploy to <strong>Heroku</strong>, so if you don't care to deploy to Heroku then you can safely skip <strong>Git</strong>, but if you aren't familiar with <strong>Git</strong>, then it would really benefit you to take the time to learn it.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-course-introduction\" style=\"width: 50%;\">Course Intro</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-course-introduction-versions\" style=\"float: right;width: 50%;text-align: right;\">Versions</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":1424201869639,"created_by":3,"updated_at":1429064035178,"updated_by":1,"published_at":1424201890582,"published_by":3},{"id":5,"uuid":"501fbcea-50bd-4365-b9f7-b402851fc6fc","title":"Building Angular.js and Node.js with the MEAN stack: Versions","slug":"building-angular-js-and-node-js-with-the-mean-stack-course-introduction-versions","markdown":"In this course we will be using four core technologies: Angular, Node, Express, and MongoDB.\n\n---\n\n##### Angular #####\n\nFor **Angular** I used **1.2.16**, but you should be safe with any version of **1.2** and most likely, any version of **1.3**.\n\n---\n\n##### Node #####\n\nFor **Node**, I use **0.10.25**, but really version **later than 0.10** should work fine.\n\nUsing an unstable version of **Node** will almost definitely give you problems though.\n\n---\n\n##### Express #####\n\nFor **Express**, initially this course was written using **Express 3.4**.\n\nSince then, **Expression v4** has come out and it implements some breaking changes.\n\nAs such, this course has been updated to **Express v4**.\n\nI specifically used **v4.2.0**, but probably any version of **Express 4** will be fine.\n\n---\n\n##### MongoDB #####\n\nFor **Mongo**, we'll use version **2.4.1**, but any version of **Mongo 2.4 or later** should be fine and probably much earlier versions will be fine as well.\n\n---\n\n##### Critical Files #####\n\nYou can access the critical files on my **GitHub** account. This URL will take you to a repository that has the files that we won't build by hand.\n\nhttps://github.com/joeeames/MEANAppsFiles\n\n**It's time to code.**\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-course-introduction-prerequisites\" style=\"width: 50%;\">Prerequisites</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton\" style=\"float: right;width: 50%;text-align: right;\">Intro</a>","html":"<p>In this course we will be using four core technologies: Angular, Node, Express, and MongoDB.</p>\n\n<hr />\n\n<h5 id=\"angular\">Angular</h5>\n\n<p>For <strong>Angular</strong> I used <strong>1.2.16</strong>, but you should be safe with any version of <strong>1.2</strong> and most likely, any version of <strong>1.3</strong>.</p>\n\n<hr />\n\n<h5 id=\"node\">Node</h5>\n\n<p>For <strong>Node</strong>, I use <strong>0.10.25</strong>, but really version <strong>later than 0.10</strong> should work fine.</p>\n\n<p>Using an unstable version of <strong>Node</strong> will almost definitely give you problems though.</p>\n\n<hr />\n\n<h5 id=\"express\">Express</h5>\n\n<p>For <strong>Express</strong>, initially this course was written using <strong>Express 3.4</strong>.</p>\n\n<p>Since then, <strong>Expression v4</strong> has come out and it implements some breaking changes.</p>\n\n<p>As such, this course has been updated to <strong>Express v4</strong>.</p>\n\n<p>I specifically used <strong>v4.2.0</strong>, but probably any version of <strong>Express 4</strong> will be fine.</p>\n\n<hr />\n\n<h5 id=\"mongodb\">MongoDB</h5>\n\n<p>For <strong>Mongo</strong>, we'll use version <strong>2.4.1</strong>, but any version of <strong>Mongo 2.4 or later</strong> should be fine and probably much earlier versions will be fine as well.</p>\n\n<hr />\n\n<h5 id=\"criticalfiles\">Critical Files</h5>\n\n<p>You can access the critical files on my <strong>GitHub</strong> account. This URL will take you to a repository that has the files that we won't build by hand.</p>\n\n<p><a href=\"https://github.com/joeeames/MEANAppsFiles\">https://github.com/joeeames/MEANAppsFiles</a></p>\n\n<p><strong>It's time to code.</strong></p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-course-introduction-prerequisites\" style=\"width: 50%;\">Prerequisites</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton\" style=\"float: right;width: 50%;text-align: right;\">Intro</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":1424201925956,"created_by":3,"updated_at":1429064056209,"updated_by":1,"published_at":1424201936070,"published_by":3},{"id":6,"uuid":"27090563-c702-4ea6-a3bc-0242ac6af137","title":"Building Angular.js and Node.js with the MEAN stack: Introduction","slug":"building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton","markdown":"###### Walking Skeleton ######\n\n> A \"**walking skeleton**\" is a tiny implementation of the system that performs a small end-to-end function.\n\n> It need not use the final architecture, but it should link together the main architectural components.\n\n> The architecture and the functionality can then evolve in parallel.\n\nFirst, it is end to end, which for us that means **database to client**.\n\nSecond, it should involve all the main architectural components so we should involve every item from the main acronym, **Mongo**, **Express**, **Angular**, and **Node**, and the three pieces, **client**, **server**, and **database** should be involved.\n\nThird, this approach allows us to **develop our app in an iterative manner** so it can slowly grow and we can constantly see new pieces that are added, working as part of the system rather than waiting days or even longer.\n\nThat helps us know sooner if we need to change our course or rethink an approach.\n\nNothing that I do in this module will be specific to our application, except for the name, so this can be a starting point for any **MEAN Stack** application.\n\n![Module Agenda](/content/images/2015/03/module-agenda.png)\n\n## Steps to creating the walking skeleton: ##\n\n1. We will start it off by creating a **package.json** file for our project, which will **store which modules our Node application depends on**.\n\n2. Then we will **add Git** so that we can get our project under source control and also deploy our code to **Heroku**.\n\n3. After that we will use **Bower to install our client-side dependencies** and you will see how easy and convenient it is to manage your client-side dependencies with Bower.\n\n4. Then we will **create the Node application** by creating our first server-side JavaScript file.\n\n5. After that we will **add Stylus** to our project, which will compile our CSS for us.\n\n6. Next we will **create a layout** for our server-side views.\n\n7. The next step will be **creating our client-side Angular app**. This will be a super simple application, but it will still use Angular to render some data.\n\n8. Finally, we will **add MongoDB** to our application and we will display some data from our database on our web page.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-course-introduction-versions\" style=\"width: 50%;\">Versions</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-git-and-package-json\" style=\"float: right;width: 50%;text-align: right;\">Git and package.json</a>","html":"<h6 id=\"walkingskeleton\">Walking Skeleton</h6>\n\n<blockquote>\n  <p>A \"<strong>walking skeleton</strong>\" is a tiny implementation of the system that performs a small end-to-end function.</p>\n  \n  <p>It need not use the final architecture, but it should link together the main architectural components.</p>\n  \n  <p>The architecture and the functionality can then evolve in parallel.</p>\n</blockquote>\n\n<p>First, it is end to end, which for us that means <strong>database to client</strong>.</p>\n\n<p>Second, it should involve all the main architectural components so we should involve every item from the main acronym, <strong>Mongo</strong>, <strong>Express</strong>, <strong>Angular</strong>, and <strong>Node</strong>, and the three pieces, <strong>client</strong>, <strong>server</strong>, and <strong>database</strong> should be involved.</p>\n\n<p>Third, this approach allows us to <strong>develop our app in an iterative manner</strong> so it can slowly grow and we can constantly see new pieces that are added, working as part of the system rather than waiting days or even longer.</p>\n\n<p>That helps us know sooner if we need to change our course or rethink an approach.</p>\n\n<p>Nothing that I do in this module will be specific to our application, except for the name, so this can be a starting point for any <strong>MEAN Stack</strong> application.</p>\n\n<p><img src=\"/content/images/2015/03/module-agenda.png\" alt=\"Module Agenda\" /></p>\n\n<h2 id=\"stepstocreatingthewalkingskeleton\">Steps to creating the walking skeleton:</h2>\n\n<ol>\n<li><p>We will start it off by creating a <strong>package.json</strong> file for our project, which will <strong>store which modules our Node application depends on</strong>.</p></li>\n<li><p>Then we will <strong>add Git</strong> so that we can get our project under source control and also deploy our code to <strong>Heroku</strong>.</p></li>\n<li><p>After that we will use <strong>Bower to install our client-side dependencies</strong> and you will see how easy and convenient it is to manage your client-side dependencies with Bower.</p></li>\n<li><p>Then we will <strong>create the Node application</strong> by creating our first server-side JavaScript file.</p></li>\n<li><p>After that we will <strong>add Stylus</strong> to our project, which will compile our CSS for us.</p></li>\n<li><p>Next we will <strong>create a layout</strong> for our server-side views.</p></li>\n<li><p>The next step will be <strong>creating our client-side Angular app</strong>. This will be a super simple application, but it will still use Angular to render some data.</p></li>\n<li><p>Finally, we will <strong>add MongoDB</strong> to our application and we will display some data from our database on our web page.</p></li>\n</ol>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-course-introduction-versions\" style=\"width: 50%;\">Versions</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-git-and-package-json\" style=\"float: right;width: 50%;text-align: right;\">Git and package.json</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":1424201993735,"created_by":3,"updated_at":1429064064841,"updated_by":1,"published_at":1424202086621,"published_by":3},{"id":7,"uuid":"e4a20af8-ca2f-4a70-97f9-192759ccda73","title":"Building Angular.js and Node.js with the MEAN stack: Git & package.json","slug":"building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-git-and-package-json","markdown":"## Create a project directory ##\n\n```bash\n$ mkdir MEAN-myApp\n$ cd MEAN-myApp\n```\n\n## Initialize Git ##\n\n```bash\n$ touch .gitignore\n$ echo \"node_modules\" >> .gitignore\n$ git init\n$ git add .\n$ git commit -m \"Initial Push\"\n```\n\n## Setup remote repository ##\n\n- Go to [https://github.com/new](https://github.com/new)\n- Copy SSH clone URL of newly created repo\n\n```bash\n$ git remote add origin git@github.com:pixbit/MEAN-myApp.git\n$ git remote -v\n\n> origin git@github.com:pixbit/MEAN-myApp.git (fetch)\n> origin git@github.com:pixbit/MEAN-myApp.git (push)\n```\n\n## Create the package.json ##\n\n```bash\n$ npm init\n\n> name: (MEAN-myApp)\n> version: (1.0.0)\n> description:\n> entry point: (index.js)\n> test command:\n> git repository: (git@github.com:pixbit/MEAN-myApp.git)\n> keywords:\n> author:\n> license: (ISC)\n> About to write to /Users/bit/Desktop/MEAN-myApp/package.> json:\n\n> {\n>  \"name\": \"MEAN-myApp\",\n>  \"version\": \"1.0.0\",\n>  \"description\": \"1 - Course Introduction =======================\",\n>  \"main\": \"index.js\",\n>  \"scripts\": {\n>    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n>  },\n>  \"repository\": {\n>    \"type\": \"git\",\n>    \"url\": \"git@github.com:pixbit/MEAN-myApp.git\"\n>  },\n>  \"author\": \"\",\n>  \"license\": \"ISC\"\n> }\n>\n> Is this ok? (yes) yes\n```\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton\" style=\"width: 50%;\">Intro</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-client-side-dependencies-with-bower\" style=\"float: right;width: 50%;text-align: right;\">Bower</a>","html":"<h2 id=\"createaprojectdirectory\">Create a project directory</h2>\n\n<pre><code class=\"language-bash\">$ mkdir MEAN-myApp\n$ cd MEAN-myApp\n</code></pre>\n\n<h2 id=\"initializegit\">Initialize Git</h2>\n\n<pre><code class=\"language-bash\">$ touch .gitignore\n$ echo \"node_modules\" &gt;&gt; .gitignore\n$ git init\n$ git add .\n$ git commit -m \"Initial Push\"\n</code></pre>\n\n<h2 id=\"setupremoterepository\">Setup remote repository</h2>\n\n<ul>\n<li>Go to <a href=\"https://github.com/new\">https://github.com/new</a></li>\n<li>Copy SSH clone URL of newly created repo</li>\n</ul>\n\n<pre><code class=\"language-bash\">$ git remote add origin git@github.com:pixbit/MEAN-myApp.git\n$ git remote -v\n\n&gt; origin git@github.com:pixbit/MEAN-myApp.git (fetch)\n&gt; origin git@github.com:pixbit/MEAN-myApp.git (push)\n</code></pre>\n\n<h2 id=\"createthepackagejson\">Create the package.json</h2>\n\n<pre><code class=\"language-bash\">$ npm init\n\n&gt; name: (MEAN-myApp)\n&gt; version: (1.0.0)\n&gt; description:\n&gt; entry point: (index.js)\n&gt; test command:\n&gt; git repository: (git@github.com:pixbit/MEAN-myApp.git)\n&gt; keywords:\n&gt; author:\n&gt; license: (ISC)\n&gt; About to write to /Users/bit/Desktop/MEAN-myApp/package.&gt; json:\n\n&gt; {\n&gt;  \"name\": \"MEAN-myApp\",\n&gt;  \"version\": \"1.0.0\",\n&gt;  \"description\": \"1 - Course Introduction =======================\",\n&gt;  \"main\": \"index.js\",\n&gt;  \"scripts\": {\n&gt;    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n&gt;  },\n&gt;  \"repository\": {\n&gt;    \"type\": \"git\",\n&gt;    \"url\": \"git@github.com:pixbit/MEAN-myApp.git\"\n&gt;  },\n&gt;  \"author\": \"\",\n&gt;  \"license\": \"ISC\"\n&gt; }\n&gt;\n&gt; Is this ok? (yes) yes\n</code></pre>\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton\" style=\"width: 50%;\">Intro</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-client-side-dependencies-with-bower\" style=\"float: right;width: 50%;text-align: right;\">Bower</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":1424202135751,"created_by":3,"updated_at":1429064075154,"updated_by":1,"published_at":1424202152794,"published_by":3},{"id":8,"uuid":"2241ab14-e9dd-4e7a-8e79-c1152c1e6f58","title":"Building Angular.js and Node.js with the MEAN stack: Client-side Dependencies with Bower","slug":"building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-client-side-dependencies-with-bower","markdown":"## Install bower ##\n\n```bash\n$ npm install bower -g\n```\n\n## Add Express and Jade ##\n\n```bash\n$ npm install --save express jade\n```\n\n## Setup \"public\" and \"server\" directories ##\n```bash\n$ mkdir server\n$ mkdir public\n$ ls\n> README.md  package.json  public  server\n```\n\nBefore we install our dependencies though, we need to have a place for those dependencies to go so it's time to discuss our top-level folders in our project.\n\n#### The \"**server**\" directory ####\n\n> **Server-side folder** where you put your **Node** source files plus our **Jade** views and our **client-side partials**.\n\nNormally named \"app\", where I'm going put my **client-side partials** inside of my \"**server**\" directory is because since we're using **Angular**, we're not gonna have very many server side views and I want to be able to author my **client-side views** in **Jade**, which means that **Node** is actually going to have to process them as views and can't just deliver them untouched the way it would with **HTML** files. \n\nThat means those **client-side partials** are going to need to reside in the same directory as my **server-side views**.\n\n#### The \"**public**\" directory ####\n\n> **Client-side folder** where you put all of your public **assets** such as **CSS**, images, and **JavaScript** files.\n\nNow that we've got the folder that's going to contain our **client-side dependencies**, before we can begin installing them, we need to do one more thing and create a **.bowerrc** file.\n\n## Create a .bowerrc file ##\n```bash\n$ touch .bowerrc\n$ vim .bowerrc\n```\n\n<span class=\"filename\">.bowerrc</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">{\n  \"directory\": \"public/vendor\"\n}</code></pre>\n\nThis file will tell Bower to install our client-side dependencies into a public folder named \"**vendor**\".\n\n## Create bower.json file ##\n\n```bash\n$ bower init\n\n? name: MEAN-myApp\n? version: 1.0.0\n? description:\n? main file:\n? what types of modules does this package expose?: node\n? keywords:\n? authors: Edwin Estrada <edwin@thinkpixbit.com>\n? license: MIT\n? homepage:\n? set currently installed components as dependencies?: No\n? add commonly ignored files to ignore list?: No\n? would you like to mark this package as private which prevents it from being accidentally published to the registry?: Yes\n\n{\n  name: 'MEAN-myApp',\n  version: '1.0.0',\n  authors: [\n    'Edwin Estrada <edwin@thinkpixbit.com>'\n  ],\n  license: 'MIT',\n  private: true\n}\n\n? Looks good?: Yes\n```\n\n\n## Install client-side dependencies ##\n\n```bash\n$ bower install jquery --save\n$ bower install toastr --save\n$ bower install angular angular-resource angular-route --save\n```\n\n## Verify client-dependencies ##\n<span class=\"filename\">bower.json</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">{\n  \"name\": \"MEAN-myApp\",\n  \"version\": \"1.0.0\",\n  \"authors\": [\n    \"Edwin Estrada <edwin@thinkpixbit.com>\"\n  ],\n  \"license\": \"MIT\",\n  \"private\": true,\n  \"dependencies\": {\n    \"jquery\": \"~2.1.3\",\n    \"toastr\": \"~2.1.0\",\n    \"angular\": \"~1.3.13\",\n    \"angular-resource\": \"~1.3.13\",\n    \"angular-route\": \"~1.3.13\"\n  }\n}</code></pre>\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-git-and-package-json\" style=\"width: 50%;\">Git & package.json</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-creating-the-node-application\" style=\"float: right;width: 50%;text-align: right;\">Node app</a>","html":"<h2 id=\"installbower\">Install bower</h2>\n\n<pre><code class=\"language-bash\">$ npm install bower -g\n</code></pre>\n\n<h2 id=\"addexpressandjade\">Add Express and Jade</h2>\n\n<pre><code class=\"language-bash\">$ npm install --save express jade\n</code></pre>\n\n<h2 id=\"setuppublicandserverdirectories\">Setup \"public\" and \"server\" directories</h2>\n\n<pre><code class=\"language-bash\">$ mkdir server\n$ mkdir public\n$ ls\n&gt; README.md  package.json  public  server\n</code></pre>\n\n<p>Before we install our dependencies though, we need to have a place for those dependencies to go so it's time to discuss our top-level folders in our project.</p>\n\n<h4 id=\"theserverdirectory\">The \"<strong>server</strong>\" directory</h4>\n\n<blockquote>\n  <p><strong>Server-side folder</strong> where you put your <strong>Node</strong> source files plus our <strong>Jade</strong> views and our <strong>client-side partials</strong>.</p>\n</blockquote>\n\n<p>Normally named \"app\", where I'm going put my <strong>client-side partials</strong> inside of my \"<strong>server</strong>\" directory is because since we're using <strong>Angular</strong>, we're not gonna have very many server side views and I want to be able to author my <strong>client-side views</strong> in <strong>Jade</strong>, which means that <strong>Node</strong> is actually going to have to process them as views and can't just deliver them untouched the way it would with <strong>HTML</strong> files. </p>\n\n<p>That means those <strong>client-side partials</strong> are going to need to reside in the same directory as my <strong>server-side views</strong>.</p>\n\n<h4 id=\"thepublicdirectory\">The \"<strong>public</strong>\" directory</h4>\n\n<blockquote>\n  <p><strong>Client-side folder</strong> where you put all of your public <strong>assets</strong> such as <strong>CSS</strong>, images, and <strong>JavaScript</strong> files.</p>\n</blockquote>\n\n<p>Now that we've got the folder that's going to contain our <strong>client-side dependencies</strong>, before we can begin installing them, we need to do one more thing and create a <strong>.bowerrc</strong> file.</p>\n\n<h2 id=\"createabowerrcfile\">Create a .bowerrc file</h2>\n\n<pre><code class=\"language-bash\">$ touch .bowerrc\n$ vim .bowerrc\n</code></pre>\n\n<p><span class=\"filename\">.bowerrc</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">{  \n  \"directory\": \"public/vendor\"\n}</code></pre>\n\n<p>This file will tell Bower to install our client-side dependencies into a public folder named \"<strong>vendor</strong>\".</p>\n\n<h2 id=\"createbowerjsonfile\">Create bower.json file</h2>\n\n<pre><code class=\"language-bash\">$ bower init\n\n? name: MEAN-myApp\n? version: 1.0.0\n? description:\n? main file:\n? what types of modules does this package expose?: node\n? keywords:\n? authors: Edwin Estrada &lt;edwin@thinkpixbit.com&gt;\n? license: MIT\n? homepage:\n? set currently installed components as dependencies?: No\n? add commonly ignored files to ignore list?: No\n? would you like to mark this package as private which prevents it from being accidentally published to the registry?: Yes\n\n{\n  name: 'MEAN-myApp',\n  version: '1.0.0',\n  authors: [\n    'Edwin Estrada &lt;edwin@thinkpixbit.com&gt;'\n  ],\n  license: 'MIT',\n  private: true\n}\n\n? Looks good?: Yes\n</code></pre>\n\n<h2 id=\"installclientsidedependencies\">Install client-side dependencies</h2>\n\n<pre><code class=\"language-bash\">$ bower install jquery --save\n$ bower install toastr --save\n$ bower install angular angular-resource angular-route --save\n</code></pre>\n\n<h2 id=\"verifyclientdependencies\">Verify client-dependencies</h2>\n\n<p><span class=\"filename\">bower.json</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">{  \n  \"name\": \"MEAN-myApp\",\n  \"version\": \"1.0.0\",\n  \"authors\": [\n    \"Edwin Estrada <edwin@thinkpixbit.com>\"\n  ],\n  \"license\": \"MIT\",\n  \"private\": true,\n  \"dependencies\": {\n    \"jquery\": \"~2.1.3\",\n    \"toastr\": \"~2.1.0\",\n    \"angular\": \"~1.3.13\",\n    \"angular-resource\": \"~1.3.13\",\n    \"angular-route\": \"~1.3.13\"\n  }\n}</code></pre>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-git-and-package-json\" style=\"width: 50%;\">Git &amp; package.json</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-creating-the-node-application\" style=\"float: right;width: 50%;text-align: right;\">Node app</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":1424202179737,"created_by":3,"updated_at":1429064084435,"updated_by":1,"published_at":1424202190678,"published_by":3},{"id":9,"uuid":"5f807305-4b94-4420-b902-0a4a93934aea","title":"Building Angular.js and Node.js with the MEAN stack: Creating the Node Application","slug":"building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-creating-the-node-application","markdown":"## Add Express module to 'server.js': ##\n\n```bash\n$ touch server.js\n$ vim server.js\n```\n\n<span class=\"filename\">server.js</span>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">var express = require('express');\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\napp.set('views', __dirname + '/server/views');\napp.set('view engine', 'jade');</code></pre>\n\n**[1]** The first thing we'll do in this file is bring in the **Express** module. This gives us the ability to begin working with **Express** and create our **Express** application.\n\n**[3]** The next thing I want is an **environment variable** that I can use in order to determine whether or not I'm in **development mode** or **production mode**. **Node** already has an **environment variable** that's contained inside of the **process.env.NODE_ENV**. This is going to contain what the environment if it's been set by **Node**. The problem is, if you don't set your **Node** environment, then it doesn't have a good default value, in this case \"**development**\".\n\n**[5]** create our actual Express application\n\n**[7]** I need to configure is my **view engine**, so I'm going to set the views property, and I'm going to set that to the path where I'm going to hold my views.\n\n**[8]** I also need to set what the view engine will be.\n\n---\n\n###### Routing in Express ######\n\nNow in order to create a **route** for this purpose in **Express**, I'll just use the **app.get** function and typically on something like this you **specify your route with just the forward slash, indicating whenever they go to the root of the website**, this is what you want to have happen.\n\n<span class=\"filename\">server.js</span>\n<pre class=\"line-numbers\" data-line=\"10-12\"><code class=\"language-javascript\">var express = require('express');\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\napp.set('views', __dirname + '/server/views');\napp.set('view engine', 'jade');\n\napp.get('*', function(req, res){  \n  res.render('index');\n});</code></pre>\n\n**[10]** Added a route that delivers my index page specified by the asterisk, and I also have to give it a callback that will take in the request and response objects\n\n**[11]** Told the application to render my index view\n\nInstead of this route, I'm actually going to specify the **asterisk**.\n\n> The **asterisk** will match **all routes**.\n\nThat means that **any request** that gets to this point is going to be **handled by this route**.\n\nThat includes JavaScript requests, CSS requests, image requests, everything.\n\nNow the reason I'm going to specify this route is because **I want the application to deliver my index page whenever any request is made that I don't already have an existing path for**.\n\nThat **allows me to set up my client-side routing to handle any route** and I **don't have to coordinate with the server and set up the same routes on the client side and on the server side**.\n\n> This is so that whenever somebody issues a request to the server for a client-side route...\n\n> The server-side app will just serve up the index page and then the client-side routing will kick in and show the correct view.\n\nSo it's going to be my client-side application's responsibility to serve up any **404** notices.\n\nIt's far more customary to have our server-side application have a catch-all route that simply serves up a **404** page.\n\n---\n\n## View file for the server to render. ##\n\nSo I'll start by creating my views directory and within that I'll create an index.jade file.\n\n```bash\n$ mkdir server/views\n$ touch server/views/index.jade\n```\n\n<span class=\"filename\">server/views/index.jade</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-jade\">doctype\nhtml\n  head\n    link(href=\"/favicon.ico\", rel=\"shortcut icon\", type=\"image/x-icon\")\n  body\n    h1 Hello World</code></pre>\n\n**[1]** I'll start with the doc type of Html 5. In older versions of Jade you could specify this with three exclamation marks and a 5, but current versions of Jade just word doctype.\n\n> Add '**public/favicon.ico**' using [faviconer.com](http://www.faviconer.com)\n\n## Get app to listen to requests. ##\n\n<span class=\"filename\">server.js</span>\n<pre class=\"line-numbers\" data-line=\"14-15\"><code class=\"language-javascript\">var express = require('express');\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\napp.set('views', __dirname + '/server/views');\napp.set('view engine', 'jade');\n\napp.get('*', function(req, res){\n  res.render('index');\n});\n\nvar port = 3030;\napp.listen(port);\nconsole.log('Listening on port ' + port + '...');</code></pre>\n\n**[14]** I'm going to create a variable to hold the **port** and set it to **3030**.\n\n**[15]** Call **app.listen** and passing in the **port** that I want it to listen to.\n\n## Start up our server ##\n\n```bash\n$ npm install nodemon -g\n$ nodemon server.js\n...\n> Listening on port 3030...\n```\n\nAnd you can see that it's printed out my message that it's listing on port 3030.\n\nOpen [this](http://localhost:3030) up in a browser and see our application. \n\n![localhost:3030](/content/images/2015/04/hello.png)\n\nAnd there's the beginning of our application.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-client-side-dependencies-with-bower\" style=\"width: 50%;\">Bower</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-adding-stylus\" style=\"float: right;width: 50%;text-align: right;\">Adding Stylus</a>","html":"<h2 id=\"addexpressmoduletoserverjs\">Add Express module to 'server.js':</h2>\n\n<pre><code class=\"language-bash\">$ touch server.js\n$ vim server.js\n</code></pre>\n\n<p><span class=\"filename\">server.js</span>  </p>\n\n<pre class=\"line-numbers\"><code class=\"language-javascript\">var express = require('express');\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\napp.set('views', __dirname + '/server/views');  \napp.set('view engine', 'jade');</code></pre>\n\n<p><strong>[1]</strong> The first thing we'll do in this file is bring in the <strong>Express</strong> module. This gives us the ability to begin working with <strong>Express</strong> and create our <strong>Express</strong> application.</p>\n\n<p><strong>[3]</strong> The next thing I want is an <strong>environment variable</strong> that I can use in order to determine whether or not I'm in <strong>development mode</strong> or <strong>production mode</strong>. <strong>Node</strong> already has an <strong>environment variable</strong> that's contained inside of the <strong>process.env.NODE_ENV</strong>. This is going to contain what the environment if it's been set by <strong>Node</strong>. The problem is, if you don't set your <strong>Node</strong> environment, then it doesn't have a good default value, in this case \"<strong>development</strong>\".</p>\n\n<p><strong>[5]</strong> create our actual Express application</p>\n\n<p><strong>[7]</strong> I need to configure is my <strong>view engine</strong>, so I'm going to set the views property, and I'm going to set that to the path where I'm going to hold my views.</p>\n\n<p><strong>[8]</strong> I also need to set what the view engine will be.</p>\n\n<hr />\n\n<h6 id=\"routinginexpress\">Routing in Express</h6>\n\n<p>Now in order to create a <strong>route</strong> for this purpose in <strong>Express</strong>, I'll just use the <strong>app.get</strong> function and typically on something like this you <strong>specify your route with just the forward slash, indicating whenever they go to the root of the website</strong>, this is what you want to have happen.</p>\n\n<p><span class=\"filename\">server.js</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"10-12\"><code class=\"language-javascript\">var express = require('express');\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\napp.set('views', __dirname + '/server/views');  \napp.set('view engine', 'jade');\n\napp.get('*', function(req, res){  \n  res.render('index');\n});</code></pre>\n\n<p><strong>[10]</strong> Added a route that delivers my index page specified by the asterisk, and I also have to give it a callback that will take in the request and response objects</p>\n\n<p><strong>[11]</strong> Told the application to render my index view</p>\n\n<p>Instead of this route, I'm actually going to specify the <strong>asterisk</strong>.</p>\n\n<blockquote>\n  <p>The <strong>asterisk</strong> will match <strong>all routes</strong>.</p>\n</blockquote>\n\n<p>That means that <strong>any request</strong> that gets to this point is going to be <strong>handled by this route</strong>.</p>\n\n<p>That includes JavaScript requests, CSS requests, image requests, everything.</p>\n\n<p>Now the reason I'm going to specify this route is because <strong>I want the application to deliver my index page whenever any request is made that I don't already have an existing path for</strong>.</p>\n\n<p>That <strong>allows me to set up my client-side routing to handle any route</strong> and I <strong>don't have to coordinate with the server and set up the same routes on the client side and on the server side</strong>.</p>\n\n<blockquote>\n  <p>This is so that whenever somebody issues a request to the server for a client-side route...</p>\n  \n  <p>The server-side app will just serve up the index page and then the client-side routing will kick in and show the correct view.</p>\n</blockquote>\n\n<p>So it's going to be my client-side application's responsibility to serve up any <strong>404</strong> notices.</p>\n\n<p>It's far more customary to have our server-side application have a catch-all route that simply serves up a <strong>404</strong> page.</p>\n\n<hr />\n\n<h2 id=\"viewfilefortheservertorender\">View file for the server to render.</h2>\n\n<p>So I'll start by creating my views directory and within that I'll create an index.jade file.</p>\n\n<pre><code class=\"language-bash\">$ mkdir server/views\n$ touch server/views/index.jade\n</code></pre>\n\n<p><span class=\"filename\">server/views/index.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-jade\">doctype  \nhtml  \n  head\n    link(href=\"/favicon.ico\", rel=\"shortcut icon\", type=\"image/x-icon\")\n  body\n    h1 Hello World</code></pre>\n\n<p><strong>[1]</strong> I'll start with the doc type of Html 5. In older versions of Jade you could specify this with three exclamation marks and a 5, but current versions of Jade just word doctype.</p>\n\n<blockquote>\n  <p>Add '<strong>public/favicon.ico</strong>' using <a href=\"http://www.faviconer.com\">faviconer.com</a></p>\n</blockquote>\n\n<h2 id=\"getapptolistentorequests\">Get app to listen to requests.</h2>\n\n<p><span class=\"filename\">server.js</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"14-15\"><code class=\"language-javascript\">var express = require('express');\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\napp.set('views', __dirname + '/server/views');  \napp.set('view engine', 'jade');\n\napp.get('*', function(req, res){  \n  res.render('index');\n});\n\nvar port = 3030;  \napp.listen(port);  \nconsole.log('Listening on port ' + port + '...');</code></pre>\n\n<p><strong>[14]</strong> I'm going to create a variable to hold the <strong>port</strong> and set it to <strong>3030</strong>.</p>\n\n<p><strong>[15]</strong> Call <strong>app.listen</strong> and passing in the <strong>port</strong> that I want it to listen to.</p>\n\n<h2 id=\"startupourserver\">Start up our server</h2>\n\n<pre><code class=\"language-bash\">$ npm install nodemon -g\n$ nodemon server.js\n...\n&gt; Listening on port 3030...\n</code></pre>\n\n<p>And you can see that it's printed out my message that it's listing on port 3030.</p>\n\n<p>Open <a href=\"http://localhost:3030\">this</a> up in a browser and see our application. </p>\n\n<p><img src=\"/content/images/2015/04/hello.png\" alt=\"localhost:3030\" /></p>\n\n<p>And there's the beginning of our application.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-client-side-dependencies-with-bower\" style=\"width: 50%;\">Bower</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-adding-stylus\" style=\"float: right;width: 50%;text-align: right;\">Adding Stylus</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":1424202208942,"created_by":3,"updated_at":1429064096984,"updated_by":1,"published_at":1424202228112,"published_by":3},{"id":10,"uuid":"8dc8b8b7-7547-4451-aa87-1f9149075356","title":"Building Angular.js and Node.js with the MEAN stack: Adding Stylus","slug":"building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-adding-stylus","markdown":"## NPM install modules ##\n\n```bash\n$ npm install stylus morgan body-parser --save\n```\n\n---\n\n###### Setup Stylus Middleware ######\n\n<span class=\"filename\">server.js</span>\n<pre class=\"line-numbers\" data-line=\"2,8-10,14,16,17,20\"><code class=\"language-javascript\">var express = require('express'),\n  stylus = require('stylus');\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nfunction compile(str, path){\n  return stylus(str).set('filename', path);\n}\n\napp.set('views', __dirname + '/server/views');\napp.set('view engine', 'jade');\napp.use(stylus.middleware(\n  {\n    src: __dirname + '/public',\n    compile: compile\n  }\n));\napp.use(express.static(__dirname + '/public'));\n\napp.get('*', function(req, res){\n  res.render('index');\n});\n\nvar port = 3030;\napp.listen(port);\nconsole.log('Listening on port ' + port + '...');</code></pre>\n\n**[2]** In order for an application to run we're going to need to be able to serve up CSS files. Require the **Stylus** library.\n\n**[8-10]** **Compile function** that gets used by the **middleware**.\n\n**[14]** **Pass** the **Stylus** middleware a **configuration object**\n\n**[16]** Configuration object's **source**, which will be our **current directory** plus the **public folder**\n\n**[17]** Configuration object's **compile function**\n\n**[20]** Set up **static routing to our public directory** using a very typical configuration for your **static files**.\n\n> This tells Express that any time any requests come in that match up to a file inside of the public directory, to go ahead and serve the file.\n\nSo for example, if a request comes in for **\\favicon.ico**, then  **Express** will look inside of the **public** directory for the filed called **favicon.ico**.\n\nBy extension if we want to get our **angular** file, a request would need to come into '**/vendor/angular/angular.js**\" instead of '**public/vendor/angular/angular.js**\".\n\nThis is why our **.bowerrc** sets the **client-side dependencies** to be installed in '**public/vendor/**'.\n\n---\n\n###### Morgan(logger) & Body Parser ######\n<span class=\"filename\">server.js</span>\n<pre class=\"line-numbers\" data-line=\"3-4,16,17\"><code class=\"language-javascript\">var express = require('express'),\n  stylus = require('stylus'),\n  logger = require('morgan'),\n  bodyParser = require('body-parser');\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nfunction compile(str, path){\n  return stylus(str).set('filename', path);\n}\n\napp.set('views', __dirname + '/server/views');\napp.set('view engine', 'jade');\napp.use(logger('dev'));\napp.use(bodyParser());\napp.use(stylus.middleware(\n  {\n    src: __dirname + '/public',\n    compile: compile\n  }\n));\napp.use(express.static(__dirname + '/public'));\n\napp.get('*', function(req, res){\n  res.render('index');\n});\n\nvar port = 3030;\napp.listen(port);\nconsole.log('Listening on port ' + port + '...');</code></pre>\n\n**[3]** In **Express 4**, the **logger** has been extracted out into its own module which is called **Morgan**. I still like calling it **logger** inside of my code so I'll import **Morgan** into a variable called **logger**.\n\n**[4]** I also need the **body parser**, another piece of **middleware** that **Express** moved to a separate module with **Express 4**.\n\n**[16]** Turn on **Express logging**\n\n**[17]** Turn on **Body Parser**\n\n---\n\n## Restart the server ##\n\n```bash\n$ nodemon server.js\n```\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-creating-the-node-application\" style=\"width: 50%;\">Node app</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-creating-a-layout\" style=\"float: right;width: 50%;text-align: right;\">Add Layout</a>","html":"<h2 id=\"npminstallmodules\">NPM install modules</h2>\n\n<pre><code class=\"language-bash\">$ npm install stylus morgan body-parser --save\n</code></pre>\n\n<hr />\n\n<h6 id=\"setupstylusmiddleware\">Setup Stylus Middleware</h6>\n\n<p><span class=\"filename\">server.js</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"2,8-10,14,16,17,20\"><code class=\"language-javascript\">var express = require('express'),  \n  stylus = require('stylus');\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nfunction compile(str, path){  \n  return stylus(str).set('filename', path);\n}\n\napp.set('views', __dirname + '/server/views');  \napp.set('view engine', 'jade');  \napp.use(stylus.middleware(  \n  {\n    src: __dirname + '/public',\n    compile: compile\n  }\n));\napp.use(express.static(__dirname + '/public'));\n\napp.get('*', function(req, res){  \n  res.render('index');\n});\n\nvar port = 3030;  \napp.listen(port);  \nconsole.log('Listening on port ' + port + '...');</code></pre>\n\n<p><strong>[2]</strong> In order for an application to run we're going to need to be able to serve up CSS files. Require the <strong>Stylus</strong> library.</p>\n\n<p><strong>[8-10]</strong> <strong>Compile function</strong> that gets used by the <strong>middleware</strong>.</p>\n\n<p><strong>[14]</strong> <strong>Pass</strong> the <strong>Stylus</strong> middleware a <strong>configuration object</strong></p>\n\n<p><strong>[16]</strong> Configuration object's <strong>source</strong>, which will be our <strong>current directory</strong> plus the <strong>public folder</strong></p>\n\n<p><strong>[17]</strong> Configuration object's <strong>compile function</strong></p>\n\n<p><strong>[20]</strong> Set up <strong>static routing to our public directory</strong> using a very typical configuration for your <strong>static files</strong>.</p>\n\n<blockquote>\n  <p>This tells Express that any time any requests come in that match up to a file inside of the public directory, to go ahead and serve the file.</p>\n</blockquote>\n\n<p>So for example, if a request comes in for <strong>\\favicon.ico</strong>, then  <strong>Express</strong> will look inside of the <strong>public</strong> directory for the filed called <strong>favicon.ico</strong>.</p>\n\n<p>By extension if we want to get our <strong>angular</strong> file, a request would need to come into '<strong>/vendor/angular/angular.js</strong>\" instead of '<strong>public/vendor/angular/angular.js</strong>\".</p>\n\n<p>This is why our <strong>.bowerrc</strong> sets the <strong>client-side dependencies</strong> to be installed in '<strong>public/vendor/</strong>'.</p>\n\n<hr />\n\n<h6 id=\"morganloggerbodyparser\">Morgan(logger) &amp; Body Parser</h6>\n\n<p><span class=\"filename\">server.js</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"3-4,16,17\"><code class=\"language-javascript\">var express = require('express'),  \n  stylus = require('stylus'),\n  logger = require('morgan'),\n  bodyParser = require('body-parser');\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nfunction compile(str, path){  \n  return stylus(str).set('filename', path);\n}\n\napp.set('views', __dirname + '/server/views');  \napp.set('view engine', 'jade');  \napp.use(logger('dev'));  \napp.use(bodyParser());  \napp.use(stylus.middleware(  \n  {\n    src: __dirname + '/public',\n    compile: compile\n  }\n));\napp.use(express.static(__dirname + '/public'));\n\napp.get('*', function(req, res){  \n  res.render('index');\n});\n\nvar port = 3030;  \napp.listen(port);  \nconsole.log('Listening on port ' + port + '...');</code></pre>\n\n<p><strong>[3]</strong> In <strong>Express 4</strong>, the <strong>logger</strong> has been extracted out into its own module which is called <strong>Morgan</strong>. I still like calling it <strong>logger</strong> inside of my code so I'll import <strong>Morgan</strong> into a variable called <strong>logger</strong>.</p>\n\n<p><strong>[4]</strong> I also need the <strong>body parser</strong>, another piece of <strong>middleware</strong> that <strong>Express</strong> moved to a separate module with <strong>Express 4</strong>.</p>\n\n<p><strong>[16]</strong> Turn on <strong>Express logging</strong></p>\n\n<p><strong>[17]</strong> Turn on <strong>Body Parser</strong></p>\n\n<hr />\n\n<h2 id=\"restarttheserver\">Restart the server</h2>\n\n<pre><code class=\"language-bash\">$ nodemon server.js\n</code></pre>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-creating-the-node-application\" style=\"width: 50%;\">Node app</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-creating-a-layout\" style=\"float: right;width: 50%;text-align: right;\">Add Layout</a></p>","image":"","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":1424283706892,"created_by":3,"updated_at":1429064118891,"updated_by":1,"published_at":1424283891312,"published_by":3},{"id":11,"uuid":"97d442c8-4a26-4cce-b71f-39781caabba3","title":"Building Angular.js and Node.js with the MEAN stack: Creating a Layout","slug":"building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-creating-a-layout","markdown":"###### Create an 'includes' directory ######\n\n```bash\n$ mkdir server/includes\n```\n\n## Create a layout file ##\n\n```bash\n$ touch server/includes/layout.jade\n```\n\n> The layout file will have the basic wrapper for our application so the other files can inherit from the layout file and simply define their view-specific content.\n\n## Move content from index to layout ##\n\n<span class=\"filename\">server/views/index.jade</span>\n<pre class=\"line-numbers\" data-line=\"1-5\"><code class=\"language-jade\">doctype\nhtml\n  head\n    link(href=\"/favicon.ico\", rel=\"shortcut icon\", type=\"image/x-icon\")\n  body\n    h1 Hello World</code></pre>\n    \n<span class=\"filename\">server/includes/layout.jade</span>\n<pre class=\"line-numbers\"><code class=\"language-jade\">doctype\nhtml\n  head\n    link(href=\"/favicon.ico\", rel=\"shortcut icon\", type=\"image/x-icon\")\n  body</code></pre>\n\n## Create public CSS directory ##\n\n```bash\n$ mkdir public/css\n```\n\n## Bootstrap, Toaster, and custom CSS ##\n\nNow our Toaster CSS file already exists inside of the vendor directory so we won't put that inside the CSS, we'll keep that inside the vendor directory.\n\n> Add '**public/css/bootstrap.css**' using [getbootstrap.com](http://getbootstrap.com)\n\nThen we'll also create our customized site file and that's going to be called \"**site.styl**\" for Stylus.\n\n```bash\n$ touch public/css/site.styl\n```\n\n## Link the CSS files to the layout ##\n\n<span class=\"filename\">server/includes/layout.jade</span>\n<pre class=\"line-numbers\" data-line=\"5-7\"><code class=\"language-jade\">doctype\nhtml\n  head\n    link(rel=\"shortcut icon\", href=\"/favicon.ico\", type=\"image/x-icon\")\n    link(rel=\"stylesheet\", href=\"/css/bootstrap.css\")\n    link(rel=\"stylesheet\", href=\"/vendor/toastr/toastr.css\")\n    link(rel=\"stylesheet\", href=\"/css/site.css\")\n  body</code></pre>\n\n**[5]** Start with Bootstrap.\n\n**[6]** Next will be the Toaster.\n\n**[7]** And finally will be our site file. Notice that I linked to **site.css** not **site.styl**. The Stylus compiler will actually respond to the request for the CSS file with the compiled file.\n\n## Deliver JavaScript files ##\n\n<span class=\"filename\">server/includes/layout.jade</span>\n<pre class=\"line-numbers\" data-line=\"9\"><code class=\"language-jade\">doctype\nhtml\n  head\n    link(rel=\"shortcut icon\", href=\"/favicon.ico\", type=\"image/x-icon\")\n    link(rel=\"stylesheet\", href=\"/css/bootstrap.css\")\n    link(rel=\"stylesheet\", href=\"/vendor/toastr/toastr.css\")\n    link(rel=\"stylesheet\", href=\"/css/site.css\")\n  body\n    include scripts</code></pre>\n\n**[9]** Encapsulate that piece by calling out to an included file and I'm going to call that file \"**scripts**\".\n\n## Create the scripts file ##\n```bash\n$ touch server/includes/scripts.jade\n```\n\nInside here we'll put all of the script tags.\n\n<span class=\"filename\">server/includes/scripts.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-jade\">script(type=\"text/javascript\", src=\"/vendor/jquery/jquery.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular/angular.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular-resource/angular-resource.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular-route/angular-route.js\")</code></pre>\n\n> Please note that the path to any specific script file might be different on your machine.\n\n## Add placeholder to layout ##\n\n<span class=\"filename\">server/includes/layout.jade</span>\n<pre class=\"line-numbers\" data-line=\"9\"><code class=\"language-jade\">doctype\nhtml\n  head\n    link(rel=\"shortcut icon\", href=\"/favicon.ico\", type=\"image/x-icon\")\n    link(rel=\"stylesheet\", href=\"/css/bootstrap.css\")\n    link(rel=\"stylesheet\", href=\"/vendor/toastr/toastr.css\")\n    link(rel=\"stylesheet\", href=\"/css/site.css\")\n  body\n    block main-content\n    include scripts</code></pre>\n\n**[10]**  Placeholder whose content can be filled in by another file. \n\n## Extend the layout file ##\n\n<span class=\"filename\">server/views/index.jade</span>\n<pre class=\"line-numbers\" data-line=\"\"><code class=\"language-jade\">extends ../includes/layout\n\nblock main-content\n  section.content\n    h1 Hello World</code></pre>\n\n**[3]** Define the main content block. This will tell Jade to plug this content into the placeholder inside of the layout file.\n\n**[4]** And we'll create a section that uses the class content \n\n**[5]** Create our h1 that says Hello World\n\n## Start up our server ##\n\n```bash\n$ nodemon server.js\n```\n\nOpen [this](http://localhost:3030) up in a browser and see our application. \n\n[![localhost:3030](/content/images/2015/02/hello_world.png)](http://localhost:3030)\n\n---\n\n## Inspect the browser ##\n\n![Inspect Stylesheets](/content/images/2015/03/inspect_stylesheets.PNG)\n\n> You can see we're getting the CSS for Bootstrap, Toaster, the site.\n\n![Inspect Scripts](/content/images/2015/03/inspect_scripts.PNG)\n\n> We've got our scripts, jQuery, Angular, and any other Angular files.\n\nAnd you can also see that we're getting our favicon.\n\nSo now that we're delivering our other assets correctly, we can move on and start implementing our Angular application.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-adding-stylus\" style=\"width: 50%;\">Add Stylus</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-creating-the-angular-application\" style=\"float: right;width: 50%;text-align: right;\">AngularJS</a>","html":"<h6 id=\"createanincludesdirectory\">Create an 'includes' directory</h6>\n\n<pre><code class=\"language-bash\">$ mkdir server/includes\n</code></pre>\n\n<h2 id=\"createalayoutfile\">Create a layout file</h2>\n\n<pre><code class=\"language-bash\">$ touch server/includes/layout.jade\n</code></pre>\n\n<blockquote>\n  <p>The layout file will have the basic wrapper for our application so the other files can inherit from the layout file and simply define their view-specific content.</p>\n</blockquote>\n\n<h2 id=\"movecontentfromindextolayout\">Move content from index to layout</h2>\n\n<p><span class=\"filename\">server/views/index.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"1-5\"><code class=\"language-jade\">doctype  \nhtml  \n  head\n    link(href=\"/favicon.ico\", rel=\"shortcut icon\", type=\"image/x-icon\")\n  body\n    h1 Hello World</code></pre>\n\n<p><span class=\"filename\">server/includes/layout.jade</span>  </p>\n\n<pre class=\"line-numbers\"><code class=\"language-jade\">doctype  \nhtml  \n  head\n    link(href=\"/favicon.ico\", rel=\"shortcut icon\", type=\"image/x-icon\")\n  body</code></pre>\n\n<h2 id=\"createpubliccssdirectory\">Create public CSS directory</h2>\n\n<pre><code class=\"language-bash\">$ mkdir public/css\n</code></pre>\n\n<h2 id=\"bootstraptoasterandcustomcss\">Bootstrap, Toaster, and custom CSS</h2>\n\n<p>Now our Toaster CSS file already exists inside of the vendor directory so we won't put that inside the CSS, we'll keep that inside the vendor directory.</p>\n\n<blockquote>\n  <p>Add '<strong>public/css/bootstrap.css</strong>' using <a href=\"http://getbootstrap.com\">getbootstrap.com</a></p>\n</blockquote>\n\n<p>Then we'll also create our customized site file and that's going to be called \"<strong>site.styl</strong>\" for Stylus.</p>\n\n<pre><code class=\"language-bash\">$ touch public/css/site.styl\n</code></pre>\n\n<h2 id=\"linkthecssfilestothelayout\">Link the CSS files to the layout</h2>\n\n<p><span class=\"filename\">server/includes/layout.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"5-7\"><code class=\"language-jade\">doctype  \nhtml  \n  head\n    link(rel=\"shortcut icon\", href=\"/favicon.ico\", type=\"image/x-icon\")\n    link(rel=\"stylesheet\", href=\"/css/bootstrap.css\")\n    link(rel=\"stylesheet\", href=\"/vendor/toastr/toastr.css\")\n    link(rel=\"stylesheet\", href=\"/css/site.css\")\n  body</code></pre>\n\n<p><strong>[5]</strong> Start with Bootstrap.</p>\n\n<p><strong>[6]</strong> Next will be the Toaster.</p>\n\n<p><strong>[7]</strong> And finally will be our site file. Notice that I linked to <strong>site.css</strong> not <strong>site.styl</strong>. The Stylus compiler will actually respond to the request for the CSS file with the compiled file.</p>\n\n<h2 id=\"deliverjavascriptfiles\">Deliver JavaScript files</h2>\n\n<p><span class=\"filename\">server/includes/layout.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"9\"><code class=\"language-jade\">doctype  \nhtml  \n  head\n    link(rel=\"shortcut icon\", href=\"/favicon.ico\", type=\"image/x-icon\")\n    link(rel=\"stylesheet\", href=\"/css/bootstrap.css\")\n    link(rel=\"stylesheet\", href=\"/vendor/toastr/toastr.css\")\n    link(rel=\"stylesheet\", href=\"/css/site.css\")\n  body\n    include scripts</code></pre>\n\n<p><strong>[9]</strong> Encapsulate that piece by calling out to an included file and I'm going to call that file \"<strong>scripts</strong>\".</p>\n\n<h2 id=\"createthescriptsfile\">Create the scripts file</h2>\n\n<pre><code class=\"language-bash\">$ touch server/includes/scripts.jade\n</code></pre>\n\n<p>Inside here we'll put all of the script tags.</p>\n\n<p><span class=\"filename\">server/includes/scripts.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-jade\">script(type=\"text/javascript\", src=\"/vendor/jquery/jquery.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular/angular.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular-resource/angular-resource.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular-route/angular-route.js\")</code></pre>\n\n<blockquote>\n  <p>Please note that the path to any specific script file might be different on your machine.</p>\n</blockquote>\n\n<h2 id=\"addplaceholdertolayout\">Add placeholder to layout</h2>\n\n<p><span class=\"filename\">server/includes/layout.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"9\"><code class=\"language-jade\">doctype  \nhtml  \n  head\n    link(rel=\"shortcut icon\", href=\"/favicon.ico\", type=\"image/x-icon\")\n    link(rel=\"stylesheet\", href=\"/css/bootstrap.css\")\n    link(rel=\"stylesheet\", href=\"/vendor/toastr/toastr.css\")\n    link(rel=\"stylesheet\", href=\"/css/site.css\")\n  body\n    block main-content\n    include scripts</code></pre>\n\n<p><strong>[10]</strong>  Placeholder whose content can be filled in by another file. </p>\n\n<h2 id=\"extendthelayoutfile\">Extend the layout file</h2>\n\n<p><span class=\"filename\">server/views/index.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"\"><code class=\"language-jade\">extends ../includes/layout\n\nblock main-content  \n  section.content\n    h1 Hello World</code></pre>\n\n<p><strong>[3]</strong> Define the main content block. This will tell Jade to plug this content into the placeholder inside of the layout file.</p>\n\n<p><strong>[4]</strong> And we'll create a section that uses the class content </p>\n\n<p><strong>[5]</strong> Create our h1 that says Hello World</p>\n\n<h2 id=\"startupourserver\">Start up our server</h2>\n\n<pre><code class=\"language-bash\">$ nodemon server.js\n</code></pre>\n\n<p>Open <a href=\"http://localhost:3030\">this</a> up in a browser and see our application. </p>\n\n<p><a href=\"http://localhost:3030\"><img src=\"/content/images/2015/02/hello_world.png\" alt=\"localhost:3030\" title=\"\" /></a></p>\n\n<hr />\n\n<h2 id=\"inspectthebrowser\">Inspect the browser</h2>\n\n<p><img src=\"/content/images/2015/03/inspect_stylesheets.PNG\" alt=\"Inspect Stylesheets\" /></p>\n\n<blockquote>\n  <p>You can see we're getting the CSS for Bootstrap, Toaster, the site.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/inspect_scripts.PNG\" alt=\"Inspect Scripts\" /></p>\n\n<blockquote>\n  <p>We've got our scripts, jQuery, Angular, and any other Angular files.</p>\n</blockquote>\n\n<p>And you can also see that we're getting our favicon.</p>\n\n<p>So now that we're delivering our other assets correctly, we can move on and start implementing our Angular application.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-adding-stylus\" style=\"width: 50%;\">Add Stylus</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-creating-the-angular-application\" style=\"float: right;width: 50%;text-align: right;\">AngularJS</a></p>","image":"","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":1424284051382,"created_by":3,"updated_at":1429064170914,"updated_by":1,"published_at":1424284066855,"published_by":3},{"id":12,"uuid":"d38316c4-4c99-4b68-882a-569d5cec0003","title":"Building Angular.js and Node.js with the MEAN stack: Creating the Angular Application","slug":"building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-creating-the-angular-application","markdown":"## Create the first client-side JS file ##\n\nThis will be the main entry point to our Angular application and that's going to go inside of the \"**app**\" directory and the file name is going to be \"**app.js**\".\n\n```bash\n$ mkdir public/app\n$ touch public/app/app.js\n```\n\n## Define our Angular module ##\n\n<span class=\"filename\">public/app/app.js</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('app', ['ngResource', 'ngRoute']);\n\nangular.module('app').config(function($routeProvider, $locationProvider){\n  $locationProvider.html5Mode({\n    enabled: true,\n    requireBase: false\n  });\n  $routeProvider\n    .when('/', { templateUrl: '/partials/main', controller: 'mainController' });\n    \n});\n\nangular.module('app').controller('mainController', function($scope){\n  $scope.myVar = \"Snaaaaaakkkke!\";\n});</code></pre>\n\n**[1]** Define the angular module and the dependencies on the **ngResource** and **ngRoute** modules.\n\n**[3]** Define our client-side routes inside of this file by calling the **config** function and we'll bring in our **$routeProvider** and we'll also bring in the **$locationProvider**.\n\n**[4]** Use **$locationProvider** to turn on HTML 5 mode for routing.\n\n**[5]** We'll use our **$routeProvider** to define our routes.\n\n**[6]** Start out with just one route that goes to the root of our application.\n\nOur template URL will be \"**/partials/main**\" and right now we don't have a server-side route for that, but we'll create one in just a second.\n\n<span class=\"filename\">Preview of server-side route</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\"> app.get('/partials/:partialPath', function(req, res){\n    res.render('common/partials/' + req.params.partialPath);\n  });</code></pre>\n\n**[13]** We'll also define the controller, which we'll call \"**mainController**\" that we'll only use to very that our application works. We'll move this controller to its own file later on.\n\n**[14]** We'll create a simple variable called \"**myVar**\" that we'll stick on the scope that we can bind to, to prove that our angular application is working.\n\n## Include app.js in our scripts file ##\n\n<span class=\"filename\">server/includes/scripts.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"5\"><code class=\"language-jade\">script(type=\"text/javascript\", src=\"/vendor/jquery/jquery.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular/angular.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular-resource/angular-resource.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular-route/angular-route.js\")\nscript(type=\"text/javascript\", src=\"/app/app.js\")</code></pre>\n\n## Using Jade partials ##\n\nTypically we author Angular partials using plain old Html, but the Jade syntax is so nice it would be fantastic if we could author our partials using Jade.\n\nWe can't just serve up the Jade files; they have to be processed by the Jade templating engine, so we'll want to use some kind of a unique path identifier for partials.\n\n## Create a partials directory ##\n\n```bash\n$ mkdir server/views/partials\n$ touch server/views/partials/main.jade\n```\n\n<span class=\"filename\">server/views/partials/main.jade</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">h1 This is a Partial\nh2 {{ myVar }}</code></pre>\n\n**[1]** h1 tag that says that this is partial\n\n**[2]** h2 tag that Angular will bind to the contents of that myVar variable.\n\n## Create div with ng-view directive ##\n\n<span class=\"filename\">server/views/index.jade</span>\n<pre class=\"line-numbers\" data-line=\"5\"><code class=\"language-jade\">extends ../includes/layout\n\nblock main-content\n  section.content\n    div(ng-view)</code></pre>\n\n\n## Add ng-app directive to the body ##\n\n<span class=\"filename\">server/includes/layout.jade</span>\n<pre class=\"line-numbers\" data-line=\"8\"><code class=\"language-jade\">doctype\nhtml\n  head\n    link(rel=\"shortcut icon\", href=\"/favicon.ico\", type=\"image/x-icon\")\n    link(rel=\"stylesheet\", href=\"/css/bootstrap.css\")\n    link(rel=\"stylesheet\", href=\"/vendor/toastr/toastr.css\")\n    link(rel=\"stylesheet\", href=\"/css/site.css\")\n  body(ng-app='app')\n    block main-content\n    include scripts</code></pre>\n\n## Find a server-side route for partials ##\n\n<span class=\"filename\">server.js</span>\n<pre class=\"line-numbers\" data-line-offset=\"14\" data-start=\"15\" data-line=\"26-28\"><code class=\"language-javascript\">app.set('view engine', 'jade');\napp.use(logger('dev'));\napp.use(bodyParser());\napp.use(stylus.middleware(\n  {\n    src: __dirname + '/public',\n    compile: compile\n  }\n));\napp.use(express.static(__dirname + '/public'));\n\napp.get('/partials/:partialPath', function(req, res){\n  res.render('partials/' + req.params.partialPath);\n});\n\napp.get('*', function(req, res){\n  res.render('index');\n});\n\nvar port = 3030;\napp.listen(port);\nconsole.log('Listening on port ' + port + '...');</code></pre>\n\n**[26]** Route with anything that starts with the word \"**partials**\" and then I'll define a placeholder \"**:partialPath**\" for the part after partials.\n\n**[27]** Render out that partial by appending to the string \"**partials**\", that partial path placeholder \"**req.params.partialPath**\".\n\n**[30]** Catch-all route\n\nWhen somebody requests \"**/partials/main**\", Express is going to render the \"**server/views/partials/main.jade**\" file.\n\n## Check that our server is running ##\n\n```bash\n$ nodemon server.js\n```\n\nOpen [this](http://localhost:3030) up in a browser and see our application. \n\n[![localhost:3030](/content/images/2015/03/angular_partials_browser.png)](http://localhost:3030)\n\n**Now we've got a bare bones Angular application running.**\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-creating-a-layout\" style=\"width: 50%;\">Create Layout</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-adding-mongodb\" style=\"float: right;width: 50%;text-align: right;\">Adding MongoDB</a>","html":"<h2 id=\"createthefirstclientsidejsfile\">Create the first client-side JS file</h2>\n\n<p>This will be the main entry point to our Angular application and that's going to go inside of the \"<strong>app</strong>\" directory and the file name is going to be \"<strong>app.js</strong>\".</p>\n\n<pre><code class=\"language-bash\">$ mkdir public/app\n$ touch public/app/app.js\n</code></pre>\n\n<h2 id=\"defineourangularmodule\">Define our Angular module</h2>\n\n<p><span class=\"filename\">public/app/app.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('app', ['ngResource', 'ngRoute']);\n\nangular.module('app').config(function($routeProvider, $locationProvider){  \n  $locationProvider.html5Mode({\n    enabled: true,\n    requireBase: false\n  });\n  $routeProvider\n    .when('/', { templateUrl: '/partials/main', controller: 'mainController' });\n\n});\n\nangular.module('app').controller('mainController', function($scope){  \n  $scope.myVar = \"Snaaaaaakkkke!\";\n});</code></pre>\n\n<p><strong>[1]</strong> Define the angular module and the dependencies on the <strong>ngResource</strong> and <strong>ngRoute</strong> modules.</p>\n\n<p><strong>[3]</strong> Define our client-side routes inside of this file by calling the <strong>config</strong> function and we'll bring in our <strong>$routeProvider</strong> and we'll also bring in the <strong>$locationProvider</strong>.</p>\n\n<p><strong>[4]</strong> Use <strong>$locationProvider</strong> to turn on HTML 5 mode for routing.</p>\n\n<p><strong>[5]</strong> We'll use our <strong>$routeProvider</strong> to define our routes.</p>\n\n<p><strong>[6]</strong> Start out with just one route that goes to the root of our application.</p>\n\n<p>Our template URL will be \"<strong>/partials/main</strong>\" and right now we don't have a server-side route for that, but we'll create one in just a second.</p>\n\n<p><span class=\"filename\">Preview of server-side route</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\"> app.get('/partials/:partialPath', function(req, res){  \n    res.render('common/partials/' + req.params.partialPath);\n  });</code></pre>\n\n<p><strong>[13]</strong> We'll also define the controller, which we'll call \"<strong>mainController</strong>\" that we'll only use to very that our application works. We'll move this controller to its own file later on.</p>\n\n<p><strong>[14]</strong> We'll create a simple variable called \"<strong>myVar</strong>\" that we'll stick on the scope that we can bind to, to prove that our angular application is working.</p>\n\n<h2 id=\"includeappjsinourscriptsfile\">Include app.js in our scripts file</h2>\n\n<p><span class=\"filename\">server/includes/scripts.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"5\"><code class=\"language-jade\">script(type=\"text/javascript\", src=\"/vendor/jquery/jquery.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular/angular.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular-resource/angular-resource.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular-route/angular-route.js\")  \nscript(type=\"text/javascript\", src=\"/app/app.js\")</code></pre>\n\n<h2 id=\"usingjadepartials\">Using Jade partials</h2>\n\n<p>Typically we author Angular partials using plain old Html, but the Jade syntax is so nice it would be fantastic if we could author our partials using Jade.</p>\n\n<p>We can't just serve up the Jade files; they have to be processed by the Jade templating engine, so we'll want to use some kind of a unique path identifier for partials.</p>\n\n<h2 id=\"createapartialsdirectory\">Create a partials directory</h2>\n\n<pre><code class=\"language-bash\">$ mkdir server/views/partials\n$ touch server/views/partials/main.jade\n</code></pre>\n\n<p><span class=\"filename\">server/views/partials/main.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">h1 This is a Partial  \nh2 {{ myVar }}</code></pre>\n\n<p><strong>[1]</strong> h1 tag that says that this is partial</p>\n\n<p><strong>[2]</strong> h2 tag that Angular will bind to the contents of that myVar variable.</p>\n\n<h2 id=\"createdivwithngviewdirective\">Create div with ng-view directive</h2>\n\n<p><span class=\"filename\">server/views/index.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"5\"><code class=\"language-jade\">extends ../includes/layout\n\nblock main-content  \n  section.content\n    div(ng-view)</code></pre>\n\n<h2 id=\"addngappdirectivetothebody\">Add ng-app directive to the body</h2>\n\n<p><span class=\"filename\">server/includes/layout.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"8\"><code class=\"language-jade\">doctype  \nhtml  \n  head\n    link(rel=\"shortcut icon\", href=\"/favicon.ico\", type=\"image/x-icon\")\n    link(rel=\"stylesheet\", href=\"/css/bootstrap.css\")\n    link(rel=\"stylesheet\", href=\"/vendor/toastr/toastr.css\")\n    link(rel=\"stylesheet\", href=\"/css/site.css\")\n  body(ng-app='app')\n    block main-content\n    include scripts</code></pre>\n\n<h2 id=\"findaserversiderouteforpartials\">Find a server-side route for partials</h2>\n\n<p><span class=\"filename\">server.js</span>  </p>\n\n<pre class=\"line-numbers\" data-line-offset=\"14\" data-start=\"15\" data-line=\"26-28\"><code class=\"language-javascript\">app.set('view engine', 'jade');  \napp.use(logger('dev'));  \napp.use(bodyParser());  \napp.use(stylus.middleware(  \n  {\n    src: __dirname + '/public',\n    compile: compile\n  }\n));\napp.use(express.static(__dirname + '/public'));\n\napp.get('/partials/:partialPath', function(req, res){  \n  res.render('partials/' + req.params.partialPath);\n});\n\napp.get('*', function(req, res){  \n  res.render('index');\n});\n\nvar port = 3030;  \napp.listen(port);  \nconsole.log('Listening on port ' + port + '...');</code></pre>\n\n<p><strong>[26]</strong> Route with anything that starts with the word \"<strong>partials</strong>\" and then I'll define a placeholder \"<strong>:partialPath</strong>\" for the part after partials.</p>\n\n<p><strong>[27]</strong> Render out that partial by appending to the string \"<strong>partials</strong>\", that partial path placeholder \"<strong>req.params.partialPath</strong>\".</p>\n\n<p><strong>[30]</strong> Catch-all route</p>\n\n<p>When somebody requests \"<strong>/partials/main</strong>\", Express is going to render the \"<strong>server/views/partials/main.jade</strong>\" file.</p>\n\n<h2 id=\"checkthatourserverisrunning\">Check that our server is running</h2>\n\n<pre><code class=\"language-bash\">$ nodemon server.js\n</code></pre>\n\n<p>Open <a href=\"http://localhost:3030\">this</a> up in a browser and see our application. </p>\n\n<p><a href=\"http://localhost:3030\"><img src=\"/content/images/2015/03/angular_partials_browser.png\" alt=\"localhost:3030\" title=\"\" /></a></p>\n\n<p><strong>Now we've got a bare bones Angular application running.</strong></p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-creating-a-layout\" style=\"width: 50%;\">Create Layout</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-adding-mongodb\" style=\"float: right;width: 50%;text-align: right;\">Adding MongoDB</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":1424284073458,"created_by":3,"updated_at":1429064189992,"updated_by":1,"published_at":1424284091285,"published_by":3},{"id":13,"uuid":"bac91cc0-6a5a-45f3-919f-c4dfdf9cc6e4","title":"Building Angular.js and Node.js with the MEAN stack: Adding MongoDB","slug":"building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-adding-mongodb","markdown":"We're going to use \"**Mongoose**\" in our application.\n\n> Mongoose is a Node module that facilitates implementation of MongoDB and Node applications.\n\n---\n\n###### Install MongoDB and run on default port ######\n\nPluralsight has a great course that could teach you this.\n\n- Introduction to MongoDB\n\n---\n\n###### Install Mongoose ######\n\n```bash\n$ npm install mongoose --save\n```\n\n---\n\n###### Connect to MongoDB database ######\n\n<span class=\"filename\">server.js</span>\n<pre class=\"line-numbers\" data-line=\"5, 27-32\"><code class=\"language-javascript\">var express = require('express'),\n  stylus = require('stylus'),\n  logger = require('morgan'),\n  bodyParser = require('body-parser'),\n  mongoose = require('mongoose');\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nfunction compile(str, path){\n  return stylus(str).set('filename', path);\n}\n\napp.set('views', __dirname + '/server/views');\napp.set('view engine', 'jade');\napp.use(logger('dev'));\napp.use(bodyParser());\napp.use(stylus.middleware(\n  {\n    src: __dirname + '/public',\n    compile: compile\n  }\n));\napp.use(express.static(__dirname + '/public'));\n\nmongoose.connect('mongodb://localhost/mydatabase');\nvar db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'connection error...'));\ndb.once('open', function callback(){\n  console.log('mydatabase db opened');\n});\n\napp.get('/partials/:partialPath', function(req, res){\n  res.render('partials/' + req.params.partialPath);\n});\n\n\napp.get('*', function(req, res){\n  res.render('index');\n});\n\nvar port = 3030;\napp.listen(port);\nconsole.log('Listening on port ' + port + '...');</code></pre>\n\n**[5]** Require the Mongoose module\n\n**[27]** Connect to my MongoDB database by calling **mongoose.connect**. This takes in a connection string, which uses the standard MongoDB connection string format. The \"**localhost**\" is going to be host name and the \"**mydatabase**\" is the name of the database that I wish to use. MongoDB will create the database for me if it doesn't already exist.\n\n**[28]** Create a variable that will reference that Mongoose connection and I'm going to use that variable in order to listen to a couple of events on my MongoDB database.\n\n**[29]** Listen to is errors and when an error happens I want to log out to the console that there was a connection error.\n\n**[30-32]** Listen to the **open event**, but I **only want to listen to that event once** and when the database is open I'm going to log out a message to my console.\n\n---\n\n###### Start up the servers ######\n\n```bash\n$ mondgod\n```\n\n```bash\n$ nodemon server.js\n...\n> Listening on port 3030...\n> mydatabase db opened\n```\n\nLet's just run the application once and look for the message that indicates that the connection has been open to the database.\n\n**So now I know that I'm successfully connecting to my MongoDB database.**\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-creating-the-angular-application\" style=\"width: 50%;\">Adding AngularJS</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-displaying-data-in-a-view\" style=\"float: right;width: 50%;text-align: right;\">Display Data</a>","html":"<p>We're going to use \"<strong>Mongoose</strong>\" in our application.</p>\n\n<blockquote>\n  <p>Mongoose is a Node module that facilitates implementation of MongoDB and Node applications.</p>\n</blockquote>\n\n<hr />\n\n<h6 id=\"installmongodbandrunondefaultport\">Install MongoDB and run on default port</h6>\n\n<p>Pluralsight has a great course that could teach you this.</p>\n\n<ul>\n<li>Introduction to MongoDB</li>\n</ul>\n\n<hr />\n\n<h6 id=\"installmongoose\">Install Mongoose</h6>\n\n<pre><code class=\"language-bash\">$ npm install mongoose --save\n</code></pre>\n\n<hr />\n\n<h6 id=\"connecttomongodbdatabase\">Connect to MongoDB database</h6>\n\n<p><span class=\"filename\">server.js</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"5, 27-32\"><code class=\"language-javascript\">var express = require('express'),  \n  stylus = require('stylus'),\n  logger = require('morgan'),\n  bodyParser = require('body-parser'),\n  mongoose = require('mongoose');\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nfunction compile(str, path){  \n  return stylus(str).set('filename', path);\n}\n\napp.set('views', __dirname + '/server/views');  \napp.set('view engine', 'jade');  \napp.use(logger('dev'));  \napp.use(bodyParser());  \napp.use(stylus.middleware(  \n  {\n    src: __dirname + '/public',\n    compile: compile\n  }\n));\napp.use(express.static(__dirname + '/public'));\n\nmongoose.connect('mongodb://localhost/mydatabase');  \nvar db = mongoose.connection;  \ndb.on('error', console.error.bind(console, 'connection error...'));  \ndb.once('open', function callback(){  \n  console.log('mydatabase db opened');\n});\n\napp.get('/partials/:partialPath', function(req, res){  \n  res.render('partials/' + req.params.partialPath);\n});\n\n\napp.get('*', function(req, res){  \n  res.render('index');\n});\n\nvar port = 3030;  \napp.listen(port);  \nconsole.log('Listening on port ' + port + '...');</code></pre>\n\n<p><strong>[5]</strong> Require the Mongoose module</p>\n\n<p><strong>[27]</strong> Connect to my MongoDB database by calling <strong>mongoose.connect</strong>. This takes in a connection string, which uses the standard MongoDB connection string format. The \"<strong>localhost</strong>\" is going to be host name and the \"<strong>mydatabase</strong>\" is the name of the database that I wish to use. MongoDB will create the database for me if it doesn't already exist.</p>\n\n<p><strong>[28]</strong> Create a variable that will reference that Mongoose connection and I'm going to use that variable in order to listen to a couple of events on my MongoDB database.</p>\n\n<p><strong>[29]</strong> Listen to is errors and when an error happens I want to log out to the console that there was a connection error.</p>\n\n<p><strong>[30-32]</strong> Listen to the <strong>open event</strong>, but I <strong>only want to listen to that event once</strong> and when the database is open I'm going to log out a message to my console.</p>\n\n<hr />\n\n<h6 id=\"startuptheservers\">Start up the servers</h6>\n\n<pre><code class=\"language-bash\">$ mondgod\n</code></pre>\n\n<pre><code class=\"language-bash\">$ nodemon server.js\n...\n&gt; Listening on port 3030...\n&gt; mydatabase db opened\n</code></pre>\n\n<p>Let's just run the application once and look for the message that indicates that the connection has been open to the database.</p>\n\n<p><strong>So now I know that I'm successfully connecting to my MongoDB database.</strong></p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-creating-the-angular-application\" style=\"width: 50%;\">Adding AngularJS</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-displaying-data-in-a-view\" style=\"float: right;width: 50%;text-align: right;\">Display Data</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":1424284124983,"created_by":3,"updated_at":1429064208725,"updated_by":1,"published_at":1424284140746,"published_by":3},{"id":14,"uuid":"31e14641-b1a9-4a13-ac60-9d4f1f10f292","title":"Building Angular.js and Node.js with the MEAN stack: Displaying Data in a View","slug":"building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-displaying-data-in-a-view","markdown":"We're going to retreive some data from our MongoDB database and displaying it on our index page.\n\n---\n\n###### Create a message schema with Mongoose ######\n\nWe'll retrieve one of those messages from the **database** and display that message on our **index page**.\n\n<span class=\"filename\">server.js</span>\n<pre class=\"line-numbers\" data-line=\"33-38, 45-47\"><code class=\"language-javascript\">var express = require('express'),\n  stylus = require('stylus'),\n  logger = require('morgan'),\n  bodyParser = require('body-parser'),\n  mongoose = require('mongoose');\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nfunction compile(str, path){\n  return stylus(str).set('filename', path);\n}\n\napp.set('views', __dirname + '/server/views');\napp.set('view engine', 'jade');\napp.use(logger('dev'));\napp.use(bodyParser());\napp.use(stylus.middleware(\n  {\n    src: __dirname + '/public',\n    compile: compile\n  }\n));\napp.use(express.static(__dirname + '/public'));\n\nmongoose.connect('mongodb://localhost/mydatabase');\nvar db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'connection error...'));\ndb.once('open', function callback(){\n  console.log('mydatabase db opened');\n});\nvar messageSchema = mongoose.Schema({message: String});\nvar Message = mongoose.model('Message', messageSchema);\nvar mongoMessage;\nMessage.findOne().exec(function(err, messageDocFound){\n  mongoMessage = messageDocFound.message;\n});\n\napp.get('/partials/:partialPath', function(req, res){\n  res.render('partials/' + req.params.partialPath);\n});\n\napp.get('*', function(req, res){\n  res.render('index', {\n    mongoMessage: mongoMessage\n  });\n});\n\nvar port = 3030;\napp.listen(port);\nconsole.log('Listening on port ' + port + '...');</code></pre>\n\n**[33]** We'll start by creating a **message schema variable** that's going to hold my new **schema**, and I'll create the **Mongoose schema** and to this function I pass in an **object that describes the schema of this collection**. So it's going to have one field called **message** and the type of that field is going to be **string**.\n\n**[34]** Now that I've created that **schema**, the next thing I need to do is create a **model based on that schema**. So I'll create a **model** variable and I call the **mongoose.model** function and I'm going to pass in the string **'Message'** and then I'm going to pass in the **schema** variable.\n\n**[35]** Next I'm going to create a variable **mongoMessage** that's going to hold that data that we pull out of the database.\n\n**[36]** Use this **model object** (**Message**) that I created to find a single **document** using the **findOne** method. Since I've given it **no parameters it will simply return the very first document in the collection**. When it returns that data I'm going to have it **execute** a **callback function** by calling the **exec** function and **passing in a callback**, which has the **signature of first the error and then the document** (**messageDocFound**) that's been found.\n\n**[37]** I'm going to set that Mongo message variable equal to the message property of that document.\n\n**[45-46]** And now I have the data available that I can use by** passing it to one of my views**. So I'm going to go down to where I call the **index** view and I'm going to give it a data object with the **mongoMessage** variable in it.\n\n---\n\n###### Display the variable ######\n<span class=\"filename\">server/views/index.jade</span>\n<pre class=\"line-numbers\" data-line=\"6\"><code class=\"language-jade\">extends ../includes/layout\n\nblock main-content\n  section.content\n    div(ng-view)\n   h2= mongoMessage</code></pre>\n\n**[6]** Create a new h2 and I'll set that equal to that Mongo message variable.\n\n---\n\n###### Mongo Shell & Database ######\nNow as of right now, that message collection doesn't exist inside of my database and therefore, no document is going to get returned by that query, so I'm going to go back to my console, and I'm going to launch the Mongo shell by typing in Mongo.\n\n<span class=\"filename\">Terminal</span>\n<pre class=\"line-numbers\" data-line=\"1,4,6-7\"><code class=\"language-bash\">$ mongo\nMongoDB shell version: 2.4.1\nconnecting to: test\n> use mydatabase\nswitched to db mydatabase\n> db.messages.insert({message: 'Hello Mongo'})\n> show collections\nmessages\nsystems.indexes</code></pre>\n\n**[4]** Set the database to be the database.\n\n**[6]** Create a document inside of the messages collection.\n\n**[7]** If I show collections, we can see that our messages collection has been created, as well as the system.indexes collection was created automatically.\n\n---\n\n###### Run our app in the browser ######\nOpen [this](http://localhost:3030) up in a browser and see our application. \n\nAnd now that we have that data created and hooked up, we can go ahead and run our app in the browser and we should see the message, Hello Mongo, on our index page.\n\n[![localhost:3030](/content/images/2015/03/Hello_Mongo.png)](http://localhost:3030)\n\nLet's refresh our page. And indeed, the message Hello Mongo, is now appearing on our page. \n\n**Our walking skeleton has now been completed.** We just have the bare bones of our application, but every major moving piece is in place.\n\nAll four components of the MEAN Stack are working together to serve up the page that you're seeing.\n\nIn the upcoming modules we'll flesh out our application with more features.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-adding-mongodb\" style=\"width: 50%;\">Adding MongoDB</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-summary\" style=\"float: right;width: 50%;text-align: right;\">Summary</a>","html":"<p>We're going to retreive some data from our MongoDB database and displaying it on our index page.</p>\n\n<hr />\n\n<h6 id=\"createamessageschemawithmongoose\">Create a message schema with Mongoose</h6>\n\n<p>We'll retrieve one of those messages from the <strong>database</strong> and display that message on our <strong>index page</strong>.</p>\n\n<p><span class=\"filename\">server.js</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"33-38, 45-47\"><code class=\"language-javascript\">var express = require('express'),  \n  stylus = require('stylus'),\n  logger = require('morgan'),\n  bodyParser = require('body-parser'),\n  mongoose = require('mongoose');\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nfunction compile(str, path){  \n  return stylus(str).set('filename', path);\n}\n\napp.set('views', __dirname + '/server/views');  \napp.set('view engine', 'jade');  \napp.use(logger('dev'));  \napp.use(bodyParser());  \napp.use(stylus.middleware(  \n  {\n    src: __dirname + '/public',\n    compile: compile\n  }\n));\napp.use(express.static(__dirname + '/public'));\n\nmongoose.connect('mongodb://localhost/mydatabase');  \nvar db = mongoose.connection;  \ndb.on('error', console.error.bind(console, 'connection error...'));  \ndb.once('open', function callback(){  \n  console.log('mydatabase db opened');\n});\nvar messageSchema = mongoose.Schema({message: String});  \nvar Message = mongoose.model('Message', messageSchema);  \nvar mongoMessage;  \nMessage.findOne().exec(function(err, messageDocFound){  \n  mongoMessage = messageDocFound.message;\n});\n\napp.get('/partials/:partialPath', function(req, res){  \n  res.render('partials/' + req.params.partialPath);\n});\n\napp.get('*', function(req, res){  \n  res.render('index', {\n    mongoMessage: mongoMessage\n  });\n});\n\nvar port = 3030;  \napp.listen(port);  \nconsole.log('Listening on port ' + port + '...');</code></pre>\n\n<p><strong>[33]</strong> We'll start by creating a <strong>message schema variable</strong> that's going to hold my new <strong>schema</strong>, and I'll create the <strong>Mongoose schema</strong> and to this function I pass in an <strong>object that describes the schema of this collection</strong>. So it's going to have one field called <strong>message</strong> and the type of that field is going to be <strong>string</strong>.</p>\n\n<p><strong>[34]</strong> Now that I've created that <strong>schema</strong>, the next thing I need to do is create a <strong>model based on that schema</strong>. So I'll create a <strong>model</strong> variable and I call the <strong>mongoose.model</strong> function and I'm going to pass in the string <strong>'Message'</strong> and then I'm going to pass in the <strong>schema</strong> variable.</p>\n\n<p><strong>[35]</strong> Next I'm going to create a variable <strong>mongoMessage</strong> that's going to hold that data that we pull out of the database.</p>\n\n<p><strong>[36]</strong> Use this <strong>model object</strong> (<strong>Message</strong>) that I created to find a single <strong>document</strong> using the <strong>findOne</strong> method. Since I've given it <strong>no parameters it will simply return the very first document in the collection</strong>. When it returns that data I'm going to have it <strong>execute</strong> a <strong>callback function</strong> by calling the <strong>exec</strong> function and <strong>passing in a callback</strong>, which has the <strong>signature of first the error and then the document</strong> (<strong>messageDocFound</strong>) that's been found.</p>\n\n<p><strong>[37]</strong> I'm going to set that Mongo message variable equal to the message property of that document.</p>\n\n<p><strong>[45-46]</strong> And now I have the data available that I can use by<em>* passing it to one of my views<strong>. So I'm going to go down to where I call the *</em>index</strong> view and I'm going to give it a data object with the <strong>mongoMessage</strong> variable in it.</p>\n\n<hr />\n\n<h6 id=\"displaythevariable\">Display the variable</h6>\n\n<p><span class=\"filename\">server/views/index.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"6\"><code class=\"language-jade\">extends ../includes/layout\n\nblock main-content  \n  section.content\n    div(ng-view)\n   h2= mongoMessage</code></pre>\n\n<p><strong>[6]</strong> Create a new h2 and I'll set that equal to that Mongo message variable.</p>\n\n<hr />\n\n<h6 id=\"mongoshelldatabase\">Mongo Shell &amp; Database</h6>\n\n<p>Now as of right now, that message collection doesn't exist inside of my database and therefore, no document is going to get returned by that query, so I'm going to go back to my console, and I'm going to launch the Mongo shell by typing in Mongo.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"1,4,6-7\"><code class=\"language-bash\">$ mongo  \nMongoDB shell version: 2.4.1  \nconnecting to: test  \n> use mydatabase\nswitched to db mydatabase  \n> db.messages.insert({message: 'Hello Mongo'})\n> show collections\nmessages  \nsystems.indexes</code></pre>\n\n<p><strong>[4]</strong> Set the database to be the database.</p>\n\n<p><strong>[6]</strong> Create a document inside of the messages collection.</p>\n\n<p><strong>[7]</strong> If I show collections, we can see that our messages collection has been created, as well as the system.indexes collection was created automatically.</p>\n\n<hr />\n\n<h6 id=\"runourappinthebrowser\">Run our app in the browser</h6>\n\n<p>Open <a href=\"http://localhost:3030\">this</a> up in a browser and see our application. </p>\n\n<p>And now that we have that data created and hooked up, we can go ahead and run our app in the browser and we should see the message, Hello Mongo, on our index page.</p>\n\n<p><a href=\"http://localhost:3030\"><img src=\"/content/images/2015/03/Hello_Mongo.png\" alt=\"localhost:3030\" title=\"\" /></a></p>\n\n<p>Let's refresh our page. And indeed, the message Hello Mongo, is now appearing on our page. </p>\n\n<p><strong>Our walking skeleton has now been completed.</strong> We just have the bare bones of our application, but every major moving piece is in place.</p>\n\n<p>All four components of the MEAN Stack are working together to serve up the page that you're seeing.</p>\n\n<p>In the upcoming modules we'll flesh out our application with more features.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-adding-mongodb\" style=\"width: 50%;\">Adding MongoDB</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-summary\" style=\"float: right;width: 50%;text-align: right;\">Summary</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":1424284147773,"created_by":3,"updated_at":1429064230429,"updated_by":1,"published_at":1424284174509,"published_by":3},{"id":15,"uuid":"36e7e879-3e7e-4071-a621-2e046798f81d","title":"Building Angular.js and Node.js with the MEAN stack: Summary","slug":"building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-summary","markdown":"In this module we created a walking skeleton for our application. This walking skeleton didn't have any real useful features, but he did have every major component that our final application has.\n\n---\n![ExpressJS and NodeJS](/content/images/2015/03/express-js-and-node-js.png)\n\nWe started with a Node and Express web application including using Stylus and Bower.\n\n---\n![AngularJS](/content/images/2015/03/angular-js.png)\n\nThen we added on an AngularJS client application that did a simple rendering of data on the client.\n\n---\n![MongoDB](/content/images/2015/03/mongodb.png)\n\nAnd lastly, we added a MongoDB database and served up some data that was rendered on our page.\n\n## Walking Skeleton Finished ##\nNow that our walking skeleton is in place, we can flesh it out in future modules using an iterative approach into a more fully featured application. This will let us know at every step that our entire application is still working and that we haven't broken anything.\n\n![George Clapping](/content/images/2015/03/good-one-sir.gif)\n\n## Future Modules ##\nIn future modules we'll do exactly that and turn the skeleton into something more recognizable as an actual application.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-displaying-data-in-a-view\" style=\"width: 50%;\">Display Data</a><a class=\"next-article\" href=\"\" style=\"float: right;width: 50%;text-align: right;\"></a>","html":"<p>In this module we created a walking skeleton for our application. This walking skeleton didn't have any real useful features, but he did have every major component that our final application has.</p>\n\n<hr />\n\n<p><img src=\"/content/images/2015/03/express-js-and-node-js.png\" alt=\"ExpressJS and NodeJS\" /></p>\n\n<p>We started with a Node and Express web application including using Stylus and Bower.</p>\n\n<hr />\n\n<p><img src=\"/content/images/2015/03/angular-js.png\" alt=\"AngularJS\" /></p>\n\n<p>Then we added on an AngularJS client application that did a simple rendering of data on the client.</p>\n\n<hr />\n\n<p><img src=\"/content/images/2015/03/mongodb.png\" alt=\"MongoDB\" /></p>\n\n<p>And lastly, we added a MongoDB database and served up some data that was rendered on our page.</p>\n\n<h2 id=\"walkingskeletonfinished\">Walking Skeleton Finished</h2>\n\n<p>Now that our walking skeleton is in place, we can flesh it out in future modules using an iterative approach into a more fully featured application. This will let us know at every step that our entire application is still working and that we haven't broken anything.</p>\n\n<p><img src=\"/content/images/2015/03/good-one-sir.gif\" alt=\"George Clapping\" /></p>\n\n<h2 id=\"futuremodules\">Future Modules</h2>\n\n<p>In future modules we'll do exactly that and turn the skeleton into something more recognizable as an actual application.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-displaying-data-in-a-view\" style=\"width: 50%;\">Display Data</a><a class=\"next-article\" href=\"\" style=\"float: right;width: 50%;text-align: right;\"></a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":1424284193230,"created_by":3,"updated_at":1429064247233,"updated_by":1,"published_at":1424284204721,"published_by":3},{"id":16,"uuid":"bea29c98-8b47-497d-9cdb-472357fbbe5b","title":"Intro to Mongoose for Node.js and MongoDB: Course Introduction","slug":"intro-to-mongoose-for-node-js-and-mongodb-course-introduction","markdown":"#### Introduction ####\n\nThe term **NoSQL** is commonly used to describe a group of emerging non-relational database systems. NoSQL databases have grown in popularity as of late, but of these **MongoDB** is the clear favorite.\n\nI like to think of a database as an **empty filing cabinet**, whether that be a relational database system such as **SQL Server** or **MySQL**, or a NoSQL database such as **MongoDB**.\n\n![](/content/images/2015/03/filing-cabinet.png)\n\nWhen filing data in a relational database things are structured and rule based, every record must match the tables at schema design.\n\n![](/content/images/2015/03/rule-based.png)\n\nThis is not the case with MongoDB, simply, you can put whatever you want into that filing cabinet, that freedom is what causes some developers to be nervous about using NoSQL databases such as MongoDB, they're used to having the database set the rules.\n\nThe goal of this course is to give you the building blocks needed to **build great web applications using Mongoose to easily store data in, and retrieve documents from MongoDB in a structured manner**.\n\n![Course Goals](/content/images/2015/03/course-goals.png)\n\nYou can still think of this as a filing cabinet full of documents, but one that has some structure and rules to it, I say some rules because, well with MongoDB you still have the freedom to store whatever you want, even if you are using Mongoose.\n\nThe Node.js application that we will be developing throughout this course will effectively illustrate:\n\n1. **Setting up a Mongoose schema**\n- **Building a model from that schema**\n- **Validating data**\n\n<a style=\"float:right;\" href=\"/intro-to-mongoose-for-node-js-and-mongodb-course-introduction-prerequisites\"><h6>>> Prerequisites</h6></a>","html":"<h4 id=\"introduction\">Introduction</h4>\n\n<p>The term <strong>NoSQL</strong> is commonly used to describe a group of emerging non-relational database systems. NoSQL databases have grown in popularity as of late, but of these <strong>MongoDB</strong> is the clear favorite.</p>\n\n<p>I like to think of a database as an <strong>empty filing cabinet</strong>, whether that be a relational database system such as <strong>SQL Server</strong> or <strong>MySQL</strong>, or a NoSQL database such as <strong>MongoDB</strong>.</p>\n\n<p><img src=\"/content/images/2015/03/filing-cabinet.png\" alt=\"\" /></p>\n\n<p>When filing data in a relational database things are structured and rule based, every record must match the tables at schema design.</p>\n\n<p><img src=\"/content/images/2015/03/rule-based.png\" alt=\"\" /></p>\n\n<p>This is not the case with MongoDB, simply, you can put whatever you want into that filing cabinet, that freedom is what causes some developers to be nervous about using NoSQL databases such as MongoDB, they're used to having the database set the rules.</p>\n\n<p>The goal of this course is to give you the building blocks needed to <strong>build great web applications using Mongoose to easily store data in, and retrieve documents from MongoDB in a structured manner</strong>.</p>\n\n<p><img src=\"/content/images/2015/03/course-goals.png\" alt=\"Course Goals\" /></p>\n\n<p>You can still think of this as a filing cabinet full of documents, but one that has some structure and rules to it, I say some rules because, well with MongoDB you still have the freedom to store whatever you want, even if you are using Mongoose.</p>\n\n<p>The Node.js application that we will be developing throughout this course will effectively illustrate:</p>\n\n<ol>\n<li><strong>Setting up a Mongoose schema</strong>  </li>\n<li><strong>Building a model from that schema</strong></li>\n<li><strong>Validating data</strong></li>\n</ol>\n\n<p><a style=\"float:right;\" href=\"/intro-to-mongoose-for-node-js-and-mongodb-course-introduction-prerequisites\"><h6>>> Prerequisites</h6></a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1425408803497,"created_by":1,"updated_at":1426366583465,"updated_by":1,"published_at":1425411780000,"published_by":1},{"id":17,"uuid":"0bcea0fe-1fb0-4824-b120-b44e4ddaa476","title":"Intro to Mongoose for Node.js and MongoDB: Course Introduction - Prerequisites","slug":"intro-to-mongoose-for-node-js-and-mongodb-course-introduction-prerequisites","markdown":"#### Prerequisites ####\n\nLet's get started by going over some course prerequisites, while not completely required to gain some benefit from this course.\n\nA general knowledge of and understanding of:\n\n---\n\n###### [Node.js](http://bit.ly/node99) ######\n\n1. [What are CommonJS Modules?](/node-js-what-are-commonjs-modules/)\n- [CommonJS Basics Introduction](/node-js-creating-demo-apis-with-json-server/)\n- [Creating Demo APIs](/node-js-creating-demo-apis-with-json-server/)\n\n---\n\n###### [MongoDB](http://bit.ly/mongo99) #######\n\n---\n\n###### JavaScript ######\n\n---\n\n<a class=\"prev-article\" href=\"/intro-to-mongoose-for-node-js-and-mongodb-course-introduction\" style=\"width: 50%;\">Intro</a><a class=\"next-article\" style=\"float: right;width: 50%;text-align: right;\" href=\"/intro-to-mongoose-for-node-js-and-mongodb-course-introduction-why-mongoose\">Why Mongoose?</a>","html":"<h4 id=\"prerequisites\">Prerequisites</h4>\n\n<p>Let's get started by going over some course prerequisites, while not completely required to gain some benefit from this course.</p>\n\n<p>A general knowledge of and understanding of:</p>\n\n<hr />\n\n<h6 id=\"nodejshttpbitlynode99\"><a href=\"http://bit.ly/node99\">Node.js</a></h6>\n\n<ol>\n<li><a href=\"/node-js-what-are-commonjs-modules/\">What are CommonJS Modules?</a>  </li>\n<li><a href=\"/node-js-creating-demo-apis-with-json-server/\">CommonJS Basics Introduction</a></li>\n<li><a href=\"/node-js-creating-demo-apis-with-json-server/\">Creating Demo APIs</a></li>\n</ol>\n\n<hr />\n\n<h6 id=\"mongodbhttpbitlymongo99\"><a href=\"http://bit.ly/mongo99\">MongoDB</a></h6>\n\n<hr />\n\n<h6 id=\"javascript\">JavaScript</h6>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/intro-to-mongoose-for-node-js-and-mongodb-course-introduction\" style=\"width: 50%;\">Intro</a><a class=\"next-article\" style=\"float: right;width: 50%;text-align: right;\" href=\"/intro-to-mongoose-for-node-js-and-mongodb-course-introduction-why-mongoose\">Why Mongoose?</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1425408845696,"created_by":1,"updated_at":1426374503658,"updated_by":1,"published_at":1425412980000,"published_by":1},{"id":18,"uuid":"3ec9fecb-0665-431d-a11c-c93a46a1ffc5","title":"Intro to Mongoose for Node.js and MongoDB: Course Introduction - Summary","slug":"intro-to-mongoose-for-node-js-and-mongodb-course-introduction-summary","markdown":"#### Summary ####\n\nI couldn't help but put up a picture of a real Mongoose, he'll be helping us summarize each module as we go through this course.\n\n![Module Summary](/content/images/2015/03/intro-module-summary.png)\n\nIn this module we started off by covering some of the prerequisites to get the most out of this course, experience with Node.js, MongoDB, and JavaScript.\n\nNext we went through some of the reasons to use Mongoose, including the fact that it is the officially supported ODM for Node.js, and some of the other nice features such as validation and query building, just to name a few.\n\nWe wrapped up this module by taking a look at the finalized version of our demo application to take Virtual Standup Meeting Notes.\n\n<a class=\"prev-article\" href=\"/intro-to-mongoose-for-node-js-and-mongodb-course-introduction-our-demo-application/\" style=\"width: 50%;\">Our Demo Application</a><a class=\"next-article\" style=\"float: right;width: 50%;text-align: right;\" href=\"/introduction-to-mongoose-for-node-js-and-mongodb-setting-up-the-demo-application-introduction/\">Setting Up Intro</a>","html":"<h4 id=\"summary\">Summary</h4>\n\n<p>I couldn't help but put up a picture of a real Mongoose, he'll be helping us summarize each module as we go through this course.</p>\n\n<p><img src=\"/content/images/2015/03/intro-module-summary.png\" alt=\"Module Summary\" /></p>\n\n<p>In this module we started off by covering some of the prerequisites to get the most out of this course, experience with Node.js, MongoDB, and JavaScript.</p>\n\n<p>Next we went through some of the reasons to use Mongoose, including the fact that it is the officially supported ODM for Node.js, and some of the other nice features such as validation and query building, just to name a few.</p>\n\n<p>We wrapped up this module by taking a look at the finalized version of our demo application to take Virtual Standup Meeting Notes.</p>\n\n<p><a class=\"prev-article\" href=\"/intro-to-mongoose-for-node-js-and-mongodb-course-introduction-our-demo-application/\" style=\"width: 50%;\">Our Demo Application</a><a class=\"next-article\" style=\"float: right;width: 50%;text-align: right;\" href=\"/introduction-to-mongoose-for-node-js-and-mongodb-setting-up-the-demo-application-introduction/\">Setting Up Intro</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1425408961060,"created_by":1,"updated_at":1425615367908,"updated_by":1,"published_at":1425415260000,"published_by":1},{"id":19,"uuid":"8e5aa044-7c76-4870-a514-49751ebaba35","title":"Intro to Mongoose for Node.js and MongoDB: Course Introduction - Our Demo Application","slug":"intro-to-mongoose-for-node-js-and-mongodb-course-introduction-our-demo-application","markdown":"#### Our Demo Application ####\n\nLet's discuss what our completed ready to go demo application will do and what it will look like.\n\nWe are going to build a Node.js application to store Virtual Stand-up Meeting Notes.\n\nThis will be similar to what you may be familiar with in Scrum or Agile daily stand-up meetings, where everyone gathers around recites what they worked on yesterday, what they plan on working on today, and if they have experienced any blockages or impediments.\n\nOur demo application will log the same information, but it will allow for teams to hold virtual stand up meetings no matter where they are in the world.\n\nNow let's take a look at what our Virtual Stand-Up Meeting Notes demo application will look like at the conclusion of this course.\n\n#### Virtual Stand-up Meeting Notes ####\n\nHere we are in our Node.js demo application we've named Virtual Stand-up Meeting notes.\n\n![Virtual Stand-up Meeting Notes](/content/images/2015/03/virtual-stand-up-meeting-notes.png)\n\nI have the Node.js in MongoDB servers running in the background, and as the homepage comes up we can see that we have list of previously entered Virtual Stand-up Meeting Notes.\n\nAs it states in the header this is a list of the last twelve meeting notes that were entered in. So we will get a chance at looking at how to limit the list of information that comes back, as well as sorting a list of data by say something like the entry date.\n\nWe will also take a look at how to filter our list by passing in criteria, in our example we're going to be using the member's name, so let's say that I wanted to filter this list down by those entries entered by 'Mark'.\n\n![Filter by name](/content/images/2015/03/entered-by-mark.png)\n\nIn the new note page we'll take a look at how to post data back to Node.js and use our Mongoose model to save data to MongoDB.\n\n![New note page](/content/images/2015/03/new-note-page.png)\n\nTo keep things simple and to focus mostly on Mongoose, you'll notice that **we do not have any authentication**, the user is not required to log in.\n\nMembers of a team will just simply:\n\n1. select their name from a drop down list\n2. select the project that they are a member of, or that they're currently working on\n3. enter what they did yesterday\n4. enter what they're planning on working on today\n5. enter if they have any impediments\n6. click save\n\n<a class=\"prev-article\" href=\"/intro-to-mongoose-for-node-js-and-mongodb-course-introduction-why-mongoose/\" style=\"width: 50%;\">Why Mongoose?</a><a class=\"next-article\" style=\"float: right;width: 50%;text-align: right;\" href=\"/intro-to-mongoose-for-node-js-and-mongodb-course-introduction-summary/\">Summary</a>","html":"<h4 id=\"ourdemoapplication\">Our Demo Application</h4>\n\n<p>Let's discuss what our completed ready to go demo application will do and what it will look like.</p>\n\n<p>We are going to build a Node.js application to store Virtual Stand-up Meeting Notes.</p>\n\n<p>This will be similar to what you may be familiar with in Scrum or Agile daily stand-up meetings, where everyone gathers around recites what they worked on yesterday, what they plan on working on today, and if they have experienced any blockages or impediments.</p>\n\n<p>Our demo application will log the same information, but it will allow for teams to hold virtual stand up meetings no matter where they are in the world.</p>\n\n<p>Now let's take a look at what our Virtual Stand-Up Meeting Notes demo application will look like at the conclusion of this course.</p>\n\n<h4 id=\"virtualstandupmeetingnotes\">Virtual Stand-up Meeting Notes</h4>\n\n<p>Here we are in our Node.js demo application we've named Virtual Stand-up Meeting notes.</p>\n\n<p><img src=\"/content/images/2015/03/virtual-stand-up-meeting-notes.png\" alt=\"Virtual Stand-up Meeting Notes\" /></p>\n\n<p>I have the Node.js in MongoDB servers running in the background, and as the homepage comes up we can see that we have list of previously entered Virtual Stand-up Meeting Notes.</p>\n\n<p>As it states in the header this is a list of the last twelve meeting notes that were entered in. So we will get a chance at looking at how to limit the list of information that comes back, as well as sorting a list of data by say something like the entry date.</p>\n\n<p>We will also take a look at how to filter our list by passing in criteria, in our example we're going to be using the member's name, so let's say that I wanted to filter this list down by those entries entered by 'Mark'.</p>\n\n<p><img src=\"/content/images/2015/03/entered-by-mark.png\" alt=\"Filter by name\" /></p>\n\n<p>In the new note page we'll take a look at how to post data back to Node.js and use our Mongoose model to save data to MongoDB.</p>\n\n<p><img src=\"/content/images/2015/03/new-note-page.png\" alt=\"New note page\" /></p>\n\n<p>To keep things simple and to focus mostly on Mongoose, you'll notice that <strong>we do not have any authentication</strong>, the user is not required to log in.</p>\n\n<p>Members of a team will just simply:</p>\n\n<ol>\n<li>select their name from a drop down list  </li>\n<li>select the project that they are a member of, or that they're currently working on  </li>\n<li>enter what they did yesterday  </li>\n<li>enter what they're planning on working on today  </li>\n<li>enter if they have any impediments  </li>\n<li>click save</li>\n</ol>\n\n<p><a class=\"prev-article\" href=\"/intro-to-mongoose-for-node-js-and-mongodb-course-introduction-why-mongoose/\" style=\"width: 50%;\">Why Mongoose?</a><a class=\"next-article\" style=\"float: right;width: 50%;text-align: right;\" href=\"/intro-to-mongoose-for-node-js-and-mongodb-course-introduction-summary/\">Summary</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1425409029309,"created_by":1,"updated_at":1425610129599,"updated_by":1,"published_at":1425414960000,"published_by":1},{"id":20,"uuid":"48384e25-23ca-4bf6-9a78-20ceb014caa8","title":"Intro to Mongoose for Node.js and MongoDB: Course Introduction - Why Mongoose?","slug":"intro-to-mongoose-for-node-js-and-mongodb-course-introduction-why-mongoose","markdown":"#### Why Mongoose? ####\n\nSo why use Mongoose? If you have dug into MongoDB at all, or if you've seen a demo of it, the chances are that you've either used or watched someone else use a native MongoDB driver. There are official MongoDB drivers for many development languages such as C++, C#, Java, Perl, PHP, Python, Ruby, and of course Node.js.\n\nThere are also several community supported drivers for various other languages as well, so why then would we just not use the native Node.js MongoDB driver? Sometimes you may find that you should, but a quick visit to the online MongoDB documents may give us the answers we're looking for here.\n\n> Because MongoDB is so easy to use; the basic Node.js driver can be the best solution for many applications.\n\n> However, if you need validations, associations, and other high-level data modeling functions, then an Object Document Mapper may be helpful.\n\n> **Mongoose is the officially supported ODM for Node.js**, it has a thriving open source community, and it includes advanced schema-based features such as an async validation, casting, object life-cycle management, pseudo-joins, and rich query builder support.\n\nSo there's not a basic simple one answer here why you should or should not use Mongoose in your application, but as you move forward in this course my hope is that you will gain enough knowledge, some of the reasons maybe that are listed here to know when to use Mongoose, and when it may be best to use a native MongoDB driver.\n\n<a class=\"prev-article\" href=\"/intro-to-mongoose-for-node-js-and-mongodb-course-introduction-prerequisites/\" style=\"width: 50%;\">Prerequisites</a><a class=\"next-article\" style=\"float: right;width: 50%;text-align: right;\" href=\"/intro-to-mongoose-for-node-js-and-mongodb-course-introduction-our-demo-application/\">Our Demo Application</a>","html":"<h4 id=\"whymongoose\">Why Mongoose?</h4>\n\n<p>So why use Mongoose? If you have dug into MongoDB at all, or if you've seen a demo of it, the chances are that you've either used or watched someone else use a native MongoDB driver. There are official MongoDB drivers for many development languages such as C++, C#, Java, Perl, PHP, Python, Ruby, and of course Node.js.</p>\n\n<p>There are also several community supported drivers for various other languages as well, so why then would we just not use the native Node.js MongoDB driver? Sometimes you may find that you should, but a quick visit to the online MongoDB documents may give us the answers we're looking for here.</p>\n\n<blockquote>\n  <p>Because MongoDB is so easy to use; the basic Node.js driver can be the best solution for many applications.</p>\n  \n  <p>However, if you need validations, associations, and other high-level data modeling functions, then an Object Document Mapper may be helpful.</p>\n  \n  <p><strong>Mongoose is the officially supported ODM for Node.js</strong>, it has a thriving open source community, and it includes advanced schema-based features such as an async validation, casting, object life-cycle management, pseudo-joins, and rich query builder support.</p>\n</blockquote>\n\n<p>So there's not a basic simple one answer here why you should or should not use Mongoose in your application, but as you move forward in this course my hope is that you will gain enough knowledge, some of the reasons maybe that are listed here to know when to use Mongoose, and when it may be best to use a native MongoDB driver.</p>\n\n<p><a class=\"prev-article\" href=\"/intro-to-mongoose-for-node-js-and-mongodb-course-introduction-prerequisites/\" style=\"width: 50%;\">Prerequisites</a><a class=\"next-article\" style=\"float: right;width: 50%;text-align: right;\" href=\"/intro-to-mongoose-for-node-js-and-mongodb-course-introduction-our-demo-application/\">Our Demo Application</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1425409031210,"created_by":1,"updated_at":1425609471265,"updated_by":1,"published_at":1425414180000,"published_by":1},{"id":21,"uuid":"5de3a24c-413e-43da-9034-e82fa214e3c1","title":"Introduction to Mongoose for Node.js and MongoDB: Setting up the Demo Application - Introduction","slug":"introduction-to-mongoose-for-node-js-and-mongodb-setting-up-the-demo-application-introduction","markdown":"#### Introduction ####\n\nHi my name is Mark Scott, and in this module we will discuss Setting Up the Demo Application.\n\nWhile it's not a primary focus of this course, it is important and useful to discuss the various Node packages that we will be using. \n\nHaving the right tools available for a job can make a world of difference, so we will also briefly look at some helpful tools that will greatly assist us in building our demo application. \n\nFinally we will begin laying out the foundational parts of our Virtual Stand-up Meeting Notes application.\n\n<a class=\"prev-article\" href=\"/intro-to-mongoose-for-node-js-and-mongodb-course-introduction-summary/\" style=\"width: 50%;\">Summary</a><a class=\"next-article\" style=\"float: right;width: 50%;text-align: right;\" href=\"/introduction-to-mongoose-for-node-js-and-mongodb-setting-up-the-demo-application-node-js-packages/\">Node.js Packages</a>","html":"<h4 id=\"introduction\">Introduction</h4>\n\n<p>Hi my name is Mark Scott, and in this module we will discuss Setting Up the Demo Application.</p>\n\n<p>While it's not a primary focus of this course, it is important and useful to discuss the various Node packages that we will be using. </p>\n\n<p>Having the right tools available for a job can make a world of difference, so we will also briefly look at some helpful tools that will greatly assist us in building our demo application. </p>\n\n<p>Finally we will begin laying out the foundational parts of our Virtual Stand-up Meeting Notes application.</p>\n\n<p><a class=\"prev-article\" href=\"/intro-to-mongoose-for-node-js-and-mongodb-course-introduction-summary/\" style=\"width: 50%;\">Summary</a><a class=\"next-article\" style=\"float: right;width: 50%;text-align: right;\" href=\"/introduction-to-mongoose-for-node-js-and-mongodb-setting-up-the-demo-application-node-js-packages/\">Node.js Packages</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1425415761938,"created_by":1,"updated_at":1425615547415,"updated_by":1,"published_at":1425415996092,"published_by":1},{"id":22,"uuid":"f5de89f0-9a6c-474d-bba0-e790dcb58c58","title":"Introduction to Mongoose for Node.js and MongoDB: Setting up the Demo Application - Node.js Packages","slug":"introduction-to-mongoose-for-node-js-and-mongodb-setting-up-the-demo-application-node-js-packages","markdown":"> Could you build a web application using just Node.js?\n\n> Technically, yes, you probably could, but would you want to?\n\n#### Node.js Packages ####\n\nLet's talk about some of the Node.js packages that we'll be using in our application.\n\n![Node.js Packages](/content/images/2015/03/node-js-packages.png)\n\n###### Express ######\nWell probably not, and that's where Express comes in.\n\n> Express is a lightweight web application framework for node.js\n\nExpress is what we'll be using here shortly to layout the foundational pieces of our demo application. In order to stay focused on Mongoose we will not spend a lot of time covering Express in detail in this course.\n\n###### Express Generator ######\nAlong with Express we'll be using the Express Generator package to generate a scaffold express application for us.\n\nThis will also give us a basic application with stubbed in routes and views, as well as a basic folder structure.\n\nWe'll change up a few things as we go along, but the express generator will get us started in the right direction, and save us some time.\n\n###### View Engine 'Swig' ######\nAs you will see here in a moment the Express Generator by default uses a view engine called Jade, two other view engines, EJS and Hogan are also supported, but there are a number of other view engines that are supported by Express, of those we will be using Swig for our application.\n\nBecause Swig is not directly provided as an option in the Express Generator, we'll have to look at how to plug that in after the fact.\n\n###### Mongoose ######\nLastly of course the package that this course is about, Mongoose.\n\n<a class=\"prev-article\" href=\"/introduction-to-mongoose-for-node-js-and-mongodb-setting-up-the-demo-application-introduction/\" style=\"width: 50%;\">Setup Demo Intro</a><a class=\"next-article\" style=\"float: right;width: 50%;text-align: right;\" href=\"/introduction-to-mongoose-for-node-js-and-mongodb-setting-up-the-demo-application-helpful-tools/\">Helpful Tools</a>","html":"<blockquote>\n  <p>Could you build a web application using just Node.js?</p>\n  \n  <p>Technically, yes, you probably could, but would you want to?</p>\n</blockquote>\n\n<h4 id=\"nodejspackages\">Node.js Packages</h4>\n\n<p>Let's talk about some of the Node.js packages that we'll be using in our application.</p>\n\n<p><img src=\"/content/images/2015/03/node-js-packages.png\" alt=\"Node.js Packages\" /></p>\n\n<h6 id=\"express\">Express</h6>\n\n<p>Well probably not, and that's where Express comes in.</p>\n\n<blockquote>\n  <p>Express is a lightweight web application framework for node.js</p>\n</blockquote>\n\n<p>Express is what we'll be using here shortly to layout the foundational pieces of our demo application. In order to stay focused on Mongoose we will not spend a lot of time covering Express in detail in this course.</p>\n\n<h6 id=\"expressgenerator\">Express Generator</h6>\n\n<p>Along with Express we'll be using the Express Generator package to generate a scaffold express application for us.</p>\n\n<p>This will also give us a basic application with stubbed in routes and views, as well as a basic folder structure.</p>\n\n<p>We'll change up a few things as we go along, but the express generator will get us started in the right direction, and save us some time.</p>\n\n<h6 id=\"viewengineswig\">View Engine 'Swig'</h6>\n\n<p>As you will see here in a moment the Express Generator by default uses a view engine called Jade, two other view engines, EJS and Hogan are also supported, but there are a number of other view engines that are supported by Express, of those we will be using Swig for our application.</p>\n\n<p>Because Swig is not directly provided as an option in the Express Generator, we'll have to look at how to plug that in after the fact.</p>\n\n<h6 id=\"mongoose\">Mongoose</h6>\n\n<p>Lastly of course the package that this course is about, Mongoose.</p>\n\n<p><a class=\"prev-article\" href=\"/introduction-to-mongoose-for-node-js-and-mongodb-setting-up-the-demo-application-introduction/\" style=\"width: 50%;\">Setup Demo Intro</a><a class=\"next-article\" style=\"float: right;width: 50%;text-align: right;\" href=\"/introduction-to-mongoose-for-node-js-and-mongodb-setting-up-the-demo-application-helpful-tools/\">Helpful Tools</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1425415856362,"created_by":1,"updated_at":1425615931231,"updated_by":1,"published_at":1425416002306,"published_by":1},{"id":23,"uuid":"54d7944b-3eeb-4220-9669-afc439f34982","title":"Introduction to Mongoose for Node.js and MongoDB: Setting up the Demo Application - Helpful Tools","slug":"introduction-to-mongoose-for-node-js-and-mongodb-setting-up-the-demo-application-helpful-tools","markdown":"#### Helpful Tools ####\n\n###### Swig ######\nA moment ago we spoke about the view engine that we will be using in this course, Swig, a view engine is used to render HTML back to the client.\n\n###### Bootstrap ######\nThis brings up Bootstrap, which was briefly mentioned in the course introduction, while not a Node.js package it certainly has found favor with a lot of developers, and is considered to be a useful tool in the presentation layer.\n\nWe will be using just enough Bootstrap to make the layout of menus and forms in our demo application much easier.\n\n###### Nodemon ######\nWhile developing Node application and making frequent changes to our code, stopping and restarting the server can become quite bothersome.\n\nSo we're going to also look at a very helpful tool, or a couple of them here that we can use to solve that problem for us. Nodemon and Forever are a couple of the more known and used change monitoring and server restart tools.\n\nFor this course we'll be using **Nodemon**, but there is certainly nothing wrong with Forever, and feel free to experiment with both.\n\n###### Postman ######\nAs we begin building our application where we layout a schema and build a model from that schema it would certainly be nice to be able to test that code prior to having a complete user interface in place. **Postman**, a Chrome extension tool is a fantastic way to do just that.\n\nWe'll be using Postman to POST form data to our application prior to building out the HTML form necessary to collect that data. I think you to will find that this tool is very helpful, and you'll want to start using it as well.\n\nOnce we have data posted and saved we'll want to verify that in the database.\n\n###### Robomongo ######\nWe can certainly use a command line and query the data there, but I think you'll agree with me that once you see and use the tool **Robomongo** you'll find that having this nice interface can save you a lot of time.\n\n###### Starting to Layout the Demo App ######\nThere are many other tools that we could talk about, but let's get started laying out the demo application that we saw.\n\n<a class=\"prev-article\" href=\"/introduction-to-mongoose-for-node-js-and-mongodb-setting-up-the-demo-application-node-js-packages/\" style=\"width: 50%;\">Node.js Packages</a><a class=\"next-article\" style=\"float: right;width: 50%;text-align: right;\" href=\"/introduction-to-mongoose-for-node-js-and-mongodb-setting-up-the-demo-application-demo/\">Demo</a>","html":"<h4 id=\"helpfultools\">Helpful Tools</h4>\n\n<h6 id=\"swig\">Swig</h6>\n\n<p>A moment ago we spoke about the view engine that we will be using in this course, Swig, a view engine is used to render HTML back to the client.</p>\n\n<h6 id=\"bootstrap\">Bootstrap</h6>\n\n<p>This brings up Bootstrap, which was briefly mentioned in the course introduction, while not a Node.js package it certainly has found favor with a lot of developers, and is considered to be a useful tool in the presentation layer.</p>\n\n<p>We will be using just enough Bootstrap to make the layout of menus and forms in our demo application much easier.</p>\n\n<h6 id=\"nodemon\">Nodemon</h6>\n\n<p>While developing Node application and making frequent changes to our code, stopping and restarting the server can become quite bothersome.</p>\n\n<p>So we're going to also look at a very helpful tool, or a couple of them here that we can use to solve that problem for us. Nodemon and Forever are a couple of the more known and used change monitoring and server restart tools.</p>\n\n<p>For this course we'll be using <strong>Nodemon</strong>, but there is certainly nothing wrong with Forever, and feel free to experiment with both.</p>\n\n<h6 id=\"postman\">Postman</h6>\n\n<p>As we begin building our application where we layout a schema and build a model from that schema it would certainly be nice to be able to test that code prior to having a complete user interface in place. <strong>Postman</strong>, a Chrome extension tool is a fantastic way to do just that.</p>\n\n<p>We'll be using Postman to POST form data to our application prior to building out the HTML form necessary to collect that data. I think you to will find that this tool is very helpful, and you'll want to start using it as well.</p>\n\n<p>Once we have data posted and saved we'll want to verify that in the database.</p>\n\n<h6 id=\"robomongo\">Robomongo</h6>\n\n<p>We can certainly use a command line and query the data there, but I think you'll agree with me that once you see and use the tool <strong>Robomongo</strong> you'll find that having this nice interface can save you a lot of time.</p>\n\n<h6 id=\"startingtolayoutthedemoapp\">Starting to Layout the Demo App</h6>\n\n<p>There are many other tools that we could talk about, but let's get started laying out the demo application that we saw.</p>\n\n<p><a class=\"prev-article\" href=\"/introduction-to-mongoose-for-node-js-and-mongodb-setting-up-the-demo-application-node-js-packages/\" style=\"width: 50%;\">Node.js Packages</a><a class=\"next-article\" style=\"float: right;width: 50%;text-align: right;\" href=\"/introduction-to-mongoose-for-node-js-and-mongodb-setting-up-the-demo-application-demo/\">Demo</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1425415865303,"created_by":1,"updated_at":1425617191018,"updated_by":1,"published_at":1425416015814,"published_by":1},{"id":24,"uuid":"7bf376c8-1f33-4b20-9ba8-efe8f8ba3a9f","title":"Introduction to Mongoose for Node.js and MongoDB: Setting up the Demo Application - Demo","slug":"introduction-to-mongoose-for-node-js-and-mongodb-setting-up-the-demo-application-demo","markdown":"#### Demo ####\n\nNow that we have node.js installed, \"Node Packaged Modules\" or as it's also commonly referred to as, the **node package manager (NPM)** comes along for the ride.\n\nWe can use NPM to install **express**, the **express generator**, our view engine of choice, **Swig**, and naturally the package this course is about, **Mongoose**.\n\nWe're going to use NPM to install express with **-g** or **--global** appended to this command. It installs the current package context as a global package, meaning that it will be available to you anywhere on your system, and that's what we want to do.\n\n```bash\n$ npm install express --global\n```\n\nSince I already have Express installed I'm going to cancel this, and let's take a look at how to use NPM to install Express Generator.\n\n```bash\n$ npm install express-generator -g\n```\n\nLet's test out the Express Generator and make sure that it was installed correctly and running.\n\n```bash\n$ express --help\n```\n\n![Express Help](/content/images/2015/03/Hogan-3.png)\n\nHere in Express help notice the **-H** option here for Hogan, the HJS view engine.\n\nOf the supported view engines directly offered by the generator, Hogan is the closest to what we want, Swig, so we'll start with that one and make some minor changes and adjustments in a moment.\n\nFirst we'll set up a directory for our project, and change to that directory.\n\n```bash\n$ mkdir standup\n$ cd standup\n```\n\nNow we're going to run the express generator to create the scaffold express website using the Hogan view engine. We're going to type in Express with the option **-H**.\n\n```bash\n$ express -H\n```\n\n![express -H](/content/images/2015/03/express-generator-hogan.png)\n\nThe Express Generator has stubbed out a nice Express app for us to work with, this would be a good time to open our project in the editor that we will be using for the remainder of this course.\n\n###### Package.json ######\nLet's open up and discuss the contents of our **package.json** file.\n\nIn the dependency section here you can see the Node.js packages that the generator setup for us, these packages however, have not yet been installed. To do that we'll need to run NPM install. We'll open the terminal and run 'npm install' to install all of the node packages found in the dependency section.\n\n```bash\n$ npm install\n```\n\n> Now you will notice that we have the node modules folder in our project.\n\nThat's great we're getting really close to having the foundation laid out for our demo application.\n\nOne thing to make note of while we're here in the **package.json** file is to take a look at the script section, notice that the script start calls the node command with bin/www. The command **npm start** will run this script, which is the same thing as typing in **node ./bin/www** at the command prompt.\n\nLet's test run our application now and make sure that everything's working as expected.\n\n```bash\n$ npm start\n```\n\nGo to [localhost:3000](http://localhost:3000/)\n\n![Application Running](/content/images/2015/03/npm_start.png)\n\nIt's not much to look at yet, but our Express site is working. \n\n###### Adding Swig ######\nBack in the editor let's wire up our view engine Swig.\n\nWe're going to need to first install Swig, so let's type in **npm install swig**, and make sure that we save that to our package.json.\n\n```bash\n$ npm install swig --save\n```\n\nNow on the app.js file we'll change the view engine from **hjs** to **html**.\n\n<span class=\"filename\">app.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"13-15,19\"><code class=\"language-javascript\">var express = require('express');\nvar path = require('path');\nvar favicon = require('serve-favicon');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\n\nvar routes = require('./routes/index');\nvar users = require('./routes/users');\n\nvar app = express();\n\n// assign the swig view engine to .html files...\nvar swig = require('swig');\napp.engine('html', swig.renderFile);\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'html');\n\n// uncomment after placing your favicon in /public\n//app.use(favicon(__dirname + '/public/favicon.ico'));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));</code></pre>\n\n**[#15]** Next we'll assign Swig as our view engine to handle the HTML files.\n\nNow we need to rename the .hjs files in our views folder to .html.\n\n```bash\n$ mv views/error.hjs views/error.html\n$ mv views/index.hjs views/index.html\n```\n\nSince we're not using Hogan or hjs we can uninstall that.\n\n```bash\n$ npm uninstall hjs --save\n```\n\nLet's test out our scaffold site one more time now to verify everything is still working as expected, we'll run NPM start from the terminal again.\n\n```bash\n$ npm start\n```\n\nGo to [localhost:3000](http://localhost:3000/)\n\n![Application Running](/content/images/2015/03/npm_start.png)\n\nAlright, looks like we're still up and running, that's good news.\n\nWe've successfully laid out the foundational pieces of our **Virtual Stand-up Meeting Notes** application, but we have a lot more to do.","html":"<h4 id=\"demo\">Demo</h4>\n\n<p>Now that we have node.js installed, \"Node Packaged Modules\" or as it's also commonly referred to as, the <strong>node package manager (NPM)</strong> comes along for the ride.</p>\n\n<p>We can use NPM to install <strong>express</strong>, the <strong>express generator</strong>, our view engine of choice, <strong>Swig</strong>, and naturally the package this course is about, <strong>Mongoose</strong>.</p>\n\n<p>We're going to use NPM to install express with <strong>-g</strong> or <strong>--global</strong> appended to this command. It installs the current package context as a global package, meaning that it will be available to you anywhere on your system, and that's what we want to do.</p>\n\n<pre><code class=\"language-bash\">$ npm install express --global\n</code></pre>\n\n<p>Since I already have Express installed I'm going to cancel this, and let's take a look at how to use NPM to install Express Generator.</p>\n\n<pre><code class=\"language-bash\">$ npm install express-generator -g\n</code></pre>\n\n<p>Let's test out the Express Generator and make sure that it was installed correctly and running.</p>\n\n<pre><code class=\"language-bash\">$ express --help\n</code></pre>\n\n<p><img src=\"/content/images/2015/03/Hogan-3.png\" alt=\"Express Help\" /></p>\n\n<p>Here in Express help notice the <strong>-H</strong> option here for Hogan, the HJS view engine.</p>\n\n<p>Of the supported view engines directly offered by the generator, Hogan is the closest to what we want, Swig, so we'll start with that one and make some minor changes and adjustments in a moment.</p>\n\n<p>First we'll set up a directory for our project, and change to that directory.</p>\n\n<pre><code class=\"language-bash\">$ mkdir standup\n$ cd standup\n</code></pre>\n\n<p>Now we're going to run the express generator to create the scaffold express website using the Hogan view engine. We're going to type in Express with the option <strong>-H</strong>.</p>\n\n<pre><code class=\"language-bash\">$ express -H\n</code></pre>\n\n<p><img src=\"/content/images/2015/03/express-generator-hogan.png\" alt=\"express -H\" /></p>\n\n<p>The Express Generator has stubbed out a nice Express app for us to work with, this would be a good time to open our project in the editor that we will be using for the remainder of this course.</p>\n\n<h6 id=\"packagejson\">Package.json</h6>\n\n<p>Let's open up and discuss the contents of our <strong>package.json</strong> file.</p>\n\n<p>In the dependency section here you can see the Node.js packages that the generator setup for us, these packages however, have not yet been installed. To do that we'll need to run NPM install. We'll open the terminal and run 'npm install' to install all of the node packages found in the dependency section.</p>\n\n<pre><code class=\"language-bash\">$ npm install\n</code></pre>\n\n<blockquote>\n  <p>Now you will notice that we have the node modules folder in our project.</p>\n</blockquote>\n\n<p>That's great we're getting really close to having the foundation laid out for our demo application.</p>\n\n<p>One thing to make note of while we're here in the <strong>package.json</strong> file is to take a look at the script section, notice that the script start calls the node command with bin/www. The command <strong>npm start</strong> will run this script, which is the same thing as typing in <strong>node ./bin/www</strong> at the command prompt.</p>\n\n<p>Let's test run our application now and make sure that everything's working as expected.</p>\n\n<pre><code class=\"language-bash\">$ npm start\n</code></pre>\n\n<p>Go to <a href=\"http://localhost:3000/\">localhost:3000</a></p>\n\n<p><img src=\"/content/images/2015/03/npm_start.png\" alt=\"Application Running\" /></p>\n\n<p>It's not much to look at yet, but our Express site is working. </p>\n\n<h6 id=\"addingswig\">Adding Swig</h6>\n\n<p>Back in the editor let's wire up our view engine Swig.</p>\n\n<p>We're going to need to first install Swig, so let's type in <strong>npm install swig</strong>, and make sure that we save that to our package.json.</p>\n\n<pre><code class=\"language-bash\">$ npm install swig --save\n</code></pre>\n\n<p>Now on the app.js file we'll change the view engine from <strong>hjs</strong> to <strong>html</strong>.</p>\n\n<p><span class=\"filename\">app.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"13-15,19\"><code class=\"language-javascript\">var express = require('express');  \nvar path = require('path');  \nvar favicon = require('serve-favicon');  \nvar logger = require('morgan');  \nvar cookieParser = require('cookie-parser');  \nvar bodyParser = require('body-parser');\n\nvar routes = require('./routes/index');  \nvar users = require('./routes/users');\n\nvar app = express();\n\n// assign the swig view engine to .html files...\nvar swig = require('swig');  \napp.engine('html', swig.renderFile);\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));  \napp.set('view engine', 'html');\n\n// uncomment after placing your favicon in /public\n//app.use(favicon(__dirname + '/public/favicon.ico'));\napp.use(logger('dev'));  \napp.use(bodyParser.json());  \napp.use(bodyParser.urlencoded({ extended: false }));  \napp.use(cookieParser());  \napp.use(express.static(path.join(__dirname, 'public')));</code></pre>\n\n<p><strong>[#15]</strong> Next we'll assign Swig as our view engine to handle the HTML files.</p>\n\n<p>Now we need to rename the .hjs files in our views folder to .html.</p>\n\n<pre><code class=\"language-bash\">$ mv views/error.hjs views/error.html\n$ mv views/index.hjs views/index.html\n</code></pre>\n\n<p>Since we're not using Hogan or hjs we can uninstall that.</p>\n\n<pre><code class=\"language-bash\">$ npm uninstall hjs --save\n</code></pre>\n\n<p>Let's test out our scaffold site one more time now to verify everything is still working as expected, we'll run NPM start from the terminal again.</p>\n\n<pre><code class=\"language-bash\">$ npm start\n</code></pre>\n\n<p>Go to <a href=\"http://localhost:3000/\">localhost:3000</a></p>\n\n<p><img src=\"/content/images/2015/03/npm_start.png\" alt=\"Application Running\" /></p>\n\n<p>Alright, looks like we're still up and running, that's good news.</p>\n\n<p>We've successfully laid out the foundational pieces of our <strong>Virtual Stand-up Meeting Notes</strong> application, but we have a lot more to do.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1425416153499,"created_by":1,"updated_at":1429027434567,"updated_by":1,"published_at":1425416201881,"published_by":1},{"id":25,"uuid":"d475045e-33ff-42b5-a21e-98700d429bb8","title":"Wordpress Development: Migration Checklist","slug":"wordpress-development-migration-checklist","markdown":"###### Welcome to your migration checklist ######\n\nWork through the below tasks to get your site migrated to WP Engine.\n\nKeep track of what you've completed by checking the boxes next to each task.\n\nBefore getting started, gather your login information to access the following:\n\n- Prior hosting provider\n- WordPress Admin Dashboard\n- DNS Registrar\n\n---\n\n### Setup ###\n###### Start by setting up your WP Engine SFTP credentials and your site's domain name. ######\n\n<input type=\"checkbox\"> Setup SFTP</input>\n\nIn this section, you will set up your permissions to access our server's file system via Secure File Transfer Protocol (SFTP).\n\nUsername: ?\nPassword: ?\nServer: ?\n\n<input type=\"checkbox\"> Enter your current site's domain name</input>\n\nThis section allows you to link domains to the WordPress installation. Be attentive to the www part. Check your live website to see if it uses www in front of the domain name. Most people prefer domain.com. If such is the case, add domain.com to the Primary Domain line, and then add www.domain.com to the optional Redirect line.\nYou can add URL redirects, extra domains, and domain redirects in the launch stage.\n\n---\n\n### Update ###\n###### Create a backup of your current site, update WordPress Core, plugins and themes. ######\n\n<input type=\"checkbox\"> Back up your site with your current host</input>\n\nPrior to making any changes, we strongly recommend you backup your website with your current host. This will mean you can restore your website if your updates cause problems.\n\nA backup of your website consists of the database (posts, comments, site options, etc.) and the wp-content folder (themes, plugins, and media).\n\n<input type=\"checkbox\"> Make sure you are not using disallowed plugins</input>\n\nBecause some plugins are poorly coded or incompatible with WP Engine's platform, we don't allow them on our hosted sites. You can use our WP Engine Ready plugin to verify your site's readiness for migration. This plugin will check your current version of WordPress Core, detect any disallowed plugins, and also highlight any incompatible functions that your site's themes or plugins are using.\n\nMost disallowed plugins enable caching or backup functionality. WP Engine offers both as part of our platform, so you have less to manage on your side.\n\n[Disallowed plugin list](http://wpengine.com/support/disallowed-plugins/?utm_campaign=migration_checklist&utm_source=portal&utm_medium=update)\n\n<input type=\"checkbox\"> Update plugins, themes, and WordPress Core</input>\n\nWe strongly recommend that you update WordPress Core, plugins, and themes prior to migration to ensure your site functions properly after migration. This can also prevent common migration issues associated with outdated software.\n\nNote: Updating older themes and plugins may cause issues with your site\n\n1. Go to the Updates section of WordPress Admin for your current site.\n2. Update all plugins, themes and WordPress Core.\n3. Review your site to ensure everything looks and functions properly.\n4. Troubleshoot and resolve any issues associated with the update.\n\n---\n\n### Export ###\n###### Here we'll gather your current site's files to be moved. ######\n\n<input type=\"checkbox\"> Export database from your prior hosting provider</input>\n\nThis file contains instructions for our server's database language (SQL) to create the posts, comments, and options from your old host on our host. The most common way of accessing your database file is through your host's phpMyAdmin. If you need assistance locating your database, contact your current host provider.\n\n1. Log in to your current host provider's cPanel\n2. Access phpMyAdmin\n3. Select the site database, on the left, you wish to migrate\n4. Click Export on the top navigation bar\n5. Under Export Method, select Custom\n6. Under Table(s), click Select All\n7. Under Object creation options, make sure only the following options are checked as shown below...\n8. Scroll down to the bottom of the page and click Go to save the database to your desktop as a file (.sql)\n\n![Options checked](/content/images/2015/03/db_step.png)\n\n<input type=\"checkbox\"> Download your wp-content folder</input>\n\nThe wp-content folder contains your plugins, themes, and media from your site. Depending on how big your site is, this can take a while -- sometimes up to a couple of hours. Need an SFTP client? FileZilla works on all operating systems.\n\n1. Log into your current host via their portal or FTP client.\n2. Access Export content step2\n3. Download/copy the \"wp-content\" folder to your computer's desktop. (Select zip option if available. If not, once the wp-content folder has been downloaded, make sure to zip this folder before uploading to save uploading time and avoid corruption errors.)\n\n---\n\n### Import ###\n###### Now let's import your files to WP Engine. ######\n\n<input type=\"checkbox\"> Import your database to WP Engine.</input>\n\nThis task will walk you through the steps you need to take in order to clear your current default database and seamlessly import your site's database to WP Engine. If you encounter issues importing your database, please contact Support.\n\n1. Access your new install's phpMyAdmin\n2. Click on the database on the far left titled wp_NEWBLOG\n3. Halfway down the page, click Check All to select all tables, and select Drop from the dropdown menu.\n4. Click Yes to confirm\n5. Click the Import step5 tab\n6. Click Choose File\n7. Select your database that you previously exported wp_dalelari.sql\n8. Click Go, located at the bottom of the page\n9. Once you have successfully imported your database, check your table prefixes. If they do not start with \"wp_\", please visit Changing A Table Prefix for instructions on how to make the necessary changes.\n\n![Check all and Drop](/content/images/2015/03/checkall-drop.png)\n\n![Table Prefix](/content/images/2015/03/table-prefixes.png)\n\n<input type=\"checkbox\"> Import your wp-content folder to WP Engine</input>\n\n1. Using an SFTP client, log into your new WP server. Need an SFTP client? FileZilla works on all operating systems.\n2. Upload your local copy of the \"wp-content\" zipped folder to the WP Engine server. Do not forget to zip this folder before exporting to save uploading time and avoid corruption errors.\n3. Once the transfer was completed successfully, click on the button below to open a support ticket and extract the files.\n\n```bash\nHost: sftp://dalelari.wpengine.com\nUsername: dalelari\nPassword: Same as you set up in step 1\nPort: 22\n```\n\n---\n\n","html":"<h6 id=\"welcometoyourmigrationchecklist\">Welcome to your migration checklist</h6>\n\n<p>Work through the below tasks to get your site migrated to WP Engine.</p>\n\n<p>Keep track of what you've completed by checking the boxes next to each task.</p>\n\n<p>Before getting started, gather your login information to access the following:</p>\n\n<ul>\n<li>Prior hosting provider</li>\n<li>WordPress Admin Dashboard</li>\n<li>DNS Registrar</li>\n</ul>\n\n<hr />\n\n<h3 id=\"setup\">Setup</h3>\n\n<h6 id=\"startbysettingupyourwpenginesftpcredentialsandyoursitesdomainname\">Start by setting up your WP Engine SFTP credentials and your site's domain name.</h6>\n\n<p><input type=\"checkbox\"> Setup SFTP</input></p>\n\n<p>In this section, you will set up your permissions to access our server's file system via Secure File Transfer Protocol (SFTP).</p>\n\n<p>Username: ? <br />\nPassword: ? <br />\nServer: ?</p>\n\n<p><input type=\"checkbox\"> Enter your current site's domain name</input></p>\n\n<p>This section allows you to link domains to the WordPress installation. Be attentive to the www part. Check your live website to see if it uses www in front of the domain name. Most people prefer domain.com. If such is the case, add domain.com to the Primary Domain line, and then add www.domain.com to the optional Redirect line. <br />\nYou can add URL redirects, extra domains, and domain redirects in the launch stage.</p>\n\n<hr />\n\n<h3 id=\"update\">Update</h3>\n\n<h6 id=\"createabackupofyourcurrentsiteupdatewordpresscorepluginsandthemes\">Create a backup of your current site, update WordPress Core, plugins and themes.</h6>\n\n<p><input type=\"checkbox\"> Back up your site with your current host</input></p>\n\n<p>Prior to making any changes, we strongly recommend you backup your website with your current host. This will mean you can restore your website if your updates cause problems.</p>\n\n<p>A backup of your website consists of the database (posts, comments, site options, etc.) and the wp-content folder (themes, plugins, and media).</p>\n\n<p><input type=\"checkbox\"> Make sure you are not using disallowed plugins</input></p>\n\n<p>Because some plugins are poorly coded or incompatible with WP Engine's platform, we don't allow them on our hosted sites. You can use our WP Engine Ready plugin to verify your site's readiness for migration. This plugin will check your current version of WordPress Core, detect any disallowed plugins, and also highlight any incompatible functions that your site's themes or plugins are using.</p>\n\n<p>Most disallowed plugins enable caching or backup functionality. WP Engine offers both as part of our platform, so you have less to manage on your side.</p>\n\n<p><a href=\"http://wpengine.com/support/disallowed-plugins/?utm_campaign=migration_checklist&amp;utm_source=portal&amp;utm_medium=update\">Disallowed plugin list</a></p>\n\n<p><input type=\"checkbox\"> Update plugins, themes, and WordPress Core</input></p>\n\n<p>We strongly recommend that you update WordPress Core, plugins, and themes prior to migration to ensure your site functions properly after migration. This can also prevent common migration issues associated with outdated software.</p>\n\n<p>Note: Updating older themes and plugins may cause issues with your site</p>\n\n<ol>\n<li>Go to the Updates section of WordPress Admin for your current site.  </li>\n<li>Update all plugins, themes and WordPress Core.  </li>\n<li>Review your site to ensure everything looks and functions properly.  </li>\n<li>Troubleshoot and resolve any issues associated with the update.</li>\n</ol>\n\n<hr />\n\n<h3 id=\"export\">Export</h3>\n\n<h6 id=\"herewellgatheryourcurrentsitesfilestobemoved\">Here we'll gather your current site's files to be moved.</h6>\n\n<p><input type=\"checkbox\"> Export database from your prior hosting provider</input></p>\n\n<p>This file contains instructions for our server's database language (SQL) to create the posts, comments, and options from your old host on our host. The most common way of accessing your database file is through your host's phpMyAdmin. If you need assistance locating your database, contact your current host provider.</p>\n\n<ol>\n<li>Log in to your current host provider's cPanel  </li>\n<li>Access phpMyAdmin  </li>\n<li>Select the site database, on the left, you wish to migrate  </li>\n<li>Click Export on the top navigation bar  </li>\n<li>Under Export Method, select Custom  </li>\n<li>Under Table(s), click Select All  </li>\n<li>Under Object creation options, make sure only the following options are checked as shown below...  </li>\n<li>Scroll down to the bottom of the page and click Go to save the database to your desktop as a file (.sql)</li>\n</ol>\n\n<p><img src=\"/content/images/2015/03/db_step.png\" alt=\"Options checked\" /></p>\n\n<p><input type=\"checkbox\"> Download your wp-content folder</input></p>\n\n<p>The wp-content folder contains your plugins, themes, and media from your site. Depending on how big your site is, this can take a while -- sometimes up to a couple of hours. Need an SFTP client? FileZilla works on all operating systems.</p>\n\n<ol>\n<li>Log into your current host via their portal or FTP client.  </li>\n<li>Access Export content step2  </li>\n<li>Download/copy the \"wp-content\" folder to your computer's desktop. (Select zip option if available. If not, once the wp-content folder has been downloaded, make sure to zip this folder before uploading to save uploading time and avoid corruption errors.)</li>\n</ol>\n\n<hr />\n\n<h3 id=\"import\">Import</h3>\n\n<h6 id=\"nowletsimportyourfilestowpengine\">Now let's import your files to WP Engine.</h6>\n\n<p><input type=\"checkbox\"> Import your database to WP Engine.</input></p>\n\n<p>This task will walk you through the steps you need to take in order to clear your current default database and seamlessly import your site's database to WP Engine. If you encounter issues importing your database, please contact Support.</p>\n\n<ol>\n<li>Access your new install's phpMyAdmin  </li>\n<li>Click on the database on the far left titled wp_NEWBLOG  </li>\n<li>Halfway down the page, click Check All to select all tables, and select Drop from the dropdown menu.  </li>\n<li>Click Yes to confirm  </li>\n<li>Click the Import step5 tab  </li>\n<li>Click Choose File  </li>\n<li>Select your database that you previously exported wp_dalelari.sql  </li>\n<li>Click Go, located at the bottom of the page  </li>\n<li>Once you have successfully imported your database, check your table prefixes. If they do not start with \"wp_\", please visit Changing A Table Prefix for instructions on how to make the necessary changes.</li>\n</ol>\n\n<p><img src=\"/content/images/2015/03/checkall-drop.png\" alt=\"Check all and Drop\" /></p>\n\n<p><img src=\"/content/images/2015/03/table-prefixes.png\" alt=\"Table Prefix\" /></p>\n\n<p><input type=\"checkbox\"> Import your wp-content folder to WP Engine</input></p>\n\n<ol>\n<li>Using an SFTP client, log into your new WP server. Need an SFTP client? FileZilla works on all operating systems.  </li>\n<li>Upload your local copy of the \"wp-content\" zipped folder to the WP Engine server. Do not forget to zip this folder before exporting to save uploading time and avoid corruption errors.  </li>\n<li>Once the transfer was completed successfully, click on the button below to open a support ticket and extract the files.</li>\n</ol>\n\n<pre><code class=\"language-bash\">Host: sftp://dalelari.wpengine.com  \nUsername: dalelari  \nPassword: Same as you set up in step 1  \nPort: 22  \n</code></pre>\n\n<hr />","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1425497682293,"created_by":1,"updated_at":1427207473741,"updated_by":1,"published_at":1425498265474,"published_by":1},{"id":26,"uuid":"6d42f7f9-e688-4f0f-83f4-c2f25aae8c49","title":"Node.js: Creating Demo APIs with json-server","slug":"node-js-creating-demo-apis-with-json-server","markdown":"###### Create the folder for the new project. ######\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ mkdir demo-server\n$ cd demo-server\n$ git init\n```\n\n###### Install JSON Server. ######\n\nI'm going to use npm to install globally JSON's server. I could use this anywhere in my system, but I'm just going to use it in this current directory. Also, I'm going to create a file called 'db.json'.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ npm install -g json-server\n$ touch db.json\n$ vim db.json\n```\nInside 'db.json' I will describe it as an object with an array of people. It's simply going to be ID zero and name John.\n\n<span class=\"filename\">db.json</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">{\n  \"people\" : [\n    {\n      \"id\": 0,\n      \"name\": \"John\"\n    }\n  ]\n}</code></pre>\n\nWith this JSON file I can go ahead and type as shown below and this will launch JSON server.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ json-server db.json\n```\n\nSo if you **[http://localhost:3000/](http://localhost:3000)** you can see it gives you a nice little page here saying you can load people.\n\n![Browser](/content/images/2015/03/browser.png)\n\nIt gives me the array with the single person.\n\nOR\n\nYou can just launch the DB link which will give you the entire JSON database.\n\n###### RESTful API: GET Request ######\n\nI'm going to use a Chrome app called **Postman**.\n\nThis REST client allows me to put in the URL I want to use which is **[http://localhost:3000](http://localhost:3000)** and the path I want to use, which is **people**.\n\n**[http://localhost:3000/people](http://localhost:3000/people)**\n\nI'll go ahead and just make a **GET** request of this which will return just what we saw before.\n\n![GET Request](/content/images/2015/03/Postman1.png)\n\n###### RESTful API: POST Request ######\n\nIf I want to **POST** to people, I'll say, \"POST, make a new request,\" which I'm going to set to a Header to '**Content-type**' with Value '**application/json**' with a raw text of '**{\"name\": \"Henry\"}**'.\n\n![POST Request](/content/images/2015/03/Postman2.png)\n\nThen when I hit run you'll see it will post Henry.\n\nI can post another one, so it will be number two. Once I get this again and hit run, you can see I get John, Henry, Henry since I ran post twice.\n\nNow you can see this last guy has the same name, so let's go ahead and update him.\n\n###### RESTful API: PUT Request ######\n\nWe'll go to the path of two here, so slash two.\n\n![Path 2](/content/images/2015/03/Postman3.png)\n\nWe'll say **PUT**, and then in my request we'll change the name to Frank. We'll run this. \n\n![PUT Request](/content/images/2015/03/Postman4-1.png)\n\nIf I go ahead and I get the entire array of people, you can see now I have John, Henry, and Frank.\n\n![Entire Array of People](/content/images/2015/03/Postman5.png)\n\nWe really don't have that much data to work with, so let's go ahead and fake out a whole bunch of data to play around with.\n\n###### Taking a snapshot ######\n\nAt this point if I were to shut down my JSON server it would actually lose all of the changes I've made because it's just keeping it in memory.\n\nIf you type **'S'** and hit enter, it saves a snapshot that shows all of the changes I made. Then it backs up my previous file named this.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ ls | grep '^db'\ndb-1426368902918.json\ndb.json\n```\n\nWe now have:\n\n- **db.json** as the newest snapshot\n- **db-123456789.json** as the original copy from the start.\n\n###### Faking data ######\n\nNow we'll create a JavaScript file which we'll just call '**generate.js**'.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ touch generate.js\n$ vim generate.js\n```\nThis is going require us to **export a function which returns some sort of object**.\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">module.exports = function () {\n  return {}; // Object\n}</code></pre>\n\nWhatever object we get back is going to be used as that JSON data.\n\nThe tools I want to use for this, I'm going to go ahead and say, \"**npm install Faker and Lo-Dash**\".\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ npm install faker lodash\n```\n\nThis will help me easily generate this data that I want to generate.\n\n<span class=\"filename\">generate.js</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">module.exports = function(){\n  var faker = require(\"faker\");\n  var _ = require(\"lodash\");\n  return {\n    people: _.times(100, function (n) {\n      return {\n        id: n,\n        name: faker.name.findName(),\n        avatar: faker.internet.avatar()\n      }\n    })\n  }\n}</code></pre>\n\n**[2]** required **faker**\n\n**[3]** required **lodash**\n\n**[4]** going to **return** an object\n\n**[5]** for the people we're going to use lo-dash's **times 100**. This argument here is going to be the index as it loops through 100 times and produce an array of objects.\n\n**[7]** return an **ID** of **n**\n\n**[8]** return a random name with **faker.name.findname()**\n\n**[8]** return a random profile picture with **faker.internet.avatar()**\n\nMore details on faker.js at **[http://marak.com/faker.js/](http://marak.com/faker.js/)**.\n\nNow all I have to do is say, \"**json-server**\" and then target my '**generate.js**' script.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ json-server generate.js\n```\n\n###### Seeing new data ######\n\nIf I open my RESTful Web Services and I run a get request, you can see it returns all of this data, a hundred different people.\n\n![Fake Data](/content/images/2015/03/Postman5-1.png)\n\nAll of this data I could loop through, query, post, update, delete, all that sort of stuff.\n\nYou can even, like I said, query. If I say, \"**[http://localhost:3000/people?q=Sven](http://localhost:3000/people?q=Sven)**\" hit enter.\n\n![Querying](/content/images/2015/03/Postman6.png)\n\nIt's going to return everyone named Sven, which was that second guy that I noted.\n\n> You'll have a ton of data to work with for any demo you want to build.","html":"<h6 id=\"createthefolderforthenewproject\">Create the folder for the new project.</h6>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ mkdir demo-server\n$ cd demo-server\n$ git init\n</code></pre>\n\n<h6 id=\"installjsonserver\">Install JSON Server.</h6>\n\n<p>I'm going to use npm to install globally JSON's server. I could use this anywhere in my system, but I'm just going to use it in this current directory. Also, I'm going to create a file called 'db.json'.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ npm install -g json-server\n$ touch db.json\n$ vim db.json\n</code></pre>\n\n<p>Inside 'db.json' I will describe it as an object with an array of people. It's simply going to be ID zero and name John.</p>\n\n<p><span class=\"filename\">db.json</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">{  \n  \"people\" : [\n    {\n      \"id\": 0,\n      \"name\": \"John\"\n    }\n  ]\n}</code></pre>\n\n<p>With this JSON file I can go ahead and type as shown below and this will launch JSON server.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ json-server db.json\n</code></pre>\n\n<p>So if you <strong><a href=\"http://localhost:3000\">http://localhost:3000/</a></strong> you can see it gives you a nice little page here saying you can load people.</p>\n\n<p><img src=\"/content/images/2015/03/browser.png\" alt=\"Browser\" /></p>\n\n<p>It gives me the array with the single person.</p>\n\n<p>OR</p>\n\n<p>You can just launch the DB link which will give you the entire JSON database.</p>\n\n<h6 id=\"restfulapigetrequest\">RESTful API: GET Request</h6>\n\n<p>I'm going to use a Chrome app called <strong>Postman</strong>.</p>\n\n<p>This REST client allows me to put in the URL I want to use which is <strong><a href=\"http://localhost:3000\">http://localhost:3000</a></strong> and the path I want to use, which is <strong>people</strong>.</p>\n\n<p><strong><a href=\"http://localhost:3000/people\">http://localhost:3000/people</a></strong></p>\n\n<p>I'll go ahead and just make a <strong>GET</strong> request of this which will return just what we saw before.</p>\n\n<p><img src=\"/content/images/2015/03/Postman1.png\" alt=\"GET Request\" /></p>\n\n<h6 id=\"restfulapipostrequest\">RESTful API: POST Request</h6>\n\n<p>If I want to <strong>POST</strong> to people, I'll say, \"POST, make a new request,\" which I'm going to set to a Header to '<strong>Content-type</strong>' with Value '<strong>application/json</strong>' with a raw text of '<strong>{\"name\": \"Henry\"}</strong>'.</p>\n\n<p><img src=\"/content/images/2015/03/Postman2.png\" alt=\"POST Request\" /></p>\n\n<p>Then when I hit run you'll see it will post Henry.</p>\n\n<p>I can post another one, so it will be number two. Once I get this again and hit run, you can see I get John, Henry, Henry since I ran post twice.</p>\n\n<p>Now you can see this last guy has the same name, so let's go ahead and update him.</p>\n\n<h6 id=\"restfulapiputrequest\">RESTful API: PUT Request</h6>\n\n<p>We'll go to the path of two here, so slash two.</p>\n\n<p><img src=\"/content/images/2015/03/Postman3.png\" alt=\"Path 2\" /></p>\n\n<p>We'll say <strong>PUT</strong>, and then in my request we'll change the name to Frank. We'll run this. </p>\n\n<p><img src=\"/content/images/2015/03/Postman4-1.png\" alt=\"PUT Request\" /></p>\n\n<p>If I go ahead and I get the entire array of people, you can see now I have John, Henry, and Frank.</p>\n\n<p><img src=\"/content/images/2015/03/Postman5.png\" alt=\"Entire Array of People\" /></p>\n\n<p>We really don't have that much data to work with, so let's go ahead and fake out a whole bunch of data to play around with.</p>\n\n<h6 id=\"takingasnapshot\">Taking a snapshot</h6>\n\n<p>At this point if I were to shut down my JSON server it would actually lose all of the changes I've made because it's just keeping it in memory.</p>\n\n<p>If you type <strong>'S'</strong> and hit enter, it saves a snapshot that shows all of the changes I made. Then it backs up my previous file named this.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ ls | grep '^db'\ndb-1426368902918.json  \ndb.json  \n</code></pre>\n\n<p>We now have:</p>\n\n<ul>\n<li><strong>db.json</strong> as the newest snapshot</li>\n<li><strong>db-123456789.json</strong> as the original copy from the start.</li>\n</ul>\n\n<h6 id=\"fakingdata\">Faking data</h6>\n\n<p>Now we'll create a JavaScript file which we'll just call '<strong>generate.js</strong>'.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ touch generate.js\n$ vim generate.js\n</code></pre>\n\n<p>This is going require us to <strong>export a function which returns some sort of object</strong>.</p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">module.exports = function () {  \n  return {}; // Object\n}</code></pre>\n\n<p>Whatever object we get back is going to be used as that JSON data.</p>\n\n<p>The tools I want to use for this, I'm going to go ahead and say, \"<strong>npm install Faker and Lo-Dash</strong>\".</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ npm install faker lodash\n</code></pre>\n\n<p>This will help me easily generate this data that I want to generate.</p>\n\n<p><span class=\"filename\">generate.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">module.exports = function(){  \n  var faker = require(\"faker\");\n  var _ = require(\"lodash\");\n  return {\n    people: _.times(100, function (n) {\n      return {\n        id: n,\n        name: faker.name.findName(),\n        avatar: faker.internet.avatar()\n      }\n    })\n  }\n}</code></pre>\n\n<p><strong>[2]</strong> required <strong>faker</strong></p>\n\n<p><strong>[3]</strong> required <strong>lodash</strong></p>\n\n<p><strong>[4]</strong> going to <strong>return</strong> an object</p>\n\n<p><strong>[5]</strong> for the people we're going to use lo-dash's <strong>times 100</strong>. This argument here is going to be the index as it loops through 100 times and produce an array of objects.</p>\n\n<p><strong>[7]</strong> return an <strong>ID</strong> of <strong>n</strong></p>\n\n<p><strong>[8]</strong> return a random name with <strong>faker.name.findname()</strong></p>\n\n<p><strong>[8]</strong> return a random profile picture with <strong>faker.internet.avatar()</strong></p>\n\n<p>More details on faker.js at <strong><a href=\"http://marak.com/faker.js/\">http://marak.com/faker.js/</a></strong>.</p>\n\n<p>Now all I have to do is say, \"<strong>json-server</strong>\" and then target my '<strong>generate.js</strong>' script.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ json-server generate.js\n</code></pre>\n\n<h6 id=\"seeingnewdata\">Seeing new data</h6>\n\n<p>If I open my RESTful Web Services and I run a get request, you can see it returns all of this data, a hundred different people.</p>\n\n<p><img src=\"/content/images/2015/03/Postman5-1.png\" alt=\"Fake Data\" /></p>\n\n<p>All of this data I could loop through, query, post, update, delete, all that sort of stuff.</p>\n\n<p>You can even, like I said, query. If I say, \"<strong><a href=\"http://localhost:3000/people?q=Sven\">http://localhost:3000/people?q=Sven</a></strong>\" hit enter.</p>\n\n<p><img src=\"/content/images/2015/03/Postman6.png\" alt=\"Querying\" /></p>\n\n<p>It's going to return everyone named Sven, which was that second guy that I noted.</p>\n\n<blockquote>\n  <p>You'll have a ton of data to work with for any demo you want to build.</p>\n</blockquote>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1426093549127,"created_by":1,"updated_at":1426374188423,"updated_by":1,"published_at":1426093770442,"published_by":1},{"id":27,"uuid":"11979b69-c7de-4c5d-a29c-4b49ceafbc5a","title":"Node.js: What are CommonJS Modules?","slug":"node-js-what-are-commonjs-modules","markdown":"###### Managing multiple source files ######\n\nWeb development has undergone some pretty radical changes over the last several years, not the least of which was how you manage multiple source files when you're doing frame development with JavaScript.\n\n###### Script Tag Soup ######\n\nWe started out years ago and had tag soup where we had lots and lots of script tags. They all had to be kept in the right order. It was really hard to debug if a dependency was loaded out of order.\n\n![Tag Soup](/content/images/2015/03/tag-soup.png)\n\n###### Node.js: CommonJS module format ######\n\nWhat we have in this module format is a much cleaner system with basically no mental overhead and no boiler plate.\n\n> You simply say, \"I need this other file with this name (./dep).\n\n> This is what I want to call the variable (dep) that its value is going to be put into.\"\n\n<span class=\"filename\">main.js</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">var dep = require('./dep');\n\nconsole.log(dep.foo, dep.bar);</code></pre>\n\n\n> Then in that file you just explicitly say, \"I want to expose a property named 'foo'.\n\n> I want to expose a property named 'bar'.\"\n\n<span class=\"filename\">dep.js</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">exports.foo = 'foo';\nexports.bar = 'bar';</code></pre>\n\nOr alternatively you could just expose a single function.\n\n<span class=\"filename\">dep.js</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">module.exports = function () {\n  // do stuff\n}</code></pre>\n\nIt's extremely straightforward, what your module is exposing and what your module is getting back, how it's being assigned.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ node main.js\nfoo bar\n```\n\n###### CommonJS Basics Introduction ######\n\nIn the CommonJS module format, the way that you expose a value to other files that want to reference your file is by using the **module.exports** object.\n\nWe could expose a function here that we'll just have it return the same string.\n\n<span class=\"filename\">dep.js</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">module.exports = function () {\n  return \"I am a dependency\";\n}</code></pre>\n\nIf we then go back to main.js, we are now going to be getting that function reference back in this variable.\n\n<span class=\"filename\">main.js</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">var dep = require('./dep');\n\nconsole.log(dep());</code></pre>\n\nWe're actually going to have to call that function if we want to get the same output.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ node main.js\nfoo bar\n```\n\nThis is the main way that you're going to see things exposed from CommonJS modules. Generally, it's going to be a function.\n\nIn future videos, we'll look at how you can use the CommonJS module format for frontend development using a tool called **Browserify**.\n\n<a class=\"prev-article\" href=\"/\" style=\"width: 50%;\">Home</a><a class=\"next-article\" href=\"/node-js-creating-demo-apis-with-json-server/\" style=\"float: right;width: 50%;text-align: right;\">Creating Demo API's with json-server</a>","html":"<h6 id=\"managingmultiplesourcefiles\">Managing multiple source files</h6>\n\n<p>Web development has undergone some pretty radical changes over the last several years, not the least of which was how you manage multiple source files when you're doing frame development with JavaScript.</p>\n\n<h6 id=\"scripttagsoup\">Script Tag Soup</h6>\n\n<p>We started out years ago and had tag soup where we had lots and lots of script tags. They all had to be kept in the right order. It was really hard to debug if a dependency was loaded out of order.</p>\n\n<p><img src=\"/content/images/2015/03/tag-soup.png\" alt=\"Tag Soup\" /></p>\n\n<h6 id=\"nodejscommonjsmoduleformat\">Node.js: CommonJS module format</h6>\n\n<p>What we have in this module format is a much cleaner system with basically no mental overhead and no boiler plate.</p>\n\n<blockquote>\n  <p>You simply say, \"I need this other file with this name (./dep).</p>\n  \n  <p>This is what I want to call the variable (dep) that its value is going to be put into.\"</p>\n</blockquote>\n\n<p><span class=\"filename\">main.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">var dep = require('./dep');\n\nconsole.log(dep.foo, dep.bar);</code></pre>\n\n<blockquote>\n  <p>Then in that file you just explicitly say, \"I want to expose a property named 'foo'.</p>\n  \n  <p>I want to expose a property named 'bar'.\"</p>\n</blockquote>\n\n<p><span class=\"filename\">dep.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">exports.foo = 'foo';  \nexports.bar = 'bar';</code></pre>\n\n<p>Or alternatively you could just expose a single function.</p>\n\n<p><span class=\"filename\">dep.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">module.exports = function () {  \n  // do stuff\n}</code></pre>\n\n<p>It's extremely straightforward, what your module is exposing and what your module is getting back, how it's being assigned.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ node main.js\nfoo bar  \n</code></pre>\n\n<h6 id=\"commonjsbasicsintroduction\">CommonJS Basics Introduction</h6>\n\n<p>In the CommonJS module format, the way that you expose a value to other files that want to reference your file is by using the <strong>module.exports</strong> object.</p>\n\n<p>We could expose a function here that we'll just have it return the same string.</p>\n\n<p><span class=\"filename\">dep.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">module.exports = function () {  \n  return \"I am a dependency\";\n}</code></pre>\n\n<p>If we then go back to main.js, we are now going to be getting that function reference back in this variable.</p>\n\n<p><span class=\"filename\">main.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">var dep = require('./dep');\n\nconsole.log(dep());</code></pre>\n\n<p>We're actually going to have to call that function if we want to get the same output.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ node main.js\nfoo bar  \n</code></pre>\n\n<p>This is the main way that you're going to see things exposed from CommonJS modules. Generally, it's going to be a function.</p>\n\n<p>In future videos, we'll look at how you can use the CommonJS module format for frontend development using a tool called <strong>Browserify</strong>.</p>\n\n<p><a class=\"prev-article\" href=\"/\" style=\"width: 50%;\">Home</a><a class=\"next-article\" href=\"/node-js-creating-demo-apis-with-json-server/\" style=\"float: right;width: 50%;text-align: right;\">Creating Demo API's with json-server</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1426191794102,"created_by":1,"updated_at":1426470213751,"updated_by":1,"published_at":1426217032456,"published_by":1},{"id":28,"uuid":"31e06149-304e-46b2-8dec-34faa4559eb1","title":"Node.js: NPM","slug":"node-js-npm","markdown":"## $ npm init ##\n\nWhen you're going to work with **Node.js** or **Browserify**, the easiest way to get started and prime your working directory is to use the **npm init** command.\n\nIf we type \"**npm init**\" we're going to get a series of questions here.\n\n<span class=\"filename\">Terminal</span>\n<pre class=\"line-numbers\"><code class=\"language-bash\">$ npm init\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sane defaults.\n\nSee `npm help json` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install <pkg> --save` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\nname: (npm-init) \nversion: (1.0.0) \ndescription: \nentry point: (index.js) \ntest command: \ngit repository: \nkeywords: \nauthor: \nlicense: (ISC) \nAbout to write to /Users/bit/Documents/pixbit/github/edwinestrada/npm-init/package.json:\n\n{\n  \"name\": \"npm-init\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n\n\nIs this ok? (yes)</code></pre>\n\n**[12]** It asks for the name. It's going to use the directory name by default.\n\n**[13]** It asks for a version. We usually start that off at zero.\n\n**[14]** Description. You can provide a description of your module here. I usually leave it blank when I'm getting started.\n\n**[15]** The entry point -- what will be the main file used for this module once it's done.\n\n**[16]** A test command to use for running unit tests.\n\n**[17]** Git repository. If I had set this up with a Git url already, it would prepopulate that and know where my Git repository is located.\n\n**[18]** You can provide keywords to indicate the sorts of things that your package does.\n\n**[19]** You can provide an author\n\n**[20]** License ISC is basically a simplified version of MIT. If you want to change that to MIT or Apache or something, you can type in there.\n\n**[23-33]** Then you get a preview of what this file is going to look like.\n\n**[36]** You can say yes, this is OK. It is going to then generate the package JSON that you have just instructed it to use.\n\n> We've got a basic starting point **package.json** file to manage our dependencies.\n\n---\n\n## $ npm install ##\n\n> Now that we have our **package.json** established, we can start actually installing some dependencies that we're going to use for our project.\n\nThe first thing we're going to install is '**Underscore**', so I'm just going to say, \"**npm install -S underscore**\".\n\n<span class=\"filename\">Terminal</span>\n<pre class=\"line-numbers\"><code class=\"language-bash\">$ npm install -S underscore\n$ cat package.json \n{\n  \"name\": \"npm-init\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"underscore\": \"^1.8.2\"\n  }\n}</code></pre>\n\n**[14]** And what the '**-S**' is going to do is its going to make sure that dependency that we have just installed is now listed in this **package.json** file.\n\nWhat that means is that when somebody else downloads my project, they can simply run '**npm install**' without any arguments and using the **package.json dependencies** listed, and **NPM** will know exactly what to install.\n\nNow that we've run this command, you can see if we open the node modules folder here, we've got **Underscore** installed and it's right there for us.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ ls node_modules/\nunderscore\n```\n\nOne other way to do things and sort of another tip is you can use simply '**npm i**' to install.\n\nIf you use '**-D**', the dependencies are going to get installed to the dev dependencies part of your **package.json**.\n\nThis time we're going to install Mocha.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ npm i -D mocha\n$ ls node_modules/\nmocha\tunderscore\n$ cat package.json \n{\n  \"name\": \"npm-init\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"underscore\": \"^1.8.2\"\n  },\n  \"devDependencies\": {\n    \"mocha\": \"^2.2.1\"\n  }\n}\n```\n\nSo if we now look at this, we've got **Underscore in our dependencies** and **Mocha is in our dev dependencies**.\n\nEssentially what this does is things like test libraries - like Mocha or anything else - that are only going to be used if somebody is working on your module.\n\nIf we actually go ahead and delete our node modules folder, you can pretend you are a different developer now. We have downloaded this project and just based on this the contents of this **packaged.json**, we can simply run '**npm i**'.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ rm -rf node_modules/\n$ npm i\nnpm WARN package.json npm-init@1.0.0 No description\nnpm WARN package.json npm-init@1.0.0 No repository field.\nnpm WARN package.json npm-init@1.0.0 No README data\nunderscore@1.8.2 node_modules/underscore\n\nmocha@2.2.1 node_modules/mocha\n├── escape-string-regexp@1.0.2\n├── supports-color@1.2.1\n├── diff@1.0.8\n├── growl@1.8.1\n├── commander@2.3.0\n├── mkdirp@0.5.0 (minimist@0.0.8)\n├── jade@0.26.3 (mkdirp@0.3.0, commander@0.6.1)\n├── debug@2.0.0 (ms@0.6.2)\n└── glob@3.2.3 (inherits@2.0.1, graceful-fs@2.0.3, minimatch@0.2.14)\n```\n\nnpm is going to look at that **packaged.json** file, see that we depend both on **Underscore** and **Mocha** and then go and install both of those dependencies into our **node_modules** folder.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ ls node_modules/\nmocha\t\tunderscore\n```\n\n---\n\n## CLI node modules ##\n\nSome node modules provide a **command line utility** that can be used from the **shell**.\n\nMocha is one of the things that does that.\n\nThe way that it does that is in Mocha's **package.json** it lists, in this case, two files. Generally there's just going to be one. In this .bin identifier it lists out the files that it would like for MPM to make available from the command line.\n\n![](/content/images/2015/03/npm-mocha-bin.png)\n\nWhat **NPM** does in response is it creates this .bin folder within your node modules folder. It's regularly hidden from view.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ ls node_modules/mocha/bin/\n_mocha\tmocha\n```\n\nIt then creates shortcuts to those files that were specified by Mocha.\n\nWhat you can then do to run that directly from the shell is to simply use that path to the local node modules folder and then .bin and then the name of the file.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ ./node_modules/.bin/mocha --version\n2.2.1\n```\n\nIn this case we're just going to ask for the version. You can see there that the locally installed version of Mocha is 2.2.1.\n\n> Now, a lot of tutorials and instructions that you'll see recommend to install things globally simply so that you can run them from the command line but that's actually entirely unnecessary.\n\n1. You can use the method that we just did to access the local path.\n- You can use the scripts fields of your package.json which we'll cover later\n- Or the even easier way is to simply add that local path that we just used to your path environment variable\n\nBut if you were to add the ./node_modules./bin to your local path you can then simply use this file directly.\n\nI can just say **mocha --version** and it's going to be that locally installed version.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ export PATH=\"$PATH:./node_modules/.bin\"\n$ mocha --version\n2.2.1\n```\n\nI can even say **which mocha** and it will tell me that I'm point at that locally installed version.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ which mocha\n./node_modules/.bin/mocha\n```\n\n## Configuring npm package.json scripts ##\n\nWhen **npm** initialized our **package.json** file for us it created a '**scripts**' field and within it entered a test entry which right now is just going to echo out an error message.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ cat package.json \n{\n  \"name\": \"npm-init\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"underscore\": \"^1.8.2\"\n  },\n  \"devDependencies\": {\n    \"mocha\": \"^2.2.1\"\n  }\n}\n```\n\nThe scripts field is extremely useful and a recommended way for you to provide workflow scripts for your module and for people that are using it.\n\nRight now, if we were just to say, **npm test**, it's going to spit out that error message that we see defined here.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ npm test\n\n> npm-init@1.0.0 test /Users/bit/Documents/pixbit/github/edwinestrada/npm-init\n> echo \"Error: no test specified\" && exit 1\n\nError: no test specified\nnpm ERR! Test failed.  See above for more details.\nnpm ERR! not ok code 0\n```\n\nBut making sure that your module's test can be run with **npm test** is a big part of being a good module author.\n\n###### Setting up $npm test ######\n\nTo demonstrate this, I've just defined the functionality of our module to just be a simple function that will convert a string to upper case.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ vim index.js\n```\n\n<span class=\"filename\">index.js</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">module.exports = function (str) {\n    return str.toUpperCase();\n}</code></pre>\n\nI've written a simple mocha test:\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ npm i -D chai\n$ vim test.js\n```\n\n<span class=\"filename\">test.js</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">var up = require('./'),\n    expect = require('chai').expect;\n\ndescribe('my file', function () {\n    it('should convert strings to upper case', function () {\n        expect(up('hello')).to.equal('HELLO');\n    });\n});</code></pre>\n\n**[1]** requires the file. This '**./**' just means that it's going to look in the current directory and default to a file named \"index\".\n\n**[6]** We just have a simple test here that just says expect **up(\"hello\")** to equal **HELLO in uppercase**.\n\nIf we just run '**mocha test.js**', we can see that that does work.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ node_modules/.bin/mocha test.js \n\n\n  my file\n    ✓ should convert strings to upper case \n\n\n  1 passing (7ms)\n```\n\nWe can see our test is passing!\n\nBut in order for somebody using your module to know that you're using Mocha, that the file is called **test.js**, that's a little bit more work than they should really have to do.\n\nWhat it's better to do, is to go in here and update this test field with that exact command. If we put that into our test field we can then come down here and say, **npm test**, and it's going to run that exact command for us so we can see that our tests are passing.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ vim package.json\n```\n\n<span class=\"filename\">package.json</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">{\n  \"name\": \"npm-init\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"node_modules/.bin/mocha test.js\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"underscore\": \"^1.8.2\"\n  },\n  \"devDependencies\": {\n    \"chai\": \"^2.1.2\",\n    \"mocha\": \"^2.2.1\"\n  }\n}</code></pre>\n\nNow somebody can install your module, run **npm test**, and they don't need to know or care about what sort of testing library you're using or how things are set up.\n\nThey know that your tests are passing.\n\nThere's also a shortcut. You can do **npm t**.\n\nTest and a few other ones are sort of special fields in the npm world. You can run them directly like we just saw with **npm test**.\n\nYou can also add custom ones here. If we wanted to add something like a check version. We'll make that run **mocha --version**.\n\nIf we then save this we can then run this custom script by doing '**npm run checkversion**'.\n\n<span class=\"filename\">package.json</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">{\n  \"name\": \"npm-init\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"node_modules/.bin/mocha test.js\",\n    \"checkVersion\": \"node_modules/.bin/mocha --version\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"underscore\": \"^1.8.2\"\n  },\n  \"devDependencies\": {\n    \"chai\": \"^2.1.2\",\n    \"mocha\": \"^2.2.1\"\n  }\n}</code></pre>\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ npm run checkVersion\n\n> npm-init@1.0.0 checkVersion /Users/bit/Documents/pixbit/github/edwinestrada/npm-init\n> mocha --version\n\n2.2.1\n```\n\n> Any time that you run a custom script you can just do it with **npm run** and the name.\n\nIt will look for that name within your scripts field.","html":"<h2 id=\"dnpminit\">$ npm init</h2>\n\n<p>When you're going to work with <strong>Node.js</strong> or <strong>Browserify</strong>, the easiest way to get started and prime your working directory is to use the <strong>npm init</strong> command.</p>\n\n<p>If we type \"<strong>npm init</strong>\" we're going to get a series of questions here.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre class=\"line-numbers\"><code class=\"language-bash\">$ npm init  \nThis utility will walk you through creating a package.json file.  \nIt only covers the most common items, and tries to guess sane defaults.\n\nSee `npm help json` for definitive documentation on these fields  \nand exactly what they do.\n\nUse `npm install <pkg> --save` afterwards to install a package and  \nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.  \nname: (npm-init)  \nversion: (1.0.0)  \ndescription:  \nentry point: (index.js)  \ntest command:  \ngit repository:  \nkeywords:  \nauthor:  \nlicense: (ISC)  \nAbout to write to /Users/bit/Documents/pixbit/github/edwinestrada/npm-init/package.json:\n\n{\n  \"name\": \"npm-init\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n\n\nIs this ok? (yes)</code></pre>\n\n<p><strong>[12]</strong> It asks for the name. It's going to use the directory name by default.</p>\n\n<p><strong>[13]</strong> It asks for a version. We usually start that off at zero.</p>\n\n<p><strong>[14]</strong> Description. You can provide a description of your module here. I usually leave it blank when I'm getting started.</p>\n\n<p><strong>[15]</strong> The entry point -- what will be the main file used for this module once it's done.</p>\n\n<p><strong>[16]</strong> A test command to use for running unit tests.</p>\n\n<p><strong>[17]</strong> Git repository. If I had set this up with a Git url already, it would prepopulate that and know where my Git repository is located.</p>\n\n<p><strong>[18]</strong> You can provide keywords to indicate the sorts of things that your package does.</p>\n\n<p><strong>[19]</strong> You can provide an author</p>\n\n<p><strong>[20]</strong> License ISC is basically a simplified version of MIT. If you want to change that to MIT or Apache or something, you can type in there.</p>\n\n<p><strong>[23-33]</strong> Then you get a preview of what this file is going to look like.</p>\n\n<p><strong>[36]</strong> You can say yes, this is OK. It is going to then generate the package JSON that you have just instructed it to use.</p>\n\n<blockquote>\n  <p>We've got a basic starting point <strong>package.json</strong> file to manage our dependencies.</p>\n</blockquote>\n\n<hr />\n\n<h2 id=\"dnpminstall\">$ npm install</h2>\n\n<blockquote>\n  <p>Now that we have our <strong>package.json</strong> established, we can start actually installing some dependencies that we're going to use for our project.</p>\n</blockquote>\n\n<p>The first thing we're going to install is '<strong>Underscore</strong>', so I'm just going to say, \"<strong>npm install -S underscore</strong>\".</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre class=\"line-numbers\"><code class=\"language-bash\">$ npm install -S underscore  \n$ cat package.json \n{\n  \"name\": \"npm-init\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"underscore\": \"^1.8.2\"\n  }\n}</code></pre>\n\n<p><strong>[14]</strong> And what the '<strong>-S</strong>' is going to do is its going to make sure that dependency that we have just installed is now listed in this <strong>package.json</strong> file.</p>\n\n<p>What that means is that when somebody else downloads my project, they can simply run '<strong>npm install</strong>' without any arguments and using the <strong>package.json dependencies</strong> listed, and <strong>NPM</strong> will know exactly what to install.</p>\n\n<p>Now that we've run this command, you can see if we open the node modules folder here, we've got <strong>Underscore</strong> installed and it's right there for us.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ ls node_modules/\nunderscore  \n</code></pre>\n\n<p>One other way to do things and sort of another tip is you can use simply '<strong>npm i</strong>' to install.</p>\n\n<p>If you use '<strong>-D</strong>', the dependencies are going to get installed to the dev dependencies part of your <strong>package.json</strong>.</p>\n\n<p>This time we're going to install Mocha.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ npm i -D mocha\n$ ls node_modules/\nmocha    underscore  \n$ cat package.json \n{\n  \"name\": \"npm-init\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"underscore\": \"^1.8.2\"\n  },\n  \"devDependencies\": {\n    \"mocha\": \"^2.2.1\"\n  }\n}\n</code></pre>\n\n<p>So if we now look at this, we've got <strong>Underscore in our dependencies</strong> and <strong>Mocha is in our dev dependencies</strong>.</p>\n\n<p>Essentially what this does is things like test libraries - like Mocha or anything else - that are only going to be used if somebody is working on your module.</p>\n\n<p>If we actually go ahead and delete our node modules folder, you can pretend you are a different developer now. We have downloaded this project and just based on this the contents of this <strong>packaged.json</strong>, we can simply run '<strong>npm i</strong>'.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ rm -rf node_modules/\n$ npm i\nnpm WARN package.json npm-init@1.0.0 No description  \nnpm WARN package.json npm-init@1.0.0 No repository field.  \nnpm WARN package.json npm-init@1.0.0 No README data  \nunderscore@1.8.2 node_modules/underscore\n\nmocha@2.2.1 node_modules/mocha  \n├── escape-string-regexp@1.0.2\n├── supports-color@1.2.1\n├── diff@1.0.8\n├── growl@1.8.1\n├── commander@2.3.0\n├── mkdirp@0.5.0 (minimist@0.0.8)\n├── jade@0.26.3 (mkdirp@0.3.0, commander@0.6.1)\n├── debug@2.0.0 (ms@0.6.2)\n└── glob@3.2.3 (inherits@2.0.1, graceful-fs@2.0.3, minimatch@0.2.14)\n</code></pre>\n\n<p>npm is going to look at that <strong>packaged.json</strong> file, see that we depend both on <strong>Underscore</strong> and <strong>Mocha</strong> and then go and install both of those dependencies into our <strong>node_modules</strong> folder.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ ls node_modules/\nmocha        underscore  \n</code></pre>\n\n<hr />\n\n<h2 id=\"clinodemodules\">CLI node modules</h2>\n\n<p>Some node modules provide a <strong>command line utility</strong> that can be used from the <strong>shell</strong>.</p>\n\n<p>Mocha is one of the things that does that.</p>\n\n<p>The way that it does that is in Mocha's <strong>package.json</strong> it lists, in this case, two files. Generally there's just going to be one. In this .bin identifier it lists out the files that it would like for MPM to make available from the command line.</p>\n\n<p><img src=\"/content/images/2015/03/npm-mocha-bin.png\" alt=\"\" /></p>\n\n<p>What <strong>NPM</strong> does in response is it creates this .bin folder within your node modules folder. It's regularly hidden from view.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ ls node_modules/mocha/bin/\n_mocha    mocha  \n</code></pre>\n\n<p>It then creates shortcuts to those files that were specified by Mocha.</p>\n\n<p>What you can then do to run that directly from the shell is to simply use that path to the local node modules folder and then .bin and then the name of the file.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ ./node_modules/.bin/mocha --version\n2.2.1  \n</code></pre>\n\n<p>In this case we're just going to ask for the version. You can see there that the locally installed version of Mocha is 2.2.1.</p>\n\n<blockquote>\n  <p>Now, a lot of tutorials and instructions that you'll see recommend to install things globally simply so that you can run them from the command line but that's actually entirely unnecessary.</p>\n</blockquote>\n\n<ol>\n<li>You can use the method that we just did to access the local path.  </li>\n<li>You can use the scripts fields of your package.json which we'll cover later</li>\n<li>Or the even easier way is to simply add that local path that we just used to your path environment variable</li>\n</ol>\n\n<p>But if you were to add the ./node_modules./bin to your local path you can then simply use this file directly.</p>\n\n<p>I can just say <strong>mocha --version</strong> and it's going to be that locally installed version.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ export PATH=\"$PATH:./node_modules/.bin\"\n$ mocha --version\n2.2.1  \n</code></pre>\n\n<p>I can even say <strong>which mocha</strong> and it will tell me that I'm point at that locally installed version.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ which mocha\n./node_modules/.bin/mocha\n</code></pre>\n\n<h2 id=\"configuringnpmpackagejsonscripts\">Configuring npm package.json scripts</h2>\n\n<p>When <strong>npm</strong> initialized our <strong>package.json</strong> file for us it created a '<strong>scripts</strong>' field and within it entered a test entry which right now is just going to echo out an error message.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ cat package.json \n{\n  \"name\": \"npm-init\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"underscore\": \"^1.8.2\"\n  },\n  \"devDependencies\": {\n    \"mocha\": \"^2.2.1\"\n  }\n}\n</code></pre>\n\n<p>The scripts field is extremely useful and a recommended way for you to provide workflow scripts for your module and for people that are using it.</p>\n\n<p>Right now, if we were just to say, <strong>npm test</strong>, it's going to spit out that error message that we see defined here.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ npm test\n\n&gt; npm-init@1.0.0 test /Users/bit/Documents/pixbit/github/edwinestrada/npm-init\n&gt; echo \"Error: no test specified\" &amp;&amp; exit 1\n\nError: no test specified  \nnpm ERR! Test failed.  See above for more details.  \nnpm ERR! not ok code 0  \n</code></pre>\n\n<p>But making sure that your module's test can be run with <strong>npm test</strong> is a big part of being a good module author.</p>\n\n<h6 id=\"settingupdnpmtest\">Setting up $npm test</h6>\n\n<p>To demonstrate this, I've just defined the functionality of our module to just be a simple function that will convert a string to upper case.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ vim index.js\n</code></pre>\n\n<p><span class=\"filename\">index.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">module.exports = function (str) {  \n    return str.toUpperCase();\n}</code></pre>\n\n<p>I've written a simple mocha test:</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ npm i -D chai\n$ vim test.js\n</code></pre>\n\n<p><span class=\"filename\">test.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">var up = require('./'),  \n    expect = require('chai').expect;\n\ndescribe('my file', function () {  \n    it('should convert strings to upper case', function () {\n        expect(up('hello')).to.equal('HELLO');\n    });\n});</code></pre>\n\n<p><strong>[1]</strong> requires the file. This '<strong>./</strong>' just means that it's going to look in the current directory and default to a file named \"index\".</p>\n\n<p><strong>[6]</strong> We just have a simple test here that just says expect <strong>up(\"hello\")</strong> to equal <strong>HELLO in uppercase</strong>.</p>\n\n<p>If we just run '<strong>mocha test.js</strong>', we can see that that does work.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ node_modules/.bin/mocha test.js \n\n\n  my file\n    ✓ should convert strings to upper case \n\n\n  1 passing (7ms)\n</code></pre>\n\n<p>We can see our test is passing!</p>\n\n<p>But in order for somebody using your module to know that you're using Mocha, that the file is called <strong>test.js</strong>, that's a little bit more work than they should really have to do.</p>\n\n<p>What it's better to do, is to go in here and update this test field with that exact command. If we put that into our test field we can then come down here and say, <strong>npm test</strong>, and it's going to run that exact command for us so we can see that our tests are passing.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ vim package.json\n</code></pre>\n\n<p><span class=\"filename\">package.json</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">{  \n  \"name\": \"npm-init\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"node_modules/.bin/mocha test.js\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"underscore\": \"^1.8.2\"\n  },\n  \"devDependencies\": {\n    \"chai\": \"^2.1.2\",\n    \"mocha\": \"^2.2.1\"\n  }\n}</code></pre>\n\n<p>Now somebody can install your module, run <strong>npm test</strong>, and they don't need to know or care about what sort of testing library you're using or how things are set up.</p>\n\n<p>They know that your tests are passing.</p>\n\n<p>There's also a shortcut. You can do <strong>npm t</strong>.</p>\n\n<p>Test and a few other ones are sort of special fields in the npm world. You can run them directly like we just saw with <strong>npm test</strong>.</p>\n\n<p>You can also add custom ones here. If we wanted to add something like a check version. We'll make that run <strong>mocha --version</strong>.</p>\n\n<p>If we then save this we can then run this custom script by doing '<strong>npm run checkversion</strong>'.</p>\n\n<p><span class=\"filename\">package.json</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">{  \n  \"name\": \"npm-init\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"node_modules/.bin/mocha test.js\",\n    \"checkVersion\": \"node_modules/.bin/mocha --version\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"underscore\": \"^1.8.2\"\n  },\n  \"devDependencies\": {\n    \"chai\": \"^2.1.2\",\n    \"mocha\": \"^2.2.1\"\n  }\n}</code></pre>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ npm run checkVersion\n\n&gt; npm-init@1.0.0 checkVersion /Users/bit/Documents/pixbit/github/edwinestrada/npm-init\n&gt; mocha --version\n\n2.2.1  \n</code></pre>\n\n<blockquote>\n  <p>Any time that you run a custom script you can just do it with <strong>npm run</strong> and the name.</p>\n</blockquote>\n\n<p>It will look for that name within your scripts field.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1426383091213,"created_by":1,"updated_at":1426516094062,"updated_by":1,"published_at":1426383192508,"published_by":1},{"id":29,"uuid":"5b0ce755-0bf4-495e-bb8f-ac4603af5667","title":"Dale Lari: A Global Soccer Project","slug":"dale-lari-a-global-soccer-project","markdown":"## Kickstarter ##\n\nhttps://www.kickstarter.com/projects/1301122510/dale-lari-a-global-soccer-project\n\n---\n\n## Post Kickstarter ##\n![](/content/images/2015/03/post-kickstarter-mom-walking-towards-buses-in-ohio.jpg)\n---\n\n## Bus Tour Week ##\n\n### Royal Lane Park, Clinton, NC ###\n![](/content/images/2015/03/post-kickstarter-on-tour-in-clinton-nc.jpg)\n\n### Hobbton 5k, Newton Grove, NC ###\n![](/content/images/2015/03/post-kickstarter-on-tour-at-hobbton-5k.jpg)\n![](/content/images/2015/03/post-kickstarter-on-tour-at-hobbton-5k-2.jpg)\n![](/content/images/2015/03/post-kickstarter-on-tour-at-hobbton-5k-balloon-release.jpg)\n\n### CASL Practices, Raleigh, NC ###\n![](/content/images/2015/03/post-kickstarter-on-tour-with-larissas-team.jpg)\n![](/content/images/2015/03/post-kickstarter-on-tour-in-raleigh-teammates-donating.jpg)\n\n### Railhawks Game, Cary, NC ###\n![](/content/images/2015/03/post-kickstarter-on-tour-at-railhawks-game-with-passback.jpg)\n\n### Next Level Academy, Cary, NC ###\n![](/content/images/2015/03/post-kickstarter-on-tour-at-nla-in-cary.jpg)\n![](/content/images/2015/03/post-kickstarter-on-tour-at-nla-in-cary-2.jpg)\n---\n\n## Shipping and Handling ##\n![](/content/images/2015/03/post-kickstarter-in-moms-garage-with-neighbors.jpg)\n![](/content/images/2015/03/post-kickstarter-in-moms-garage-with-neighbors-2.jpg)\n![](/content/images/2015/03/post-kickstarter-in-bus-night-before-trip-to-miami.jpg)\n---\n\n## 10 days of the documentary ##\n\n![](/content/images/2015/03/practice-riding-on-truck.jpg)\n\n###### Giving bus to Cachorros Futbol Club ######\n![0_entrega-banner-hung-on-side-of-shop](/content/images/2015/03/0_entrega-banner-hung-on-side-of-shop.jpg)\n![1_entrega-uncle-speaking](/content/images/2015/03/1_entrega-uncle-speaking.jpg)\n![entrega-edwin-speaking](/content/images/2015/03/entrega-edwin-speaking.jpg)\n![3_entrega-holding-up-new-uniforms](/content/images/2015/03/3_entrega-holding-up-new-uniforms.jpg)\n![4_entrega-player-receiving-packet](/content/images/2015/03/4_entrega-player-receiving-packet.jpg)\n![5_entrega-edwin-handing-coach-keys-to-bus](/content/images/2015/03/5_entrega-edwin-handing-coach-keys-to-bus.jpg)\n![6_entrega-edwin-handing-coach-keys-to-bus-2](/content/images/2015/03/6_entrega-edwin-handing-coach-keys-to-bus-2.jpg)\n![7_entrega-cachorros-with-bus-and-equipment](/content/images/2015/03/7_entrega-cachorros-with-bus-and-equipment.jpg)\n![Bus en la 14 de Septiembre](/content/images/2015/03/dale-lari-bus-large.jpg)\n![8_entrega-larissa-cleats](/content/images/2015/03/8_entrega-larissa-cleats.jpg)\n![9_entrega-a-kid-posing-in-front-of-bus-mural](/content/images/2015/03/9_entrega-a-kid-posing-in-front-of-bus-mural.jpg)\n![10_entrega-mario-seeing-himself-on-the-bus-mural](/content/images/2015/03/10_entrega-mario-seeing-himself-on-the-bus-mural.jpg)\n![11_entrega-national-newspaper-cover](/content/images/2015/03/11_entrega-national-newspaper-cover.jpg)\n\n###### Donation to FEDEFUTMA (Managua Soccer Federation) ######\n\n![](/content/images/2015/03/0_fedefutma-cachorros-holding-up-banner.jpg)\n![](/content/images/2015/03/1_fedefutma-banner-and-equipment.jpg)\n![](/content/images/2015/03/2_fedefutma-players-gathered.jpg)\n![](/content/images/2015/03/3_fedefutma-president-speaking.jpg)\n![](/content/images/2015/03/4_fedefutma-uncle-speaking.jpg)\n![](/content/images/2015/03/5_fedefutma-equipment-and-handshake-with-nicaragua-soccer-federation-president.jpg)\n![](/content/images/2015/03/6_fedefutma-saul-with-academy-kids-2.jpg)\n![](/content/images/2015/03/7_fedefutma-saul-with-academy-kids.jpg)\n\n###### Donation to Youth Talent Academy in Managua ######\n\n![0_escuela-angarita-setting-up-donations](/content/images/2015/03/0_escuela-angarita-setting-up-donations.jpg)\n![1_escuela-angarita-community-leaders-with-cachorros](/content/images/2015/03/1_escuela-angarita-community-leaders-with-cachorros.jpg)\n![2_escuela-angarita-symbolic-donation-with-academy-head](/content/images/2015/03/2_escuela-angarita-symbolic-donation-with-academy-head.jpg)\n![3_escuela-angarita-symbolic-donation-with-cachorros-coach-and-academy-coach](/content/images/2015/03/3_escuela-angarita-symbolic-donation-with-cachorros-coach-and-academy-coach.jpg)\n![/4_escuela-angarita-symbolic-donation-with-cachorros-parent-and-academy-parent](/content/images/2015/03/4_escuela-angarita-symbolic-donation-with-cachorros-parent-and-academy-parent.jpg)\n![5_escuela-angarita-cachorros-players-holding-up-banenr](/content/images/2015/03/5_escuela-angarita-cachorros-players-holding-up-banenr.jpg)\n![6_escuela-angarita-coaches-together](/content/images/2015/03/6_escuela-angarita-coaches-together.jpg)\n![7_escuela-angarita-academy-players-posing-in-front-of-bus](/content/images/2015/03/7_escuela-angarita-academy-players-posing-in-front-of-bus.jpg)\n![8_escuela-angarita-academy-players-posing-in-front-of-bus-2](/content/images/2015/03/8_escuela-angarita-academy-players-posing-in-front-of-bus-2.jpg)\n\n###### Trip to Maderas Mountain Community ######\n\n![](/content/images/2015/03/0_maderas-trip-cachorros-wearing-donated-clothes-on-bus.jpg)\n![](/content/images/2015/03/1_maderas-trip-fedefutma-academy-team-on-bus.jpg)\n![](/content/images/2015/03/2_maderas-trip-fedefutma-academy-team-girl-player-on-bus.jpg)\n![](/content/images/2015/03/3_maderas-trip-kids-listening-to-speech.jpg)\n![](/content/images/2015/03/4_maderas-trip-kids-awaiting-donation.jpg)\n![](/content/images/2015/03/5_maderas-trip-donation-event-3.jpg)\n![](/content/images/2015/03/6_maderas-trip-donation-event-2.jpg)\n![](/content/images/2015/03/7_maderas-trip-donation-event.jpg)\n![](/content/images/2015/03/8_maderas-trip-symbolic-handover-to-community-leader-3.jpg)\n![](/content/images/2015/03/9_maderas-trip-symbolic-handover-to-community-leader.jpg)\n![](/content/images/2015/03/10_maderas-trip-symbolic-handover-to-community-leader-2.jpg)\n![](/content/images/2015/03/11_maderas-trip-kids-in-line-to-receive-shoes-and-ball.jpg)\n![](/content/images/2015/03/12_maderas-trip-local-team-wearing-new-donated-equipment-and-clothes.jpg)\n![](/content/images/2015/03/13_maderas-trip-fenifut-team-with-donated-shoes-socks-and-balls-ready-to-play.jpg)\n![](/content/images/2015/03/14_maderas-trip-cachorros-playing-against-fenifut-team.jpg)","html":"<h2 id=\"kickstarter\">Kickstarter</h2>\n\n<p><a href=\"https://www.kickstarter.com/projects/1301122510/dale-lari-a-global-soccer-project\">https://www.kickstarter.com/projects/1301122510/dale-lari-a-global-soccer-project</a></p>\n\n<hr />\n\n<h2 id=\"postkickstarter\">Post Kickstarter</h2>\n\n<h2 id=\"imgsrccontentimages201503postkickstartermomwalkingtowardsbusesinohiojpgalt\"><img src=\"/content/images/2015/03/post-kickstarter-mom-walking-towards-buses-in-ohio.jpg\" alt=\"\" /></h2>\n\n<h2 id=\"bustourweek\">Bus Tour Week</h2>\n\n<h3 id=\"royallaneparkclintonnc\">Royal Lane Park, Clinton, NC</h3>\n\n<p><img src=\"/content/images/2015/03/post-kickstarter-on-tour-in-clinton-nc.jpg\" alt=\"\" /></p>\n\n<h3 id=\"hobbton5knewtongrovenc\">Hobbton 5k, Newton Grove, NC</h3>\n\n<p><img src=\"/content/images/2015/03/post-kickstarter-on-tour-at-hobbton-5k.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/post-kickstarter-on-tour-at-hobbton-5k-2.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/post-kickstarter-on-tour-at-hobbton-5k-balloon-release.jpg\" alt=\"\" /></p>\n\n<h3 id=\"caslpracticesraleighnc\">CASL Practices, Raleigh, NC</h3>\n\n<p><img src=\"/content/images/2015/03/post-kickstarter-on-tour-with-larissas-team.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/post-kickstarter-on-tour-in-raleigh-teammates-donating.jpg\" alt=\"\" /></p>\n\n<h3 id=\"railhawksgamecarync\">Railhawks Game, Cary, NC</h3>\n\n<p><img src=\"/content/images/2015/03/post-kickstarter-on-tour-at-railhawks-game-with-passback.jpg\" alt=\"\" /></p>\n\n<h3 id=\"nextlevelacademycarync\">Next Level Academy, Cary, NC</h3>\n\n<p><img src=\"/content/images/2015/03/post-kickstarter-on-tour-at-nla-in-cary.jpg\" alt=\"\" /></p>\n\n<h2 id=\"imgsrccontentimages201503postkickstarterontouratnlaincary2jpgalt\"><img src=\"/content/images/2015/03/post-kickstarter-on-tour-at-nla-in-cary-2.jpg\" alt=\"\" /></h2>\n\n<h2 id=\"shippingandhandling\">Shipping and Handling</h2>\n\n<p><img src=\"/content/images/2015/03/post-kickstarter-in-moms-garage-with-neighbors.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/post-kickstarter-in-moms-garage-with-neighbors-2.jpg\" alt=\"\" /></p>\n\n<h2 id=\"imgsrccontentimages201503postkickstarterinbusnightbeforetriptomiamijpgalt\"><img src=\"/content/images/2015/03/post-kickstarter-in-bus-night-before-trip-to-miami.jpg\" alt=\"\" /></h2>\n\n<h2 id=\"10daysofthedocumentary\">10 days of the documentary</h2>\n\n<p><img src=\"/content/images/2015/03/practice-riding-on-truck.jpg\" alt=\"\" /></p>\n\n<h6 id=\"givingbustocachorrosfutbolclub\">Giving bus to Cachorros Futbol Club</h6>\n\n<p><img src=\"/content/images/2015/03/0_entrega-banner-hung-on-side-of-shop.jpg\" alt=\"0_entrega-banner-hung-on-side-of-shop\" />\n<img src=\"/content/images/2015/03/1_entrega-uncle-speaking.jpg\" alt=\"1_entrega-uncle-speaking\" />\n<img src=\"/content/images/2015/03/entrega-edwin-speaking.jpg\" alt=\"entrega-edwin-speaking\" />\n<img src=\"/content/images/2015/03/3_entrega-holding-up-new-uniforms.jpg\" alt=\"3_entrega-holding-up-new-uniforms\" />\n<img src=\"/content/images/2015/03/4_entrega-player-receiving-packet.jpg\" alt=\"4_entrega-player-receiving-packet\" />\n<img src=\"/content/images/2015/03/5_entrega-edwin-handing-coach-keys-to-bus.jpg\" alt=\"5_entrega-edwin-handing-coach-keys-to-bus\" />\n<img src=\"/content/images/2015/03/6_entrega-edwin-handing-coach-keys-to-bus-2.jpg\" alt=\"6_entrega-edwin-handing-coach-keys-to-bus-2\" />\n<img src=\"/content/images/2015/03/7_entrega-cachorros-with-bus-and-equipment.jpg\" alt=\"7_entrega-cachorros-with-bus-and-equipment\" />\n<img src=\"/content/images/2015/03/dale-lari-bus-large.jpg\" alt=\"Bus en la 14 de Septiembre\" />\n<img src=\"/content/images/2015/03/8_entrega-larissa-cleats.jpg\" alt=\"8_entrega-larissa-cleats\" />\n<img src=\"/content/images/2015/03/9_entrega-a-kid-posing-in-front-of-bus-mural.jpg\" alt=\"9_entrega-a-kid-posing-in-front-of-bus-mural\" />\n<img src=\"/content/images/2015/03/10_entrega-mario-seeing-himself-on-the-bus-mural.jpg\" alt=\"10_entrega-mario-seeing-himself-on-the-bus-mural\" />\n<img src=\"/content/images/2015/03/11_entrega-national-newspaper-cover.jpg\" alt=\"11_entrega-national-newspaper-cover\" /></p>\n\n<h6 id=\"donationtofedefutmamanaguasoccerfederation\">Donation to FEDEFUTMA (Managua Soccer Federation)</h6>\n\n<p><img src=\"/content/images/2015/03/0_fedefutma-cachorros-holding-up-banner.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/1_fedefutma-banner-and-equipment.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/2_fedefutma-players-gathered.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/3_fedefutma-president-speaking.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/4_fedefutma-uncle-speaking.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/5_fedefutma-equipment-and-handshake-with-nicaragua-soccer-federation-president.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/6_fedefutma-saul-with-academy-kids-2.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/7_fedefutma-saul-with-academy-kids.jpg\" alt=\"\" /></p>\n\n<h6 id=\"donationtoyouthtalentacademyinmanagua\">Donation to Youth Talent Academy in Managua</h6>\n\n<p><img src=\"/content/images/2015/03/0_escuela-angarita-setting-up-donations.jpg\" alt=\"0_escuela-angarita-setting-up-donations\" />\n<img src=\"/content/images/2015/03/1_escuela-angarita-community-leaders-with-cachorros.jpg\" alt=\"1_escuela-angarita-community-leaders-with-cachorros\" />\n<img src=\"/content/images/2015/03/2_escuela-angarita-symbolic-donation-with-academy-head.jpg\" alt=\"2_escuela-angarita-symbolic-donation-with-academy-head\" />\n<img src=\"/content/images/2015/03/3_escuela-angarita-symbolic-donation-with-cachorros-coach-and-academy-coach.jpg\" alt=\"3_escuela-angarita-symbolic-donation-with-cachorros-coach-and-academy-coach\" />\n<img src=\"/content/images/2015/03/4_escuela-angarita-symbolic-donation-with-cachorros-parent-and-academy-parent.jpg\" alt=\"/4_escuela-angarita-symbolic-donation-with-cachorros-parent-and-academy-parent\" />\n<img src=\"/content/images/2015/03/5_escuela-angarita-cachorros-players-holding-up-banenr.jpg\" alt=\"5_escuela-angarita-cachorros-players-holding-up-banenr\" />\n<img src=\"/content/images/2015/03/6_escuela-angarita-coaches-together.jpg\" alt=\"6_escuela-angarita-coaches-together\" />\n<img src=\"/content/images/2015/03/7_escuela-angarita-academy-players-posing-in-front-of-bus.jpg\" alt=\"7_escuela-angarita-academy-players-posing-in-front-of-bus\" />\n<img src=\"/content/images/2015/03/8_escuela-angarita-academy-players-posing-in-front-of-bus-2.jpg\" alt=\"8_escuela-angarita-academy-players-posing-in-front-of-bus-2\" /></p>\n\n<h6 id=\"triptomaderasmountaincommunity\">Trip to Maderas Mountain Community</h6>\n\n<p><img src=\"/content/images/2015/03/0_maderas-trip-cachorros-wearing-donated-clothes-on-bus.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/1_maderas-trip-fedefutma-academy-team-on-bus.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/2_maderas-trip-fedefutma-academy-team-girl-player-on-bus.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/3_maderas-trip-kids-listening-to-speech.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/4_maderas-trip-kids-awaiting-donation.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/5_maderas-trip-donation-event-3.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/6_maderas-trip-donation-event-2.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/7_maderas-trip-donation-event.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/8_maderas-trip-symbolic-handover-to-community-leader-3.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/9_maderas-trip-symbolic-handover-to-community-leader.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/10_maderas-trip-symbolic-handover-to-community-leader-2.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/11_maderas-trip-kids-in-line-to-receive-shoes-and-ball.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/12_maderas-trip-local-team-wearing-new-donated-equipment-and-clothes.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/13_maderas-trip-fenifut-team-with-donated-shoes-socks-and-balls-ready-to-play.jpg\" alt=\"\" />\n<img src=\"/content/images/2015/03/14_maderas-trip-cachorros-playing-against-fenifut-team.jpg\" alt=\"\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1426517127756,"created_by":1,"updated_at":1427478256669,"updated_by":1,"published_at":1426534987632,"published_by":1},{"id":30,"uuid":"db6e4bee-919a-40af-b6fc-411b3d0563c7","title":"Building an Angular App: Eggly Introduction","slug":"building-an-angular-app-eggly-introduction","markdown":"> In this lesson, we introduce our sample AngularJS application and discuss our objectives for this series.\n\n![Part 1: Getting Started](/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png)\n\n> We are going to learn how to build an AngularJS application from the ground up, and literally going to start with a blank JavaScript file and a completely static HTML file.\n\n[Git Repo](https://github.com/eggheadio/egghead-angularjs-from-scratch-getting-started)\n\n> Eggly, where you can essentially create, read, update and delete, in other words manage, your bookmarks.\n\n![Click and Edit](/content/images/2015/03/click_and_edit.png)\n\nWe can click and sort our bookmarks by categories.\n\n![Sort by Category](/content/images/2015/03/sort_by_category.png)\n\n> We are going to start from scratch, and we're going to build it up piece by piece.\n\n###### From Scratch ######\n\n1. After building the static html, the first thing we're going to do is bootstrap AngularJS\n- then we're going to focus on the views and the controllers\n- and add in the functionality.\n- From there we're going to start to look at sub-modules and services, and how to put those together so that your application can scale.\n- We're going to look at how to handle complex state management using UI-router\n- and from there we're going to get into some fun things, like animations and directives\n- and then even testing.\n\n> The sky is the limit.\n\nBut for the first part of this, we are going to **focus on getting started with AngularJS**, and **how to add in functionality using views and controllers**.\n\n![It's Happening](/content/images/2015/03/its-happening.gif)\n\n---\n\n<a class=\"prev-article\" href=\"https://egghead.io/series/angularjs-app-from-scratch-getting-started\" style=\"width: 50%;\">Video Series</a><a class=\"next-article\" href=\"/building-an-angular-app-bootstrapping/\" style=\"float: right;width: 50%;text-align: right;\">Bootstrapping</a>\n","html":"<blockquote>\n  <p>In this lesson, we introduce our sample AngularJS application and discuss our objectives for this series.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png\" alt=\"Part 1: Getting Started\" /></p>\n\n<blockquote>\n  <p>We are going to learn how to build an AngularJS application from the ground up, and literally going to start with a blank JavaScript file and a completely static HTML file.</p>\n</blockquote>\n\n<p><a href=\"https://github.com/eggheadio/egghead-angularjs-from-scratch-getting-started\">Git Repo</a></p>\n\n<blockquote>\n  <p>Eggly, where you can essentially create, read, update and delete, in other words manage, your bookmarks.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/click_and_edit.png\" alt=\"Click and Edit\" /></p>\n\n<p>We can click and sort our bookmarks by categories.</p>\n\n<p><img src=\"/content/images/2015/03/sort_by_category.png\" alt=\"Sort by Category\" /></p>\n\n<blockquote>\n  <p>We are going to start from scratch, and we're going to build it up piece by piece.</p>\n</blockquote>\n\n<h6 id=\"fromscratch\">From Scratch</h6>\n\n<ol>\n<li>After building the static html, the first thing we're going to do is bootstrap AngularJS  </li>\n<li>then we're going to focus on the views and the controllers</li>\n<li>and add in the functionality.</li>\n<li>From there we're going to start to look at sub-modules and services, and how to put those together so that your application can scale.</li>\n<li>We're going to look at how to handle complex state management using UI-router</li>\n<li>and from there we're going to get into some fun things, like animations and directives</li>\n<li>and then even testing.</li>\n</ol>\n\n<blockquote>\n  <p>The sky is the limit.</p>\n</blockquote>\n\n<p>But for the first part of this, we are going to <strong>focus on getting started with AngularJS</strong>, and <strong>how to add in functionality using views and controllers</strong>.</p>\n\n<p><img src=\"/content/images/2015/03/its-happening.gif\" alt=\"It's Happening\" /></p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"https://egghead.io/series/angularjs-app-from-scratch-getting-started\" style=\"width: 50%;\">Video Series</a><a class=\"next-article\" href=\"/building-an-angular-app-bootstrapping/\" style=\"float: right;width: 50%;text-align: right;\">Bootstrapping</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1426580999389,"created_by":1,"updated_at":1426800859323,"updated_by":1,"published_at":1426581038560,"published_by":1},{"id":31,"uuid":"90b74aa3-3e3f-4858-ba77-3faf6bc15d0d","title":"Building an Angular App: Bootstrapping","slug":"building-an-angular-app-bootstrapping","markdown":"> In this lesson, we learn how to take a static HTML page and tap into the power of AngularJS by bootstrapping the framework.\n\n![Part 1: Getting Started](/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png)\n\n> In this video I'm going to show you how to take a static HTML page and bootstrap it into a working AngularJS application\n\n###### AngularJS ######\n\nThe first thing that we need to do to get AngularJS working in the page is to add in the AngularJS JavaScript file.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ bower i -S angular foundation lodash\n```\n\nFrom there, we will hop into the code into the code.\n\n###### Include Files ######\n\n> git@github.com:eggheadio/egghead-angularjs-from-scratch-getting-started.git\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ mkdir building-an-angular-app\n$ cd building-an-angular-app\n$ git init\n$ git remote add origin git@github.com:eggheadio/egghead-angularjs-from-scratch-getting-started.git\n$ git fetch --all\n$ git checkout origin master\n$ ls\n\tREADME.md\t\t\tapp\t\t\t\t\t\tassets\n\tdata\t\t\t\tindex.complete.html\t\tindex.finish.html\n\tindex.start.html\tvendor\n$ vim index.start.html\n```\n\nI'm going to duplicate this last **script** tag here and then paste in the reference to the AngularJS JavaScript file.\n\n![Adding Angular](/content/images/2015/03/Adding_Angular-1.png)\n\nWhat we have here is:\n\n- jQuery\n- bootstrap or foundation\n- lo-dash, which we're going to use for some collection manipulation and for the videos\n- **minified version of AngularJS**\n\n###### ng-init ######\n\nTo get started, for the sake of illustration I am going to initialize a variable using **ng-init**.\n\n1. I'm going to say, **ng-init=\"hello='world'\"**.\n- From here, I'm going to create a big **H1** tag.\n- Using double curly brace syntax, I'm going to put **{{hello}}** in there.\n\n![Hello World](/content/images/2015/03/hello_world.png)\n\nAnd so, when I refresh the page, and this to prove or to **show that AngularJS is not working**, and then we will hook it up so it is working. Refresh and then you get this big **{{hello}}**. Nothing is happening at the moment.\n\n![not working](/content/images/2015/03/not_working.png)\n\nTo actually get this to render, we will go up to the HTML tag and we will add in the **ng-app** attribute.\n\nHow this works is:\n\n1. when the page loads\n- the AngularJS JavaScript file is loaded and scans the DOM \n- looks for **ng-app** attribute on any of the elements\n- initializes an AngularJS application to that element and its children\n\n![ng-app in html tag](/content/images/2015/03/ng-app.png)\n\nIn this case, the app is initialized into the HTML tag and everything underneath it.\n\nLet's go back and refresh the page. You can see now that **{{hello}}** is being evaluated to **World**.\n\n![working AngularJS app](/content/images/2015/03/working.png)\n\nNow we have a working AngularJS application.\n\n###### Input Field ######\n\nLet's go ahead and add in an input field with **type=\"text\"**, and we're going to bind this to the **hello** object with **ng-model=\"hello\"**.\n\n![ng-model](/content/images/2015/03/ng-model.png)\n\nRefresh the page and from here, and when I actually start typing because the AngularJS application has been initialized when I change it in one place, it changes it in the other place.\n\nThis is the beauty and the power of AngularJS is that you're now basically **extracting the model out from the DOM**.\n\n![extract model from DOM](/content/images/2015/03/extract_model_from_DOM.png)\n\nWe're going to elaborate on this concept in the next video where I introduce a **controller** into the application.\n\nWe will actually hook up categories and bookmarks and make those dynamic.\n\n![Fail Break Dancing](/content/images/2015/03/fail-break-dancing.gif)\n\n----\n\n<a class=\"prev-article\" href=\"/building-an-angular-app-eggly-introduction/\" style=\"width: 50%;\">Eggly Intro</a><a class=\"next-article\" href=\"/building-an-angular-app-controllers/\" style=\"float: right;width: 50%;text-align: right;\">Controllers</a>","html":"<blockquote>\n  <p>In this lesson, we learn how to take a static HTML page and tap into the power of AngularJS by bootstrapping the framework.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png\" alt=\"Part 1: Getting Started\" /></p>\n\n<blockquote>\n  <p>In this video I'm going to show you how to take a static HTML page and bootstrap it into a working AngularJS application</p>\n</blockquote>\n\n<h6 id=\"angularjs\">AngularJS</h6>\n\n<p>The first thing that we need to do to get AngularJS working in the page is to add in the AngularJS JavaScript file.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ bower i -S angular foundation lodash\n</code></pre>\n\n<p>From there, we will hop into the code into the code.</p>\n\n<h6 id=\"includefiles\">Include Files</h6>\n\n<blockquote>\n  <p>git@github.com:eggheadio/egghead-angularjs-from-scratch-getting-started.git</p>\n</blockquote>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ mkdir building-an-angular-app\n$ cd building-an-angular-app\n$ git init\n$ git remote add origin git@github.com:eggheadio/egghead-angularjs-from-scratch-getting-started.git\n$ git fetch --all\n$ git checkout origin master\n$ ls\n    README.md           app                     assets\n    data                index.complete.html     index.finish.html\n    index.start.html    vendor\n$ vim index.start.html\n</code></pre>\n\n<p>I'm going to duplicate this last <strong>script</strong> tag here and then paste in the reference to the AngularJS JavaScript file.</p>\n\n<p><img src=\"/content/images/2015/03/Adding_Angular-1.png\" alt=\"Adding Angular\" /></p>\n\n<p>What we have here is:</p>\n\n<ul>\n<li>jQuery</li>\n<li>bootstrap or foundation</li>\n<li>lo-dash, which we're going to use for some collection manipulation and for the videos</li>\n<li><strong>minified version of AngularJS</strong></li>\n</ul>\n\n<h6 id=\"nginit\">ng-init</h6>\n\n<p>To get started, for the sake of illustration I am going to initialize a variable using <strong>ng-init</strong>.</p>\n\n<ol>\n<li>I'm going to say, <strong>ng-init=\"hello='world'\"</strong>.  </li>\n<li>From here, I'm going to create a big <strong>H1</strong> tag.</li>\n<li>Using double curly brace syntax, I'm going to put <strong>{{hello}}</strong> in there.</li>\n</ol>\n\n<p><img src=\"/content/images/2015/03/hello_world.png\" alt=\"Hello World\" /></p>\n\n<p>And so, when I refresh the page, and this to prove or to <strong>show that AngularJS is not working</strong>, and then we will hook it up so it is working. Refresh and then you get this big <strong>{{hello}}</strong>. Nothing is happening at the moment.</p>\n\n<p><img src=\"/content/images/2015/03/not_working.png\" alt=\"not working\" /></p>\n\n<p>To actually get this to render, we will go up to the HTML tag and we will add in the <strong>ng-app</strong> attribute.</p>\n\n<p>How this works is:</p>\n\n<ol>\n<li>when the page loads  </li>\n<li>the AngularJS JavaScript file is loaded and scans the DOM </li>\n<li>looks for <strong>ng-app</strong> attribute on any of the elements</li>\n<li>initializes an AngularJS application to that element and its children</li>\n</ol>\n\n<p><img src=\"/content/images/2015/03/ng-app.png\" alt=\"ng-app in html tag\" /></p>\n\n<p>In this case, the app is initialized into the HTML tag and everything underneath it.</p>\n\n<p>Let's go back and refresh the page. You can see now that <strong>{{hello}}</strong> is being evaluated to <strong>World</strong>.</p>\n\n<p><img src=\"/content/images/2015/03/working.png\" alt=\"working AngularJS app\" /></p>\n\n<p>Now we have a working AngularJS application.</p>\n\n<h6 id=\"inputfield\">Input Field</h6>\n\n<p>Let's go ahead and add in an input field with <strong>type=\"text\"</strong>, and we're going to bind this to the <strong>hello</strong> object with <strong>ng-model=\"hello\"</strong>.</p>\n\n<p><img src=\"/content/images/2015/03/ng-model.png\" alt=\"ng-model\" /></p>\n\n<p>Refresh the page and from here, and when I actually start typing because the AngularJS application has been initialized when I change it in one place, it changes it in the other place.</p>\n\n<p>This is the beauty and the power of AngularJS is that you're now basically <strong>extracting the model out from the DOM</strong>.</p>\n\n<p><img src=\"/content/images/2015/03/extract_model_from_DOM.png\" alt=\"extract model from DOM\" /></p>\n\n<p>We're going to elaborate on this concept in the next video where I introduce a <strong>controller</strong> into the application.</p>\n\n<p>We will actually hook up categories and bookmarks and make those dynamic.</p>\n\n<p><img src=\"/content/images/2015/03/fail-break-dancing.gif\" alt=\"Fail Break Dancing\" /></p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-an-angular-app-eggly-introduction/\" style=\"width: 50%;\">Eggly Intro</a><a class=\"next-article\" href=\"/building-an-angular-app-controllers/\" style=\"float: right;width: 50%;text-align: right;\">Controllers</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1426582115164,"created_by":1,"updated_at":1426800587204,"updated_by":1,"published_at":1426582189410,"published_by":1},{"id":32,"uuid":"d6c32265-0663-47c0-a0bf-03f87b906126","title":"Building an Angular App: Controllers","slug":"building-an-angular-app-controllers","markdown":"> We are going to take the static HTML elements and dynamically display them on the page by setting up an AngularJS controller and hooking it up with AngularJS templating in the view.\n\n![Part 1: Getting Started](/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png)\n\nWe're to take these category elements and these bookmark elements and **define them in the controller**.\n\nThen using ng-repeat and AngularJS templating, **render them back out in the view**.\n\n![categories and bookmarks](/content/images/2015/03/categories_and_bookmarks.png)\n\n- **create an AngularJS module**\n- **hook up an AngularJS controller**\n- **render data structures that you define in your controller**\n\n###### ng-app directive ######\n\nThe first thing that we need to do is actually define the module that we are going to organize our code into.\n\n> An AngularJS module is simply an organizational mechanism to group functionality.\n\n> It's a way for, for instance, if you have users then you might group the user functionality into a user submodule.\n\nIf you have, for instance, a bookmarks functionality or a set of bookmarks functionality you can organize that into a bookmarks submodule. You'll see this actually in later videos when we start to get into more advanced topics.\n\nFor now, I'm going to go to the **ng-app** directive and I'm just going to add a value to this attribute and I'm going to say, **ng-app=\"Eggly\"**.\n\nWhen this instantiates, it's going to look for a module called \"**Eggly**\".\n\n![ng-app Eggly](/content/images/2015/03/ng-app_Eggly.png)\n\n###### Reference Source File of App ######\n\nWe need to define this module, but the first thing that we need to do is actually **reference our source file for our application**.\n\nAdd a script tag with source pointing to: **app/eggly-app.start.js**.\n\n![reference source file of application](/content/images/2015/03/reference_source_file_of_application.png)\n\nLet's hop over to here.\n\n###### Defining Module ######\n\n<span class=\"filename\">eggly-app.start.js</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('Eggly', [])\n.controller('MainController', function($scope){\n\t$scope.hello = 'world';\n})</code></pre>\n\n**[1]** You define your Angular module using **angular.module**. This takes two arguments, the **name of the module, \"Eggly\"** and then an **array of dependencies**. In this case, we do not have any dependencies yet but you could put any submodule in there. For instance, if you're doing routing or animating then you would put **ngRouter** or **ngAnimate**.\n\n**[2]** We are going to **define our controller** called **\"Main Controller\"**. This takes a second parameter:\n\n- either **an array with submodules or dependencies**, and then the last element of that array being the actual functionality for the controller in the form of a function \n- or it can just take a function. I prefer to use the function and then actually define my dependencies using **ngMin** or in a post-production step. In this case, we're just going to pass in **$scope**.\n\n**[3]** Just to show that this is working let's create a variable called **$scope.hello** and we're going to instantiate this to **'world'**.\n\nLet's hop back in here. We have to actually define the controller in our HTML. We're going to use **ng-controller**. We're going to set this to **\"MainController\"**.\n\n![ng-controller](/content/images/2015/03/ng-controller.png)\n\n> Now this controller controls the element that it was defined on and all of its subelements or children elements.\n\nFrom here I'm just going to go set an **h1** tag to **{{hello}}**, and let's refresh the page which should evaluate to \"**world**\".\n\n![h1-hello](/content/images/2015/03/h1-hello.png)\n\n![evaluate to world](/content/images/2015/03/evaluate_to_world.png)\n\nNow our controller is hooked up. It's live.\n\n###### Categories and Bookmarks ######\n\nLet's delete this. What I'm going to do now is I am going to define a categories and bookmarks array in this controller.\n\nI'm not actually going to type this out. I'm just going to paste this in here.\n\n![categories and bookmarks in controller](/content/images/2015/03/categories_and_bookmarks_in_controller.png)\n\n**[5-10]** What I have is scope.categories. It's an array with objects for categories with an ID and a name.\n\n**[12-22]** Then, bookmarks is also an array of objects with ID, title, URL, and category. You can see that the category actually matches up to the category that it's in.\n\nNow that I've defined categories and bookmarks on scope, it's now available in the view for binding. Let's go ahead and do that.\n\nWe want to actually repeat this list item element. We're going to go here. Using **ng-repeat**, we're going to say, **ng-repeat=\"category in categories\"**.\n\n![ng-repeat category in categories](/content/images/2015/03/ng-repeat_category.png)\n\n**[20]** What this does is it looks for the categories array and then it will basically stamp out this element once per element or item in the collection.\n\n**[21]** From here, we simply can do the double curly braces and category. That's a variable that keeps track of the current category that it's referencing in the categories array. Let's put **{{category.name}}**.\n\nLet's hop into the HTML, refresh. Now you can see that we have these four categories here.\n\n- development\n- design\n- exercise\n- humor\n\n![categories](/content/images/2015/03/ng-repeat.png)\n\nLet's do the same thing for the bookmarks.\n\n![bookmarks](/content/images/2015/03/bookmarks.png)\n\n**[26]** We want to repeat the first bookmark. Let's do **ng-repeat=\"bookmark in bookmarks\"** like so.\n\n**[29]** Let's change this **href=\"{{bookmark.url}}\"** and let's change the contents to **{{bookmark.title}}**.\n\nWhen we refresh this now, we should have categories that are dynamic and we have the bookmarks that are also rendering dynamically as they are being pulled from the controller.\n\n![categories rendered dynamically](/content/images/2015/03/categories_rendered_dynamically.png)\n\n###### Summary ######\n\nJust to review what we've done, we've taken **ng-app** and now we are pointing it to the **Eggly** submodule which we defined, **angular.module('Eggly',**)..., and then on top of that module we have defined a \"**MainController**\" with two arrays of objects, **category** and **bookmarks**.\n\nBecause we have put that on scope that is available for the view.\n\n> Think of scope as the glue between the controller and the view.\n\nThen using the **ng-repeat** syntax we are repeating over categories and bookmarks and, in this case, **category and categories** as we can now reference that object and bind to it.\n\nNow we're binding into displaying the category name. Then down here we are binding to the URL and the bookmark title.\n\n###### One Step Further ######\n\nIn the next video, I'm going to show you how, when you actually click on a category, we can actually filter out and show just the bookmarks for that category.\n\nWe've seen how to actually bind two properties in the controller but now we're going to take it one step further and we're going to actually show how to add in functionality or communicate back to the controller from the view.\n\n![Deal with it](/content/images/2015/03/deal-with-it-driving.gif)\n\n---\n\n<a class=\"prev-article\" href=\"/building-an-angular-app-bootstrapping/\" style=\"width: 50%;\">Bootstrapping</a><a class=\"next-article\" href=\"/building-an-angular-app-filters/\" style=\"float: right;width: 50%;text-align: right;\">Filters</a>","html":"<blockquote>\n  <p>We are going to take the static HTML elements and dynamically display them on the page by setting up an AngularJS controller and hooking it up with AngularJS templating in the view.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png\" alt=\"Part 1: Getting Started\" /></p>\n\n<p>We're to take these category elements and these bookmark elements and <strong>define them in the controller</strong>.</p>\n\n<p>Then using ng-repeat and AngularJS templating, <strong>render them back out in the view</strong>.</p>\n\n<p><img src=\"/content/images/2015/03/categories_and_bookmarks.png\" alt=\"categories and bookmarks\" /></p>\n\n<ul>\n<li><strong>create an AngularJS module</strong></li>\n<li><strong>hook up an AngularJS controller</strong></li>\n<li><strong>render data structures that you define in your controller</strong></li>\n</ul>\n\n<h6 id=\"ngappdirective\">ng-app directive</h6>\n\n<p>The first thing that we need to do is actually define the module that we are going to organize our code into.</p>\n\n<blockquote>\n  <p>An AngularJS module is simply an organizational mechanism to group functionality.</p>\n  \n  <p>It's a way for, for instance, if you have users then you might group the user functionality into a user submodule.</p>\n</blockquote>\n\n<p>If you have, for instance, a bookmarks functionality or a set of bookmarks functionality you can organize that into a bookmarks submodule. You'll see this actually in later videos when we start to get into more advanced topics.</p>\n\n<p>For now, I'm going to go to the <strong>ng-app</strong> directive and I'm just going to add a value to this attribute and I'm going to say, <strong>ng-app=\"Eggly\"</strong>.</p>\n\n<p>When this instantiates, it's going to look for a module called \"<strong>Eggly</strong>\".</p>\n\n<p><img src=\"/content/images/2015/03/ng-app_Eggly.png\" alt=\"ng-app Eggly\" /></p>\n\n<h6 id=\"referencesourcefileofapp\">Reference Source File of App</h6>\n\n<p>We need to define this module, but the first thing that we need to do is actually <strong>reference our source file for our application</strong>.</p>\n\n<p>Add a script tag with source pointing to: <strong>app/eggly-app.start.js</strong>.</p>\n\n<p><img src=\"/content/images/2015/03/reference_source_file_of_application.png\" alt=\"reference source file of application\" /></p>\n\n<p>Let's hop over to here.</p>\n\n<h6 id=\"definingmodule\">Defining Module</h6>\n\n<p><span class=\"filename\">eggly-app.start.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('Eggly', [])  \n.controller('MainController', function($scope){\n    $scope.hello = 'world';\n})</code></pre>\n\n<p><strong>[1]</strong> You define your Angular module using <strong>angular.module</strong>. This takes two arguments, the <strong>name of the module, \"Eggly\"</strong> and then an <strong>array of dependencies</strong>. In this case, we do not have any dependencies yet but you could put any submodule in there. For instance, if you're doing routing or animating then you would put <strong>ngRouter</strong> or <strong>ngAnimate</strong>.</p>\n\n<p><strong>[2]</strong> We are going to <strong>define our controller</strong> called <strong>\"Main Controller\"</strong>. This takes a second parameter:</p>\n\n<ul>\n<li>either <strong>an array with submodules or dependencies</strong>, and then the last element of that array being the actual functionality for the controller in the form of a function </li>\n<li>or it can just take a function. I prefer to use the function and then actually define my dependencies using <strong>ngMin</strong> or in a post-production step. In this case, we're just going to pass in <strong>$scope</strong>.</li>\n</ul>\n\n<p><strong>[3]</strong> Just to show that this is working let's create a variable called <strong>$scope.hello</strong> and we're going to instantiate this to <strong>'world'</strong>.</p>\n\n<p>Let's hop back in here. We have to actually define the controller in our HTML. We're going to use <strong>ng-controller</strong>. We're going to set this to <strong>\"MainController\"</strong>.</p>\n\n<p><img src=\"/content/images/2015/03/ng-controller.png\" alt=\"ng-controller\" /></p>\n\n<blockquote>\n  <p>Now this controller controls the element that it was defined on and all of its subelements or children elements.</p>\n</blockquote>\n\n<p>From here I'm just going to go set an <strong>h1</strong> tag to <strong>{{hello}}</strong>, and let's refresh the page which should evaluate to \"<strong>world</strong>\".</p>\n\n<p><img src=\"/content/images/2015/03/h1-hello.png\" alt=\"h1-hello\" /></p>\n\n<p><img src=\"/content/images/2015/03/evaluate_to_world.png\" alt=\"evaluate to world\" /></p>\n\n<p>Now our controller is hooked up. It's live.</p>\n\n<h6 id=\"categoriesandbookmarks\">Categories and Bookmarks</h6>\n\n<p>Let's delete this. What I'm going to do now is I am going to define a categories and bookmarks array in this controller.</p>\n\n<p>I'm not actually going to type this out. I'm just going to paste this in here.</p>\n\n<p><img src=\"/content/images/2015/03/categories_and_bookmarks_in_controller.png\" alt=\"categories and bookmarks in controller\" /></p>\n\n<p><strong>[5-10]</strong> What I have is scope.categories. It's an array with objects for categories with an ID and a name.</p>\n\n<p><strong>[12-22]</strong> Then, bookmarks is also an array of objects with ID, title, URL, and category. You can see that the category actually matches up to the category that it's in.</p>\n\n<p>Now that I've defined categories and bookmarks on scope, it's now available in the view for binding. Let's go ahead and do that.</p>\n\n<p>We want to actually repeat this list item element. We're going to go here. Using <strong>ng-repeat</strong>, we're going to say, <strong>ng-repeat=\"category in categories\"</strong>.</p>\n\n<p><img src=\"/content/images/2015/03/ng-repeat_category.png\" alt=\"ng-repeat category in categories\" /></p>\n\n<p><strong>[20]</strong> What this does is it looks for the categories array and then it will basically stamp out this element once per element or item in the collection.</p>\n\n<p><strong>[21]</strong> From here, we simply can do the double curly braces and category. That's a variable that keeps track of the current category that it's referencing in the categories array. Let's put <strong>{{category.name}}</strong>.</p>\n\n<p>Let's hop into the HTML, refresh. Now you can see that we have these four categories here.</p>\n\n<ul>\n<li>development</li>\n<li>design</li>\n<li>exercise</li>\n<li>humor</li>\n</ul>\n\n<p><img src=\"/content/images/2015/03/ng-repeat.png\" alt=\"categories\" /></p>\n\n<p>Let's do the same thing for the bookmarks.</p>\n\n<p><img src=\"/content/images/2015/03/bookmarks.png\" alt=\"bookmarks\" /></p>\n\n<p><strong>[26]</strong> We want to repeat the first bookmark. Let's do <strong>ng-repeat=\"bookmark in bookmarks\"</strong> like so.</p>\n\n<p><strong>[29]</strong> Let's change this <strong>href=\"{{bookmark.url}}\"</strong> and let's change the contents to <strong>{{bookmark.title}}</strong>.</p>\n\n<p>When we refresh this now, we should have categories that are dynamic and we have the bookmarks that are also rendering dynamically as they are being pulled from the controller.</p>\n\n<p><img src=\"/content/images/2015/03/categories_rendered_dynamically.png\" alt=\"categories rendered dynamically\" /></p>\n\n<h6 id=\"summary\">Summary</h6>\n\n<p>Just to review what we've done, we've taken <strong>ng-app</strong> and now we are pointing it to the <strong>Eggly</strong> submodule which we defined, <strong>angular.module('Eggly',</strong>)..., and then on top of that module we have defined a \"<strong>MainController</strong>\" with two arrays of objects, <strong>category</strong> and <strong>bookmarks</strong>.</p>\n\n<p>Because we have put that on scope that is available for the view.</p>\n\n<blockquote>\n  <p>Think of scope as the glue between the controller and the view.</p>\n</blockquote>\n\n<p>Then using the <strong>ng-repeat</strong> syntax we are repeating over categories and bookmarks and, in this case, <strong>category and categories</strong> as we can now reference that object and bind to it.</p>\n\n<p>Now we're binding into displaying the category name. Then down here we are binding to the URL and the bookmark title.</p>\n\n<h6 id=\"onestepfurther\">One Step Further</h6>\n\n<p>In the next video, I'm going to show you how, when you actually click on a category, we can actually filter out and show just the bookmarks for that category.</p>\n\n<p>We've seen how to actually bind two properties in the controller but now we're going to take it one step further and we're going to actually show how to add in functionality or communicate back to the controller from the view.</p>\n\n<p><img src=\"/content/images/2015/03/deal-with-it-driving.gif\" alt=\"Deal with it\" /></p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-an-angular-app-bootstrapping/\" style=\"width: 50%;\">Bootstrapping</a><a class=\"next-article\" href=\"/building-an-angular-app-filters/\" style=\"float: right;width: 50%;text-align: right;\">Filters</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1426587221763,"created_by":1,"updated_at":1426800217697,"updated_by":1,"published_at":1426587240758,"published_by":1},{"id":33,"uuid":"d60bade7-a127-4635-b6d7-6cc11bd4f27a","title":"Building an Angular App: Filters","slug":"building-an-angular-app-filters","markdown":"> We are going to learn how to filter our bookmarks based on the selected category.\n\n![Part 1: Getting Started](/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png)\n\n> We will learn how to manage the current category in the controller as well as set the current category from the view.\n\nIn this video, I'm going to show you how to **set the current category in the controller**, as well as **filter the bookmarks to the category that they belong to**, depending on the current category.\n\n---\n\n###### Setting the current category ######\n\nThe first thing that we need to do is define the ability to actually set the current category.\n\n<span class=\"filename\">eggly.js</span>\n<pre class=\"line-numbers\" data-line=\"20,22,24-26\"><code class=\"language-javascript\">angular.module('Eggly', [])\n.controller('MainController', function($scope){\n  $scope.categories = [\n    {\"id\": 0, \"name\": \"Development\"},\n    {\"id\": 1, \"name\": \"Design\"},\n    {\"id\": 2, \"name\": \"Excercise\"},\n    {\"id\": 3, \"name\": \"Soccer\"}\n  ];\n\n  $scope.bookmarks = [\n    {\"id\": 0, \"title\": \"Soccer Game History Page\", \"url\": \"http://angular.js\", \"category\": \"Soccer\"},\n    {\"id\": 1, \"title\": \"Development History Page\", \"url\": \"http://angular.js\", \"category\": \"Development\"},\n    {\"id\": 2, \"title\": \"Design History Page\", \"url\": \"http://angular.js\", \"category\": \"Design\"},\n    {\"id\": 2, \"title\": \"Design History Page\", \"url\": \"http://materialup.com\", \"category\": \"Design\"},\n    {\"id\": 3, \"title\": \"Gym Listings\", \"url\": \"http://angular.js\", \"category\": \"Excercise\"},\n    {\"id\": 4, \"title\": \"YMCA\", \"url\": \"http://angular.js\", \"category\": \"Excercise\"},\n    {\"id\": 5, \"title\": \"FIFA\", \"url\": \"http://angular.js\", \"category\": \"Soccer\"}\n  ];\n\n  $scope.currentCategory = null;\n  \n  $scope.setCurrentCategory = setCurrentCategory;\n\n  function setCurrentCategory(category) {\n    $scope.currentCategory = category;\n  }\n\n})</code></pre>\n\n**[20]** Let's create a property called **currentCategory** and we are just going to set this to **null**.\n\n**[22]** Then what I will do is make this available to the view, by attaching it to scope. This is just a way to define your public and private methods, using what is similar to a revealing module pattern making it available to the view.\n\n**[24-26]** Then I'm also going to define a function called **setCurrentCategory** that accepts a **category** parameter.\n\n**[25]** It just takes that parameter and sets it to **currentCategory**.\n\n---\n\n###### Setting Categories with ng-click ######\n\n![ng-click to set category](/content/images/2015/03/ng-click_to_set_category.png)\n\n**[21]** From here, on the anchor tag here we'll do **ng-click=\"setCurrentCategory(category)\"**.\n\nThen Angular knows that this category is referencing the current element that you actually click. It's very good at keeping track of context.\n\n---\n\n###### Filtering bookmarks with current category ######\n\nGo to the bookmarks repeater.\n\n![filter category](/content/images/2015/03/filter_category.png)\n\n**[26]** We are going to use this filter syntax and we are going to simply say **ng-repeat=\"bookmark in bookmarks | filter:{category:currentCategory.name}\"**\n\nLet's refresh, let's click Development, and now you see the Development bookmarks -- Design, Exercise, Humor, and so on.\n\n![live filtering](/content/images/2015/03/live_filtering.png)\n\nBut let's also hook up the logo to reset it to nothing. Write, **ng-click=\"setCurrentCategory(null)\"**\n\n![set category to null](/content/images/2015/03/set_category_to_null.png)\n\nRefresh the page, and then here you can see that it actually reset it.\n\n![click on logo](/content/images/2015/03/click_on_logo.png)\n\n###### Seeing what category you are on ######\n\nNow, wouldn't it be nice if you clicked on Category, and you were able to tell what category you were on?\n\nLet's take this one step further and hook that up.\n\n<span class=\"filename\">eggly.js</span>\n<pre class=\"line-numbers\" data-line=\"27-29,31\"><code class=\"language-javascript\">angular.module('Eggly', [])\n.controller('MainController', function($scope){\n  $scope.categories = [\n    {\"id\": 0, \"name\": \"Development\"},\n    {\"id\": 1, \"name\": \"Design\"},\n    {\"id\": 2, \"name\": \"Excercise\"},\n    {\"id\": 3, \"name\": \"Soccer\"}\n  ];\n\n  $scope.bookmarks = [\n    {\"id\": 0, \"title\": \"Soccer Game History Page\", \"url\": \"http://angular.js\", \"category\": \"Soccer\"},\n    {\"id\": 1, \"title\": \"Development History Page\", \"url\": \"http://angular.js\", \"category\": \"Development\"},\n    {\"id\": 2, \"title\": \"Design History Page\", \"url\": \"http://angular.js\", \"category\": \"Design\"},\n    {\"id\": 2, \"title\": \"Design History Page\", \"url\": \"http://materialup.com\", \"category\": \"Design\"},\n    {\"id\": 3, \"title\": \"Gym Listings\", \"url\": \"http://angular.js\", \"category\": \"Excercise\"},\n    {\"id\": 4, \"title\": \"YMCA\", \"url\": \"http://angular.js\", \"category\": \"Excercise\"},\n    {\"id\": 5, \"title\": \"FIFA\", \"url\": \"http://angular.js\", \"category\": \"Soccer\"}\n  ];\n\n  $scope.currentCategory = null;\n  $scope.setCurrentCategory = setCurrentCategory;\n\n  function setCurrentCategory(category) {\n    $scope.currentCategory = category;\n  }\n\n  function isCurrentCategory(category) {\n    return $scope.currentCategory != = null && category.name == $scope.currentCategory.name;\n  }\n\n  $scope.isCurrentCategory = isCurrentCategory;\n\n})</code></pre>\n\n**[27]** In the controller, let's create another function called **isCurrentCategory**. We'll also accept the **category** parameter.\n\n**[28]** Set up a category watcher of sorts that's going to see if it will return true if the current category is not null, and the names match up.\n\n**[31]** Let's go ahead and attach this to scope, so that we can use it in our view.\n\n---\n\n###### Actively check for class of category ######\n\n![ng-class category](/content/images/2015/03/ng-class_category.png)\n\n**[20]** In the **view**, in this list item here we are going to use \"**ng-class**\" to dynamically attach an active class.\n\nHow this works is it will attach this active class if the result of this expression that we are going to put in here is **true**.\n\nIt will take it off, or not apply it, if it is **false**. \n\nOnce we click on it, then this active class should be applied because now the category that we clicked on is the current category.\n\nLet's see this in action.\n\n![active class](/content/images/2015/03/active_class.png)\n\nYou can see now that when I take my mouse off, that this active class is applied.\n\n---\n\n###### Review ######\n\nWe've created a methods called **setCurrentCategory** and **isCurrentCategory**.\n\nThen we made that available to the view by attaching it to the **$scope** object.\n\nThen we created a property called **currentCategory** that we are now using to keep track of the current category, but also using it to define or dynamically apply a class to our view.\n\n---\n\n###### What's next ######\n\nThis concludes this video. Stay tuned for the next episode, where I am going to show you **how to use variables on scope to handle state management**.\n\nIn this case, it's going to be toggling between the creating of a bookmark state, or the editing of a bookmark state.\n\n![Deal with it](/content/images/2015/03/oh-snap-jon-stewart.gif)\n\n---\n\n<a class=\"prev-article\" href=\"/building-an-angular-app-controllers/\" style=\"width: 50%;\">Controllers</a><a class=\"next-article\" href=\"/building-an-angular-app-simple-states/\" style=\"float: right;width: 50%;text-align: right;\">Simple States</a>","html":"<blockquote>\n  <p>We are going to learn how to filter our bookmarks based on the selected category.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png\" alt=\"Part 1: Getting Started\" /></p>\n\n<blockquote>\n  <p>We will learn how to manage the current category in the controller as well as set the current category from the view.</p>\n</blockquote>\n\n<p>In this video, I'm going to show you how to <strong>set the current category in the controller</strong>, as well as <strong>filter the bookmarks to the category that they belong to</strong>, depending on the current category.</p>\n\n<hr />\n\n<h6 id=\"settingthecurrentcategory\">Setting the current category</h6>\n\n<p>The first thing that we need to do is define the ability to actually set the current category.</p>\n\n<p><span class=\"filename\">eggly.js</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"20,22,24-26\"><code class=\"language-javascript\">angular.module('Eggly', [])  \n.controller('MainController', function($scope){\n  $scope.categories = [\n    {\"id\": 0, \"name\": \"Development\"},\n    {\"id\": 1, \"name\": \"Design\"},\n    {\"id\": 2, \"name\": \"Excercise\"},\n    {\"id\": 3, \"name\": \"Soccer\"}\n  ];\n\n  $scope.bookmarks = [\n    {\"id\": 0, \"title\": \"Soccer Game History Page\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Soccer\"},\n    {\"id\": 1, \"title\": \"Development History Page\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Development\"},\n    {\"id\": 2, \"title\": \"Design History Page\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Design\"},\n    {\"id\": 2, \"title\": \"Design History Page\", \"url\": \"<a href=\"http://materialup.com\">http://materialup.com</a>\", \"category\": \"Design\"},\n    {\"id\": 3, \"title\": \"Gym Listings\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Excercise\"},\n    {\"id\": 4, \"title\": \"YMCA\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Excercise\"},\n    {\"id\": 5, \"title\": \"FIFA\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Soccer\"}\n  ];\n\n  $scope.currentCategory = null;\n\n  $scope.setCurrentCategory = setCurrentCategory;\n\n  function setCurrentCategory(category) {\n    $scope.currentCategory = category;\n  }\n\n})</code></pre>\n\n<p><strong>[20]</strong> Let's create a property called <strong>currentCategory</strong> and we are just going to set this to <strong>null</strong>.</p>\n\n<p><strong>[22]</strong> Then what I will do is make this available to the view, by attaching it to scope. This is just a way to define your public and private methods, using what is similar to a revealing module pattern making it available to the view.</p>\n\n<p><strong>[24-26]</strong> Then I'm also going to define a function called <strong>setCurrentCategory</strong> that accepts a <strong>category</strong> parameter.</p>\n\n<p><strong>[25]</strong> It just takes that parameter and sets it to <strong>currentCategory</strong>.</p>\n\n<hr />\n\n<h6 id=\"settingcategorieswithngclick\">Setting Categories with ng-click</h6>\n\n<p><img src=\"/content/images/2015/03/ng-click_to_set_category.png\" alt=\"ng-click to set category\" /></p>\n\n<p><strong>[21]</strong> From here, on the anchor tag here we'll do <strong>ng-click=\"setCurrentCategory(category)\"</strong>.</p>\n\n<p>Then Angular knows that this category is referencing the current element that you actually click. It's very good at keeping track of context.</p>\n\n<hr />\n\n<h6 id=\"filteringbookmarkswithcurrentcategory\">Filtering bookmarks with current category</h6>\n\n<p>Go to the bookmarks repeater.</p>\n\n<p><img src=\"/content/images/2015/03/filter_category.png\" alt=\"filter category\" /></p>\n\n<p><strong>[26]</strong> We are going to use this filter syntax and we are going to simply say <strong>ng-repeat=\"bookmark in bookmarks | filter:{category:currentCategory.name}\"</strong></p>\n\n<p>Let's refresh, let's click Development, and now you see the Development bookmarks -- Design, Exercise, Humor, and so on.</p>\n\n<p><img src=\"/content/images/2015/03/live_filtering.png\" alt=\"live filtering\" /></p>\n\n<p>But let's also hook up the logo to reset it to nothing. Write, <strong>ng-click=\"setCurrentCategory(null)\"</strong></p>\n\n<p><img src=\"/content/images/2015/03/set_category_to_null.png\" alt=\"set category to null\" /></p>\n\n<p>Refresh the page, and then here you can see that it actually reset it.</p>\n\n<p><img src=\"/content/images/2015/03/click_on_logo.png\" alt=\"click on logo\" /></p>\n\n<h6 id=\"seeingwhatcategoryyouareon\">Seeing what category you are on</h6>\n\n<p>Now, wouldn't it be nice if you clicked on Category, and you were able to tell what category you were on?</p>\n\n<p>Let's take this one step further and hook that up.</p>\n\n<p><span class=\"filename\">eggly.js</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"27-29,31\"><code class=\"language-javascript\">angular.module('Eggly', [])  \n.controller('MainController', function($scope){\n  $scope.categories = [\n    {\"id\": 0, \"name\": \"Development\"},\n    {\"id\": 1, \"name\": \"Design\"},\n    {\"id\": 2, \"name\": \"Excercise\"},\n    {\"id\": 3, \"name\": \"Soccer\"}\n  ];\n\n  $scope.bookmarks = [\n    {\"id\": 0, \"title\": \"Soccer Game History Page\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Soccer\"},\n    {\"id\": 1, \"title\": \"Development History Page\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Development\"},\n    {\"id\": 2, \"title\": \"Design History Page\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Design\"},\n    {\"id\": 2, \"title\": \"Design History Page\", \"url\": \"<a href=\"http://materialup.com\">http://materialup.com</a>\", \"category\": \"Design\"},\n    {\"id\": 3, \"title\": \"Gym Listings\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Excercise\"},\n    {\"id\": 4, \"title\": \"YMCA\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Excercise\"},\n    {\"id\": 5, \"title\": \"FIFA\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Soccer\"}\n  ];\n\n  $scope.currentCategory = null;\n  $scope.setCurrentCategory = setCurrentCategory;\n\n  function setCurrentCategory(category) {\n    $scope.currentCategory = category;\n  }\n\n  function isCurrentCategory(category) {\n    return $scope.currentCategory != = null && category.name == $scope.currentCategory.name;\n  }\n\n  $scope.isCurrentCategory = isCurrentCategory;\n\n})</code></pre>\n\n<p><strong>[27]</strong> In the controller, let's create another function called <strong>isCurrentCategory</strong>. We'll also accept the <strong>category</strong> parameter.</p>\n\n<p><strong>[28]</strong> Set up a category watcher of sorts that's going to see if it will return true if the current category is not null, and the names match up.</p>\n\n<p><strong>[31]</strong> Let's go ahead and attach this to scope, so that we can use it in our view.</p>\n\n<hr />\n\n<h6 id=\"activelycheckforclassofcategory\">Actively check for class of category</h6>\n\n<p><img src=\"/content/images/2015/03/ng-class_category.png\" alt=\"ng-class category\" /></p>\n\n<p><strong>[20]</strong> In the <strong>view</strong>, in this list item here we are going to use \"<strong>ng-class</strong>\" to dynamically attach an active class.</p>\n\n<p>How this works is it will attach this active class if the result of this expression that we are going to put in here is <strong>true</strong>.</p>\n\n<p>It will take it off, or not apply it, if it is <strong>false</strong>. </p>\n\n<p>Once we click on it, then this active class should be applied because now the category that we clicked on is the current category.</p>\n\n<p>Let's see this in action.</p>\n\n<p><img src=\"/content/images/2015/03/active_class.png\" alt=\"active class\" /></p>\n\n<p>You can see now that when I take my mouse off, that this active class is applied.</p>\n\n<hr />\n\n<h6 id=\"review\">Review</h6>\n\n<p>We've created a methods called <strong>setCurrentCategory</strong> and <strong>isCurrentCategory</strong>.</p>\n\n<p>Then we made that available to the view by attaching it to the <strong>$scope</strong> object.</p>\n\n<p>Then we created a property called <strong>currentCategory</strong> that we are now using to keep track of the current category, but also using it to define or dynamically apply a class to our view.</p>\n\n<hr />\n\n<h6 id=\"whatsnext\">What's next</h6>\n\n<p>This concludes this video. Stay tuned for the next episode, where I am going to show you <strong>how to use variables on scope to handle state management</strong>.</p>\n\n<p>In this case, it's going to be toggling between the creating of a bookmark state, or the editing of a bookmark state.</p>\n\n<p><img src=\"/content/images/2015/03/oh-snap-jon-stewart.gif\" alt=\"Deal with it\" /></p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-an-angular-app-controllers/\" style=\"width: 50%;\">Controllers</a><a class=\"next-article\" href=\"/building-an-angular-app-simple-states/\" style=\"float: right;width: 50%;text-align: right;\">Simple States</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1426605114249,"created_by":1,"updated_at":1426800435367,"updated_by":1,"published_at":1426605155152,"published_by":1},{"id":34,"uuid":"0bf56d6c-5ff5-4134-bd55-8eaee032562c","title":"Building an Angular App: Simple States","slug":"building-an-angular-app-simple-states","markdown":"> We are going to learn how to manage simple states within our controller. We are going to learn how to toggle between the editing and creating bookmark states and how to sequence those interactions in the controller.\n\n![Part 1: Getting Started](/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png)\n\nBelow we're going to go over **how to manage the creating and editing states** within the Eggly application.\n\nFor instance, in the default load state you do not have any options at the bottom of the page but if I actually select a category I can now actually create a bookmark for the category that I'm in.\n\n> Create State\n\n![create a bookmark](/content/images/2015/03/create_a_bookmark.png)\n\nIf I select this, you can see the create bookmark form. If I'm in the create state and I click on this edit button, it will toggle to the edit state because we do not want to allow the user to create a bookmark and edit a bookmark at the same time.\n\n> Edit State\n\n![edit state](/content/images/2015/03/edit_state.png)\n\nAs well as I can hit cancel and then go back to the default state.\n\n> Default State\n\n![default state](/content/images/2015/03/default_state.png)\n\n---\n\nIf we jump into the code I have went ahead and created some JavaScript to get us started.\n\n<span class=\"filename\">eggly.js</span>\n<pre class=\"line-numbers\" data-line=\"35-36,41-44,49-51,56-59,64-66,68-71\"><code class=\"language-javascript\">angular.module('Eggly', [])\n.controller('MainController', function($scope){\n  $scope.categories = [\n    {\"id\": 0, \"name\": \"Development\"},\n    {\"id\": 1, \"name\": \"Design\"},\n    {\"id\": 2, \"name\": \"Excercise\"},\n    {\"id\": 3, \"name\": \"Soccer\"}\n  ];\n\n  $scope.bookmarks = [\n    {\"id\": 0, \"title\": \"Soccer Game History Page\", \"url\": \"http://angular.js\", \"category\": \"Soccer\"},\n    {\"id\": 1, \"title\": \"Development History Page\", \"url\": \"http://angular.js\", \"category\": \"Development\"},\n    {\"id\": 2, \"title\": \"Design History Page\", \"url\": \"http://angular.js\", \"category\": \"Design\"},\n    {\"id\": 2, \"title\": \"Design History Page\", \"url\": \"http://materialup.com\", \"category\": \"Design\"},\n    {\"id\": 3, \"title\": \"Gym Listings\", \"url\": \"http://angular.js\", \"category\": \"Excercise\"},\n    {\"id\": 4, \"title\": \"YMCA\", \"url\": \"http://angular.js\", \"category\": \"Excercise\"},\n    {\"id\": 5, \"title\": \"FIFA\", \"url\": \"http://angular.js\", \"category\": \"Soccer\"}\n  ];\n\n  $scope.currentCategory = null;\n  $scope.setCurrentCategory = setCurrentCategory;\n  $scope.isCurrentCategory = isCurrentCategory;\n\n  function setCurrentCategory(category) {\n    $scope.currentCategory = category;\n  }\n\n  function isCurrentCategory(category) {\n    return $scope.currentCategory && category.name == $scope.currentCategory.name;\n  }\n\n  ///////////////////\n  // Default State //\n  ///////////////////\n  $scope.isCreating = false;\n  $scope.isEditing = false;\n\n  ////////////////////////\n  // Enter Create State //\n  ////////////////////////\n  function startCreating() {\n    $scope.isCreating = true;\n    $scope.isEditing = false;\n  }\n\n  ///////////////////////\n  // Exit Create State //\n  ///////////////////////\n  function cancelCreating() {\n    $scope.isCreating = false;\n  }\n\n  //////////////////////\n  // Enter Edit State //\n  //////////////////////\n  function startEditing() {\n    $scope.isCreating = false;\n    $scope.isEditing = true;\n  }\n\n  /////////////////////\n  // Exit Edit State //\n  /////////////////////\n  function cancelEditing() {\n    $scope.isEditing = false;\n  }\n\n  $scope.startCreating = startCreating;\n  $scope.cancelCreating = cancelCreating;\n  $scope.startEditing = startEditing;\n  $scope.cancelEditing = cancelEditing;\n})</code></pre>\n\n**[35-36]** I have **$scope.isCreating**, **$scope.isEditing**, and I've set those to false. This will be the default state.\n\nI've then created some convenience methods to manage these variables.\n\n- **[41-44] startCreating**\n- **[49-51] cancelCreating**\n- **[56-59] startEditing**\n- **[64-66] cancelEditing**\n\nThe important thing to point out here is that in **startEditing**, for instance, it will set **isEditing** to true but it will also set **isCreating** to false.\n\nIt does the same thing in Creating.\n\n**[68-71]** I've then made this available to the view by attaching these methods to $scope.\n\n---\n\n###### Create Placeholders ######\n\n![placeholders](/content/images/2015/03/placeholders.png)\n\n**[32-41, 42-46]** Then in the view I have created these two placeholders, essentially where we will put the create form and the edit form in the next videos, but for now these are just placeholders to show that we are toggling between these two states.\n\n**[34-37]** I have a button that says, \"Create Bookmark\" with the bookmark state\n\n![pencil edit buttons](/content/images/2015/03/pencil_edit_buttons.png)\n\n**[28]** Then I have another **div** with editBookmark where that button is actually up here with the pencil icon.\n\n---\n\n###### Show methods for placeholders ######\n\nThe first thing we need to do is create two more methods, **shouldShowCreating** and **shouldShowEditing**. \n\n<span class=\"filename\">eggly.js</span>\n<pre class=\"line-numbers\" data-start=\"20\" data-line=\"56-58,63-65,67-68\"><code class=\"language-javascript\">  $scope.currentCategory = null;\n  $scope.setCurrentCategory = setCurrentCategory;\n  $scope.isCurrentCategory = isCurrentCategory;\n  $scope.startCreating = startCreating;\n  $scope.cancelCreating = cancelCreating;\n  $scope.startEditing = startEditing;\n  $scope.cancelEditing = cancelEditing;\n\n  function setCurrentCategory(category) {\n    $scope.currentCategory = category;\n  }\n\n  function isCurrentCategory(category) {\n    return $scope.currentCategory && category.name == $scope.currentCategory.name;\n  }\n\n  ///////////////////\n  // Default State //\n  ///////////////////\n  $scope.isCreating = false;\n  $scope.isEditing = false;\n\n  ////////////////////////\n  // Enter Create State //\n  ////////////////////////\n  function startCreating() {\n    $scope.isCreating = true;\n    $scope.isEditing = false;\n  }\n\n  ///////////////////////\n  // Exit Create State //\n  ///////////////////////\n  function cancelCreating() {\n    $scope.isCreating = false;\n  }\n\n  //////////////////////\n  // Enter Edit State //\n  //////////////////////\n  function startEditing() {\n    $scope.isCreating = false;\n    $scope.isEditing = true;\n  }\n\n  /////////////////////\n  // Exit Edit State //\n  /////////////////////\n  function cancelEditing() {\n    $scope.isEditing = false;\n  }\n\n  ///////////////////\n  // Show Creating //\n  ///////////////////\n  function shouldShowCreating() {\n    return $scope.currentCategory && !$scope.isEditing;\n  }\n\n  //////////////////\n  // Show Editing //\n  //////////////////\n  function shouldShowEditing() {\n    return $scope.isEditing && !$scope.isCreating;\n  }\n\n  $scope.shouldShowCreating = shouldShowCreating;\n  $scope.shouldShowEditing = shouldShowEditing;\n\n})</code></pre>\n\n**[75-77]** We are going to call this **shouldShowCreating**.\n\n**[76]** We are going to **return true** if **$scope.currentCategory** is defined and **not null** as well as **we are not editing**.\n\nThe reason we are checking for current category is because you have to be in a category in order to create a category.\n\n**[82-84]** Then we'll do the same thing for **shouldShowEditing**. This will be a little bit simpler.\n\n**[83]** Return **true** if **isEditing** and we are **not creating**.\n\n**[86-87]** From here, we just need to make these available to the **$scope** like so.\n\n---\n\n###### Hooking up the view with ng-if ######\n\nHow **ng-if** works...\n\n> If it evaluates to true, then it attaches it to the DOM.\n\n> If it evaluates to false, then it actually removes it from the DOM.\n\n###### Add ng-if to Create placeholder ######\n\n![ng-if shouldShowCreating](/content/images/2015/03/ng-if_shouldShowCreating.png)\n\n###### Add ng-if to Edit placeholder ######\n\n![ng-if should show editing](/content/images/2015/03/ng-if_should_show_editing-1.png)\n\n---\n\n###### Set trigger with ng-click ######\n\n> ng-click can trigger multiple functions and end ends with semi-colon ';'\n\n![ng-click edit and create](/content/images/2015/03/ng-click_edit_and_create.png)\n\n**[28]** What we'll do as well is we will go up to the **edit** button here and let's attach an **ng-click**, and call the method **startEditing**.\n\n**[34]** We can also go here and on the **create** button call **startCreating**.\n\nThis should allow us to actually toggle between the two.\n\nLet's hop into the browser and see this in action.\n\nNow you can see that nothing is showing but if we go to a category now we can see that the create bookmark it's toggling to the create and edit state.\n\n---\n\n###### Adding a cancel button ######\n\nLet's just go a step further and add a button to cancel creating and editing.\n\n![ng-click cancel creating](/content/images/2015/03/ng-click_cancel_creating.png)\n\n**[40]** It's calling **ng-click=\"cancelCreating\"**\n\n![ng-click cancel editing](/content/images/2015/03/ng-click_cancel_editing.png)\n\n**[46]** We can do the same thing for editing.\n\nHop into the HTML, we'll go to a category and then from here I can select this and go into an edit bookmark state, click cancel, and then it goes back to the create bookmark.\n\nYou can see that the create bookmark state is still showing.\n\n![still showing](/content/images/2015/03/still_showing.png)\n\n![ng-if is creating](/content/images/2015/03/ng-if_is_creating.png)\n\n**[38]** Let's actually set this up to toggle **ng-if=\"isCreating\"**.\n\nLet's refresh. We've got a category. Now you can see that we're toggling between the creating state here as well as the editing state. Now we are back to this default load state.\n\n![default load state](/content/images/2015/03/default_load_state.png)\n\nOne other thing that we can do is you can see here that if I'm in a creating state and I go to a category that we still have this latent state staying open even though we're in a new category.\n\n---\n\n###### Fixing edit & create state while switching categories ######\n\nLet's go ahead and fix that. Let's hop back over to the controller. \n\n<span class=\"filename\">eggly.js</span>\n<pre class=\"line-numbers\" data-start=\"28\" data-line=\"4,5\"><code class=\"language-javascript\">function setCurrentCategory(category) {\n    $scope.currentCategory = category;\n\n    $scope.cancelCreating();\n    $scope.cancelEditing();\n  }</code></pre>\n\n**[29]** When we setCurrentCategory we are going to cancelCreating and we will also cancelEditing.\n\nThis will just reset everything.\n\nRefresh the browser.\n\nWe'll go here and then when I click to a new category it resets it back to its default state.\n\n---\n\n###### Summary ######\n\nJust to review, what we've done is we have created two variables, **isCreating** and **isEditing**.\n\nThen we've created functions around managing and manipulating those two properties, **isCreating** and **isEditing**.\n\nWe've also created two methods to actually watch those, **shouldShowCreating** and **shouldShowEditing**.\n\nFrom there, in our HTML using **ng-if** we are showing the creating state as well as the creating form as well as the editing state and then using **ng-click** we are calling either **cancelCreating** or **cancelEditing**.\n\n---\n\n###### What's next ######\n\nThis was a little bit of a foundational exercise for the next videos that we're going to do where we're actually going to hook that up to allow you to create a bookmark and edit a bookmark.\n\nHaving this state in place to toggle between the two and manage it is critical for building out the application.\n\n![](/content/images/2015/03/deal-with-it-train.gif)\n\n---\n\n<a class=\"prev-article\" href=\"/building-an-angular-app-filters/\" style=\"width: 50%;\">Filters</a><a class=\"next-article\" href=\"/building-an-angular-app-add-a-bookmark-with-ng-submit-and-ng-model/\" style=\"float: right;width: 50%;text-align: right;\">Adding a bookmark</a>","html":"<blockquote>\n  <p>We are going to learn how to manage simple states within our controller. We are going to learn how to toggle between the editing and creating bookmark states and how to sequence those interactions in the controller.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png\" alt=\"Part 1: Getting Started\" /></p>\n\n<p>Below we're going to go over <strong>how to manage the creating and editing states</strong> within the Eggly application.</p>\n\n<p>For instance, in the default load state you do not have any options at the bottom of the page but if I actually select a category I can now actually create a bookmark for the category that I'm in.</p>\n\n<blockquote>\n  <p>Create State</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/create_a_bookmark.png\" alt=\"create a bookmark\" /></p>\n\n<p>If I select this, you can see the create bookmark form. If I'm in the create state and I click on this edit button, it will toggle to the edit state because we do not want to allow the user to create a bookmark and edit a bookmark at the same time.</p>\n\n<blockquote>\n  <p>Edit State</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/edit_state.png\" alt=\"edit state\" /></p>\n\n<p>As well as I can hit cancel and then go back to the default state.</p>\n\n<blockquote>\n  <p>Default State</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/default_state.png\" alt=\"default state\" /></p>\n\n<hr />\n\n<p>If we jump into the code I have went ahead and created some JavaScript to get us started.</p>\n\n<p><span class=\"filename\">eggly.js</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"35-36,41-44,49-51,56-59,64-66,68-71\"><code class=\"language-javascript\">angular.module('Eggly', [])  \n.controller('MainController', function($scope){\n  $scope.categories = [\n    {\"id\": 0, \"name\": \"Development\"},\n    {\"id\": 1, \"name\": \"Design\"},\n    {\"id\": 2, \"name\": \"Excercise\"},\n    {\"id\": 3, \"name\": \"Soccer\"}\n  ];\n\n  $scope.bookmarks = [\n    {\"id\": 0, \"title\": \"Soccer Game History Page\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Soccer\"},\n    {\"id\": 1, \"title\": \"Development History Page\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Development\"},\n    {\"id\": 2, \"title\": \"Design History Page\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Design\"},\n    {\"id\": 2, \"title\": \"Design History Page\", \"url\": \"<a href=\"http://materialup.com\">http://materialup.com</a>\", \"category\": \"Design\"},\n    {\"id\": 3, \"title\": \"Gym Listings\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Excercise\"},\n    {\"id\": 4, \"title\": \"YMCA\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Excercise\"},\n    {\"id\": 5, \"title\": \"FIFA\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Soccer\"}\n  ];\n\n  $scope.currentCategory = null;\n  $scope.setCurrentCategory = setCurrentCategory;\n  $scope.isCurrentCategory = isCurrentCategory;\n\n  function setCurrentCategory(category) {\n    $scope.currentCategory = category;\n  }\n\n  function isCurrentCategory(category) {\n    return $scope.currentCategory && category.name <mark> $scope.currentCategory.name;\n  }\n\n  ///////////////////\n  // Default State //\n  ///////////////////\n  $scope.isCreating = false;\n  $scope.isEditing = false;\n\n  ////////////////////////\n  // Enter Create State //\n  ////////////////////////\n  function startCreating() {\n    $scope.isCreating = true;\n    $scope.isEditing = false;\n  }\n\n  ///////////////////////\n  // Exit Create State //\n  ///////////////////////\n  function cancelCreating() {\n    $scope.isCreating = false;\n  }\n\n  //////////////////////\n  // Enter Edit State //\n  //////////////////////\n  function startEditing() {\n    $scope.isCreating = false;\n    $scope.isEditing = true;\n  }\n\n  /////////////////////\n  // Exit Edit State //\n  /////////////////////\n  function cancelEditing() {\n    $scope.isEditing = false;\n  }\n\n  $scope.startCreating = startCreating;\n  $scope.cancelCreating = cancelCreating;\n  $scope.startEditing = startEditing;\n  $scope.cancelEditing = cancelEditing;\n})</code></pre>\n\n<p><strong>[35-36]</strong> I have <strong>$scope.isCreating</strong>, <strong>$scope.isEditing</strong>, and I've set those to false. This will be the default state.</p>\n\n<p>I've then created some convenience methods to manage these variables.</p>\n\n<ul>\n<li><strong>[41-44] startCreating</strong></li>\n<li><strong>[49-51] cancelCreating</strong></li>\n<li><strong>[56-59] startEditing</strong></li>\n<li><strong>[64-66] cancelEditing</strong></li>\n</ul>\n\n<p>The important thing to point out here is that in <strong>startEditing</strong>, for instance, it will set <strong>isEditing</strong> to true but it will also set <strong>isCreating</strong> to false.</p>\n\n<p>It does the same thing in Creating.</p>\n\n<p><strong>[68-71]</strong> I've then made this available to the view by attaching these methods to $scope.</p>\n\n<hr />\n\n<h6 id=\"createplaceholders\">Create Placeholders</h6>\n\n<p><img src=\"/content/images/2015/03/placeholders.png\" alt=\"placeholders\" /></p>\n\n<p><strong>[32-41, 42-46]</strong> Then in the view I have created these two placeholders, essentially where we will put the create form and the edit form in the next videos, but for now these are just placeholders to show that we are toggling between these two states.</p>\n\n<p><strong>[34-37]</strong> I have a button that says, \"Create Bookmark\" with the bookmark state</p>\n\n<p><img src=\"/content/images/2015/03/pencil_edit_buttons.png\" alt=\"pencil edit buttons\" /></p>\n\n<p><strong>[28]</strong> Then I have another <strong>div</strong> with editBookmark where that button is actually up here with the pencil icon.</p>\n\n<hr />\n\n<h6 id=\"showmethodsforplaceholders\">Show methods for placeholders</h6>\n\n<p>The first thing we need to do is create two more methods, <strong>shouldShowCreating</strong> and <strong>shouldShowEditing</strong>. </p>\n\n<p><span class=\"filename\">eggly.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"20\" data-line=\"56-58,63-65,67-68\"><code class=\"language-javascript\">  $scope.currentCategory = null;  \n  $scope.setCurrentCategory = setCurrentCategory;\n  $scope.isCurrentCategory = isCurrentCategory;\n  $scope.startCreating = startCreating;\n  $scope.cancelCreating = cancelCreating;\n  $scope.startEditing = startEditing;\n  $scope.cancelEditing = cancelEditing;\n\n  function setCurrentCategory(category) {\n    $scope.currentCategory = category;\n  }\n\n  function isCurrentCategory(category) {\n    return $scope.currentCategory && category.name </mark> $scope.currentCategory.name;\n  }\n\n  ///////////////////\n  // Default State //\n  ///////////////////\n  $scope.isCreating = false;\n  $scope.isEditing = false;\n\n  ////////////////////////\n  // Enter Create State //\n  ////////////////////////\n  function startCreating() {\n    $scope.isCreating = true;\n    $scope.isEditing = false;\n  }\n\n  ///////////////////////\n  // Exit Create State //\n  ///////////////////////\n  function cancelCreating() {\n    $scope.isCreating = false;\n  }\n\n  //////////////////////\n  // Enter Edit State //\n  //////////////////////\n  function startEditing() {\n    $scope.isCreating = false;\n    $scope.isEditing = true;\n  }\n\n  /////////////////////\n  // Exit Edit State //\n  /////////////////////\n  function cancelEditing() {\n    $scope.isEditing = false;\n  }\n\n  ///////////////////\n  // Show Creating //\n  ///////////////////\n  function shouldShowCreating() {\n    return $scope.currentCategory && !$scope.isEditing;\n  }\n\n  //////////////////\n  // Show Editing //\n  //////////////////\n  function shouldShowEditing() {\n    return $scope.isEditing && !$scope.isCreating;\n  }\n\n  $scope.shouldShowCreating = shouldShowCreating;\n  $scope.shouldShowEditing = shouldShowEditing;\n\n})</code></pre>\n\n<p><strong>[75-77]</strong> We are going to call this <strong>shouldShowCreating</strong>.</p>\n\n<p><strong>[76]</strong> We are going to <strong>return true</strong> if <strong>$scope.currentCategory</strong> is defined and <strong>not null</strong> as well as <strong>we are not editing</strong>.</p>\n\n<p>The reason we are checking for current category is because you have to be in a category in order to create a category.</p>\n\n<p><strong>[82-84]</strong> Then we'll do the same thing for <strong>shouldShowEditing</strong>. This will be a little bit simpler.</p>\n\n<p><strong>[83]</strong> Return <strong>true</strong> if <strong>isEditing</strong> and we are <strong>not creating</strong>.</p>\n\n<p><strong>[86-87]</strong> From here, we just need to make these available to the <strong>$scope</strong> like so.</p>\n\n<hr />\n\n<h6 id=\"hookinguptheviewwithngif\">Hooking up the view with ng-if</h6>\n\n<p>How <strong>ng-if</strong> works...</p>\n\n<blockquote>\n  <p>If it evaluates to true, then it attaches it to the DOM.</p>\n  \n  <p>If it evaluates to false, then it actually removes it from the DOM.</p>\n</blockquote>\n\n<h6 id=\"addngiftocreateplaceholder\">Add ng-if to Create placeholder</h6>\n\n<p><img src=\"/content/images/2015/03/ng-if_shouldShowCreating.png\" alt=\"ng-if shouldShowCreating\" /></p>\n\n<h6 id=\"addngiftoeditplaceholder\">Add ng-if to Edit placeholder</h6>\n\n<p><img src=\"/content/images/2015/03/ng-if_should_show_editing-1.png\" alt=\"ng-if should show editing\" /></p>\n\n<hr />\n\n<h6 id=\"settriggerwithngclick\">Set trigger with ng-click</h6>\n\n<blockquote>\n  <p>ng-click can trigger multiple functions and end ends with semi-colon ';'</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/ng-click_edit_and_create.png\" alt=\"ng-click edit and create\" /></p>\n\n<p><strong>[28]</strong> What we'll do as well is we will go up to the <strong>edit</strong> button here and let's attach an <strong>ng-click</strong>, and call the method <strong>startEditing</strong>.</p>\n\n<p><strong>[34]</strong> We can also go here and on the <strong>create</strong> button call <strong>startCreating</strong>.</p>\n\n<p>This should allow us to actually toggle between the two.</p>\n\n<p>Let's hop into the browser and see this in action.</p>\n\n<p>Now you can see that nothing is showing but if we go to a category now we can see that the create bookmark it's toggling to the create and edit state.</p>\n\n<hr />\n\n<h6 id=\"addingacancelbutton\">Adding a cancel button</h6>\n\n<p>Let's just go a step further and add a button to cancel creating and editing.</p>\n\n<p><img src=\"/content/images/2015/03/ng-click_cancel_creating.png\" alt=\"ng-click cancel creating\" /></p>\n\n<p><strong>[40]</strong> It's calling <strong>ng-click=\"cancelCreating\"</strong></p>\n\n<p><img src=\"/content/images/2015/03/ng-click_cancel_editing.png\" alt=\"ng-click cancel editing\" /></p>\n\n<p><strong>[46]</strong> We can do the same thing for editing.</p>\n\n<p>Hop into the HTML, we'll go to a category and then from here I can select this and go into an edit bookmark state, click cancel, and then it goes back to the create bookmark.</p>\n\n<p>You can see that the create bookmark state is still showing.</p>\n\n<p><img src=\"/content/images/2015/03/still_showing.png\" alt=\"still showing\" /></p>\n\n<p><img src=\"/content/images/2015/03/ng-if_is_creating.png\" alt=\"ng-if is creating\" /></p>\n\n<p><strong>[38]</strong> Let's actually set this up to toggle <strong>ng-if=\"isCreating\"</strong>.</p>\n\n<p>Let's refresh. We've got a category. Now you can see that we're toggling between the creating state here as well as the editing state. Now we are back to this default load state.</p>\n\n<p><img src=\"/content/images/2015/03/default_load_state.png\" alt=\"default load state\" /></p>\n\n<p>One other thing that we can do is you can see here that if I'm in a creating state and I go to a category that we still have this latent state staying open even though we're in a new category.</p>\n\n<hr />\n\n<h6 id=\"fixingeditcreatestatewhileswitchingcategories\">Fixing edit &amp; create state while switching categories</h6>\n\n<p>Let's go ahead and fix that. Let's hop back over to the controller. </p>\n\n<p><span class=\"filename\">eggly.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"28\" data-line=\"4,5\"><code class=\"language-javascript\">function setCurrentCategory(category) {  \n    $scope.currentCategory = category;\n\n    $scope.cancelCreating();\n    $scope.cancelEditing();\n  }</code></pre>\n\n<p><strong>[29]</strong> When we setCurrentCategory we are going to cancelCreating and we will also cancelEditing.</p>\n\n<p>This will just reset everything.</p>\n\n<p>Refresh the browser.</p>\n\n<p>We'll go here and then when I click to a new category it resets it back to its default state.</p>\n\n<hr />\n\n<h6 id=\"summary\">Summary</h6>\n\n<p>Just to review, what we've done is we have created two variables, <strong>isCreating</strong> and <strong>isEditing</strong>.</p>\n\n<p>Then we've created functions around managing and manipulating those two properties, <strong>isCreating</strong> and <strong>isEditing</strong>.</p>\n\n<p>We've also created two methods to actually watch those, <strong>shouldShowCreating</strong> and <strong>shouldShowEditing</strong>.</p>\n\n<p>From there, in our HTML using <strong>ng-if</strong> we are showing the creating state as well as the creating form as well as the editing state and then using <strong>ng-click</strong> we are calling either <strong>cancelCreating</strong> or <strong>cancelEditing</strong>.</p>\n\n<hr />\n\n<h6 id=\"whatsnext\">What's next</h6>\n\n<p>This was a little bit of a foundational exercise for the next videos that we're going to do where we're actually going to hook that up to allow you to create a bookmark and edit a bookmark.</p>\n\n<p>Having this state in place to toggle between the two and manage it is critical for building out the application.</p>\n\n<p><img src=\"/content/images/2015/03/deal-with-it-train.gif\" alt=\"\" /></p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-an-angular-app-filters/\" style=\"width: 50%;\">Filters</a><a class=\"next-article\" href=\"/building-an-angular-app-add-a-bookmark-with-ng-submit-and-ng-model/\" style=\"float: right;width: 50%;text-align: right;\">Adding a bookmark</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1426613537403,"created_by":1,"updated_at":1426799673796,"updated_by":1,"published_at":1426613583378,"published_by":1},{"id":35,"uuid":"61e76df4-f57f-4323-82ce-c8a61b8bc721","title":"Building an Angular App: Adding bookmarks","slug":"building-an-angular-app-add-a-bookmark-with-ng-submit-and-ng-model","markdown":"> We are going to learn how to create a bookmark by adding it to the bookmarks collection. \n\n> We will learn how to submit the contents of a form to the controller to be processed by exploring ng-submit and ng-model.\n\n![Part 1: Getting Started](/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png)\n\nWe saw how to toggle between the creating and editing state of the bookmarks.\n\nNow, we are going to **take this placeholder here and replace it with an actual form** that we can then **take that contents and push it into the bookmarks collection**.\n\n---\n\n###### Add Create Form triggerd by ng-show ######\n\n![paste in form](/content/images/2015/03/paste_in_form.png)\n\n**[38]** What we have is a form that is either showing or hiding depending on the value of the **isCreating** variable on **$scope**.\n\n**ng-show** displays element if it evaluates to **true**.\n\n---\n\n###### Submitting form with ng-submit ######\n\n![ng-submit create bookmark](/content/images/2015/03/ng-submit_create_bookmark.png)\n\n**[38]** The interesting thing about forms in AngularJS is that you can attach an **ng-submit** action to the form.\n\n**[47]** It's very much like **ng-click**, but **instead of actually clicking the button**, **you can just hit enter** and **it will submit**.\n\nIn this case, we are calling in **createBookmark** and we are sending in a **newBookmark** object.\n\n---\n\n###### Binding the properties in form to $scope ######\n\n![input field properties binding](/content/images/2015/03/input_field_properties_binding.png)\n\n**[41, 45]** This **newBookmark** object is further being defined on the input fields that we have.\n\nWe are actually binding the property of the **title input field** and the **URL input field** to the properties of **title** and **URL** on the **newBookmark** object, respectively.\n\n> Previous to AngularJS, you would have had to use something like jQuery to actually call and get the value of the text box.\n\n> Now, using **ng-model**, you actually have two way data binding that will keep track of that for you.\n\n![newBookmark object](/content/images/2015/03/newBookmark_object.png)\n\n**[38, 41, 45]** When this **newBookmark object** gets to create a bookmark, the properties of the form or the state of the form has already been populated onto this object, and you do not have to actually query the DOM to find out what that value is.\n\nIn the JavaScript (controller), we are going to start to build out this functionality.\n\n---\n\n###### CRUD in the controller ######\n\n<span class=\"filename\">eggly.js</span>\n<pre class=\"line-numbers\" data-line=\"54,96-102,104,109-113,115\"><code class=\"language-javascript\">angular.module('Eggly', [])\n.controller('MainController', function($scope){\n  $scope.categories = [\n    {\"id\": 0, \"name\": \"Development\"},\n    {\"id\": 1, \"name\": \"Design\"},\n    {\"id\": 2, \"name\": \"Excercise\"},\n    {\"id\": 3, \"name\": \"Soccer\"}\n  ];\n\n  $scope.bookmarks = [\n    {\"id\": 0, \"title\": \"Soccer Game History Page\", \"url\": \"http://angular.js\", \"category\": \"Soccer\"},\n    {\"id\": 1, \"title\": \"Development History Page\", \"url\": \"http://angular.js\", \"category\": \"Development\"},\n    {\"id\": 2, \"title\": \"Design History Page\", \"url\": \"http://angular.js\", \"category\": \"Design\"},\n    {\"id\": 2, \"title\": \"Design History Page\", \"url\": \"http://materialup.com\", \"category\": \"Design\"},\n    {\"id\": 3, \"title\": \"Gym Listings\", \"url\": \"http://angular.js\", \"category\": \"Excercise\"},\n    {\"id\": 4, \"title\": \"YMCA\", \"url\": \"http://angular.js\", \"category\": \"Excercise\"},\n    {\"id\": 5, \"title\": \"FIFA\", \"url\": \"http://angular.js\", \"category\": \"Soccer\"}\n  ];\n\n  $scope.currentCategory = null;\n  $scope.setCurrentCategory = setCurrentCategory;\n  $scope.isCurrentCategory = isCurrentCategory;\n  $scope.startCreating = startCreating;\n  $scope.cancelCreating = cancelCreating;\n  $scope.startEditing = startEditing;\n  $scope.cancelEditing = cancelEditing;\n  $scope.shouldShowCreating = shouldShowCreating;\n  $scope.shouldShowEditing = shouldShowEditing;\n\n  function setCurrentCategory(category) {\n    $scope.currentCategory = category;\n\n    $scope.cancelCreating();\n    $scope.cancelEditing();\n  }\n\n  function isCurrentCategory(category) {\n    return $scope.currentCategory && category.name == $scope.currentCategory.name;\n  }\n\n  ///////////////////\n  // Default State //\n  ///////////////////\n  $scope.isCreating = false;\n  $scope.isEditing = false;\n\n  ////////////////////////\n  // Enter Create State //\n  ////////////////////////\n  function startCreating() {\n    $scope.isCreating = true;\n    $scope.isEditing = false;\n\n    resetCreateForm();\n  }\n\n  ///////////////////////\n  // Exit Create State //\n  ///////////////////////\n  function cancelCreating() {\n    $scope.isCreating = false;\n  }\n\n  //////////////////////\n  // Enter Edit State //\n  //////////////////////\n  function startEditing() {\n    $scope.isCreating = false;\n    $scope.isEditing = true;\n  }\n\n  /////////////////////\n  // Exit Edit State //\n  /////////////////////\n  function cancelEditing() {\n    $scope.isEditing = false;\n  }\n\n  ///////////////////\n  // Show Creating //\n  ///////////////////\n  function shouldShowCreating() {\n    return $scope.currentCategory && !$scope.isEditing;\n  }\n\n  //////////////////\n  // Show Editing //\n  //////////////////\n  function shouldShowEditing() {\n    return $scope.isEditing && !$scope.isCreating;\n  }\n\n  ///////////////////////\n  // Reset Create Form //\n  ///////////////////////\n  function resetCreateForm() {\n    $scope.newBookmark = {\n      title: '',\n      url: '',\n      category: $scope.currentCategory\n    };\n  }\n\n  $scope.resetCreateForm = resetCreateForm;\n\n  //////////\n  // CRUD //\n  //////////\n  function createBookmark(bookmark) {\n    bookmark.id = $scope.bookmarks.length;\n    $scope.bookmarks.push(bookmark);\n    resetCreateForm();\n  }\n\n  $scope.createBookmark = createBookmark;\n\n})</code></pre>\n\n**[109-113]** I'm going to create a method called **createBookmark** that takes a **bookmark** property.\n\n**[110]** And then, from here, I am going to actually set an **ID** property on **bookmark**.\n\n> I am just going to, for the sake of demonstration set the **ID** to the **length of bookmarks**.\n\n> This is certainly not something that I would do in production, but for this case, I think it will at least guarantee or facilitate a semi-unique ID for the **bookmark**.\n\n**[111]** From here, let's just go ahead and push the bookmark object into bookmarks.\n\n**[112]** Then, what I need to do is also I need to reset the **newBookmark** object.\n\nI'm going to create a method here called **resetCreateForm**.\n\n**[96-102]** Define **resetCreateForm**.\n\n**[97-101]** What this is going to do is take the **newBookmark** object that we saw in our form and just reset it to a **default state**.\n\n**[98]** Set title to an empty string.\n\n**[99]** Set URL to an empty string.\n\n**[100]** Initialize category to **$scope.currentCategory**\n\n**[54]** What we'll also do is when we call **startCreating** we're going to **resetCreateForm**, as well. Therefore it always has the most recent current category.\n\n**[104]** From here, we just need to make this available to the **$scope** object\n\n---\n\n###### Add a bookmark ######\n\nLet's hope into the application here and see this in action.\n\n1. Create a bookmark, \"*One Hungry Mind*\".\n- When I hit enter it should show up in this array.\n\nThere we have it. It's simply taking the new bookmark properties title and URL, and then, pushing that object into the bookmarks collection, if you will.\n\n![one hungry mind](/content/images/2015/03/one_hungry_mind.png)\n\nThat is actually all that needs to be done to create a **bookmark**.\n\n---\n\n###### Summary ######\nWe created a form using **ng-model** that we're binding to the properties of a **newBookmark** object.\n\nOn submit, we are sending the **newBookmark** object into **createBookmark** which is pushing it into the **bookmarks array** and **resetting** the **create form** by overwriting the **newBookmark** object to an empty state or title and URL being empty strings with **category** being **$scope.currentCategory**.\n\n![Kermit typing fast](/content/images/2015/03/kermit-typing-super-fast.gif)\n\n---\n\n<a class=\"prev-article\" href=\"/building-an-angular-app-simple-states/\" style=\"width: 50%;\">Simple States</a><a class=\"next-article\" href=\"/building-an-angular-app-editing-a-bookmark-with-ng-model-and-a-controller/\" style=\"float: right;width: 50%;text-align: right;\">Editing a bookmark</a>","html":"<blockquote>\n  <p>We are going to learn how to create a bookmark by adding it to the bookmarks collection. </p>\n  \n  <p>We will learn how to submit the contents of a form to the controller to be processed by exploring ng-submit and ng-model.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png\" alt=\"Part 1: Getting Started\" /></p>\n\n<p>We saw how to toggle between the creating and editing state of the bookmarks.</p>\n\n<p>Now, we are going to <strong>take this placeholder here and replace it with an actual form</strong> that we can then <strong>take that contents and push it into the bookmarks collection</strong>.</p>\n\n<hr />\n\n<h6 id=\"addcreateformtriggerdbyngshow\">Add Create Form triggerd by ng-show</h6>\n\n<p><img src=\"/content/images/2015/03/paste_in_form.png\" alt=\"paste in form\" /></p>\n\n<p><strong>[38]</strong> What we have is a form that is either showing or hiding depending on the value of the <strong>isCreating</strong> variable on <strong>$scope</strong>.</p>\n\n<p><strong>ng-show</strong> displays element if it evaluates to <strong>true</strong>.</p>\n\n<hr />\n\n<h6 id=\"submittingformwithngsubmit\">Submitting form with ng-submit</h6>\n\n<p><img src=\"/content/images/2015/03/ng-submit_create_bookmark.png\" alt=\"ng-submit create bookmark\" /></p>\n\n<p><strong>[38]</strong> The interesting thing about forms in AngularJS is that you can attach an <strong>ng-submit</strong> action to the form.</p>\n\n<p><strong>[47]</strong> It's very much like <strong>ng-click</strong>, but <strong>instead of actually clicking the button</strong>, <strong>you can just hit enter</strong> and <strong>it will submit</strong>.</p>\n\n<p>In this case, we are calling in <strong>createBookmark</strong> and we are sending in a <strong>newBookmark</strong> object.</p>\n\n<hr />\n\n<h6 id=\"bindingthepropertiesinformtodscope\">Binding the properties in form to $scope</h6>\n\n<p><img src=\"/content/images/2015/03/input_field_properties_binding.png\" alt=\"input field properties binding\" /></p>\n\n<p><strong>[41, 45]</strong> This <strong>newBookmark</strong> object is further being defined on the input fields that we have.</p>\n\n<p>We are actually binding the property of the <strong>title input field</strong> and the <strong>URL input field</strong> to the properties of <strong>title</strong> and <strong>URL</strong> on the <strong>newBookmark</strong> object, respectively.</p>\n\n<blockquote>\n  <p>Previous to AngularJS, you would have had to use something like jQuery to actually call and get the value of the text box.</p>\n  \n  <p>Now, using <strong>ng-model</strong>, you actually have two way data binding that will keep track of that for you.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/newBookmark_object.png\" alt=\"newBookmark object\" /></p>\n\n<p><strong>[38, 41, 45]</strong> When this <strong>newBookmark object</strong> gets to create a bookmark, the properties of the form or the state of the form has already been populated onto this object, and you do not have to actually query the DOM to find out what that value is.</p>\n\n<p>In the JavaScript (controller), we are going to start to build out this functionality.</p>\n\n<hr />\n\n<h6 id=\"crudinthecontroller\">CRUD in the controller</h6>\n\n<p><span class=\"filename\">eggly.js</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"54,96-102,104,109-113,115\"><code class=\"language-javascript\">angular.module('Eggly', [])  \n.controller('MainController', function($scope){\n  $scope.categories = [\n    {\"id\": 0, \"name\": \"Development\"},\n    {\"id\": 1, \"name\": \"Design\"},\n    {\"id\": 2, \"name\": \"Excercise\"},\n    {\"id\": 3, \"name\": \"Soccer\"}\n  ];\n\n  $scope.bookmarks = [\n    {\"id\": 0, \"title\": \"Soccer Game History Page\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Soccer\"},\n    {\"id\": 1, \"title\": \"Development History Page\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Development\"},\n    {\"id\": 2, \"title\": \"Design History Page\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Design\"},\n    {\"id\": 2, \"title\": \"Design History Page\", \"url\": \"<a href=\"http://materialup.com\">http://materialup.com</a>\", \"category\": \"Design\"},\n    {\"id\": 3, \"title\": \"Gym Listings\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Excercise\"},\n    {\"id\": 4, \"title\": \"YMCA\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Excercise\"},\n    {\"id\": 5, \"title\": \"FIFA\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Soccer\"}\n  ];\n\n  $scope.currentCategory = null;\n  $scope.setCurrentCategory = setCurrentCategory;\n  $scope.isCurrentCategory = isCurrentCategory;\n  $scope.startCreating = startCreating;\n  $scope.cancelCreating = cancelCreating;\n  $scope.startEditing = startEditing;\n  $scope.cancelEditing = cancelEditing;\n  $scope.shouldShowCreating = shouldShowCreating;\n  $scope.shouldShowEditing = shouldShowEditing;\n\n  function setCurrentCategory(category) {\n    $scope.currentCategory = category;\n\n    $scope.cancelCreating();\n    $scope.cancelEditing();\n  }\n\n  function isCurrentCategory(category) {\n    return $scope.currentCategory && category.name == $scope.currentCategory.name;\n  }\n\n  ///////////////////\n  // Default State //\n  ///////////////////\n  $scope.isCreating = false;\n  $scope.isEditing = false;\n\n  ////////////////////////\n  // Enter Create State //\n  ////////////////////////\n  function startCreating() {\n    $scope.isCreating = true;\n    $scope.isEditing = false;\n\n    resetCreateForm();\n  }\n\n  ///////////////////////\n  // Exit Create State //\n  ///////////////////////\n  function cancelCreating() {\n    $scope.isCreating = false;\n  }\n\n  //////////////////////\n  // Enter Edit State //\n  //////////////////////\n  function startEditing() {\n    $scope.isCreating = false;\n    $scope.isEditing = true;\n  }\n\n  /////////////////////\n  // Exit Edit State //\n  /////////////////////\n  function cancelEditing() {\n    $scope.isEditing = false;\n  }\n\n  ///////////////////\n  // Show Creating //\n  ///////////////////\n  function shouldShowCreating() {\n    return $scope.currentCategory && !$scope.isEditing;\n  }\n\n  //////////////////\n  // Show Editing //\n  //////////////////\n  function shouldShowEditing() {\n    return $scope.isEditing && !$scope.isCreating;\n  }\n\n  ///////////////////////\n  // Reset Create Form //\n  ///////////////////////\n  function resetCreateForm() {\n    $scope.newBookmark = {\n      title: '',\n      url: '',\n      category: $scope.currentCategory\n    };\n  }\n\n  $scope.resetCreateForm = resetCreateForm;\n\n  //////////\n  // CRUD //\n  //////////\n  function createBookmark(bookmark) {\n    bookmark.id = $scope.bookmarks.length;\n    $scope.bookmarks.push(bookmark);\n    resetCreateForm();\n  }\n\n  $scope.createBookmark = createBookmark;\n\n})</code></pre>\n\n<p><strong>[109-113]</strong> I'm going to create a method called <strong>createBookmark</strong> that takes a <strong>bookmark</strong> property.</p>\n\n<p><strong>[110]</strong> And then, from here, I am going to actually set an <strong>ID</strong> property on <strong>bookmark</strong>.</p>\n\n<blockquote>\n  <p>I am just going to, for the sake of demonstration set the <strong>ID</strong> to the <strong>length of bookmarks</strong>.</p>\n  \n  <p>This is certainly not something that I would do in production, but for this case, I think it will at least guarantee or facilitate a semi-unique ID for the <strong>bookmark</strong>.</p>\n</blockquote>\n\n<p><strong>[111]</strong> From here, let's just go ahead and push the bookmark object into bookmarks.</p>\n\n<p><strong>[112]</strong> Then, what I need to do is also I need to reset the <strong>newBookmark</strong> object.</p>\n\n<p>I'm going to create a method here called <strong>resetCreateForm</strong>.</p>\n\n<p><strong>[96-102]</strong> Define <strong>resetCreateForm</strong>.</p>\n\n<p><strong>[97-101]</strong> What this is going to do is take the <strong>newBookmark</strong> object that we saw in our form and just reset it to a <strong>default state</strong>.</p>\n\n<p><strong>[98]</strong> Set title to an empty string.</p>\n\n<p><strong>[99]</strong> Set URL to an empty string.</p>\n\n<p><strong>[100]</strong> Initialize category to <strong>$scope.currentCategory</strong></p>\n\n<p><strong>[54]</strong> What we'll also do is when we call <strong>startCreating</strong> we're going to <strong>resetCreateForm</strong>, as well. Therefore it always has the most recent current category.</p>\n\n<p><strong>[104]</strong> From here, we just need to make this available to the <strong>$scope</strong> object</p>\n\n<hr />\n\n<h6 id=\"addabookmark\">Add a bookmark</h6>\n\n<p>Let's hope into the application here and see this in action.</p>\n\n<ol>\n<li>Create a bookmark, \"<em>One Hungry Mind</em>\".  </li>\n<li>When I hit enter it should show up in this array.</li>\n</ol>\n\n<p>There we have it. It's simply taking the new bookmark properties title and URL, and then, pushing that object into the bookmarks collection, if you will.</p>\n\n<p><img src=\"/content/images/2015/03/one_hungry_mind.png\" alt=\"one hungry mind\" /></p>\n\n<p>That is actually all that needs to be done to create a <strong>bookmark</strong>.</p>\n\n<hr />\n\n<h6 id=\"summary\">Summary</h6>\n\n<p>We created a form using <strong>ng-model</strong> that we're binding to the properties of a <strong>newBookmark</strong> object.</p>\n\n<p>On submit, we are sending the <strong>newBookmark</strong> object into <strong>createBookmark</strong> which is pushing it into the <strong>bookmarks array</strong> and <strong>resetting</strong> the <strong>create form</strong> by overwriting the <strong>newBookmark</strong> object to an empty state or title and URL being empty strings with <strong>category</strong> being <strong>$scope.currentCategory</strong>.</p>\n\n<p><img src=\"/content/images/2015/03/kermit-typing-super-fast.gif\" alt=\"Kermit typing fast\" /></p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-an-angular-app-simple-states/\" style=\"width: 50%;\">Simple States</a><a class=\"next-article\" href=\"/building-an-angular-app-editing-a-bookmark-with-ng-model-and-a-controller/\" style=\"float: right;width: 50%;text-align: right;\">Editing a bookmark</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1426619848369,"created_by":1,"updated_at":1426812501634,"updated_by":1,"published_at":1426619854106,"published_by":1},{"id":36,"uuid":"6a8aaa6b-3316-4d73-bf58-91c96b297dc1","title":"Building an Angular App: Editing bookmarks","slug":"building-an-angular-app-editing-a-bookmark-with-ng-model-and-a-controller","markdown":"> We are going to learn how to edit an existing bookmark by building on a lot of the same techniques from the previous video.\n\n> We will also learn how to edit a bookmark and not actually save the change back to the collection until we are ready.\n\n![Part 1: Getting Started](/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png)\n\nPreviously we saw **how to actually create a bookmark and how using forms** in AngularJS worked.\n\nWe are going to continue along that line of thinking by using those same techniques to edit an existing bookmark.\n\nIf we go here and we click the edit icon or the pencil icon, we are going to replace this **edit bookmark placeholder with the actual edit form**.\n\n![edit placeholder](/content/images/2015/03/edit_placeholder.png)\n\n---\n\n###### Add Edit Form ######\n\nLet's hop into the view's code and I am going to paste in the actual edit form.\n\n![edit form](/content/images/2015/03/edit_form.png)\n\nThis is very similar to the create form that we saw in the previous video.\n\n![ng-show should show editing](/content/images/2015/03/ng-show_should_show_editing-1.png)\n\n**[52]** We're toggling this div by the value that is returned from **shouldShowEditing**.\n\n**[53]** Then we're also keeping track of the **bookmark** that we're editing through an **editedBookmark** property.\n\n**[55]** Then we have this form that we're calling **updateBookmark** on submit and it's sending in the **editedBookmark**\n\n**[58,62]** From there, we are binding using **ng-model** to the **title** and **URL** of **editedBookmark**.\n\n---\n\n###### Setup Edit Bookmark in Controller ######\n\n<span class=\"filename\">eggly.js</span>\n<pre class=\"line-numbers\" data-start=\"116\" data-line=\"4,6-8,10\"><code class=\"language-javascript\">  ///////////////////////////////////////////\n  // Setting the temporary edited bookmark //\n  ///////////////////////////////////////////\n  $scope.editedBookmark = null;\n\n  function setEditedBookmark(bookmark) {\n    $scope.editedBookmark = bookmark;\n  }\n\n  $scope.setEditedBookmark = setEditedBookmark;\n\n})</code></pre>\n\n**[119]** The first thing we need to do is create an **editedBookmark** property. We're going to set this to **null**.\n\n**[121-123]** Then from here, we are going to create a method called **setEditedBookmark**, that accepts a **bookmark** parameter and simply assigns the value of **editedBookmark** to this parameter.\n\n**[125]** Then we are going to assign this to the **$scope** so that now it is available to the view.\n\n---\n\n###### Call multiple methods on ng-click of pencil ######\n\nThe cool thing about AngularJS and the **ng-click**, **ng-submit**, and other action directives is you **can actually call more than one method** when that action is actually executed by the users.\n\n![call more than one method](/content/images/2015/03/call_more_than_one_method.png)\n\n**[28]** In an incremental step set the **editedBookmark**, we are going to do that when the user clicks the edit icon.\n\nIn this case it's **setEditedBookmark**, passing the **bookmark**, **colon**.\n\nIt's going to set the **editedBookmark** and then initiate the **startEditing** state as well.\n\n---\n\nLet's hop into the HTML and see what we are working with.\n\n![binding the bookmark](/content/images/2015/03/binding_the_bookmark.png)\n\nYou can see that it actually is setting the **editedBookmark** property and binding to it in the form.\n\nNow, the problem is when I start to type here, not only does it update the property on the form itself, but also up here. The problem is if I cancel, the changes that I've made have already taken place and I have no way to undo them.\n\n![changes already taken place](/content/images/2015/03/changes_already_taken_place.png)\n\n---\n\n###### Angular copy of bookmark ######\n\nWhat we're actually going to do is hop back into the code and the way around that is to:\n\n<span class=\"filename\">eggly.js</span>\n<pre class=\"line-numbers\" data-start=\"116\" data-line=\"7\"><code class=\"language-javascript\">  ///////////////////////////////////////////\n  // Setting the temporary edited bookmark //\n  ///////////////////////////////////////////\n  $scope.editedBookmark = null;\n\n  function setEditedBookmark(bookmark) {\n    $scope.editedBookmark = angular.copy(bookmark);\n  }\n\n  $scope.setEditedBookmark = setEditedBookmark;\n\n})</code></pre>\n\n**[122]** When you set the **editedBookmark**, we are going to use **angular.copy** and actually create a copy of the **bookmark** and assign that to **editedBookmark**.\n\nThen, when we are done and we actually going to edit the bookmark and we've completed that, then we will write it back to the bookmarks collection.\n\n---\n\nLet's see this in action, just refresh the browser. Here, as you can see that when I type it updates locally in the edit form, but it does not actually update outside of that to the actual bookmark that we are editing.\n\n![editing in form only](/content/images/2015/03/editing_in_form_only.png)\n\n---\n\n###### Write the edit back to bookmarks ######\n\n<span class=\"filename\">eggly.js</span>\n<pre class=\"line-numbers\" data-start=\"125\" data-line=\"4,5-7,8,10,11,14\"><code class=\"language-javascript\">  ///////////////////////////\n  // Updating the bookmark //\n  ///////////////////////////\n  function updateBookmark(bookmark) {\n    var index = _.findIndex($scope.bookmarks, function(bm){\n      return bm.id == bookmark.id;\n    });\n    $scope.bookmarks[index] = bookmark;\n\n    $scope.editedBookmark = null;\n    $scope.isEditing = false;\n  }\n\n  $scope.updateBookmark = updateBookmark;\n\n})</code></pre>\n\n**[128]** Create a method called **updateBookmark** that takes a **bookmark** property.\n\n**[129-131]** From here we are going to get the index of the bookmark that we are editing.\n\nThis is where lo-dash comes in.\n\n**[129]** We're going to call **findIndex** and we're going to loop over **bookmarks**\n\n**[130]** and then we're just going to set this method in here to compare the current bookmark.id to the bookmark.id that we passed in.\n\n**[132]** Then from here, we are going to simply say **$scope.bookmarks[index] = bookmark**.\n\n**[134]** A little bit of housecleaning, we are going to set **editedBookmark** to **null**\n\n**[135]** and we are going to set the **isEditing** state to **false**\n\n**[138]** Let's make this available to the view.\n\n---\n\n###### Try it out ######\n\nLet's refresh the page, click on the edit icon, and let's update this.\n\nClick enter and then now you can see the bookmark has actually been copied back.\n\nThe edited bookmark has been copied back to the bookmarks array.\n\nThen when we click on this again, the state is actually persisting and then we can set this back, click save, and it's good to go.\n\n---\n\n###### Show selected bookmark being edited ######\n\nNow, one UX improvement that we can make is when you are editing a bookmark, it would be nice if we actually could visually show that this is the bookmark that's being edited.\n\nWe can do that fairly easy. Let's add one more feature to this before we call it a day.\n\n<span class=\"filename\">eggly.js</span>\n<pre class=\"line-numbers\" data-start=\"139\" data-line=\"4,5,8\"><code class=\"language-javascript\">  //////////////////////////////////////////////////////\n  // Determining current bookmark that's being edited //\n  //////////////////////////////////////////////////////\n  function isSelectedBookmark(bookmarkID) {\n    return $scope.editedBookmark && $scope.editedBookmark.id == bookmarkID;\n  }\n\n  $scope.isSelectedBookmark = isSelectedBookmark;</code></pre>\n\n**[142]** I'm going to create one more method called **isSelectedBookmark** and this is going to be similar to what we did with the selected category.\n\n**[143]** We are going to, first, check to see if **editedBookmark is not equal to null and if the editedBookmark.id equals bookmarkId**.\n\nIf it returns **true****, then we know we have the selected bookmark**.\n\n**[146]** provide view with method through the **$scope**\n\n---\n\n###### Show selected bookmark in view ######\n\n![is selected bookmark in view](/content/images/2015/03/is_selected_bookmark_in_view.png)\n\n**[26]** Then, in the HTML, we are going to attach an **ng-class**. We are going to set an **active** class here. We are going to call **isSelectedBookmark** and pass in the **bookmark.id**.\n\nLet's see what happens when we refresh this and edit a bookmark. You can see here, we are now applying the active class and its setting the bookmark that is currently active to blue.\n\n![setting the active class](/content/images/2015/03/setting_the_active_class.png)\n\nThat's just a nice visual indicator to show this is the bookmark we're editing and we're doing this by actually binding the CSS to the state of the application or, essentially, your view model, which is the controller and the scope together.\n\n---\n\n###### What's next ######\n\nStay tuned for the next video where I'm going to show you how to **delete a bookmark, thus completing the create, read, update, and delete cycle (CRUD)**.\n\n![Cat running nuclear power plant](/content/images/2015/03/cat-on-nuclear-power-plant-controls.gif)\n\n---\n\n<a class=\"prev-article\" href=\"/building-an-angular-app-add-a-bookmark-with-ng-submit-and-ng-model/\" style=\"width: 50%;\">Adding a bookmark</a><a class=\"next-article\" href=\"/building-an-angular-app-deleting-an-item-from-a-collection/\" style=\"float: right;width: 50%;text-align: right;\">Deleting a bookmark</a>","html":"<blockquote>\n  <p>We are going to learn how to edit an existing bookmark by building on a lot of the same techniques from the previous video.</p>\n  \n  <p>We will also learn how to edit a bookmark and not actually save the change back to the collection until we are ready.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png\" alt=\"Part 1: Getting Started\" /></p>\n\n<p>Previously we saw <strong>how to actually create a bookmark and how using forms</strong> in AngularJS worked.</p>\n\n<p>We are going to continue along that line of thinking by using those same techniques to edit an existing bookmark.</p>\n\n<p>If we go here and we click the edit icon or the pencil icon, we are going to replace this <strong>edit bookmark placeholder with the actual edit form</strong>.</p>\n\n<p><img src=\"/content/images/2015/03/edit_placeholder.png\" alt=\"edit placeholder\" /></p>\n\n<hr />\n\n<h6 id=\"addeditform\">Add Edit Form</h6>\n\n<p>Let's hop into the view's code and I am going to paste in the actual edit form.</p>\n\n<p><img src=\"/content/images/2015/03/edit_form.png\" alt=\"edit form\" /></p>\n\n<p>This is very similar to the create form that we saw in the previous video.</p>\n\n<p><img src=\"/content/images/2015/03/ng-show_should_show_editing-1.png\" alt=\"ng-show should show editing\" /></p>\n\n<p><strong>[52]</strong> We're toggling this div by the value that is returned from <strong>shouldShowEditing</strong>.</p>\n\n<p><strong>[53]</strong> Then we're also keeping track of the <strong>bookmark</strong> that we're editing through an <strong>editedBookmark</strong> property.</p>\n\n<p><strong>[55]</strong> Then we have this form that we're calling <strong>updateBookmark</strong> on submit and it's sending in the <strong>editedBookmark</strong></p>\n\n<p><strong>[58,62]</strong> From there, we are binding using <strong>ng-model</strong> to the <strong>title</strong> and <strong>URL</strong> of <strong>editedBookmark</strong>.</p>\n\n<hr />\n\n<h6 id=\"setupeditbookmarkincontroller\">Setup Edit Bookmark in Controller</h6>\n\n<p><span class=\"filename\">eggly.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"116\" data-line=\"4,6-8,10\"><code class=\"language-javascript\">  ///////////////////////////////////////////  \n  // Setting the temporary edited bookmark //\n  ///////////////////////////////////////////\n  $scope.editedBookmark = null;\n\n  function setEditedBookmark(bookmark) {\n    $scope.editedBookmark = bookmark;\n  }\n\n  $scope.setEditedBookmark = setEditedBookmark;\n\n})</code></pre>\n\n<p><strong>[119]</strong> The first thing we need to do is create an <strong>editedBookmark</strong> property. We're going to set this to <strong>null</strong>.</p>\n\n<p><strong>[121-123]</strong> Then from here, we are going to create a method called <strong>setEditedBookmark</strong>, that accepts a <strong>bookmark</strong> parameter and simply assigns the value of <strong>editedBookmark</strong> to this parameter.</p>\n\n<p><strong>[125]</strong> Then we are going to assign this to the <strong>$scope</strong> so that now it is available to the view.</p>\n\n<hr />\n\n<h6 id=\"callmultiplemethodsonngclickofpencil\">Call multiple methods on ng-click of pencil</h6>\n\n<p>The cool thing about AngularJS and the <strong>ng-click</strong>, <strong>ng-submit</strong>, and other action directives is you <strong>can actually call more than one method</strong> when that action is actually executed by the users.</p>\n\n<p><img src=\"/content/images/2015/03/call_more_than_one_method.png\" alt=\"call more than one method\" /></p>\n\n<p><strong>[28]</strong> In an incremental step set the <strong>editedBookmark</strong>, we are going to do that when the user clicks the edit icon.</p>\n\n<p>In this case it's <strong>setEditedBookmark</strong>, passing the <strong>bookmark</strong>, <strong>colon</strong>.</p>\n\n<p>It's going to set the <strong>editedBookmark</strong> and then initiate the <strong>startEditing</strong> state as well.</p>\n\n<hr />\n\n<p>Let's hop into the HTML and see what we are working with.</p>\n\n<p><img src=\"/content/images/2015/03/binding_the_bookmark.png\" alt=\"binding the bookmark\" /></p>\n\n<p>You can see that it actually is setting the <strong>editedBookmark</strong> property and binding to it in the form.</p>\n\n<p>Now, the problem is when I start to type here, not only does it update the property on the form itself, but also up here. The problem is if I cancel, the changes that I've made have already taken place and I have no way to undo them.</p>\n\n<p><img src=\"/content/images/2015/03/changes_already_taken_place.png\" alt=\"changes already taken place\" /></p>\n\n<hr />\n\n<h6 id=\"angularcopyofbookmark\">Angular copy of bookmark</h6>\n\n<p>What we're actually going to do is hop back into the code and the way around that is to:</p>\n\n<p><span class=\"filename\">eggly.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"116\" data-line=\"7\"><code class=\"language-javascript\">  ///////////////////////////////////////////  \n  // Setting the temporary edited bookmark //\n  ///////////////////////////////////////////\n  $scope.editedBookmark = null;\n\n  function setEditedBookmark(bookmark) {\n    $scope.editedBookmark = angular.copy(bookmark);\n  }\n\n  $scope.setEditedBookmark = setEditedBookmark;\n\n})</code></pre>\n\n<p><strong>[122]</strong> When you set the <strong>editedBookmark</strong>, we are going to use <strong>angular.copy</strong> and actually create a copy of the <strong>bookmark</strong> and assign that to <strong>editedBookmark</strong>.</p>\n\n<p>Then, when we are done and we actually going to edit the bookmark and we've completed that, then we will write it back to the bookmarks collection.</p>\n\n<hr />\n\n<p>Let's see this in action, just refresh the browser. Here, as you can see that when I type it updates locally in the edit form, but it does not actually update outside of that to the actual bookmark that we are editing.</p>\n\n<p><img src=\"/content/images/2015/03/editing_in_form_only.png\" alt=\"editing in form only\" /></p>\n\n<hr />\n\n<h6 id=\"writetheeditbacktobookmarks\">Write the edit back to bookmarks</h6>\n\n<p><span class=\"filename\">eggly.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"125\" data-line=\"4,5-7,8,10,11,14\"><code class=\"language-javascript\">  ///////////////////////////  \n  // Updating the bookmark //\n  ///////////////////////////\n  function updateBookmark(bookmark) {\n    var index = _.findIndex($scope.bookmarks, function(bm){\n      return bm.id <mark> bookmark.id;\n    });\n    $scope.bookmarks[index] = bookmark;\n\n    $scope.editedBookmark = null;\n    $scope.isEditing = false;\n  }\n\n  $scope.updateBookmark = updateBookmark;\n\n})</code></pre>\n\n<p><strong>[128]</strong> Create a method called <strong>updateBookmark</strong> that takes a <strong>bookmark</strong> property.</p>\n\n<p><strong>[129-131]</strong> From here we are going to get the index of the bookmark that we are editing.</p>\n\n<p>This is where lo-dash comes in.</p>\n\n<p><strong>[129]</strong> We're going to call <strong>findIndex</strong> and we're going to loop over <strong>bookmarks</strong></p>\n\n<p><strong>[130]</strong> and then we're just going to set this method in here to compare the current bookmark.id to the bookmark.id that we passed in.</p>\n\n<p><strong>[132]</strong> Then from here, we are going to simply say <strong>$scope.bookmarks[index] = bookmark</strong>.</p>\n\n<p><strong>[134]</strong> A little bit of housecleaning, we are going to set <strong>editedBookmark</strong> to <strong>null</strong></p>\n\n<p><strong>[135]</strong> and we are going to set the <strong>isEditing</strong> state to <strong>false</strong></p>\n\n<p><strong>[138]</strong> Let's make this available to the view.</p>\n\n<hr />\n\n<h6 id=\"tryitout\">Try it out</h6>\n\n<p>Let's refresh the page, click on the edit icon, and let's update this.</p>\n\n<p>Click enter and then now you can see the bookmark has actually been copied back.</p>\n\n<p>The edited bookmark has been copied back to the bookmarks array.</p>\n\n<p>Then when we click on this again, the state is actually persisting and then we can set this back, click save, and it's good to go.</p>\n\n<hr />\n\n<h6 id=\"showselectedbookmarkbeingedited\">Show selected bookmark being edited</h6>\n\n<p>Now, one UX improvement that we can make is when you are editing a bookmark, it would be nice if we actually could visually show that this is the bookmark that's being edited.</p>\n\n<p>We can do that fairly easy. Let's add one more feature to this before we call it a day.</p>\n\n<p><span class=\"filename\">eggly.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"139\" data-line=\"4,5,8\"><code class=\"language-javascript\">  //////////////////////////////////////////////////////  \n  // Determining current bookmark that's being edited //\n  //////////////////////////////////////////////////////\n  function isSelectedBookmark(bookmarkID) {\n    return $scope.editedBookmark && $scope.editedBookmark.id </mark> bookmarkID;\n  }\n\n  $scope.isSelectedBookmark = isSelectedBookmark;</code></pre>\n\n<p><strong>[142]</strong> I'm going to create one more method called <strong>isSelectedBookmark</strong> and this is going to be similar to what we did with the selected category.</p>\n\n<p><strong>[143]</strong> We are going to, first, check to see if <strong>editedBookmark is not equal to null and if the editedBookmark.id equals bookmarkId</strong>.</p>\n\n<p>If it returns <strong>true<em>*</strong>, then we know we have the selected bookmark</em>*.</p>\n\n<p><strong>[146]</strong> provide view with method through the <strong>$scope</strong></p>\n\n<hr />\n\n<h6 id=\"showselectedbookmarkinview\">Show selected bookmark in view</h6>\n\n<p><img src=\"/content/images/2015/03/is_selected_bookmark_in_view.png\" alt=\"is selected bookmark in view\" /></p>\n\n<p><strong>[26]</strong> Then, in the HTML, we are going to attach an <strong>ng-class</strong>. We are going to set an <strong>active</strong> class here. We are going to call <strong>isSelectedBookmark</strong> and pass in the <strong>bookmark.id</strong>.</p>\n\n<p>Let's see what happens when we refresh this and edit a bookmark. You can see here, we are now applying the active class and its setting the bookmark that is currently active to blue.</p>\n\n<p><img src=\"/content/images/2015/03/setting_the_active_class.png\" alt=\"setting the active class\" /></p>\n\n<p>That's just a nice visual indicator to show this is the bookmark we're editing and we're doing this by actually binding the CSS to the state of the application or, essentially, your view model, which is the controller and the scope together.</p>\n\n<hr />\n\n<h6 id=\"whatsnext\">What's next</h6>\n\n<p>Stay tuned for the next video where I'm going to show you how to <strong>delete a bookmark, thus completing the create, read, update, and delete cycle (CRUD)</strong>.</p>\n\n<p><img src=\"/content/images/2015/03/cat-on-nuclear-power-plant-controls.gif\" alt=\"Cat running nuclear power plant\" /></p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-an-angular-app-add-a-bookmark-with-ng-submit-and-ng-model/\" style=\"width: 50%;\">Adding a bookmark</a><a class=\"next-article\" href=\"/building-an-angular-app-deleting-an-item-from-a-collection/\" style=\"float: right;width: 50%;text-align: right;\">Deleting a bookmark</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1426622369588,"created_by":1,"updated_at":1426819459318,"updated_by":1,"published_at":1426622431692,"published_by":1},{"id":37,"uuid":"dc731a95-8b2a-4c4c-b848-66e2867dcfa3","title":"Building an Angular App: Deleting bookmarks","slug":"building-an-angular-app-deleting-an-item-from-a-collection","markdown":"> We are going to complete the bookmark management functionality by showing how to delete a bookmark from the bookmarks collection.\n\n![Part 1: Getting Started](/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png)\n\nAt this point you should be able to start to identify some common patterns.\n\nFor instance, if you want to call a method from the view to the controller, you can do that using **ng-click** or **ng-submit**.\n\nOr if you want to **make a method available for the view, then you can attach it to scope** and so on.\n\n---\n\nThis is going to be a fairly straightforward and simple lesson, but I want you to focus on identifying some patterns of things that we've done in previous videos and understanding why we're doing them.\n\nFrom there, you can start to, then, apply these techniques to your own work.\n\n---\n\n###### Hook up 'X' in controller ######\n\nWhat we want to hook up is when we click this X button or this delete button, we want to remove that bookmark from the bookmarks collection.\n\nIn the controller:\n\n![delete bookmark in controller](/content/images/2015/03/delete_bookmark_in_controller.png)\n\n<span class=\"filename\">eggly.js</span>\n<pre class=\"line-numbers\" data-start=\"147\" data-line=\"4-8,10\"><code class=\"language-javascript\">  ///////////////////////\n  // Deleting bookmark //\n  ///////////////////////\n  function deleteBookmark(bookmark) {\n    _.remove($scope.bookmarks, function(bm) {\n      return bm.id == bookmark.id;\n    });\n  }\n\n  $scope.deleteBookmark = deleteBookmark;</code></pre>\n\n**[150-153]** We are going to create a method called **deleteBookmark** that accepts a **bookmark** parameter \n\n**[151]** Using lo-dash, we are going to iterate over the bookmarks collection and using the remove method.\n\n**[152]** Compare the current bookmark ID to the bookmark parameter ID, and if that returns true, then it removes it from the collection.\n\n**[156]** We need to make this available on the **$scope** \n\nThis is literally all of the functionality we need in the controller to delete a bookmark.\n\nWe're simply passing out a bookmark, comparing the ID, if it matches with the bookmark from the collection, then we remove it.\n\n---\n\n###### Delete bookmark in view ######\n\n![delete bookmark in view](/content/images/2015/03/delete_bookmark_in_view.png)\n\n**[27]** From here, the very next thing that we need to do is call the **deleteBookmark** method.\n\nWe'll go up here to this button with the **X** in it, using **ng-click**.\n\n---\n\n###### Using lo-dash ######\n\nI'm using lo-dash here, but you can actually use a variety of libraries that accomplish the same thing.\n\nFor instance, you can use **sugar**, you can use **underscore**. I like **lodash**.\n\nIn a lot of cases, you can actually use some of the **Angular** built in functions that come with the library.\n\nI just happen to be using **lodash** in this particular case.\n\n---\n\n###### Try deleting a bookmark ######\n\nLet's refresh the page and see this in action.\n\nWhen I click this, it's going to call \"Delete bookmark\" and remove it from the collection.\n\n![click on X to remove](/content/images/2015/03/click_on_X_to_remove.png)\n\n---\n\nBy now I'm hoping that you're starting to see some of these patterns and starting to put your thinking cap on to how you could actually do some of these things in your own applications.\n\n![Oprah Excited](/content/images/2015/03/oprah-excited.gif)\n\n---\n\n<a class=\"prev-article\" href=\"/building-an-angular-app-editing-a-bookmark-with-ng-model-and-a-controller/\" style=\"width: 50%;\">Editing a bookmark</a><a class=\"next-article\" href=\"/building-an-angular-app-eggly-review/\" style=\"float: right;width: 50%;text-align: right;\">Eggly Review</a>","html":"<blockquote>\n  <p>We are going to complete the bookmark management functionality by showing how to delete a bookmark from the bookmarks collection.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png\" alt=\"Part 1: Getting Started\" /></p>\n\n<p>At this point you should be able to start to identify some common patterns.</p>\n\n<p>For instance, if you want to call a method from the view to the controller, you can do that using <strong>ng-click</strong> or <strong>ng-submit</strong>.</p>\n\n<p>Or if you want to <strong>make a method available for the view, then you can attach it to scope</strong> and so on.</p>\n\n<hr />\n\n<p>This is going to be a fairly straightforward and simple lesson, but I want you to focus on identifying some patterns of things that we've done in previous videos and understanding why we're doing them.</p>\n\n<p>From there, you can start to, then, apply these techniques to your own work.</p>\n\n<hr />\n\n<h6 id=\"hookupxincontroller\">Hook up 'X' in controller</h6>\n\n<p>What we want to hook up is when we click this X button or this delete button, we want to remove that bookmark from the bookmarks collection.</p>\n\n<p>In the controller:</p>\n\n<p><img src=\"/content/images/2015/03/delete_bookmark_in_controller.png\" alt=\"delete bookmark in controller\" /></p>\n\n<p><span class=\"filename\">eggly.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"147\" data-line=\"4-8,10\"><code class=\"language-javascript\">  ///////////////////////  \n  // Deleting bookmark //\n  ///////////////////////\n  function deleteBookmark(bookmark) {\n    _.remove($scope.bookmarks, function(bm) {\n      return bm.id == bookmark.id;\n    });\n  }\n\n  $scope.deleteBookmark = deleteBookmark;</code></pre>\n\n<p><strong>[150-153]</strong> We are going to create a method called <strong>deleteBookmark</strong> that accepts a <strong>bookmark</strong> parameter </p>\n\n<p><strong>[151]</strong> Using lo-dash, we are going to iterate over the bookmarks collection and using the remove method.</p>\n\n<p><strong>[152]</strong> Compare the current bookmark ID to the bookmark parameter ID, and if that returns true, then it removes it from the collection.</p>\n\n<p><strong>[156]</strong> We need to make this available on the <strong>$scope</strong> </p>\n\n<p>This is literally all of the functionality we need in the controller to delete a bookmark.</p>\n\n<p>We're simply passing out a bookmark, comparing the ID, if it matches with the bookmark from the collection, then we remove it.</p>\n\n<hr />\n\n<h6 id=\"deletebookmarkinview\">Delete bookmark in view</h6>\n\n<p><img src=\"/content/images/2015/03/delete_bookmark_in_view.png\" alt=\"delete bookmark in view\" /></p>\n\n<p><strong>[27]</strong> From here, the very next thing that we need to do is call the <strong>deleteBookmark</strong> method.</p>\n\n<p>We'll go up here to this button with the <strong>X</strong> in it, using <strong>ng-click</strong>.</p>\n\n<hr />\n\n<h6 id=\"usinglodash\">Using lo-dash</h6>\n\n<p>I'm using lo-dash here, but you can actually use a variety of libraries that accomplish the same thing.</p>\n\n<p>For instance, you can use <strong>sugar</strong>, you can use <strong>underscore</strong>. I like <strong>lodash</strong>.</p>\n\n<p>In a lot of cases, you can actually use some of the <strong>Angular</strong> built in functions that come with the library.</p>\n\n<p>I just happen to be using <strong>lodash</strong> in this particular case.</p>\n\n<hr />\n\n<h6 id=\"trydeletingabookmark\">Try deleting a bookmark</h6>\n\n<p>Let's refresh the page and see this in action.</p>\n\n<p>When I click this, it's going to call \"Delete bookmark\" and remove it from the collection.</p>\n\n<p><img src=\"/content/images/2015/03/click_on_X_to_remove.png\" alt=\"click on X to remove\" /></p>\n\n<hr />\n\n<p>By now I'm hoping that you're starting to see some of these patterns and starting to put your thinking cap on to how you could actually do some of these things in your own applications.</p>\n\n<p><img src=\"/content/images/2015/03/oprah-excited.gif\" alt=\"Oprah Excited\" /></p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-an-angular-app-editing-a-bookmark-with-ng-model-and-a-controller/\" style=\"width: 50%;\">Editing a bookmark</a><a class=\"next-article\" href=\"/building-an-angular-app-eggly-review/\" style=\"float: right;width: 50%;text-align: right;\">Eggly Review</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1426625276828,"created_by":1,"updated_at":1426820681557,"updated_by":1,"published_at":1426625499055,"published_by":1},{"id":38,"uuid":"2875011f-bbb5-4f2f-a31f-2d07b94ec69f","title":"Building an Angular App: Eggly Review","slug":"building-an-angular-app-eggly-review","markdown":"Let's review everything that we have learned up this point and discuss what we are going to be learning in the next section.\n\n---\n\nWelcome to another video in the Eggly series. At this point, we have actually covered a lot of ground as it pertains to Eggly functionality.\n\nWe started out with a completely static HTML page. From there, we bootstrapped AngularJS. We hooked up the categories and the bookmarks to display based on data provided by the controller and from there, we were able to actually filter the bookmarks based on the category that we selected. Then we hooked up create, read, update, and delete the bookmarks, as well as managing the editing state and the creating state of the bookmark and keeping those in sync.\n\nIf you are a beginner to AngularJS and you have followed along thus far, excellent job. I applaud you. We have actually covered quite a bit. In this video, I just wanted to review the code that we've written so far and then talk about the next series of videos that I'm going to be doing in Eggly and what we're actually going to be covering.\n\nIn the code, we created an Eggly module. You can see the main controller, we have categories and bookmarks and these are arrays with objects. From here, we are keeping track of the current category. Then we have the ability to create, to update, and delete bookmarks, as well as, we are managing the 'is creating state' and the 'is editing state'.\n\nA lot of ground in the JavaScript, as well as we have hooked up ng-repeat, ng-controller, and also, we, again, using ng-show, we are toggling the create form and the edit form. Then, in the form itself, we are using ng-submit in the 'create a bookmark' or 'update a bookmark'. We are binding it using ng-model to an appropriate object on scope.\n\nWe've done really well so far but there's still a lot of room for us to cover. So this series or the videos up to this point, has been geared towards somebody who is new to AngularJS and looking to get their feet wet. Now I want to talk about what we're actually going to cover in the next series of videos.\n\nAs you can see, right now, we have actually all of the functionality in this controller, right here. Within about 135 lines of code, we've done quite a bit. This is really not scalable. What would happen if we needed to add in more functionality, how would two people on a team work on the same code without colliding? Putting everything into a single controller is ultimately not scalable.\n\nIn the next video series, I am going to one, show you how to actually break your code up and organize it into sub modules, as well as I'm going to show you how to extract your data models out into services so that we have a bookmarks model, a categories model, as well as we were actually calling the server to actually get that data so I'm going to show you how to actually make a server side call and how to do that using promises.\n\nThen how to using a component system architecture, organize your code in a way that actually makes sense that you can continue to extend. For instance, bookmarks, a part of categories. You can see that the bookmarks are actually in the category and then have create, and edit.\n\nWe further define that out, as well as the templates that we are using for those individual states, as well as, we are actually going to manage the states of the application using UI router and, more specifically, state provider within UI router.\n\nIf you thought the first set of videos were exciting, stick around. The next set is going to be even more awesome, as we're going to get even deeper into the awesome things you can do with AngularJS. I cannot wait to see you on the next series of videos. Stay tuned.\n\n---\n\n<a class=\"prev-article\" href=\"/building-an-angular-app-deleting-an-item-from-a-collection/\" style=\"width: 50%;\">Deleting a bookmark</a><a class=\"next-article\" href=\"#\" style=\"float: right;width: 50%;text-align: right;\">Eggly/Angular PART 2</a>","html":"<p>Let's review everything that we have learned up this point and discuss what we are going to be learning in the next section.</p>\n\n<hr />\n\n<p>Welcome to another video in the Eggly series. At this point, we have actually covered a lot of ground as it pertains to Eggly functionality.</p>\n\n<p>We started out with a completely static HTML page. From there, we bootstrapped AngularJS. We hooked up the categories and the bookmarks to display based on data provided by the controller and from there, we were able to actually filter the bookmarks based on the category that we selected. Then we hooked up create, read, update, and delete the bookmarks, as well as managing the editing state and the creating state of the bookmark and keeping those in sync.</p>\n\n<p>If you are a beginner to AngularJS and you have followed along thus far, excellent job. I applaud you. We have actually covered quite a bit. In this video, I just wanted to review the code that we've written so far and then talk about the next series of videos that I'm going to be doing in Eggly and what we're actually going to be covering.</p>\n\n<p>In the code, we created an Eggly module. You can see the main controller, we have categories and bookmarks and these are arrays with objects. From here, we are keeping track of the current category. Then we have the ability to create, to update, and delete bookmarks, as well as, we are managing the 'is creating state' and the 'is editing state'.</p>\n\n<p>A lot of ground in the JavaScript, as well as we have hooked up ng-repeat, ng-controller, and also, we, again, using ng-show, we are toggling the create form and the edit form. Then, in the form itself, we are using ng-submit in the 'create a bookmark' or 'update a bookmark'. We are binding it using ng-model to an appropriate object on scope.</p>\n\n<p>We've done really well so far but there's still a lot of room for us to cover. So this series or the videos up to this point, has been geared towards somebody who is new to AngularJS and looking to get their feet wet. Now I want to talk about what we're actually going to cover in the next series of videos.</p>\n\n<p>As you can see, right now, we have actually all of the functionality in this controller, right here. Within about 135 lines of code, we've done quite a bit. This is really not scalable. What would happen if we needed to add in more functionality, how would two people on a team work on the same code without colliding? Putting everything into a single controller is ultimately not scalable.</p>\n\n<p>In the next video series, I am going to one, show you how to actually break your code up and organize it into sub modules, as well as I'm going to show you how to extract your data models out into services so that we have a bookmarks model, a categories model, as well as we were actually calling the server to actually get that data so I'm going to show you how to actually make a server side call and how to do that using promises.</p>\n\n<p>Then how to using a component system architecture, organize your code in a way that actually makes sense that you can continue to extend. For instance, bookmarks, a part of categories. You can see that the bookmarks are actually in the category and then have create, and edit.</p>\n\n<p>We further define that out, as well as the templates that we are using for those individual states, as well as, we are actually going to manage the states of the application using UI router and, more specifically, state provider within UI router.</p>\n\n<p>If you thought the first set of videos were exciting, stick around. The next set is going to be even more awesome, as we're going to get even deeper into the awesome things you can do with AngularJS. I cannot wait to see you on the next series of videos. Stay tuned.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-an-angular-app-deleting-an-item-from-a-collection/\" style=\"width: 50%;\">Deleting a bookmark</a><a class=\"next-article\" href=\"#\" style=\"float: right;width: 50%;text-align: right;\">Eggly/Angular PART 2</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1426626177501,"created_by":1,"updated_at":1426626790398,"updated_by":1,"published_at":1426626221517,"published_by":1},{"id":39,"uuid":"7c3e12b0-383a-4737-b784-6a409bd33fc1","title":"Blo Retainer Routine","slug":"blo-retainer-routine","markdown":"# Monthly Routine\n**Published: March 18<sup>th</sup>, 2015**\n<hr>\n+ Integrity Link Checking - using the [Integrity](https://itunes.apple.com/us/app/integrity/id513610341?mt=12) application, check all the site's links. You should generate a screen like the screenshot below once the link checking process has finished.\n\n![Integrity](/content/images/2015/03/Integrity_and_Editor_-_Playbook.png)\n\nIn the Pixbit Google Drive folder, there is a Pixbit-generated Node.js tool called 'link_checker.js' used to take the Intregrity app-generated CSV eports and turn that report into a .txt file, which can be read by a Firefox Add-on called [Grab Them All](https://addons.mozilla.org/en-US/firefox/addon/grab-them-all/). You will need to have Firefox browser installed in order to continue the Integrity link checking and screenshot collection process.","html":"<h1 id=\"monthlyroutine\">Monthly Routine</h1>\n\n<p><strong>Published: March 18<sup>th</sup>, 2015</strong></p>\n\n<hr>  \n\n<ul>\n<li>Integrity Link Checking - using the <a href=\"https://itunes.apple.com/us/app/integrity/id513610341?mt=12\">Integrity</a> application, check all the site's links. You should generate a screen like the screenshot below once the link checking process has finished.</li>\n</ul>\n\n<p><img src=\"/content/images/2015/03/Integrity_and_Editor_-_Playbook.png\" alt=\"Integrity\" /></p>\n\n<p>In the Pixbit Google Drive folder, there is a Pixbit-generated Node.js tool called 'link_checker.js' used to take the Intregrity app-generated CSV eports and turn that report into a .txt file, which can be read by a Firefox Add-on called <a href=\"https://addons.mozilla.org/en-US/firefox/addon/grab-them-all/\">Grab Them All</a>. You will need to have Firefox browser installed in order to continue the Integrity link checking and screenshot collection process.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":1426689411087,"created_by":2,"updated_at":1426701562616,"updated_by":1,"published_at":1426691369595,"published_by":2},{"id":40,"uuid":"2c5b569d-13c9-4f3c-9f38-3727d579388d","title":"AngularJS Architecture: Series Introduction","slug":"angularjs-architecture-series-introduction","markdown":"> We're going to shift from functionality to architecture.\n\n![Eggly Series 2 Banner](/content/images/2015/03/eggly-series-2-banner.png)\n\nIn the previous series, we introduced a lot of AngularJS functionality over the course of building out Eggly, our bookmarking application.\n\nThe end result is that we had a really neat application that essentially exists in two files, with all of the JavaScript living in a single controller.\n\n> This is entirely appropriate for introducing new concepts and for illustration purposes. Eventually, we need to apply this to real-life scenarios.\n\nIn this series, we are going to **shift our focus from functionality to architecture**, and how to architecture AngularJS application in the \"real-world\".\n\nWe are going to cover four main topics that will help you **create AngularJS applications that will scale and not fall apart as the demands and complexity increases**.\n\n---\n\n###### File Structure ######\n\nThe first thing that we're going to cover is **file structure**.\n\n- How do you actually structure your files and folders in a way that you can add in new features without getting lost in hierarchy?\n\n---\n\n###### Submodules ######\n\nThen, once we've established that, we're going to talk about **submodules**. \n\n- How to use submodules to organize your code into, essentially, containers so that the end result is that your main application is really just a composition of smaller, more specific pieces of code.\n\n---\n\n###### UI-Router + States ######\n\nThen, from there, we're going to learn how to actually **navigate the unique states** of our application\n\n- How to use UI-Router.\n\n---\n\n###### Services + Models ######\n\nThen, from there, we are going to use **services and models** to abstract out our business logic and domain model into a place that the rest of our application can use, but it's not encumbered by that.\n\n- What I mean is that your business logic is in the model, allowing your controllers and views to be lightweight and very specific.\n\n---\n\n###### What's next ######\n\nI'm absolutely thrilled to spend the next series of lessons with you, as I'm confident you're going to learn some great techniques that you can start to use immediately on your own projects and with your own team.\n\n---\n\n<a class=\"prev-article\" href=\"https://egghead.io/series/angularjs-application-architecture\" style=\"width: 50%;\">Video Series</a><a class=\"next-article\" href=\"/angularjs-architecture-file-structure\" style=\"float: right;width: 50%;text-align: right;\">File Structure</a>","html":"<blockquote>\n  <p>We're going to shift from functionality to architecture.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/eggly-series-2-banner.png\" alt=\"Eggly Series 2 Banner\" /></p>\n\n<p>In the previous series, we introduced a lot of AngularJS functionality over the course of building out Eggly, our bookmarking application.</p>\n\n<p>The end result is that we had a really neat application that essentially exists in two files, with all of the JavaScript living in a single controller.</p>\n\n<blockquote>\n  <p>This is entirely appropriate for introducing new concepts and for illustration purposes. Eventually, we need to apply this to real-life scenarios.</p>\n</blockquote>\n\n<p>In this series, we are going to <strong>shift our focus from functionality to architecture</strong>, and how to architecture AngularJS application in the \"real-world\".</p>\n\n<p>We are going to cover four main topics that will help you <strong>create AngularJS applications that will scale and not fall apart as the demands and complexity increases</strong>.</p>\n\n<hr />\n\n<h6 id=\"filestructure\">File Structure</h6>\n\n<p>The first thing that we're going to cover is <strong>file structure</strong>.</p>\n\n<ul>\n<li>How do you actually structure your files and folders in a way that you can add in new features without getting lost in hierarchy?</li>\n</ul>\n\n<hr />\n\n<h6 id=\"submodules\">Submodules</h6>\n\n<p>Then, once we've established that, we're going to talk about <strong>submodules</strong>. </p>\n\n<ul>\n<li>How to use submodules to organize your code into, essentially, containers so that the end result is that your main application is really just a composition of smaller, more specific pieces of code.</li>\n</ul>\n\n<hr />\n\n<h6 id=\"uirouterstates\">UI-Router + States</h6>\n\n<p>Then, from there, we're going to learn how to actually <strong>navigate the unique states</strong> of our application</p>\n\n<ul>\n<li>How to use UI-Router.</li>\n</ul>\n\n<hr />\n\n<h6 id=\"servicesmodels\">Services + Models</h6>\n\n<p>Then, from there, we are going to use <strong>services and models</strong> to abstract out our business logic and domain model into a place that the rest of our application can use, but it's not encumbered by that.</p>\n\n<ul>\n<li>What I mean is that your business logic is in the model, allowing your controllers and views to be lightweight and very specific.</li>\n</ul>\n\n<hr />\n\n<h6 id=\"whatsnext\">What's next</h6>\n\n<p>I'm absolutely thrilled to spend the next series of lessons with you, as I'm confident you're going to learn some great techniques that you can start to use immediately on your own projects and with your own team.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"https://egghead.io/series/angularjs-application-architecture\" style=\"width: 50%;\">Video Series</a><a class=\"next-article\" href=\"/angularjs-architecture-file-structure\" style=\"float: right;width: 50%;text-align: right;\">File Structure</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1427140362157,"created_by":1,"updated_at":1427141343190,"updated_by":1,"published_at":1427140940926,"published_by":1},{"id":41,"uuid":"0beb8911-aeb0-44ec-9a77-bf90fa87c85d","title":"AngularJS Architecture: File Structure","slug":"angularjs-architecture-file-structure","markdown":"> Let's talk about the importance of having a good file structure and how it is is very much like good code in that it is self documenting and friendly to extension. We will introduce the file structure that will serve as the foundation for the rest of the series as we refactor Eggly.\n\n![Eggly Series 2 Banner](/content/images/2015/03/eggly-series-2-banner.png)\n\nWe're going to address one of the most fundamental principles of good architecture, and that is the **file structure**.\n\n---\n\n###### Why ######\n\n> The goal of a sound file structure is the same as the code that lives within it.\n\n> A file structure should be self-documented, to indicate intent. \n\n> It should also lend itself to efficiency, and ability to locate resources quickly.\n\n---\n\n###### One way that works ######\n\nI also believe it should promote **modular composition**, that **allows you to extend your file structure indefinitely without interfering with the existing code**.\n\nThis can be more art than science, and so I'm going to present **one way** to do it that has worked well for some very large Angular projects.\n\nI'm not going to get religious about details that hang in the balance of opinion. I would urge you, though, to favor consistency above all else, regardless of the specific details that you choose to implement.\n\n---\n\n###### Refactoring ######\n\n**Normally a file structure would grow organically**, but we have a unique opportunity to see a file structure come together all at once, because we are **re-factoring an existing project**.\n\nWith that said...\n\n> We want to organize our code by features, and not by type.\n\nFor instance, we're not going to put all of our controllers into a single folder, our services into another folder, our directives into another folder, etc, etc.\n\nThis makes it very hard to pick up a single feature and move it somewhere else.\n\nIt also makes testing a single feature isolation really difficult, because you have to reach into quite a few places to get the dependencies that you need.\n\n---\n\n###### Eggly organized by features ######\n\nTo illustrate this in action, we know that eggly has two main features, \"**categories**\" and \"**bookmarks**\".\n\nWe know that **\"bookmarks\" actually belongs to \"categories\"**, so let's **create a file structure that indicates this relationship**.\n\nWe will go over to the \"**app**\" directory here, and create a \"**categories**\" directory. Within that, we will create a \"**bookmarks**\" directory.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ ls app/\neggly.js\n$ mkdir app/categories\n$ mkdir app/categories/bookmarks\n```\n\nNow we know that **\"bookmarks\" belongs to \"categories\"**.\n\nWe're also going to create a Javascript and HTML template for each of these features.\n\nWe're going to create a \"**categories**\" Javascript file, and a \"**categories**\" template.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ touch app/categories/categories.js\n$ touch app/categories/categories.tmpl.html\n```\n\nWe're going to do the same for \"**bookmarks**\".\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ touch app/categories/bookmarks/bookmarks.js\n$ touch app/categories/bookmarks/bookmarks.tmpl.html\n```\n\n---\n\n###### New Grouping ######\n\nBy grouping these files together, it makes it really easy to locate a single piece of functionality, and navigation is kept to a minimum.\n\nWhen we get to the testing series of eggly, this is also where the specs would live.\n\nWe also have two unique states within \"bookmarks\" that we have defined as well. These are **creating a bookmark**, and **editing a bookmark**.\n\nLet's create the file structure within \"bookmarks\" to illustrate this relationship.\n\nWe're going to create a \"**create**\" directory, and we're also going to create an \"**edit**\" directory.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ mkdir app/categories/bookmarks/create\n$ touch app/categories/bookmarks/create/bookmark-create.js\n$ touch app/categories/bookmarks/create/bookmark-create.tmpl.html\n$ mkdir app/categories/bookmarks/edit\n$ touch app/categories/bookmarks/edit/bookmark-edit.js\n$ touch app/categories/bookmarks/edit/bookmark-edit.tmpl.html\n```\n\nNow you can look at these file names, and you know exactly what they do, but also the directories that they live in.\n\nIt's very easy to ascertain the intent of what they do, and the relationship that they have with the rest of the project.\n\n---\n\n###### Sharing across features ######\n\nOne more thing that I want to address in this video, that comes up when talking about files, is where do you put something that needs to be shared across features?\n\nThe answer is that **common features should go in a common directory**.\n\nThis is where I create most of my models, such as the \"**bookmarks**\" and \"**categories**\" model, so let's build out that structure real quick.\n\nWithin the app directory, so essentially on the same hierarchical level as \"**categories**,\" we are going to create a \"**common**\" directory.\n\nWithin there we're going to create a \"**models**\" directory.\n\nWe will create a \"**bookmarks**\" model, and a \"**categories**\" model.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ mkdir app/common\n$ mkdir app/common/models\n$ touch app/common/models/bookmarks-model.js\n$ touch app/common/models/categories-model.js\n```\n\n---\n\n###### Including new resources ######\n\nNow that these files and folders have been created, we just need to include the resources into our main HTML file.\n\nWe'll jump down here to the bottom, paste these in.\n\n![Add new resources](/content/images/2015/03/add-new-resources.png)\n\n---\n\n###### What's Next ######\n\nThis sets us up perfectly for our next lesson, where I will show you how to use sub-modules to organize the code that will actually live within these files.\n\n---\n\n<a class=\"prev-article\" href=\"/angularjs-architecture-series-introduction\" style=\"width: 50%;\">Intro</a><a class=\"next-article\" href=\"/angularjs-architecture-using-submodules\" style=\"float: right;width: 50%;text-align: right;\">Using Submodules</a>","html":"<blockquote>\n  <p>Let's talk about the importance of having a good file structure and how it is is very much like good code in that it is self documenting and friendly to extension. We will introduce the file structure that will serve as the foundation for the rest of the series as we refactor Eggly.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/eggly-series-2-banner.png\" alt=\"Eggly Series 2 Banner\" /></p>\n\n<p>We're going to address one of the most fundamental principles of good architecture, and that is the <strong>file structure</strong>.</p>\n\n<hr />\n\n<h6 id=\"why\">Why</h6>\n\n<blockquote>\n  <p>The goal of a sound file structure is the same as the code that lives within it.</p>\n  \n  <p>A file structure should be self-documented, to indicate intent. </p>\n  \n  <p>It should also lend itself to efficiency, and ability to locate resources quickly.</p>\n</blockquote>\n\n<hr />\n\n<h6 id=\"onewaythatworks\">One way that works</h6>\n\n<p>I also believe it should promote <strong>modular composition</strong>, that <strong>allows you to extend your file structure indefinitely without interfering with the existing code</strong>.</p>\n\n<p>This can be more art than science, and so I'm going to present <strong>one way</strong> to do it that has worked well for some very large Angular projects.</p>\n\n<p>I'm not going to get religious about details that hang in the balance of opinion. I would urge you, though, to favor consistency above all else, regardless of the specific details that you choose to implement.</p>\n\n<hr />\n\n<h6 id=\"refactoring\">Refactoring</h6>\n\n<p><strong>Normally a file structure would grow organically</strong>, but we have a unique opportunity to see a file structure come together all at once, because we are <strong>re-factoring an existing project</strong>.</p>\n\n<p>With that said...</p>\n\n<blockquote>\n  <p>We want to organize our code by features, and not by type.</p>\n</blockquote>\n\n<p>For instance, we're not going to put all of our controllers into a single folder, our services into another folder, our directives into another folder, etc, etc.</p>\n\n<p>This makes it very hard to pick up a single feature and move it somewhere else.</p>\n\n<p>It also makes testing a single feature isolation really difficult, because you have to reach into quite a few places to get the dependencies that you need.</p>\n\n<hr />\n\n<h6 id=\"egglyorganizedbyfeatures\">Eggly organized by features</h6>\n\n<p>To illustrate this in action, we know that eggly has two main features, \"<strong>categories</strong>\" and \"<strong>bookmarks</strong>\".</p>\n\n<p>We know that <strong>\"bookmarks\" actually belongs to \"categories\"</strong>, so let's <strong>create a file structure that indicates this relationship</strong>.</p>\n\n<p>We will go over to the \"<strong>app</strong>\" directory here, and create a \"<strong>categories</strong>\" directory. Within that, we will create a \"<strong>bookmarks</strong>\" directory.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ ls app/\neggly.js  \n$ mkdir app/categories\n$ mkdir app/categories/bookmarks\n</code></pre>\n\n<p>Now we know that <strong>\"bookmarks\" belongs to \"categories\"</strong>.</p>\n\n<p>We're also going to create a Javascript and HTML template for each of these features.</p>\n\n<p>We're going to create a \"<strong>categories</strong>\" Javascript file, and a \"<strong>categories</strong>\" template.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ touch app/categories/categories.js\n$ touch app/categories/categories.tmpl.html\n</code></pre>\n\n<p>We're going to do the same for \"<strong>bookmarks</strong>\".</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ touch app/categories/bookmarks/bookmarks.js\n$ touch app/categories/bookmarks/bookmarks.tmpl.html\n</code></pre>\n\n<hr />\n\n<h6 id=\"newgrouping\">New Grouping</h6>\n\n<p>By grouping these files together, it makes it really easy to locate a single piece of functionality, and navigation is kept to a minimum.</p>\n\n<p>When we get to the testing series of eggly, this is also where the specs would live.</p>\n\n<p>We also have two unique states within \"bookmarks\" that we have defined as well. These are <strong>creating a bookmark</strong>, and <strong>editing a bookmark</strong>.</p>\n\n<p>Let's create the file structure within \"bookmarks\" to illustrate this relationship.</p>\n\n<p>We're going to create a \"<strong>create</strong>\" directory, and we're also going to create an \"<strong>edit</strong>\" directory.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ mkdir app/categories/bookmarks/create\n$ touch app/categories/bookmarks/create/bookmark-create.js\n$ touch app/categories/bookmarks/create/bookmark-create.tmpl.html\n$ mkdir app/categories/bookmarks/edit\n$ touch app/categories/bookmarks/edit/bookmark-edit.js\n$ touch app/categories/bookmarks/edit/bookmark-edit.tmpl.html\n</code></pre>\n\n<p>Now you can look at these file names, and you know exactly what they do, but also the directories that they live in.</p>\n\n<p>It's very easy to ascertain the intent of what they do, and the relationship that they have with the rest of the project.</p>\n\n<hr />\n\n<h6 id=\"sharingacrossfeatures\">Sharing across features</h6>\n\n<p>One more thing that I want to address in this video, that comes up when talking about files, is where do you put something that needs to be shared across features?</p>\n\n<p>The answer is that <strong>common features should go in a common directory</strong>.</p>\n\n<p>This is where I create most of my models, such as the \"<strong>bookmarks</strong>\" and \"<strong>categories</strong>\" model, so let's build out that structure real quick.</p>\n\n<p>Within the app directory, so essentially on the same hierarchical level as \"<strong>categories</strong>,\" we are going to create a \"<strong>common</strong>\" directory.</p>\n\n<p>Within there we're going to create a \"<strong>models</strong>\" directory.</p>\n\n<p>We will create a \"<strong>bookmarks</strong>\" model, and a \"<strong>categories</strong>\" model.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ mkdir app/common\n$ mkdir app/common/models\n$ touch app/common/models/bookmarks-model.js\n$ touch app/common/models/categories-model.js\n</code></pre>\n\n<hr />\n\n<h6 id=\"includingnewresources\">Including new resources</h6>\n\n<p>Now that these files and folders have been created, we just need to include the resources into our main HTML file.</p>\n\n<p>We'll jump down here to the bottom, paste these in.</p>\n\n<p><img src=\"/content/images/2015/03/add-new-resources.png\" alt=\"Add new resources\" /></p>\n\n<hr />\n\n<h6 id=\"whatsnext\">What's Next</h6>\n\n<p>This sets us up perfectly for our next lesson, where I will show you how to use sub-modules to organize the code that will actually live within these files.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/angularjs-architecture-series-introduction\" style=\"width: 50%;\">Intro</a><a class=\"next-article\" href=\"/angularjs-architecture-using-submodules\" style=\"float: right;width: 50%;text-align: right;\">Using Submodules</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1427141234597,"created_by":1,"updated_at":1427336505269,"updated_by":1,"published_at":1427141262500,"published_by":1},{"id":42,"uuid":"56678388-ab96-4c4c-ae76-9a20e77f85ba","title":"AngularJS Architecture: Using Submodules","slug":"angularjs-architecture-using-submodules","markdown":"> Let's look at sub-modules as a mechanism for organizing our code into logical containers that we can then compose into our main application.\n\n> Leveraging sub-modules is a powerful way to add in new functionality and features into an application while minimizing the impact that it has on the existing code base.\n\n![Part 1: Getting Started](/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png)\n\nWe're to organize your code into logical containers using sub-modules.\n\n> Modules in AngularJS are just that, containers.\n\nThey allow you to separate your code by features and then **when you need to access that functionality in other parts of your application, you just need to inject that module as a dependency**.\n\nWe already have a hint of the sub-modules that will exist because our file structure has done a really good job of defining the relationships that exist within the application.\n\n---\n\n###### Creating the sub-modules ######\n\nLet's start with the models first, since they are common and we will need them as we get into specific features.\n\nJumping into the \"**bookmarks-model**\" file, we are going to call this sub-module \"**eggly.models.bookmarks**\".\n\n<span class=\"filename\">bookmarks-model.js</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('eggly.models.bookmarks', []);</code></pre>\n\nThen in the \"**categories-model**\", we are going to call this \"**eggly.models.categories**\".\n\n<span class=\"filename\">categories-model.js</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('eggly.models.categories', []);</code></pre>\n\nFrom here, let's go into the \"**categories**\" and we will create a \"**categories**\" module. \n\n<span class=\"filename\">categories.js</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('categories', []);</code></pre>\n\nIn the \"**bookmarks**\", we will create a \"**categories.bookmarks**\" module.\n\n<span class=\"filename\">bookmarks.js</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('categories.bookmarks', []);</code></pre>\n\nLet us do the same for **edit** and **create**.\n\n<span class=\"filename\">bookmarks-edit.js</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('categories.bookmarks.edit', []);</code></pre>\n\n<span class=\"filename\">bookmarks-create.js</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('categories.bookmarks.create', []);</code></pre>\n\nThey are all self-documenting, so somebody looks at the sub-module, they know by the name of it exactly what it does.\n\n---\n\n###### Connecting the sub-modules ######\n\nWe've actually defined all of the modules for the application, but we have not actually connected any of them yet.\n\nThe \"**categories**\" module will obviously need to communicate with the \"**categories-model**\" sub-module, so let's inject that now.\n\n<span class=\"filename\">categories.js</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('categories', [\n  'eggly.models.categories'\n]);</code></pre>\n\nIf we go here to the second parameter of categories, we will just inject this here. We simply need to put the string of the name that we called that sub-module, '**eggly.models.categories**'.\n\nThen let's go to the bookmarks, and the \"**bookmarks**\" sub-module actually needs the \"**categories**\" and the \"**bookmarks**\" model.\n\nWe also need to expose the \"**edit**\" and \"**create**\" sub-module, so we will go here and just type these in.\n\n<span class=\"filename\">bookmarks.js</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('categories.bookmarks', [\n  'categories.bookmarks.create',\n  'categories.bookmarks.edit',\n  'eggly.models.categories',\n  'eggly.models.bookmarks'\n]);</code></pre>\n\nNow we go into our **main application** and we just need to inject the \"**categories**\" sub-module and the \"**categories.bookmarks**\" sub-module.\n\n<span class=\"filename\">app.js</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('Eggly', [\n  'categories',\n  'categories.bookmarks'\n]);</code></pre>\n\nWhen you include a sub-module into a another sub-module, and then that sub-module into the main module, it's a transitive relationship.\n\nBecause we included the \"**edit**\" and \"**create**\" sub-modules into \"**bookmarks**,\" it's now available to the main eggly application.\n\nIt's, again, almost like a file structure but with containers, aka sub-modules.\n\nNow we have a self-documenting file structure and we've established the programmatic relationships via sub-modules.\n\n---\n\n###### What's Next ######\n\nThings are going to get really interesting as we learn how to navigate between these entities and their states in the next lesson, where I will introduce UI router and state machines. See you in the next lesson.\n\n---\n\n<a class=\"prev-article\" href=\"/angularjs-architecture-file-structure\" style=\"width: 50%;\">File Structure</a><a class=\"next-article\" href=\"/angularjs-architecture-basic-state-with-ui-router\" style=\"float: right;width: 50%;text-align: right;\">Basic State</a>","html":"<blockquote>\n  <p>Let's look at sub-modules as a mechanism for organizing our code into logical containers that we can then compose into our main application.</p>\n  \n  <p>Leveraging sub-modules is a powerful way to add in new functionality and features into an application while minimizing the impact that it has on the existing code base.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png\" alt=\"Part 1: Getting Started\" /></p>\n\n<p>We're to organize your code into logical containers using sub-modules.</p>\n\n<blockquote>\n  <p>Modules in AngularJS are just that, containers.</p>\n</blockquote>\n\n<p>They allow you to separate your code by features and then <strong>when you need to access that functionality in other parts of your application, you just need to inject that module as a dependency</strong>.</p>\n\n<p>We already have a hint of the sub-modules that will exist because our file structure has done a really good job of defining the relationships that exist within the application.</p>\n\n<hr />\n\n<h6 id=\"creatingthesubmodules\">Creating the sub-modules</h6>\n\n<p>Let's start with the models first, since they are common and we will need them as we get into specific features.</p>\n\n<p>Jumping into the \"<strong>bookmarks-model</strong>\" file, we are going to call this sub-module \"<strong>eggly.models.bookmarks</strong>\".</p>\n\n<p><span class=\"filename\">bookmarks-model.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('eggly.models.bookmarks', []);</code></pre>\n\n<p>Then in the \"<strong>categories-model</strong>\", we are going to call this \"<strong>eggly.models.categories</strong>\".</p>\n\n<p><span class=\"filename\">categories-model.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('eggly.models.categories', []);</code></pre>\n\n<p>From here, let's go into the \"<strong>categories</strong>\" and we will create a \"<strong>categories</strong>\" module. </p>\n\n<p><span class=\"filename\">categories.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('categories', []);</code></pre>\n\n<p>In the \"<strong>bookmarks</strong>\", we will create a \"<strong>categories.bookmarks</strong>\" module.</p>\n\n<p><span class=\"filename\">bookmarks.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('categories.bookmarks', []);</code></pre>\n\n<p>Let us do the same for <strong>edit</strong> and <strong>create</strong>.</p>\n\n<p><span class=\"filename\">bookmarks-edit.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('categories.bookmarks.edit', []);</code></pre>\n\n<p><span class=\"filename\">bookmarks-create.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('categories.bookmarks.create', []);</code></pre>\n\n<p>They are all self-documenting, so somebody looks at the sub-module, they know by the name of it exactly what it does.</p>\n\n<hr />\n\n<h6 id=\"connectingthesubmodules\">Connecting the sub-modules</h6>\n\n<p>We've actually defined all of the modules for the application, but we have not actually connected any of them yet.</p>\n\n<p>The \"<strong>categories</strong>\" module will obviously need to communicate with the \"<strong>categories-model</strong>\" sub-module, so let's inject that now.</p>\n\n<p><span class=\"filename\">categories.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('categories', [  \n  'eggly.models.categories'\n]);</code></pre>\n\n<p>If we go here to the second parameter of categories, we will just inject this here. We simply need to put the string of the name that we called that sub-module, '<strong>eggly.models.categories</strong>'.</p>\n\n<p>Then let's go to the bookmarks, and the \"<strong>bookmarks</strong>\" sub-module actually needs the \"<strong>categories</strong>\" and the \"<strong>bookmarks</strong>\" model.</p>\n\n<p>We also need to expose the \"<strong>edit</strong>\" and \"<strong>create</strong>\" sub-module, so we will go here and just type these in.</p>\n\n<p><span class=\"filename\">bookmarks.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('categories.bookmarks', [  \n  'categories.bookmarks.create',\n  'categories.bookmarks.edit',\n  'eggly.models.categories',\n  'eggly.models.bookmarks'\n]);</code></pre>\n\n<p>Now we go into our <strong>main application</strong> and we just need to inject the \"<strong>categories</strong>\" sub-module and the \"<strong>categories.bookmarks</strong>\" sub-module.</p>\n\n<p><span class=\"filename\">app.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('Eggly', [  \n  'categories',\n  'categories.bookmarks'\n]);</code></pre>\n\n<p>When you include a sub-module into a another sub-module, and then that sub-module into the main module, it's a transitive relationship.</p>\n\n<p>Because we included the \"<strong>edit</strong>\" and \"<strong>create</strong>\" sub-modules into \"<strong>bookmarks</strong>,\" it's now available to the main eggly application.</p>\n\n<p>It's, again, almost like a file structure but with containers, aka sub-modules.</p>\n\n<p>Now we have a self-documenting file structure and we've established the programmatic relationships via sub-modules.</p>\n\n<hr />\n\n<h6 id=\"whatsnext\">What's Next</h6>\n\n<p>Things are going to get really interesting as we learn how to navigate between these entities and their states in the next lesson, where I will introduce UI router and state machines. See you in the next lesson.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/angularjs-architecture-file-structure\" style=\"width: 50%;\">File Structure</a><a class=\"next-article\" href=\"/angularjs-architecture-basic-state-with-ui-router\" style=\"float: right;width: 50%;text-align: right;\">Basic State</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1427335174848,"created_by":1,"updated_at":1427722133130,"updated_by":1,"published_at":1427335227793,"published_by":1},{"id":43,"uuid":"799398d7-0f79-48ba-a3a2-f7fd8a10ee23","title":"AngularJS Architecture: Basic State with ui-router","slug":"angularjs-architecture-basic-state-with-ui-router","markdown":"> We will look at ui-router and learn how we can use it to define unique states with Eggly. \n\n> This will allow us to leverage the power of a state machine in our AngularJS application, which goes beyond code management and into managing the states that exist within the code.\n\n![Part 1: Getting Started](/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png)\n\nWe are going to introduce **ui-router** into Eggly, so that we can start to **navigate between the unique states that occur as a result of user interaction**.\n\n---\n\n###### States in Eggly ######\n\nLet me give you an example. If the user selects a 'design' **category**, that would result in a unique state in the application of only **showing the design bookmarks**.\n\nAn extension of that idea would be if a user clicks on \"**Edit**\" for a bookmark, that state of **editing that bookmark is unique**. \n\n---\n\n###### UI-Router ######\n\n**Ui-router** allows us to define and navigate between these states in a really flexible, easy yet powerful way.\n\nThe beauty of **ui-router** is that if you understand how to use **ng-route** it is really easy to leap from one to the other, as routes and states often share the same components.\n\nFor instance, **a state could have an optional URL path, a template URL, and a controller**.\n\nFrom there, the similarities tend to an end, as ui-router gives us a lot more functionality.\n\nThe most notable one is the **ability to have named or nested views**, which we will get into in the next lesson.\n\n---\n\n###### Download angular-ui-router ######\n\nThe first thing we need to do is add in the **ui-router** source code.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ bower install --save angular-ui-router\n```\n\n---\n\n###### Add angular-ui-router ######\n\nThen to jump into the bottom HTML and include what bower has stored in the \"**bower_components**\" directory.\n\n<span class=\"filename\">index.html</span>\n```php\n    </section>\n\n  </body>\n  <script type=\"text/javascript\" src=\"bower_components/jquery/dist/jquery.min.js\"></script>\n  <script type=\"text/javascript\" src=\"bower_components/foundation/js/foundation.min.js\"></script>\n  <script type=\"text/javascript\" src=\"bower_components/lodash/lodash.min.js\"></script>\n  <script type=\"text/javascript\" src=\"bower_components/angular/angular.min.js\"></script>\n  <script type=\"text/javascript\" src=\"bower_components/angular-ui-router/release/angular-ui-router.min.js\"></script>\n\n  <script type=\"text/javascript\" src=\"app/eggly.js\"></script>\n  <script type=\"text/javascript\" src=\"app/categories/categories.js\"></script>\n  <script type=\"text/javascript\" src=\"app/categories/bookmarks/create/bookmark-create.js\"></script>\n  <script type=\"text/javascript\" src=\"app/categories/bookmarks/edit/bookmark-edit.js\"></script>\n  <script type=\"text/javascript\" src=\"app/common/models/categories-model.js\"></script>\n  <script type=\"text/javascript\" src=\"app/common/models/bookmarks-model.js\"></script>\n</html>\n```\n\n---\n\n###### Adding ui-router submodule to app ######\n\nThe next thing we need to do from there is add in the **ui-router** sub-module so that it is available for the entire Eggly application.\n\n> Let's build out our first state.\n\n<span class=\"filename\">eggly.js</span>\n<pre class=\"line-numbers\" data-line=\"2,6-16\"><code class=\"language-javascript\">angular.module('Eggly', [\n  'ui.router',\n  'categories',\n  'categories.bookmarks'\n])\n.config(function($stateProvider, $urlRouterProvider) {\n\n  $urlRouterProvider.otherwise('/');\n\n  $stateProvider\n    .state('eggly', {\n      url: '/', // Make to navigate to index.html#/\n      templateUrl: 'app/categories/categories.tmpl.html',\n      controller: 'MainController'\n    });\n})\n.controller('MainController', function($scope){\n  $scope.categories = [\n    {\"id\": 0, \"name\": \"Development\"},\n    {\"id\": 1, \"name\": \"Design\"},\n    {\"id\": 2, \"name\": \"Excercise\"},\n    {\"id\": 3, \"name\": \"Soccer\"}\n  ];\n\n  $scope.bookmarks = [\n    {\"id\": 0, \"title\": \"Soccer Game History Page\", \"url\": \"http://angular.js\", \"category\": \"Soccer\"},\n    {\"id\": 1, \"title\": \"Development History Page\", \"url\": \"http://angular.js\", \"category\": \"Development\"},\n    {\"id\": 2, \"title\": \"Design History Page\", \"url\": \"http://angular.js\", \"category\": \"Design\"},\n    {\"id\": 3, \"title\": \"Design History Page\", \"url\": \"http://materialup.com\", \"category\": \"Design\"},\n    {\"id\": 4, \"title\": \"Gym Listings\", \"url\": \"http://angular.js\", \"category\": \"Excercise\"},\n    {\"id\": 5, \"title\": \"YMCA\", \"url\": \"http://angular.js\", \"category\": \"Excercise\"},\n    {\"id\": 6, \"title\": \"FIFA\", \"url\": \"http://angular.js\", \"category\": \"Soccer\"}\n  ];</code></pre>\n\n**[6]** We're going to do this in the **.config** block, and we're going to inject **$stateProvider**, which is the mechanism for defining your states.\n\n**[11]** We'll define our first state as \"**eggly**\".\n\n**[11-15]** The second parameter of this is essentially a **configuration object**.\n\n**[12]** We're going to give it a **URL** of \"**/**\" which is essentially **the root of the Eggly application**.\n\n**[13]** Then we're going to give it a **templateUrl** of \"**app/categories/categories.tmpl.html**\". For now, we're just going to store everything in the \"**categories**\" template.\n\n**[14]** Then we will define the controller as \"**MainController**\" since it is handy, and functional.\n\n---\n\n###### Refactor HTML templates ######\n\nWhat I'm going to do here is I am going to **cut out** most of the HTML that we have here below.\n\n<span class=\"filename\">index.html</span>\n```php\n  <body ng-controller=\"MainController\" class=\"row\">\n\n    <aside class=\"small-4 columns\">\n      <h1 ng-click=\"setCurrentCategory(null)\">Eggly</h1>\n      <ul class=\"category-list\">\n        <li ng-repeat=\"category in categories\" ng-class=\"{'active': isCurrentCategory(category)}\">\n          <a href=\"#\" ng-click=\"setCurrentCategory(category)\">{{category.name}}</a>\n        </li>\n      </ul>\n    </aside>\n\n    <section class=\"small-8 columns\">\n      <ul class=\"bookmarks-list\">\n        <li ng-class=\"{active: isSelectedBookmark(bookmark.id)}\" ng-repeat=\"bookmark in bookmarks | filter: {category: currentCategory.name}\">\n          <a href=\"#\" ng-click=\"setEditedBookmark(bookmark); startEditing();\"><i class=\"fa fa-pencil\"></i></a>\n          <a href=\"{{bookmark.url}}\" target=\"_blank\">{{bookmark.title}}</a>\n          <a href=\"#\" ng-click=\"deleteBookmark(bookmark)\"><i class=\"fa fa-times\"></i></a>\n        </li>\n      </ul>\n\n      <hr>\n\n      <!-- CREATING -->\n      <div ng-if=\"shouldShowCreating()\">\n        <a href=\"#\" ng-click=\"startCreating();\"><i class=\"fa fa-plus\"></i> Create Bookmark</a>\n        <div ng-if=\"isCreating\">\n          <form class=\"create-form\" ng-show=\"isCreating\" role=\"form\" ng-submit=\"createBookmark(newBookmark)\" novalidate>\n            <div class=\"form-group\">\n              <label for=\"newBookmarkTitle\">Bookmark Title</label>\n              <input type=\"text\" class=\"form-control\" id=\"newBookmarkTitle\" ng-model=\"newBookmark.title\" placeholder=\"Enter title\">\n            </div>\n            <div class=\"form-group\">\n              <label for=\"newBookmarkURL\">Bookmark URL</label>\n              <input type=\"text\" class=\"form-control\" id=\"newBookmarkURL\" ng-model=\"newBookmark.url\" placeholder=\"Enter URL\">\n            </div>\n            <button type=\"submit\" class=\"btn btn-info btn-lg\">Create</button>\n            <button type=\"button\" class=\"btn btn-default btn-lg pull-right\" ng-click=\"cancelCreating()\">Cancel</button>\n          </form>\n        </div>\n      </div>\n\n      <!-- EDITING -->\n      <div ng-if=\"shouldShowEditing()\">\n        <h4>Editing {{editedBookmark.title}}</h4>\n\n        <form class=\"edit-form\" role=\"form\" ng-submit=\"updateBookmark(editedBookmark)\">\n          <div class=\"form-group\">\n            <label>Bookmark Title</label>\n            <input type=\"text\" class=\"form-control\" placeholder=\"Enter title\" ng-model=\"editedBookmark.title\">\n          </div>\n          <div class=\"form-group\">\n            <label>Bookmark URL</label>\n            <input type=\"text\" class=\"form-control\" placeholder=\"Enter URL\" ng-model=\"editedBookmark.url\">\n          </div>\n          <button type=\"submit\" class=\"btn btn-info btn-lg\">Save</button>\n          <button type=\"button\" class=\"btn btn-default btn-lg pull-right\" ng-click=\"cancelEditing();\">Cancel</button>\n        </form>\n      </div>\n\n    </section>\n\n  </body>\n```\n\n1. Cut into your clipboard everything inside of the **body.row** tag.\n- remove the **class=\"row\"** from the **body** tag and move into a new div tag inside  the **body**\n- In this new **div** tag with the **class=\"row\"** I am going to attach this \"**ui-view**\" attribute.\n\n<span class=\"filename\">index.html</span>\n```php\n  <body ng-controller=\"MainController\">\n    <div class=\"row\" ui-view>\n    </div><!-- .row -->\n  </body>\n```\n\n---\n\n###### Populate the categories template ######\n\nLet's hop into the \"**categories**\" template. For now I'm just going to do \"HELLO UI-ROUTER\".\n\nThis is just to show that it is working.\n\n<span class=\"filename\">categories.tmpl.html</span>\n```php\n<h1>HELLO UI-ROUTER</h1>\n```\n\nI'm going to refresh the page, and we've got a big \"HELLO UI-ROUTER\".\n\nWhat the eggly application did is:\n\n1. Looked for that ui-view\n- Inserted that template in there \n- Spun it up with the main controller\n\nObviously that's not very useful, so I'm going to paste our application in here, or paste the contents of the main HTML page in here.\n\n<span class=\"filename\">categories.tmpl.html</span>\n```php\n<aside class=\"small-4 columns\">\n  <h1 ng-click=\"setCurrentCategory(null)\">Eggly</h1>\n  <ul class=\"category-list\">\n    <li ng-repeat=\"category in categories\" ng-class=\"{'active': isCurrentCategory(category)}\">\n      <a href=\"#\" ng-click=\"setCurrentCategory(category)\">{{category.name}}</a>\n    </li>\n  </ul>\n</aside>\n\n<section class=\"small-8 columns\">\n  <ul class=\"bookmarks-list\">\n    <li ng-class=\"{active: isSelectedBookmark(bookmark.id)}\" ng-repeat=\"bookmark in bookmarks | filter: {category: currentCategory.name}\">\n      <a href=\"#\" ng-click=\"setEditedBookmark(bookmark); startEditing();\"><i class=\"fa fa-pencil\"></i></a>\n      <a href=\"{{bookmark.url}}\" target=\"_blank\">{{bookmark.title}}</a>\n      <a href=\"#\" ng-click=\"deleteBookmark(bookmark)\"><i class=\"fa fa-times\"></i></a>\n    </li>\n  </ul>\n\n  <hr>\n\n  <!-- CREATING -->\n  <div ng-if=\"shouldShowCreating()\">\n    <a href=\"#\" ng-click=\"startCreating();\"><i class=\"fa fa-plus\"></i> Create Bookmark</a>\n    <div ng-if=\"isCreating\">\n      <form class=\"create-form\" ng-show=\"isCreating\" role=\"form\" ng-submit=\"createBookmark(newBookmark)\" novalidate>\n        <div class=\"form-group\">\n          <label for=\"newBookmarkTitle\">Bookmark Title</label>\n          <input type=\"text\" class=\"form-control\" id=\"newBookmarkTitle\" ng-model=\"newBookmark.title\" placeholder=\"Enter title\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"newBookmarkURL\">Bookmark URL</label>\n          <input type=\"text\" class=\"form-control\" id=\"newBookmarkURL\" ng-model=\"newBookmark.url\" placeholder=\"Enter URL\">\n        </div>\n        <button type=\"submit\" class=\"btn btn-info btn-lg\">Create</button>\n        <button type=\"button\" class=\"btn btn-default btn-lg pull-right\" ng-click=\"cancelCreating()\">Cancel</button>\n      </form>\n    </div>\n  </div>\n\n  <!-- EDITING -->\n  <div ng-if=\"shouldShowEditing()\">\n    <h4>Editing {{editedBookmark.title}}</h4>\n\n    <form class=\"edit-form\" role=\"form\" ng-submit=\"updateBookmark(editedBookmark)\">\n      <div class=\"form-group\">\n        <label>Bookmark Title</label>\n        <input type=\"text\" class=\"form-control\" placeholder=\"Enter title\" ng-model=\"editedBookmark.title\">\n      </div>\n      <div class=\"form-group\">\n        <label>Bookmark URL</label>\n        <input type=\"text\" class=\"form-control\" placeholder=\"Enter URL\" ng-model=\"editedBookmark.url\">\n      </div>\n      <button type=\"submit\" class=\"btn btn-info btn-lg\">Save</button>\n      <button type=\"button\" class=\"btn btn-default btn-lg pull-right\" ng-click=\"cancelEditing();\">Cancel</button>\n    </form>\n  </div>\n\n</section>\n```\n\nLet's refresh the page, after initiating **http-server**.\n\nFrom here it looks just like how we had it, but we've started to introduce the state machine.\n\n![Introduced the state machine](/content/images/2015/03/Introduced_the_state_machine.png)\n\n\n---\n\n###### What's next ######\n\nIn the next lesson we're actually going to introduce name views where we will actually have a specific view for categories, and a specific view for bookmarks.\n\nThings start to get really powerful, and you can do some really neat things by targeting specific pieces of your layout with templates for specific states, as well as organizing your controllers into your view.\n\nNow you no longer have a large controller, but you have very small, granular controllers for specific pieces in your page.\n\n---\n\n<a class=\"prev-article\" href=\"/angularjs-architecture-using-submodules\" style=\"width: 50%;\">Using Sub-modules</a><a class=\"next-article\" href=\"/angularjs-architecture-using-ui-routers-named-views\" style=\"float: right;width: 50%;text-align: right;\">ui-router's named views</a>","html":"<blockquote>\n  <p>We will look at ui-router and learn how we can use it to define unique states with Eggly. </p>\n  \n  <p>This will allow us to leverage the power of a state machine in our AngularJS application, which goes beyond code management and into managing the states that exist within the code.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png\" alt=\"Part 1: Getting Started\" /></p>\n\n<p>We are going to introduce <strong>ui-router</strong> into Eggly, so that we can start to <strong>navigate between the unique states that occur as a result of user interaction</strong>.</p>\n\n<hr />\n\n<h6 id=\"statesineggly\">States in Eggly</h6>\n\n<p>Let me give you an example. If the user selects a 'design' <strong>category</strong>, that would result in a unique state in the application of only <strong>showing the design bookmarks</strong>.</p>\n\n<p>An extension of that idea would be if a user clicks on \"<strong>Edit</strong>\" for a bookmark, that state of <strong>editing that bookmark is unique</strong>. </p>\n\n<hr />\n\n<h6 id=\"uirouter\">UI-Router</h6>\n\n<p><strong>Ui-router</strong> allows us to define and navigate between these states in a really flexible, easy yet powerful way.</p>\n\n<p>The beauty of <strong>ui-router</strong> is that if you understand how to use <strong>ng-route</strong> it is really easy to leap from one to the other, as routes and states often share the same components.</p>\n\n<p>For instance, <strong>a state could have an optional URL path, a template URL, and a controller</strong>.</p>\n\n<p>From there, the similarities tend to an end, as ui-router gives us a lot more functionality.</p>\n\n<p>The most notable one is the <strong>ability to have named or nested views</strong>, which we will get into in the next lesson.</p>\n\n<hr />\n\n<h6 id=\"downloadangularuirouter\">Download angular-ui-router</h6>\n\n<p>The first thing we need to do is add in the <strong>ui-router</strong> source code.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ bower install --save angular-ui-router\n</code></pre>\n\n<hr />\n\n<h6 id=\"addangularuirouter\">Add angular-ui-router</h6>\n\n<p>Then to jump into the bottom HTML and include what bower has stored in the \"<strong>bower_components</strong>\" directory.</p>\n\n<p><span class=\"filename\">index.html</span>  </p>\n\n<pre><code class=\"language-php\">    &lt;/section&gt;\n\n  &lt;/body&gt;\n  &lt;script type=\"text/javascript\" src=\"bower_components/jquery/dist/jquery.min.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"bower_components/foundation/js/foundation.min.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"bower_components/lodash/lodash.min.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"bower_components/angular/angular.min.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"bower_components/angular-ui-router/release/angular-ui-router.min.js\"&gt;&lt;/script&gt;\n\n  &lt;script type=\"text/javascript\" src=\"app/eggly.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"app/categories/categories.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"app/categories/bookmarks/create/bookmark-create.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"app/categories/bookmarks/edit/bookmark-edit.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"app/common/models/categories-model.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"app/common/models/bookmarks-model.js\"&gt;&lt;/script&gt;\n&lt;/html&gt;  \n</code></pre>\n\n<hr />\n\n<h6 id=\"addinguiroutersubmoduletoapp\">Adding ui-router submodule to app</h6>\n\n<p>The next thing we need to do from there is add in the <strong>ui-router</strong> sub-module so that it is available for the entire Eggly application.</p>\n\n<blockquote>\n  <p>Let's build out our first state.</p>\n</blockquote>\n\n<p><span class=\"filename\">eggly.js</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"2,6-16\"><code class=\"language-javascript\">angular.module('Eggly', [  \n  'ui.router',\n  'categories',\n  'categories.bookmarks'\n])\n.config(function($stateProvider, $urlRouterProvider) {\n\n  $urlRouterProvider.otherwise('/');\n\n  $stateProvider\n    .state('eggly', {\n      url: '/', // Make to navigate to index.html#/\n      templateUrl: 'app/categories/categories.tmpl.html',\n      controller: 'MainController'\n    });\n})\n.controller('MainController', function($scope){\n  $scope.categories = [\n    {\"id\": 0, \"name\": \"Development\"},\n    {\"id\": 1, \"name\": \"Design\"},\n    {\"id\": 2, \"name\": \"Excercise\"},\n    {\"id\": 3, \"name\": \"Soccer\"}\n  ];\n\n  $scope.bookmarks = [\n    {\"id\": 0, \"title\": \"Soccer Game History Page\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Soccer\"},\n    {\"id\": 1, \"title\": \"Development History Page\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Development\"},\n    {\"id\": 2, \"title\": \"Design History Page\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Design\"},\n    {\"id\": 3, \"title\": \"Design History Page\", \"url\": \"<a href=\"http://materialup.com\">http://materialup.com</a>\", \"category\": \"Design\"},\n    {\"id\": 4, \"title\": \"Gym Listings\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Excercise\"},\n    {\"id\": 5, \"title\": \"YMCA\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Excercise\"},\n    {\"id\": 6, \"title\": \"FIFA\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Soccer\"}\n  ];</code></pre>\n\n<p><strong>[6]</strong> We're going to do this in the <strong>.config</strong> block, and we're going to inject <strong>$stateProvider</strong>, which is the mechanism for defining your states.</p>\n\n<p><strong>[11]</strong> We'll define our first state as \"<strong>eggly</strong>\".</p>\n\n<p><strong>[11-15]</strong> The second parameter of this is essentially a <strong>configuration object</strong>.</p>\n\n<p><strong>[12]</strong> We're going to give it a <strong>URL</strong> of \"<strong>/</strong>\" which is essentially <strong>the root of the Eggly application</strong>.</p>\n\n<p><strong>[13]</strong> Then we're going to give it a <strong>templateUrl</strong> of \"<strong>app/categories/categories.tmpl.html</strong>\". For now, we're just going to store everything in the \"<strong>categories</strong>\" template.</p>\n\n<p><strong>[14]</strong> Then we will define the controller as \"<strong>MainController</strong>\" since it is handy, and functional.</p>\n\n<hr />\n\n<h6 id=\"refactorhtmltemplates\">Refactor HTML templates</h6>\n\n<p>What I'm going to do here is I am going to <strong>cut out</strong> most of the HTML that we have here below.</p>\n\n<p><span class=\"filename\">index.html</span>  </p>\n\n<pre><code class=\"language-php\">  &lt;body ng-controller=\"MainController\" class=\"row\"&gt;\n\n    &lt;aside class=\"small-4 columns\"&gt;\n      &lt;h1 ng-click=\"setCurrentCategory(null)\"&gt;Eggly&lt;/h1&gt;\n      &lt;ul class=\"category-list\"&gt;\n        &lt;li ng-repeat=\"category in categories\" ng-class=\"{'active': isCurrentCategory(category)}\"&gt;\n          &lt;a href=\"#\" ng-click=\"setCurrentCategory(category)\"&gt;{{category.name}}&lt;/a&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/aside&gt;\n\n    &lt;section class=\"small-8 columns\"&gt;\n      &lt;ul class=\"bookmarks-list\"&gt;\n        &lt;li ng-class=\"{active: isSelectedBookmark(bookmark.id)}\" ng-repeat=\"bookmark in bookmarks | filter: {category: currentCategory.name}\"&gt;\n          &lt;a href=\"#\" ng-click=\"setEditedBookmark(bookmark); startEditing();\"&gt;&lt;i class=\"fa fa-pencil\"&gt;&lt;/i&gt;&lt;/a&gt;\n          &lt;a href=\"{{bookmark.url}}\" target=\"_blank\"&gt;{{bookmark.title}}&lt;/a&gt;\n          &lt;a href=\"#\" ng-click=\"deleteBookmark(bookmark)\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/a&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n\n      &lt;hr&gt;\n\n      &lt;!-- CREATING --&gt;\n      &lt;div ng-if=\"shouldShowCreating()\"&gt;\n        &lt;a href=\"#\" ng-click=\"startCreating();\"&gt;&lt;i class=\"fa fa-plus\"&gt;&lt;/i&gt; Create Bookmark&lt;/a&gt;\n        &lt;div ng-if=\"isCreating\"&gt;\n          &lt;form class=\"create-form\" ng-show=\"isCreating\" role=\"form\" ng-submit=\"createBookmark(newBookmark)\" novalidate&gt;\n            &lt;div class=\"form-group\"&gt;\n              &lt;label for=\"newBookmarkTitle\"&gt;Bookmark Title&lt;/label&gt;\n              &lt;input type=\"text\" class=\"form-control\" id=\"newBookmarkTitle\" ng-model=\"newBookmark.title\" placeholder=\"Enter title\"&gt;\n            &lt;/div&gt;\n            &lt;div class=\"form-group\"&gt;\n              &lt;label for=\"newBookmarkURL\"&gt;Bookmark URL&lt;/label&gt;\n              &lt;input type=\"text\" class=\"form-control\" id=\"newBookmarkURL\" ng-model=\"newBookmark.url\" placeholder=\"Enter URL\"&gt;\n            &lt;/div&gt;\n            &lt;button type=\"submit\" class=\"btn btn-info btn-lg\"&gt;Create&lt;/button&gt;\n            &lt;button type=\"button\" class=\"btn btn-default btn-lg pull-right\" ng-click=\"cancelCreating()\"&gt;Cancel&lt;/button&gt;\n          &lt;/form&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;!-- EDITING --&gt;\n      &lt;div ng-if=\"shouldShowEditing()\"&gt;\n        &lt;h4&gt;Editing {{editedBookmark.title}}&lt;/h4&gt;\n\n        &lt;form class=\"edit-form\" role=\"form\" ng-submit=\"updateBookmark(editedBookmark)\"&gt;\n          &lt;div class=\"form-group\"&gt;\n            &lt;label&gt;Bookmark Title&lt;/label&gt;\n            &lt;input type=\"text\" class=\"form-control\" placeholder=\"Enter title\" ng-model=\"editedBookmark.title\"&gt;\n          &lt;/div&gt;\n          &lt;div class=\"form-group\"&gt;\n            &lt;label&gt;Bookmark URL&lt;/label&gt;\n            &lt;input type=\"text\" class=\"form-control\" placeholder=\"Enter URL\" ng-model=\"editedBookmark.url\"&gt;\n          &lt;/div&gt;\n          &lt;button type=\"submit\" class=\"btn btn-info btn-lg\"&gt;Save&lt;/button&gt;\n          &lt;button type=\"button\" class=\"btn btn-default btn-lg pull-right\" ng-click=\"cancelEditing();\"&gt;Cancel&lt;/button&gt;\n        &lt;/form&gt;\n      &lt;/div&gt;\n\n    &lt;/section&gt;\n\n  &lt;/body&gt;\n</code></pre>\n\n<ol>\n<li>Cut into your clipboard everything inside of the <strong>body.row</strong> tag.  </li>\n<li>remove the <strong>class=\"row\"</strong> from the <strong>body</strong> tag and move into a new div tag inside  the <strong>body</strong></li>\n<li>In this new <strong>div</strong> tag with the <strong>class=\"row\"</strong> I am going to attach this \"<strong>ui-view</strong>\" attribute.</li>\n</ol>\n\n<p><span class=\"filename\">index.html</span>  </p>\n\n<pre><code class=\"language-php\">  &lt;body ng-controller=\"MainController\"&gt;\n    &lt;div class=\"row\" ui-view&gt;\n    &lt;/div&gt;&lt;!-- .row --&gt;\n  &lt;/body&gt;\n</code></pre>\n\n<hr />\n\n<h6 id=\"populatethecategoriestemplate\">Populate the categories template</h6>\n\n<p>Let's hop into the \"<strong>categories</strong>\" template. For now I'm just going to do \"HELLO UI-ROUTER\".</p>\n\n<p>This is just to show that it is working.</p>\n\n<p><span class=\"filename\">categories.tmpl.html</span>  </p>\n\n<pre><code class=\"language-php\">&lt;h1&gt;HELLO UI-ROUTER&lt;/h1&gt;  \n</code></pre>\n\n<p>I'm going to refresh the page, and we've got a big \"HELLO UI-ROUTER\".</p>\n\n<p>What the eggly application did is:</p>\n\n<ol>\n<li>Looked for that ui-view  </li>\n<li>Inserted that template in there </li>\n<li>Spun it up with the main controller</li>\n</ol>\n\n<p>Obviously that's not very useful, so I'm going to paste our application in here, or paste the contents of the main HTML page in here.</p>\n\n<p><span class=\"filename\">categories.tmpl.html</span>  </p>\n\n<pre><code class=\"language-php\">&lt;aside class=\"small-4 columns\"&gt;  \n  &lt;h1 ng-click=\"setCurrentCategory(null)\"&gt;Eggly&lt;/h1&gt;\n  &lt;ul class=\"category-list\"&gt;\n    &lt;li ng-repeat=\"category in categories\" ng-class=\"{'active': isCurrentCategory(category)}\"&gt;\n      &lt;a href=\"#\" ng-click=\"setCurrentCategory(category)\"&gt;{{category.name}}&lt;/a&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/aside&gt;\n\n&lt;section class=\"small-8 columns\"&gt;  \n  &lt;ul class=\"bookmarks-list\"&gt;\n    &lt;li ng-class=\"{active: isSelectedBookmark(bookmark.id)}\" ng-repeat=\"bookmark in bookmarks | filter: {category: currentCategory.name}\"&gt;\n      &lt;a href=\"#\" ng-click=\"setEditedBookmark(bookmark); startEditing();\"&gt;&lt;i class=\"fa fa-pencil\"&gt;&lt;/i&gt;&lt;/a&gt;\n      &lt;a href=\"{{bookmark.url}}\" target=\"_blank\"&gt;{{bookmark.title}}&lt;/a&gt;\n      &lt;a href=\"#\" ng-click=\"deleteBookmark(bookmark)\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/a&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n\n  &lt;hr&gt;\n\n  &lt;!-- CREATING --&gt;\n  &lt;div ng-if=\"shouldShowCreating()\"&gt;\n    &lt;a href=\"#\" ng-click=\"startCreating();\"&gt;&lt;i class=\"fa fa-plus\"&gt;&lt;/i&gt; Create Bookmark&lt;/a&gt;\n    &lt;div ng-if=\"isCreating\"&gt;\n      &lt;form class=\"create-form\" ng-show=\"isCreating\" role=\"form\" ng-submit=\"createBookmark(newBookmark)\" novalidate&gt;\n        &lt;div class=\"form-group\"&gt;\n          &lt;label for=\"newBookmarkTitle\"&gt;Bookmark Title&lt;/label&gt;\n          &lt;input type=\"text\" class=\"form-control\" id=\"newBookmarkTitle\" ng-model=\"newBookmark.title\" placeholder=\"Enter title\"&gt;\n        &lt;/div&gt;\n        &lt;div class=\"form-group\"&gt;\n          &lt;label for=\"newBookmarkURL\"&gt;Bookmark URL&lt;/label&gt;\n          &lt;input type=\"text\" class=\"form-control\" id=\"newBookmarkURL\" ng-model=\"newBookmark.url\" placeholder=\"Enter URL\"&gt;\n        &lt;/div&gt;\n        &lt;button type=\"submit\" class=\"btn btn-info btn-lg\"&gt;Create&lt;/button&gt;\n        &lt;button type=\"button\" class=\"btn btn-default btn-lg pull-right\" ng-click=\"cancelCreating()\"&gt;Cancel&lt;/button&gt;\n      &lt;/form&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;!-- EDITING --&gt;\n  &lt;div ng-if=\"shouldShowEditing()\"&gt;\n    &lt;h4&gt;Editing {{editedBookmark.title}}&lt;/h4&gt;\n\n    &lt;form class=\"edit-form\" role=\"form\" ng-submit=\"updateBookmark(editedBookmark)\"&gt;\n      &lt;div class=\"form-group\"&gt;\n        &lt;label&gt;Bookmark Title&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" placeholder=\"Enter title\" ng-model=\"editedBookmark.title\"&gt;\n      &lt;/div&gt;\n      &lt;div class=\"form-group\"&gt;\n        &lt;label&gt;Bookmark URL&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" placeholder=\"Enter URL\" ng-model=\"editedBookmark.url\"&gt;\n      &lt;/div&gt;\n      &lt;button type=\"submit\" class=\"btn btn-info btn-lg\"&gt;Save&lt;/button&gt;\n      &lt;button type=\"button\" class=\"btn btn-default btn-lg pull-right\" ng-click=\"cancelEditing();\"&gt;Cancel&lt;/button&gt;\n    &lt;/form&gt;\n  &lt;/div&gt;\n\n&lt;/section&gt;  \n</code></pre>\n\n<p>Let's refresh the page, after initiating <strong>http-server</strong>.</p>\n\n<p>From here it looks just like how we had it, but we've started to introduce the state machine.</p>\n\n<p><img src=\"/content/images/2015/03/Introduced_the_state_machine.png\" alt=\"Introduced the state machine\" /></p>\n\n<hr />\n\n<h6 id=\"whatsnext\">What's next</h6>\n\n<p>In the next lesson we're actually going to introduce name views where we will actually have a specific view for categories, and a specific view for bookmarks.</p>\n\n<p>Things start to get really powerful, and you can do some really neat things by targeting specific pieces of your layout with templates for specific states, as well as organizing your controllers into your view.</p>\n\n<p>Now you no longer have a large controller, but you have very small, granular controllers for specific pieces in your page.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/angularjs-architecture-using-submodules\" style=\"width: 50%;\">Using Sub-modules</a><a class=\"next-article\" href=\"/angularjs-architecture-using-ui-routers-named-views\" style=\"float: right;width: 50%;text-align: right;\">ui-router's named views</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1427336526035,"created_by":1,"updated_at":1427723844576,"updated_by":1,"published_at":1427336633407,"published_by":1},{"id":44,"uuid":"3e20ebb9-5e04-41f1-8de9-9c76e64c1bdf","title":"AngularJS Architecture: Using ui-router's named views","slug":"angularjs-architecture-using-ui-routers-named-views","markdown":"> We'll take a deeper look at ui-router as we introduce named views into Eggly.\n\n> We will take the basic state that we defined in the previous video and refactor it so that it consists of two unique views within the application.\n\n![Part 1: Getting Started](/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png)\n\nIn this lesson, we are going to really tap into the power of ui-router with named views.\n\nIn the previous lesson, we created a **single, simple route** and moved our main layout into a **single HTML template**.\n\nWe are going to take that a step further by **separating that template into two templates**, a **category** template and a **bookmarks** template, and then** defining a separate view for each of them**.\n\nWhen working with a large application, it is often a good idea to **define a top-level, abstract state that defines the base layout, as well as any additional information that you want the child states to draw from**.\n\n---\n\n###### Refactor Eggly State ######\n\nLet's take a quick moment and refactor the Eggly state to be an abstract state that we can use as a starting point for the additional states that we're going to define.\n\nWe're also going to set up a fallback to redirect the user with one additional service called \"**urlRouterProvider**\".\n\n<span class=\"filename\">eggly.js</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('Eggly', [\n  'ui.router',\n  'categories',\n  'categories.bookmarks'\n])\n.config(function($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('eggly', {\n      url: '',\n      abstract: true\n    });\n\n  $urlRouterProvider.otherwise('/');\n})</code></pre>\n\n**[6]** I am going to inject urlRouterProvider, and then from here.\n\n**[10]** We're just going to say, **abstract** is **true**.\n\n**[13]** I'm going to say, **otherwise**, just redirect to the root of the app '**/**'.\n\n---\n\n###### Refactor categories template ######\n\nNow that we've done that, let's refactor our categories template that just contains everything here, **into two specific templates**.\n\nIn **categories**, I'm going to just copy the contents of the sidebar (**aside** tag contents), and I'm going to paste this as the only content of this file.\n\n<span class=\"filename\">categories.tmpl.html</span>\n```php\n<h1 ng-click=\"setCurrentCategory(null)\">Eggly</h1>\n<ul class=\"category-list\">\n  <li ng-repeat=\"category in categories\" ng-class=\"{'active': isCurrentCategory(category)}\">\n    <a href=\"#\" ng-click=\"setCurrentCategory(category)\">{{category.name}}</a>\n  </li>\n</ul>\n```\n\n---\n\n###### Refactor bookmarks template ######\n\nThen, for the bookmarks, I'm going to copy the bookmark-specific stuff (**section** tag contents), and I'm going to paste this into the bookmarks template.\n\n<span class=\"filename\">bookmarks.tmpl.html</span>\n```php\n<ul class=\"bookmarks-list\">\n  <li ng-class=\"{active: isSelectedBookmark(bookmark.id)}\" ng-repeat=\"bookmark in bookmarks | filter: {category: currentCategory.name}\">\n    <a href=\"#\" ng-click=\"setEditedBookmark(bookmark); startEditing();\"><i class=\"fa fa-pencil\"></i></a>\n    <a href=\"{{bookmark.url}}\" target=\"_blank\">{{bookmark.title}}</a>\n    <a href=\"#\" ng-click=\"deleteBookmark(bookmark)\"><i class=\"fa fa-times\"></i></a>\n  </li>\n</ul>\n\n<hr>\n\n<!-- CREATING -->\n<div ng-if=\"shouldShowCreating()\">\n  <a href=\"#\" ng-click=\"startCreating();\"><i class=\"fa fa-plus\"></i> Create Bookmark</a>\n  <div ng-if=\"isCreating\">\n    <form class=\"create-form\" ng-show=\"isCreating\" role=\"form\" ng-submit=\"createBookmark(newBookmark)\" novalidate>\n      <div class=\"form-group\">\n        <label for=\"newBookmarkTitle\">Bookmark Title</label>\n        <input type=\"text\" class=\"form-control\" id=\"newBookmarkTitle\" ng-model=\"newBookmark.title\" placeholder=\"Enter title\">\n      </div>\n      <div class=\"form-group\">\n        <label for=\"newBookmarkURL\">Bookmark URL</label>\n        <input type=\"text\" class=\"form-control\" id=\"newBookmarkURL\" ng-model=\"newBookmark.url\" placeholder=\"Enter URL\">\n      </div>\n      <button type=\"submit\" class=\"btn btn-info btn-lg\">Create</button>\n      <button type=\"button\" class=\"btn btn-default btn-lg pull-right\" ng-click=\"cancelCreating()\">Cancel</button>\n    </form>\n  </div>\n</div>\n\n<!-- EDITING -->\n<div ng-if=\"shouldShowEditing()\">\n  <h4>Editing {{editedBookmark.title}}</h4>\n\n  <form class=\"edit-form\" role=\"form\" ng-submit=\"updateBookmark(editedBookmark)\">\n    <div class=\"form-group\">\n      <label>Bookmark Title</label>\n      <input type=\"text\" class=\"form-control\" placeholder=\"Enter title\" ng-model=\"editedBookmark.title\">\n    </div>\n    <div class=\"form-group\">\n      <label>Bookmark URL</label>\n      <input type=\"text\" class=\"form-control\" placeholder=\"Enter URL\" ng-model=\"editedBookmark.url\">\n    </div>\n    <button type=\"submit\" class=\"btn btn-info btn-lg\">Save</button>\n    <button type=\"button\" class=\"btn btn-default btn-lg pull-right\" ng-click=\"cancelEditing();\">Cancel</button>\n  </form>\n</div>\n```\n\n---\n\n###### Refactore main HTML file ######\n\nNow, we are left with this remaining container HTML of the categories and bookmarks (**aside** tag and **section** tag).\n\n1. We are going to go back into our main HTML file and paste this into here.\n- Let's delete this div with the unnamed ui-view here, and let's create two named views.\n- This is where we want the ui-view=\"categories\" to go.\n- Then let's do the same for ui-view=\"bookmarks\".\n\n<span class=\"filename\">index.html</span>\n```php\n  <body ng-controller=\"MainController\">\n    <aside class=\"small-4 columns\" ui-view=\"categories\">\n    </aside>\n    <section class=\"small-8 columns\" ui-view=\"bookmarks\">\n    </section>\n  </body>\n```\n\n---\n\n###### Connect $stateProvider to mulitple views ######\n\nNow that we have named ui-views, we need to define corresponding views and our **stateProvider** to match up.\n\n<span class=\"filename\">categories.js</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('categories', [\n  'eggly.models.categories'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories', {\n      url: '/',\n      views: {\n        'categories@': {\n          controller: 'CategoriesController',\n          templateUrl: 'app/categories/categories.tmpl.html'\n        },\n        'bookmarks@': {\n          controller: 'BookmarksController',\n          templateUrl: 'app/categories/bookmarks/bookmarks.tmpl.html'\n        }\n      }\n    });\n})\n.controller('CategoriesController', function CategoriesController($scope) {\n\n})\n.controller('BookmarksController', function BookmarksController($scope) {\n\n})\n;</code></pre>\n\n**[6]** In our **categories** module, we'll define an **eggly.category** state that we can attach our views to.\n\n**[4]** We will inject our **stateProvider**.\n\n**[7]** We will give this the URL of the root of the application '**/**'.\n\n**[8-16]** Then we are going to define our views property.\n\n**[9,13]** This is going to be just an empty object initially, but we need the keys on the views object to match up to our named view, so **categories** and **bookmarks**.\n\n**[9,13]** We'll add '**categories@**' and '**bookmarks@**'. We are adding the at symbol to make this an **absolute path**, meaning that it will **target this named view specifically with any unnamed state within our main page**. This allows us to go as far as defining specific configurations or a specific view and a specific state. More on that later.\n\n**[10-11, 14-15]** From here, it's pretty much like defining a normal route. We will define our **controller** and **templateUrl**, and we should be ready to go. We will do the same for our bookmarks.\n\n**[20-22, 23-25]** The categories controller and the bookmarks controller doesn't actually exist yet, so let's just define just a real quick stub of those. Let's do the same for the bookmarks controller.\n\nLet's go back into the browser and refresh. You can see that the page is still rendering.\n\n![named-views-still-rendering](/content/images/2015/03/named-views-still-rendering.png)\n\n---\n\n###### Recap ######\n\n1. We refactored the **eggly** state to be abstract.\n- We introduced **urlRouterProvider** to redirect to the root of the application.\n- We then refactored the categories template, by making the main template to have two separate templates, **categories** and **bookmarks**.\n- Then, in the main HTML file, we introduced two ui-views, ui-view **categories**, ui-view **bookmarks**.\n- Then, from here, we defined the **eggly.categories** state for the URL of the root of the application '/'.\n- Then two **absolute views** targeting the view named **categories**, the view named **bookmarks**, and the **controller** and the **template** for each of those views.\n\n---\n\n###### What's next ######\n\nWe are going to introduce **stateParams** so we can pass specific information from one state to another.\n\n---\n\n<a class=\"prev-article\" href=\"/angularjs-architecture-basic-state-with-ui-router\" style=\"width: 50%;\">Basic State</a><a class=\"next-article\" href=\"/angularjs-architecture-ui-router-state-params-for-sharing-information\" style=\"float: right;width: 50%;text-align: right;\">State Params</a>","html":"<blockquote>\n  <p>We'll take a deeper look at ui-router as we introduce named views into Eggly.</p>\n  \n  <p>We will take the basic state that we defined in the previous video and refactor it so that it consists of two unique views within the application.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png\" alt=\"Part 1: Getting Started\" /></p>\n\n<p>In this lesson, we are going to really tap into the power of ui-router with named views.</p>\n\n<p>In the previous lesson, we created a <strong>single, simple route</strong> and moved our main layout into a <strong>single HTML template</strong>.</p>\n\n<p>We are going to take that a step further by <strong>separating that template into two templates</strong>, a <strong>category</strong> template and a <strong>bookmarks</strong> template, and then<em>* defining a separate view for each of them</em>*.</p>\n\n<p>When working with a large application, it is often a good idea to <strong>define a top-level, abstract state that defines the base layout, as well as any additional information that you want the child states to draw from</strong>.</p>\n\n<hr />\n\n<h6 id=\"refactoregglystate\">Refactor Eggly State</h6>\n\n<p>Let's take a quick moment and refactor the Eggly state to be an abstract state that we can use as a starting point for the additional states that we're going to define.</p>\n\n<p>We're also going to set up a fallback to redirect the user with one additional service called \"<strong>urlRouterProvider</strong>\".</p>\n\n<p><span class=\"filename\">eggly.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('Eggly', [  \n  'ui.router',\n  'categories',\n  'categories.bookmarks'\n])\n.config(function($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('eggly', {\n      url: '',\n      abstract: true\n    });\n\n  $urlRouterProvider.otherwise('/');\n})</code></pre>\n\n<p><strong>[6]</strong> I am going to inject urlRouterProvider, and then from here.</p>\n\n<p><strong>[10]</strong> We're just going to say, <strong>abstract</strong> is <strong>true</strong>.</p>\n\n<p><strong>[13]</strong> I'm going to say, <strong>otherwise</strong>, just redirect to the root of the app '<strong>/</strong>'.</p>\n\n<hr />\n\n<h6 id=\"refactorcategoriestemplate\">Refactor categories template</h6>\n\n<p>Now that we've done that, let's refactor our categories template that just contains everything here, <strong>into two specific templates</strong>.</p>\n\n<p>In <strong>categories</strong>, I'm going to just copy the contents of the sidebar (<strong>aside</strong> tag contents), and I'm going to paste this as the only content of this file.</p>\n\n<p><span class=\"filename\">categories.tmpl.html</span>  </p>\n\n<pre><code class=\"language-php\">&lt;h1 ng-click=\"setCurrentCategory(null)\"&gt;Eggly&lt;/h1&gt;  \n&lt;ul class=\"category-list\"&gt;  \n  &lt;li ng-repeat=\"category in categories\" ng-class=\"{'active': isCurrentCategory(category)}\"&gt;\n    &lt;a href=\"#\" ng-click=\"setCurrentCategory(category)\"&gt;{{category.name}}&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;  \n</code></pre>\n\n<hr />\n\n<h6 id=\"refactorbookmarkstemplate\">Refactor bookmarks template</h6>\n\n<p>Then, for the bookmarks, I'm going to copy the bookmark-specific stuff (<strong>section</strong> tag contents), and I'm going to paste this into the bookmarks template.</p>\n\n<p><span class=\"filename\">bookmarks.tmpl.html</span>  </p>\n\n<pre><code class=\"language-php\">&lt;ul class=\"bookmarks-list\"&gt;  \n  &lt;li ng-class=\"{active: isSelectedBookmark(bookmark.id)}\" ng-repeat=\"bookmark in bookmarks | filter: {category: currentCategory.name}\"&gt;\n    &lt;a href=\"#\" ng-click=\"setEditedBookmark(bookmark); startEditing();\"&gt;&lt;i class=\"fa fa-pencil\"&gt;&lt;/i&gt;&lt;/a&gt;\n    &lt;a href=\"{{bookmark.url}}\" target=\"_blank\"&gt;{{bookmark.title}}&lt;/a&gt;\n    &lt;a href=\"#\" ng-click=\"deleteBookmark(bookmark)\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;!-- CREATING --&gt;  \n&lt;div ng-if=\"shouldShowCreating()\"&gt;  \n  &lt;a href=\"#\" ng-click=\"startCreating();\"&gt;&lt;i class=\"fa fa-plus\"&gt;&lt;/i&gt; Create Bookmark&lt;/a&gt;\n  &lt;div ng-if=\"isCreating\"&gt;\n    &lt;form class=\"create-form\" ng-show=\"isCreating\" role=\"form\" ng-submit=\"createBookmark(newBookmark)\" novalidate&gt;\n      &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"newBookmarkTitle\"&gt;Bookmark Title&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"newBookmarkTitle\" ng-model=\"newBookmark.title\" placeholder=\"Enter title\"&gt;\n      &lt;/div&gt;\n      &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"newBookmarkURL\"&gt;Bookmark URL&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"newBookmarkURL\" ng-model=\"newBookmark.url\" placeholder=\"Enter URL\"&gt;\n      &lt;/div&gt;\n      &lt;button type=\"submit\" class=\"btn btn-info btn-lg\"&gt;Create&lt;/button&gt;\n      &lt;button type=\"button\" class=\"btn btn-default btn-lg pull-right\" ng-click=\"cancelCreating()\"&gt;Cancel&lt;/button&gt;\n    &lt;/form&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;!-- EDITING --&gt;  \n&lt;div ng-if=\"shouldShowEditing()\"&gt;  \n  &lt;h4&gt;Editing {{editedBookmark.title}}&lt;/h4&gt;\n\n  &lt;form class=\"edit-form\" role=\"form\" ng-submit=\"updateBookmark(editedBookmark)\"&gt;\n    &lt;div class=\"form-group\"&gt;\n      &lt;label&gt;Bookmark Title&lt;/label&gt;\n      &lt;input type=\"text\" class=\"form-control\" placeholder=\"Enter title\" ng-model=\"editedBookmark.title\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"form-group\"&gt;\n      &lt;label&gt;Bookmark URL&lt;/label&gt;\n      &lt;input type=\"text\" class=\"form-control\" placeholder=\"Enter URL\" ng-model=\"editedBookmark.url\"&gt;\n    &lt;/div&gt;\n    &lt;button type=\"submit\" class=\"btn btn-info btn-lg\"&gt;Save&lt;/button&gt;\n    &lt;button type=\"button\" class=\"btn btn-default btn-lg pull-right\" ng-click=\"cancelEditing();\"&gt;Cancel&lt;/button&gt;\n  &lt;/form&gt;\n&lt;/div&gt;  \n</code></pre>\n\n<hr />\n\n<h6 id=\"refactoremainhtmlfile\">Refactore main HTML file</h6>\n\n<p>Now, we are left with this remaining container HTML of the categories and bookmarks (<strong>aside</strong> tag and <strong>section</strong> tag).</p>\n\n<ol>\n<li>We are going to go back into our main HTML file and paste this into here.  </li>\n<li>Let's delete this div with the unnamed ui-view here, and let's create two named views.</li>\n<li>This is where we want the ui-view=\"categories\" to go.</li>\n<li>Then let's do the same for ui-view=\"bookmarks\".</li>\n</ol>\n\n<p><span class=\"filename\">index.html</span>  </p>\n\n<pre><code class=\"language-php\">  &lt;body ng-controller=\"MainController\"&gt;\n    &lt;aside class=\"small-4 columns\" ui-view=\"categories\"&gt;\n    &lt;/aside&gt;\n    &lt;section class=\"small-8 columns\" ui-view=\"bookmarks\"&gt;\n    &lt;/section&gt;\n  &lt;/body&gt;\n</code></pre>\n\n<hr />\n\n<h6 id=\"connectdstateprovidertomulitpleviews\">Connect $stateProvider to mulitple views</h6>\n\n<p>Now that we have named ui-views, we need to define corresponding views and our <strong>stateProvider</strong> to match up.</p>\n\n<p><span class=\"filename\">categories.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('categories', [  \n  'eggly.models.categories'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories', {\n      url: '/',\n      views: {\n        'categories@': {\n          controller: 'CategoriesController',\n          templateUrl: 'app/categories/categories.tmpl.html'\n        },\n        'bookmarks@': {\n          controller: 'BookmarksController',\n          templateUrl: 'app/categories/bookmarks/bookmarks.tmpl.html'\n        }\n      }\n    });\n})\n.controller('CategoriesController', function CategoriesController($scope) {\n\n})\n.controller('BookmarksController', function BookmarksController($scope) {\n\n})\n;</code></pre>\n\n<p><strong>[6]</strong> In our <strong>categories</strong> module, we'll define an <strong>eggly.category</strong> state that we can attach our views to.</p>\n\n<p><strong>[4]</strong> We will inject our <strong>stateProvider</strong>.</p>\n\n<p><strong>[7]</strong> We will give this the URL of the root of the application '<strong>/</strong>'.</p>\n\n<p><strong>[8-16]</strong> Then we are going to define our views property.</p>\n\n<p><strong>[9,13]</strong> This is going to be just an empty object initially, but we need the keys on the views object to match up to our named view, so <strong>categories</strong> and <strong>bookmarks</strong>.</p>\n\n<p><strong>[9,13]</strong> We'll add '<strong>categories@</strong>' and '<strong>bookmarks@</strong>'. We are adding the at symbol to make this an <strong>absolute path</strong>, meaning that it will <strong>target this named view specifically with any unnamed state within our main page</strong>. This allows us to go as far as defining specific configurations or a specific view and a specific state. More on that later.</p>\n\n<p><strong>[10-11, 14-15]</strong> From here, it's pretty much like defining a normal route. We will define our <strong>controller</strong> and <strong>templateUrl</strong>, and we should be ready to go. We will do the same for our bookmarks.</p>\n\n<p><strong>[20-22, 23-25]</strong> The categories controller and the bookmarks controller doesn't actually exist yet, so let's just define just a real quick stub of those. Let's do the same for the bookmarks controller.</p>\n\n<p>Let's go back into the browser and refresh. You can see that the page is still rendering.</p>\n\n<p><img src=\"/content/images/2015/03/named-views-still-rendering.png\" alt=\"named-views-still-rendering\" /></p>\n\n<hr />\n\n<h6 id=\"recap\">Recap</h6>\n\n<ol>\n<li>We refactored the <strong>eggly</strong> state to be abstract.  </li>\n<li>We introduced <strong>urlRouterProvider</strong> to redirect to the root of the application.</li>\n<li>We then refactored the categories template, by making the main template to have two separate templates, <strong>categories</strong> and <strong>bookmarks</strong>.</li>\n<li>Then, in the main HTML file, we introduced two ui-views, ui-view <strong>categories</strong>, ui-view <strong>bookmarks</strong>.</li>\n<li>Then, from here, we defined the <strong>eggly.categories</strong> state for the URL of the root of the application '/'.</li>\n<li>Then two <strong>absolute views</strong> targeting the view named <strong>categories</strong>, the view named <strong>bookmarks</strong>, and the <strong>controller</strong> and the <strong>template</strong> for each of those views.</li>\n</ol>\n\n<hr />\n\n<h6 id=\"whatsnext\">What's next</h6>\n\n<p>We are going to introduce <strong>stateParams</strong> so we can pass specific information from one state to another.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/angularjs-architecture-basic-state-with-ui-router\" style=\"width: 50%;\">Basic State</a><a class=\"next-article\" href=\"/angularjs-architecture-ui-router-state-params-for-sharing-information\" style=\"float: right;width: 50%;text-align: right;\">State Params</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1427666870864,"created_by":1,"updated_at":1427728676153,"updated_by":1,"published_at":1427666957658,"published_by":1},{"id":45,"uuid":"4d20105e-3146-48d5-922c-533d2051adb8","title":"AngularJS Architecture: ui-router state params for sharing information","slug":"angularjs-architecture-ui-router-state-params-for-sharing-information","markdown":"> Let's learn how to pass information from one state to another within Eggly.\n\n> We learn how to define a state so that it has parameters in its definition and then read those parameters using the $stateParams service.\n\n![Part 1: Getting Started](/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png)\n\nWe are going to learn how to **use state parameters to pass information from one state to another in UI-Router**.\n\nA great candidate for this functionality is when we want to define and then navigate to a state that shows only the bookmarks for a selected category.\n\n**The question is, how do we pass the selected category into the new state so that it knows what bookmarks to show.**\n\n**Also, what if we want to navigate directly to that state via a URL?**\n\n---\n\n###### Passing category into bookmarks state ######\n\nWe're going to see exactly how to do this in our **bookmarks module**.\n\nThe first thing we need to do is to define a simple state.\n\n<span class=\"filename\">bookmarks.js</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('categories.bookmarks', [\n  'categories.bookmarks.create',\n  'categories.bookmarks.edit',\n  'eggly.models.bookmarks',\n  'eggly.models.bookmarks'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories.bookmarks', {\n      url: 'categories/:category',\n      views: {\n        'bookmarks@': {\n          templateUrl: 'app/categories/bookmarks/bookmarks.tmpl.html',\n          controller: 'BookmarksController'\n        }\n      }\n    })\n})\n.controller('BookmarksController', function BookmarksController($scope, $stateParams) {\n  $scope.currentCategoryName = $stateParams.category;\n})\n;</code></pre>\n\n**[7]** We will start with the config block, pass in the state provider\n\n**[9]** We are going to call the state **eggly.categories.bookmarks.**\n\n**[10]** From here, we're just going to start up by giving it a **URL** of '**categories/:category**'. I'm going to jump up here real quickly, and we are going to introduce a parameter into the URL using the colon, and we're going to call this parameter \"**category**\". Now that we've defined this on the URL, I should be able to read that parameter from the state.\n\n**[12]** We add a absolute view for the **bookmark@** state.\n\n**[13]** From here, let's give it a **templateUrl** of '**app/categories/bookmarks/bookmarks.tmpl.html**'\n\n**[14]** Set a controller of '**BookmarksController**'\n\n**[19-21]** Actually add a controller for bookmarks here.\n\n**[20]** We are going to do this using **$stateParams** service. Then, from here, we can define a property on **$scope**. Let's just call this **currentCategoryName**. Let's read the **category** property directly off the **$stateParam**.\n\nNotice we defined it on the URL as category and so, on the **$stateParams** service, there is now going to be a property called **category**.\n\n---\n\n###### Refactor categories controller ######\n\nLet's get rid of the **bookmarks controller**, because we've just defined it in the **bookmarks.js** file.\n\n<span class=\"filename\">categories.js</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('categories', [\n  'eggly.models.categories'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories', {\n      url: '/',\n      views: {\n        'categories@': {\n          controller: 'CategoriesController',\n          templateUrl: 'app/categories/categories.tmpl.html'\n        },\n        'bookmarks@': {\n          controller: 'BookmarksController',\n          templateUrl: 'app/categories/bookmarks/bookmarks.tmpl.html'\n        }\n      }\n    });\n})\n.controller('CategoriesController', function CategoriesController($scope) {\n\n})\n;</code></pre>\n\n---\n\n###### Test on bookmarks view/template ######\n\nJust to prove that this is indeed working, let's go ahead and set up a big **h1** tag, and bind to this **currentCategoryName** parameter.\n\n<span class=\"filename\">bookmarks.tmpl.html</span>\n```php\n<h2>{{currentCategoryName}}</h2>\n<ul class=\"bookmarks-list\">\n  <li ng-class=\"{active: isSelectedBookmark(bookmark.id)}\" ng-repeat=\"bookmark in bookmarks | filter: {category: currentCategory.name}\">\n    <a href=\"#\" ng-click=\"setEditedBookmark(bookmark); startEditing();\"><i class=\"fa fa-pencil\"></i></a>\n    <a href=\"{{bookmark.url}}\" target=\"_blank\">{{bookmark.title}}</a>\n    <a href=\"#\" ng-click=\"deleteBookmark(bookmark)\"><i class=\"fa fa-times\"></i></a>\n  </li>\n</ul>\n```\n\nI'm going to open this up in the browser. From here, we're going to go **categories**, and let's do **development**.\n\n![categories development](/content/images/2015/03/categories_development.png)\n\nYou can see now that we're reading off of the **$stateParams** service. Then, passing that to the **current category name**, and then displaying it in the **bookmarks** template.\n\nI could actually put anything in here and it would show up. This is a really handy way to start to pass parameters into states.\n\nIt's using the **$stateParams** service, and then, defining that parameter on your URL of your state using the colon and then giving it a name.\n\n---\n\n###### What's next ######\n\nStay tuned for the next lesson, where I'm going to show you actually how to **navigate to these specific states via a dot interaction or programmatically with the state service**.\n\n---\n\n<a class=\"prev-article\" href=\"/angularjs-architecture-using-ui-routers-named-views\" style=\"width: 50%;\">Named Views</a><a class=\"next-article\" href=\"/angularjs-architecture-navigating-between-states-with-ui-router\" style=\"float: right;width: 50%;text-align: right;\">Navigating Between States</a>","html":"<blockquote>\n  <p>Let's learn how to pass information from one state to another within Eggly.</p>\n  \n  <p>We learn how to define a state so that it has parameters in its definition and then read those parameters using the $stateParams service.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png\" alt=\"Part 1: Getting Started\" /></p>\n\n<p>We are going to learn how to <strong>use state parameters to pass information from one state to another in UI-Router</strong>.</p>\n\n<p>A great candidate for this functionality is when we want to define and then navigate to a state that shows only the bookmarks for a selected category.</p>\n\n<p><strong>The question is, how do we pass the selected category into the new state so that it knows what bookmarks to show.</strong></p>\n\n<p><strong>Also, what if we want to navigate directly to that state via a URL?</strong></p>\n\n<hr />\n\n<h6 id=\"passingcategoryintobookmarksstate\">Passing category into bookmarks state</h6>\n\n<p>We're going to see exactly how to do this in our <strong>bookmarks module</strong>.</p>\n\n<p>The first thing we need to do is to define a simple state.</p>\n\n<p><span class=\"filename\">bookmarks.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('categories.bookmarks', [  \n  'categories.bookmarks.create',\n  'categories.bookmarks.edit',\n  'eggly.models.bookmarks',\n  'eggly.models.bookmarks'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories.bookmarks', {\n      url: 'categories/:category',\n      views: {\n        'bookmarks@': {\n          templateUrl: 'app/categories/bookmarks/bookmarks.tmpl.html',\n          controller: 'BookmarksController'\n        }\n      }\n    })\n})\n.controller('BookmarksController', function BookmarksController($scope, $stateParams) {\n  $scope.currentCategoryName = $stateParams.category;\n})\n;</code></pre>\n\n<p><strong>[7]</strong> We will start with the config block, pass in the state provider</p>\n\n<p><strong>[9]</strong> We are going to call the state <strong>eggly.categories.bookmarks.</strong></p>\n\n<p><strong>[10]</strong> From here, we're just going to start up by giving it a <strong>URL</strong> of '<strong>categories/:category</strong>'. I'm going to jump up here real quickly, and we are going to introduce a parameter into the URL using the colon, and we're going to call this parameter \"<strong>category</strong>\". Now that we've defined this on the URL, I should be able to read that parameter from the state.</p>\n\n<p><strong>[12]</strong> We add a absolute view for the <strong>bookmark@</strong> state.</p>\n\n<p><strong>[13]</strong> From here, let's give it a <strong>templateUrl</strong> of '<strong>app/categories/bookmarks/bookmarks.tmpl.html</strong>'</p>\n\n<p><strong>[14]</strong> Set a controller of '<strong>BookmarksController</strong>'</p>\n\n<p><strong>[19-21]</strong> Actually add a controller for bookmarks here.</p>\n\n<p><strong>[20]</strong> We are going to do this using <strong>$stateParams</strong> service. Then, from here, we can define a property on <strong>$scope</strong>. Let's just call this <strong>currentCategoryName</strong>. Let's read the <strong>category</strong> property directly off the <strong>$stateParam</strong>.</p>\n\n<p>Notice we defined it on the URL as category and so, on the <strong>$stateParams</strong> service, there is now going to be a property called <strong>category</strong>.</p>\n\n<hr />\n\n<h6 id=\"refactorcategoriescontroller\">Refactor categories controller</h6>\n\n<p>Let's get rid of the <strong>bookmarks controller</strong>, because we've just defined it in the <strong>bookmarks.js</strong> file.</p>\n\n<p><span class=\"filename\">categories.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('categories', [  \n  'eggly.models.categories'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories', {\n      url: '/',\n      views: {\n        'categories@': {\n          controller: 'CategoriesController',\n          templateUrl: 'app/categories/categories.tmpl.html'\n        },\n        'bookmarks@': {\n          controller: 'BookmarksController',\n          templateUrl: 'app/categories/bookmarks/bookmarks.tmpl.html'\n        }\n      }\n    });\n})\n.controller('CategoriesController', function CategoriesController($scope) {\n\n})\n;</code></pre>\n\n<hr />\n\n<h6 id=\"testonbookmarksviewtemplate\">Test on bookmarks view/template</h6>\n\n<p>Just to prove that this is indeed working, let's go ahead and set up a big <strong>h1</strong> tag, and bind to this <strong>currentCategoryName</strong> parameter.</p>\n\n<p><span class=\"filename\">bookmarks.tmpl.html</span>  </p>\n\n<pre><code class=\"language-php\">&lt;h2&gt;{{currentCategoryName}}&lt;/h2&gt;  \n&lt;ul class=\"bookmarks-list\"&gt;  \n  &lt;li ng-class=\"{active: isSelectedBookmark(bookmark.id)}\" ng-repeat=\"bookmark in bookmarks | filter: {category: currentCategory.name}\"&gt;\n    &lt;a href=\"#\" ng-click=\"setEditedBookmark(bookmark); startEditing();\"&gt;&lt;i class=\"fa fa-pencil\"&gt;&lt;/i&gt;&lt;/a&gt;\n    &lt;a href=\"{{bookmark.url}}\" target=\"_blank\"&gt;{{bookmark.title}}&lt;/a&gt;\n    &lt;a href=\"#\" ng-click=\"deleteBookmark(bookmark)\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;  \n</code></pre>\n\n<p>I'm going to open this up in the browser. From here, we're going to go <strong>categories</strong>, and let's do <strong>development</strong>.</p>\n\n<p><img src=\"/content/images/2015/03/categories_development.png\" alt=\"categories development\" /></p>\n\n<p>You can see now that we're reading off of the <strong>$stateParams</strong> service. Then, passing that to the <strong>current category name</strong>, and then displaying it in the <strong>bookmarks</strong> template.</p>\n\n<p>I could actually put anything in here and it would show up. This is a really handy way to start to pass parameters into states.</p>\n\n<p>It's using the <strong>$stateParams</strong> service, and then, defining that parameter on your URL of your state using the colon and then giving it a name.</p>\n\n<hr />\n\n<h6 id=\"whatsnext\">What's next</h6>\n\n<p>Stay tuned for the next lesson, where I'm going to show you actually how to <strong>navigate to these specific states via a dot interaction or programmatically with the state service</strong>.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/angularjs-architecture-using-ui-routers-named-views\" style=\"width: 50%;\">Named Views</a><a class=\"next-article\" href=\"/angularjs-architecture-navigating-between-states-with-ui-router\" style=\"float: right;width: 50%;text-align: right;\">Navigating Between States</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1427728393621,"created_by":1,"updated_at":1427731880376,"updated_by":1,"published_at":1427728629256,"published_by":1},{"id":46,"uuid":"cec1ba53-1ff8-450b-bb35-3894aa45655e","title":"AngularJS Architecture: navigating between states with ui-router","slug":"angularjs-architecture-navigating-between-states-with-ui-router","markdown":"> Now that we have ui-router states in our Angular application, we can discuss the three ways to activate a state within ui-router.\n\n> We will programmatically activate a state using $state.go and capture user interactions with the ui-sref directive.\n\n![Part 1: Getting Started](/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png)\n\nWe're going to learn how to navigate between states while passing in relevant information.\n\nWithin **ui-router** there are 3 main ways to activate a state:\n\n1. Navigating directly to URL and writing into the Address bar\n- Calling $state.go on the state service\n- Clicking on link using **ui-sref** directive\n\n---\n\n###### Inject $state service into Main Controller ######\n\nWe'll start with the main app file 'eggly.js'...\n\n<span class=\"filename\">eggly.js</span>\n<pre class=\"line-numbers\" data-line=\"15\"><code class=\"language-javascript\">angular.module('Eggly', [\n  'ui.router',\n  'categories',\n  'categories.bookmarks'\n])\n.config(function($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('eggly', {\n      url: '',\n      abstract: true\n    });\n\n  $urlRouterProvider.otherwise('/');\n})\n.controller('MainController', function($scope, $state){\n  $scope.categories = [\n    {\"id\": 0, \"name\": \"Development\"},\n    {\"id\": 1, \"name\": \"Design\"},\n    {\"id\": 2, \"name\": \"Excercise\"},\n    {\"id\": 3, \"name\": \"Soccer\"}\n  ];</code></pre>\n\n**[15]** inject the **$state** service into our main controller\n\n---\n\n###### Calling $state.go when setting current category ######\n\nThen let's go down to where we are setting the current category in the main controller...\n\n<span class=\"filename\">eggly.js</span>\n<pre class=\"line-numbers\" data-start=\"49\" data-line=\"4\"><code class=\"language-javascript\">function setCurrentCategory(category) {\n    $scope.currentCategory = category;\n\n    $state.go('eggly.categories.bookmarks', {category:category.name});\n\n    $scope.cancelCreating();\n    $scope.cancelEditing();\n  }</code></pre>\n\n**[52]** We're going to call **$state.go** with the state that we want to go to. In this case, it is '**eggly.categories.bookmarks**', and as a second parameter, we are going to send an object map of the state params we want to send in. This directly takes **category.name** and sets it in the stateProvider's **category/:category** value.\n\n---\n\n###### Test the $state.go setting the category ######\n\nNow, when we refresh the page, and select a category to see if it's navigating to that state.\n\n---\n\n###### Navigate using ui-sref directive ######\n\nComment out the $state.go statement.\n\n<span class=\"filename\">eggly.js</span>\n<pre class=\"line-numbers\" data-start=\"49\" data-line=\"4\"><code class=\"language-javascript\">function setCurrentCategory(category) {\n    $scope.currentCategory = category;\n\n    // $state.go('eggly.categories.bookmarks', {category:category.name});\n\n    $scope.cancelCreating();\n    $scope.cancelEditing();\n  }</code></pre>\n\nGo into the **categories** view template.\n\n<span class=\"filename\">categories.tmpl.html</span>\n```php\n<h1 ng-click=\"setCurrentCategory(null)\">Eggly</h1>\n<ul class=\"category-list\">\n  <li ng-repeat=\"category in categories\" ng-class=\"{'active': isCurrentCategory(category)}\">\n    <a ui-sref=\"eggly.categories.bookmarks({category:category.name})\" ng-click=\"setCurrentCategory(category)\">{{category.name}}</a>\n  </li>\n</ul>\n```\n\nIn the **A** tag, where we are using **ng-click**, we add **ui-sref=\"eggly.categories.bookmarks({category:category.name})\"** that includes the state name as a method with a parameter of an object map of the state parameters we wish to update.\n\nNow, when we refresh the page, and select a category to see if it's navigating to that state.\n\n![via click event](/content/images/2015/03/localhost_8080___categories_Design.png)\n\nWe have now layed a foundation on how to use **ui-router** to navigate through unique states within eggly.\n\n---\n\n###### What's next ######\n\nWe will start to refactor our **category** and **bookmark** models into distinct **services** so that we can keep our controllers lightweith and focused on just controlling the views that they are associated with.\n\n---\n\n<a class=\"prev-article\" href=\"/angularjs-architecture-ui-router-state-params-for-sharing-information\" style=\"width: 50%;\">State Params</a><a class=\"next-article\" href=\"/angularjs-architecture-prefer-the-controller-as-syntax\" style=\"float: right;width: 50%;text-align: right;\">'controller as' syntax</a>","html":"<blockquote>\n  <p>Now that we have ui-router states in our Angular application, we can discuss the three ways to activate a state within ui-router.</p>\n  \n  <p>We will programmatically activate a state using $state.go and capture user interactions with the ui-sref directive.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png\" alt=\"Part 1: Getting Started\" /></p>\n\n<p>We're going to learn how to navigate between states while passing in relevant information.</p>\n\n<p>Within <strong>ui-router</strong> there are 3 main ways to activate a state:</p>\n\n<ol>\n<li>Navigating directly to URL and writing into the Address bar  </li>\n<li>Calling $state.go on the state service</li>\n<li>Clicking on link using <strong>ui-sref</strong> directive</li>\n</ol>\n\n<hr />\n\n<h6 id=\"injectdstateserviceintomaincontroller\">Inject $state service into Main Controller</h6>\n\n<p>We'll start with the main app file 'eggly.js'...</p>\n\n<p><span class=\"filename\">eggly.js</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"15\"><code class=\"language-javascript\">angular.module('Eggly', [  \n  'ui.router',\n  'categories',\n  'categories.bookmarks'\n])\n.config(function($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('eggly', {\n      url: '',\n      abstract: true\n    });\n\n  $urlRouterProvider.otherwise('/');\n})\n.controller('MainController', function($scope, $state){\n  $scope.categories = [\n    {\"id\": 0, \"name\": \"Development\"},\n    {\"id\": 1, \"name\": \"Design\"},\n    {\"id\": 2, \"name\": \"Excercise\"},\n    {\"id\": 3, \"name\": \"Soccer\"}\n  ];</code></pre>\n\n<p><strong>[15]</strong> inject the <strong>$state</strong> service into our main controller</p>\n\n<hr />\n\n<h6 id=\"callingdstategowhensettingcurrentcategory\">Calling $state.go when setting current category</h6>\n\n<p>Then let's go down to where we are setting the current category in the main controller...</p>\n\n<p><span class=\"filename\">eggly.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"49\" data-line=\"4\"><code class=\"language-javascript\">function setCurrentCategory(category) {  \n    $scope.currentCategory = category;\n\n    $state.go('eggly.categories.bookmarks', {category:category.name});\n\n    $scope.cancelCreating();\n    $scope.cancelEditing();\n  }</code></pre>\n\n<p><strong>[52]</strong> We're going to call <strong>$state.go</strong> with the state that we want to go to. In this case, it is '<strong>eggly.categories.bookmarks</strong>', and as a second parameter, we are going to send an object map of the state params we want to send in. This directly takes <strong>category.name</strong> and sets it in the stateProvider's <strong>category/:category</strong> value.</p>\n\n<hr />\n\n<h6 id=\"testthedstategosettingthecategory\">Test the $state.go setting the category</h6>\n\n<p>Now, when we refresh the page, and select a category to see if it's navigating to that state.</p>\n\n<hr />\n\n<h6 id=\"navigateusinguisrefdirective\">Navigate using ui-sref directive</h6>\n\n<p>Comment out the $state.go statement.</p>\n\n<p><span class=\"filename\">eggly.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"49\" data-line=\"4\"><code class=\"language-javascript\">function setCurrentCategory(category) {  \n    $scope.currentCategory = category;\n\n    // $state.go('eggly.categories.bookmarks', {category:category.name});\n\n    $scope.cancelCreating();\n    $scope.cancelEditing();\n  }</code></pre>\n\n<p>Go into the <strong>categories</strong> view template.</p>\n\n<p><span class=\"filename\">categories.tmpl.html</span>  </p>\n\n<pre><code class=\"language-php\">&lt;h1 ng-click=\"setCurrentCategory(null)\"&gt;Eggly&lt;/h1&gt;  \n&lt;ul class=\"category-list\"&gt;  \n  &lt;li ng-repeat=\"category in categories\" ng-class=\"{'active': isCurrentCategory(category)}\"&gt;\n    &lt;a ui-sref=\"eggly.categories.bookmarks({category:category.name})\" ng-click=\"setCurrentCategory(category)\"&gt;{{category.name}}&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;  \n</code></pre>\n\n<p>In the <strong>A</strong> tag, where we are using <strong>ng-click</strong>, we add <strong>ui-sref=\"eggly.categories.bookmarks({category:category.name})\"</strong> that includes the state name as a method with a parameter of an object map of the state parameters we wish to update.</p>\n\n<p>Now, when we refresh the page, and select a category to see if it's navigating to that state.</p>\n\n<p><img src=\"/content/images/2015/03/localhost_8080___categories_Design.png\" alt=\"via click event\" /></p>\n\n<p>We have now layed a foundation on how to use <strong>ui-router</strong> to navigate through unique states within eggly.</p>\n\n<hr />\n\n<h6 id=\"whatsnext\">What's next</h6>\n\n<p>We will start to refactor our <strong>category</strong> and <strong>bookmark</strong> models into distinct <strong>services</strong> so that we can keep our controllers lightweith and focused on just controlling the views that they are associated with.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/angularjs-architecture-ui-router-state-params-for-sharing-information\" style=\"width: 50%;\">State Params</a><a class=\"next-article\" href=\"/angularjs-architecture-prefer-the-controller-as-syntax\" style=\"float: right;width: 50%;text-align: right;\">'controller as' syntax</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1427731574082,"created_by":1,"updated_at":1427740691307,"updated_by":1,"published_at":1427731718544,"published_by":1},{"id":47,"uuid":"72b9f6c0-e672-43a1-b268-62442dd0461c","title":"AngularJS Architecture: Prefer the 'controller as' syntax","slug":"angularjs-architecture-prefer-the-controller-as-syntax","markdown":"> As of Angular 1.2, the use of $scope injectable has been greatly reduced in favor of the \"controller as syntax\".\n\n> We are going to take a quick look at cleaning up Eggly to follow this best practice.\n\n![Part 1: Getting Started](/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png)\n\nWe are going to address **$scope inheritance**, and then go into refactor our models.\n\n---\n\n###### Scope Inheritance ######\n\nRight now, only the **currentCategoryName** is being set by **bookmark.js**'s **BookmarkController** while most of the items bound in the bookmarks view template **bookmarks.tmpl.html** are set in scope by **eggly.js**.\n\nIn AngularJS, scope objects inherit from their parent objects, all the way up to root scope. This creates an interesting situation where the main controller is the parent controller to the bookmarks controller. So we are implicitly attaching the scope from main controller to the scope object of the bookmarks controller.\n\nThis may seem convenient at first, but in a growing app this may cause unforseen side effects.\n\nWe're going to fix this problem using the controller as syntax. This allows us to convert our controller to **appear javascript object**, and we no longer have to use scope as the glue between our controller and our view.\n\n---\n\n###### Not depending on scope for bookmarks ######\n\n<span class=\"filename\">bookmarks.js</span>\n<pre class=\"line-numbers\" data-line=\"14,19-22\"><code class=\"language-javascript\">angular.module('categories.bookmarks', [\n  'categories.bookmarks.create',\n  'categories.bookmarks.edit',\n  'eggly.models.bookmarks',\n  'eggly.models.bookmarks'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories.bookmarks', {\n      url: 'categories/:category',\n      views: {\n        'bookmarks@': {\n          templateUrl: 'app/categories/bookmarks/bookmarks.tmpl.html',\n          controller: 'BookmarksController as bookmarks'\n        }\n      }\n    })\n})\n.controller('BookmarksController', function BookmarksController($stateParams) {\n  var bookmarks = this;\n  bookmarks.currentCategoryName = $stateParams.category;\n})\n;</code></pre>\n\n\n**[14]** In the state definition, set the controller to '**BookmarksController as bookmarks**'\n\n**[19]** Delete the scope object\n\n**[20]** Create a variable named '**bookmarks**' and just assign it to **this** which keeps track of the top level javascript scope.\n\n**[21]** Assign currentCategoryName to **bookmarks**\n\nGoing back to the bookmarks view template...\n\n<span class=\"filename\">bookmarks.tmpl.html</span>\n```php\n<h2>{{bookmarks.currentCategoryName}}</h2>\n<ul class=\"bookmarks-list\">\n  <li ng-class=\"{active: isSelectedBookmark(bookmark.id)}\" ng-repeat=\"bookmark in bookmarks | filter: {category: currentCategory.name}\">\n    <a href=\"#\" ng-click=\"setEditedBookmark(bookmark); startEditing();\"><i class=\"fa fa-pencil\"></i></a>\n    <a href=\"{{bookmark.url}}\" target=\"_blank\">{{bookmark.title}}</a>\n    <a href=\"#\" ng-click=\"deleteBookmark(bookmark)\"><i class=\"fa fa-times\"></i></a>\n  </li>\n</ul>\n```\n\nChange the headline to bookmarks.currentCategory\n\n---\n\n###### Test the new code ######\n\nAfter refreshing you'll notice the headline is still working, but the implicit inheritance chain is broken.\n\n![BookmarkController as bookmarks](/content/images/2015/03/BookmarkController_as_bookmarks.png)\n\nThis means we are no longer reaching out of our controller and to a parent controller to pull down the bookmarks collection.\n\n---\n\n###### What's next ######\n\nWe are going to actually explicitly provide the bookmarks collection via the bookmarks model.\n\n---\n\n<a class=\"prev-article\" href=\"/angularjs-architecture-navigating-between-states-with-ui-router\" style=\"width: 50%;\">Navigating States</a><a class=\"next-article\" href=\"/angularjs-architecture-refactor-to-a-data-model\" style=\"float: right;width: 50%;text-align: right;\">Data Models</a>","html":"<blockquote>\n  <p>As of Angular 1.2, the use of $scope injectable has been greatly reduced in favor of the \"controller as syntax\".</p>\n  \n  <p>We are going to take a quick look at cleaning up Eggly to follow this best practice.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png\" alt=\"Part 1: Getting Started\" /></p>\n\n<p>We are going to address <strong>$scope inheritance</strong>, and then go into refactor our models.</p>\n\n<hr />\n\n<h6 id=\"scopeinheritance\">Scope Inheritance</h6>\n\n<p>Right now, only the <strong>currentCategoryName</strong> is being set by <strong>bookmark.js</strong>'s <strong>BookmarkController</strong> while most of the items bound in the bookmarks view template <strong>bookmarks.tmpl.html</strong> are set in scope by <strong>eggly.js</strong>.</p>\n\n<p>In AngularJS, scope objects inherit from their parent objects, all the way up to root scope. This creates an interesting situation where the main controller is the parent controller to the bookmarks controller. So we are implicitly attaching the scope from main controller to the scope object of the bookmarks controller.</p>\n\n<p>This may seem convenient at first, but in a growing app this may cause unforseen side effects.</p>\n\n<p>We're going to fix this problem using the controller as syntax. This allows us to convert our controller to <strong>appear javascript object</strong>, and we no longer have to use scope as the glue between our controller and our view.</p>\n\n<hr />\n\n<h6 id=\"notdependingonscopeforbookmarks\">Not depending on scope for bookmarks</h6>\n\n<p><span class=\"filename\">bookmarks.js</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"14,19-22\"><code class=\"language-javascript\">angular.module('categories.bookmarks', [  \n  'categories.bookmarks.create',\n  'categories.bookmarks.edit',\n  'eggly.models.bookmarks',\n  'eggly.models.bookmarks'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories.bookmarks', {\n      url: 'categories/:category',\n      views: {\n        'bookmarks@': {\n          templateUrl: 'app/categories/bookmarks/bookmarks.tmpl.html',\n          controller: 'BookmarksController as bookmarks'\n        }\n      }\n    })\n})\n.controller('BookmarksController', function BookmarksController($stateParams) {\n  var bookmarks = this;\n  bookmarks.currentCategoryName = $stateParams.category;\n})\n;</code></pre>\n\n<p><strong>[14]</strong> In the state definition, set the controller to '<strong>BookmarksController as bookmarks</strong>'</p>\n\n<p><strong>[19]</strong> Delete the scope object</p>\n\n<p><strong>[20]</strong> Create a variable named '<strong>bookmarks</strong>' and just assign it to <strong>this</strong> which keeps track of the top level javascript scope.</p>\n\n<p><strong>[21]</strong> Assign currentCategoryName to <strong>bookmarks</strong></p>\n\n<p>Going back to the bookmarks view template...</p>\n\n<p><span class=\"filename\">bookmarks.tmpl.html</span>  </p>\n\n<pre><code class=\"language-php\">&lt;h2&gt;{{bookmarks.currentCategoryName}}&lt;/h2&gt;  \n&lt;ul class=\"bookmarks-list\"&gt;  \n  &lt;li ng-class=\"{active: isSelectedBookmark(bookmark.id)}\" ng-repeat=\"bookmark in bookmarks | filter: {category: currentCategory.name}\"&gt;\n    &lt;a href=\"#\" ng-click=\"setEditedBookmark(bookmark); startEditing();\"&gt;&lt;i class=\"fa fa-pencil\"&gt;&lt;/i&gt;&lt;/a&gt;\n    &lt;a href=\"{{bookmark.url}}\" target=\"_blank\"&gt;{{bookmark.title}}&lt;/a&gt;\n    &lt;a href=\"#\" ng-click=\"deleteBookmark(bookmark)\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;  \n</code></pre>\n\n<p>Change the headline to bookmarks.currentCategory</p>\n\n<hr />\n\n<h6 id=\"testthenewcode\">Test the new code</h6>\n\n<p>After refreshing you'll notice the headline is still working, but the implicit inheritance chain is broken.</p>\n\n<p><img src=\"/content/images/2015/03/BookmarkController_as_bookmarks.png\" alt=\"BookmarkController as bookmarks\" /></p>\n\n<p>This means we are no longer reaching out of our controller and to a parent controller to pull down the bookmarks collection.</p>\n\n<hr />\n\n<h6 id=\"whatsnext\">What's next</h6>\n\n<p>We are going to actually explicitly provide the bookmarks collection via the bookmarks model.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/angularjs-architecture-navigating-between-states-with-ui-router\" style=\"width: 50%;\">Navigating States</a><a class=\"next-article\" href=\"/angularjs-architecture-refactor-to-a-data-model\" style=\"float: right;width: 50%;text-align: right;\">Data Models</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1427740612756,"created_by":1,"updated_at":1427743790281,"updated_by":1,"published_at":1427740664014,"published_by":1},{"id":48,"uuid":"3092b04c-024d-4c13-8908-8d5347bda9c4","title":"AngularJS Architecture: Refactor to a data model","slug":"angularjs-architecture-refactor-to-a-data-model","markdown":"> Let's continue to refactor Eggly by introducing a valuable concept known as model promotion.\n\n> We will start to extract the categories and bookmarks collections from the MainController and promote them to their respective models.\n\n> We will then learn how to consume those models at the controller level to populate the view.\n\n![Part 1: Getting Started](/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png)\n\n---\n\n###### Previously ######\n\nIn the previous lesson, we introduced the **'controller as' syntax** which gave us clarity over the implied **prototypical inheritance** that allowed the bookmarks controller to implicitly pull properties and methods from the main controller even though there was no obvious connection between the two.\n\n---\n\n###### Promoting collections to models ######\n\nIn this lesson, we are going to introduce an important technique of **promoting collections to models by extracting out the collections into a service** so they are available to the rest of the application.\n\n**By extracting the collections into a service**, it allows us to leverage those collections in multiple places as you will see when we start working with **categories** further along in the series.\n\n---\n\n###### Promote the bookmarks collection ######\n\nThe first thing we would do is promote the **bookmarks** collection from the **MainController** into the **bookmarks-model**.\n\nLet's hop into the **MainController**...\n\n<span class=\"filename\">eggly.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"23-31\"><code class=\"language-javascript\">angular.module('Eggly', [\n  'ui.router',\n  'categories',\n  'categories.bookmarks'\n])\n.config(function($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('eggly', {\n      url: '',\n      abstract: true\n    });\n\n  $urlRouterProvider.otherwise('/');\n})\n.controller('MainController', function($scope, $state){\n  $scope.categories = [\n    {\"id\": 0, \"name\": \"Development\"},\n    {\"id\": 1, \"name\": \"Design\"},\n    {\"id\": 2, \"name\": \"Excercise\"},\n    {\"id\": 3, \"name\": \"Soccer\"}\n  ];\n\n  $scope.bookmarks = [\n    {\"id\": 0, \"title\": \"Soccer Game History Page\", \"url\": \"http://angular.js\", \"category\": \"Soccer\"},\n    {\"id\": 1, \"title\": \"Development History Page\", \"url\": \"http://angular.js\", \"category\": \"Development\"},\n    {\"id\": 2, \"title\": \"Design History Page\", \"url\": \"http://angular.js\", \"category\": \"Design\"},\n    {\"id\": 3, \"title\": \"Design History Page\", \"url\": \"http://materialup.com\", \"category\": \"Design\"},\n    {\"id\": 4, \"title\": \"Gym Listings\", \"url\": \"http://angular.js\", \"category\": \"Excercise\"},\n    {\"id\": 5, \"title\": \"YMCA\", \"url\": \"http://angular.js\", \"category\": \"Excercise\"},\n    {\"id\": 6, \"title\": \"FIFA\", \"url\": \"http://angular.js\", \"category\": \"Soccer\"}\n  ];</code></pre>\n\n**[23-31]** You can see we have this **bookmarks** collection here. I am just going to **cut** this out.\n\n---\n\n###### Setup the bookmarks model ######\n\nLet's hop into the **bookmarks** model.\n\n<span class=\"filename\">bookmarks-model.js</span>\n<pre class=\"line-numbers\" data-line=\"4-20\"><code class=\"language-javascript\">angular.module('eggly.models.bookmarks', [\n\n])\n.service('BookmarksModel', function () {\n  var model = this,\n      bookmarks = [\n        {\"id\": 0, \"title\": \"Soccer Game History Page\", \"url\": \"http://angular.js\", \"category\": \"Soccer\"},\n        {\"id\": 1, \"title\": \"Development History Page\", \"url\": \"http://angular.js\", \"category\": \"Development\"},\n        {\"id\": 2, \"title\": \"Design History Page\", \"url\": \"http://angular.js\", \"category\": \"Design\"},\n        {\"id\": 3, \"title\": \"Design History Page\", \"url\": \"http://materialup.com\", \"category\": \"Design\"},\n        {\"id\": 4, \"title\": \"Gym Listings\", \"url\": \"http://angular.js\", \"category\": \"Excercise\"},\n        {\"id\": 5, \"title\": \"YMCA\", \"url\": \"http://angular.js\", \"category\": \"Excercise\"},\n        {\"id\": 6, \"title\": \"FIFA\", \"url\": \"http://angular.js\", \"category\": \"Soccer\"}\n      ];\n  model.getBookmarks = function () {\n    console.log('getting bookmarks');\n\n    return bookmarks;\n  };\n})\n;</code></pre>\n\n**[4]** We are going to define a **service** and call this **BookmarksModel**.\n\n**[5]** Now, let's create a local variable called **model**, assign it the value of **this**.\n\n**[6]** We're no longer attaching the scope. We can just delete that.\n\n**[15-19]** What we will do now is we are going to expose the **bookmarks** collection via a method called **getBookmarks**. All this is going to do is just return bookmarks.\n\n---\n\n###### Setup bookmarks controller ######\n\nI'll hop into the **BookmarksListController**.\n\n<span class=\"filename\">bookmark.js</span>\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('categories.bookmarks', [\n  'categories.bookmarks.create',\n  'categories.bookmarks.edit',\n  'eggly.models.bookmarks',\n  'eggly.models.bookmarks'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories.bookmarks', {\n      url: 'categories/:category',\n      views: {\n        'bookmarks@': {\n          templateUrl: 'app/categories/bookmarks/bookmarks.tmpl.html',\n          controller: 'BookmarksListController as bookmarksListController'\n        }\n      }\n    })\n})\n.controller('BookmarksListController', function ($stateParams, BookmarksModel) {\n  var bookmarksListController = this;\n  bookmarksListController.currentCategoryName = $stateParams.category;\n  bookmarksListController.bookmarks = BookmarksModel.getBookmarks();\n})\n;</code></pre>\n\n**[19]** The first thing we need to do is to actually inject the **BookmarksModel** like so instead of scope.\n\n**[23]** We'll say **bookmarksListCtrl.bookmarks = BookmarksModel.getBookmarks()**.\n\n---\n\n###### Setup bookmarks view template ######\n\nWhat we can do is hop into the **bookmarks** view template.\n\nYou can see that we were doing **bookmark in bookmarks**, but we need to be explicit because we're using the **'controller as' syntax**.\n\nWe need to do **bookmark in bookmarksListController.bookmarks** inside the **ng-repeat**. \n\nAs well as the headline for the **bookmarksListController.currentCategoryName**.\n\n<span class=\"filename\">bookmarks.tmpl.html</span>\n```php\n<h2>{{bookmarksListController.currentCategoryName}}</h2>\n<ul class=\"bookmarks-list\">\n  <li ng-class=\"{active: isSelectedBookmark(bookmark.id)}\" ng-repeat=\"bookmark in bookmarksListController.bookmarks | filter: {category: currentCategory.name}\">\n    <a href=\"#\" ng-click=\"setEditedBookmark(bookmark); startEditing();\"><i class=\"fa fa-pencil\"></i></a>\n    <a href=\"{{bookmark.url}}\" target=\"_blank\">{{bookmark.title}}</a>\n    <a href=\"#\" ng-click=\"deleteBookmark(bookmark)\"><i class=\"fa fa-times\"></i></a>\n  </li>\n</ul>\n```\n\n---\n\n###### Test the new code ######\nYou can see that the bookmarks are still loading but we're pulling from the **bookmarks** model.\n\n![Pulling from bookmarks model](/content/images/2015/03/AngularJS_Architecture__Refactor_to_a_data_model_-_AngularJS_Video_Tutorial__pro__eggheadio.png)\n\n---\n\n###### Promote the categories collection ######\n\nLet's go ahead and do the same thing for **categories**.\n\nWe will hop back into the main controller. We're just going to chop out the categories.\n\n<span class=\"filename\">categories.tmpl.html</span>\n<pre class=\"line-numbers\" data-line=\"16-21\"><code class=\"language-javascript\">angular.module('Eggly', [\n  'ui.router',\n  'categories',\n  'categories.bookmarks'\n])\n.config(function($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('eggly', {\n      url: '',\n      abstract: true\n    });\n\n  $urlRouterProvider.otherwise('/');\n})\n.controller('MainController', function($scope, $state){\n  $scope.categories = [\n    {\"id\": 0, \"name\": \"Development\"},\n    {\"id\": 1, \"name\": \"Design\"},\n    {\"id\": 2, \"name\": \"Excercise\"},\n    {\"id\": 3, \"name\": \"Soccer\"}\n  ];</code></pre>\n\n---\n\n###### Setup categories service ######\n\nLet's go to the **categories** model.\n\n<span class=\"filename\">categories-model.js</span>\n<pre class=\"line-numbers\" data-line=\"4,5,13-17\"><code class=\"language-javascript\">angular.module('eggly.models.categories', [\n\n])\n.service('CategoriesModel', function () {\n  var model = this,\n      categories = [\n        {\"id\": 0, \"name\": \"Development\"},\n        {\"id\": 1, \"name\": \"Design\"},\n        {\"id\": 2, \"name\": \"Excercise\"},\n        {\"id\": 3, \"name\": \"Soccer\"}\n      ];\n\n  model.getCategories = function () {\n    console.log(\"getting categories\");\n\n    return categories;\n  };\n})\n;</code></pre>\n\n**[4]** We will create an actual **categories** model **service**.\n\n**[5]** Also we'll set a variable **model** to **this**.\n\n**[13-17]** We'll create a function **model.getCategories**, to return **categories**.\n\n---\n\n###### Setup categories controller ######\n\nNow, let's hop into the **CategoriesController**.\n\n<span class=\"filename\">categories.js</span>\n<pre class=\"line-numbers\" data-line=\"4,10,16,17\"><code class=\"language-javascript\">angular.module('categories', [\n  'eggly.models.categories'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories', {\n      url: '/',\n      views: {\n        'categories@': {\n          controller: 'CategoriesListController as categoriesListController',\n          templateUrl: 'app/categories/categories.tmpl.html'\n        }\n      }\n    });\n})\n.controller('CategoriesListController', function CategoriesListController(CategoriesModel) {\n  var categoriesListController = this;\n  categoriesListController.categories = CategoriesModel.getCategories();\n})\n;</code></pre>\n\n**[4]** Remove CategoriesController as a dependency.\n\n**[10]** While we're here, let's go ahead and take care of the **'controller as' syntax**.\n\n**[16]** We no longer need scope, instead I'll just paste in the **CategoriesModel**.\n\n**[17]** From here, we'll do our **categoriesCtrl = this** and **categoriesListController.categories = CategoriesModel.getCategories();**.\n\n---\n\n###### Setup categories view template ######\n\nLet's go ahead and hook this up in the **categories** template.\n\nWe'll go here and set the ng-repeat to **category in categoriesListController.categories**.\n\nSince we're here, let's just go ahead and delete this **ng-click**. We no longer need this.\n\n<span class=\"filename\">categories.tmpl.html</span>\n```php\n<h1 ng-click=\"setCurrentCategory(null)\">Eggly</h1>\n<ul class=\"category-list\">\n  <li ng-repeat=\"category in categoriesListController.categories\" ng-class=\"{'active': isCurrentCategory(category)}\">\n    <a ui-sref=\"eggly.categories.bookmarks({category:category.name})\">{{category.name}}</a>\n  </li>\n</ul>\n```\n---\n\n###### Test the new code ######\nLet's refresh the page. Categories and bookmarks are now pulling from their respective models.\n\n![Pulling from respective models](/content/images/2015/03/Pulling_from_respective_models.png)\n\nEverything is working.\n\n---\n\n###### Review ######\n\nJust for review, we extracted or **promoted** the **bookmarks** and **categories** collections into their respective **models** and made it **available via a property**, in this case **getBookmarks** or **getCategories** and it returned that.\n\nThen, in the controllers, we injected the model and requested the model to return us the appropriate data structure which we assigned to a variable and then, bound to that in our template.\n\n---\n\n###### What's next ######\n\nStay tuned for the next lesson where I'm going to actually show you how to pull that data structure from a remote file using the **$http** service.\n\n---\n\n<a class=\"prev-article\" href=\"/angularjs-architecture-prefer-the-controller-as-syntax\" style=\"width: 50%;\">'controller as' syntax</a><a class=\"next-article\" href=\"/angularjs-architecture-using-http-to-load-json-data\" style=\"float: right;width: 50%;text-align: right;\">HTTP to load JSON data</a>","html":"<blockquote>\n  <p>Let's continue to refactor Eggly by introducing a valuable concept known as model promotion.</p>\n  \n  <p>We will start to extract the categories and bookmarks collections from the MainController and promote them to their respective models.</p>\n  \n  <p>We will then learn how to consume those models at the controller level to populate the view.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png\" alt=\"Part 1: Getting Started\" /></p>\n\n<hr />\n\n<h6 id=\"previously\">Previously</h6>\n\n<p>In the previous lesson, we introduced the <strong>'controller as' syntax</strong> which gave us clarity over the implied <strong>prototypical inheritance</strong> that allowed the bookmarks controller to implicitly pull properties and methods from the main controller even though there was no obvious connection between the two.</p>\n\n<hr />\n\n<h6 id=\"promotingcollectionstomodels\">Promoting collections to models</h6>\n\n<p>In this lesson, we are going to introduce an important technique of <strong>promoting collections to models by extracting out the collections into a service</strong> so they are available to the rest of the application.</p>\n\n<p><strong>By extracting the collections into a service</strong>, it allows us to leverage those collections in multiple places as you will see when we start working with <strong>categories</strong> further along in the series.</p>\n\n<hr />\n\n<h6 id=\"promotethebookmarkscollection\">Promote the bookmarks collection</h6>\n\n<p>The first thing we would do is promote the <strong>bookmarks</strong> collection from the <strong>MainController</strong> into the <strong>bookmarks-model</strong>.</p>\n\n<p>Let's hop into the <strong>MainController</strong>...</p>\n\n<p><span class=\"filename\">eggly.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"23-31\"><code class=\"language-javascript\">angular.module('Eggly', [  \n  'ui.router',\n  'categories',\n  'categories.bookmarks'\n])\n.config(function($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('eggly', {\n      url: '',\n      abstract: true\n    });\n\n  $urlRouterProvider.otherwise('/');\n})\n.controller('MainController', function($scope, $state){\n  $scope.categories = [\n    {\"id\": 0, \"name\": \"Development\"},\n    {\"id\": 1, \"name\": \"Design\"},\n    {\"id\": 2, \"name\": \"Excercise\"},\n    {\"id\": 3, \"name\": \"Soccer\"}\n  ];\n\n  $scope.bookmarks = [\n    {\"id\": 0, \"title\": \"Soccer Game History Page\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Soccer\"},\n    {\"id\": 1, \"title\": \"Development History Page\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Development\"},\n    {\"id\": 2, \"title\": \"Design History Page\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Design\"},\n    {\"id\": 3, \"title\": \"Design History Page\", \"url\": \"<a href=\"http://materialup.com\">http://materialup.com</a>\", \"category\": \"Design\"},\n    {\"id\": 4, \"title\": \"Gym Listings\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Excercise\"},\n    {\"id\": 5, \"title\": \"YMCA\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Excercise\"},\n    {\"id\": 6, \"title\": \"FIFA\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Soccer\"}\n  ];</code></pre>\n\n<p><strong>[23-31]</strong> You can see we have this <strong>bookmarks</strong> collection here. I am just going to <strong>cut</strong> this out.</p>\n\n<hr />\n\n<h6 id=\"setupthebookmarksmodel\">Setup the bookmarks model</h6>\n\n<p>Let's hop into the <strong>bookmarks</strong> model.</p>\n\n<p><span class=\"filename\">bookmarks-model.js</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"4-20\"><code class=\"language-javascript\">angular.module('eggly.models.bookmarks', [\n\n])\n.service('BookmarksModel', function () {\n  var model = this,\n      bookmarks = [\n        {\"id\": 0, \"title\": \"Soccer Game History Page\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Soccer\"},\n        {\"id\": 1, \"title\": \"Development History Page\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Development\"},\n        {\"id\": 2, \"title\": \"Design History Page\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Design\"},\n        {\"id\": 3, \"title\": \"Design History Page\", \"url\": \"<a href=\"http://materialup.com\">http://materialup.com</a>\", \"category\": \"Design\"},\n        {\"id\": 4, \"title\": \"Gym Listings\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Excercise\"},\n        {\"id\": 5, \"title\": \"YMCA\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Excercise\"},\n        {\"id\": 6, \"title\": \"FIFA\", \"url\": \"<a href=\"http://angular.js\">http://angular.js</a>\", \"category\": \"Soccer\"}\n      ];\n  model.getBookmarks = function () {\n    console.log('getting bookmarks');\n\n    return bookmarks;\n  };\n})\n;</code></pre>\n\n<p><strong>[4]</strong> We are going to define a <strong>service</strong> and call this <strong>BookmarksModel</strong>.</p>\n\n<p><strong>[5]</strong> Now, let's create a local variable called <strong>model</strong>, assign it the value of <strong>this</strong>.</p>\n\n<p><strong>[6]</strong> We're no longer attaching the scope. We can just delete that.</p>\n\n<p><strong>[15-19]</strong> What we will do now is we are going to expose the <strong>bookmarks</strong> collection via a method called <strong>getBookmarks</strong>. All this is going to do is just return bookmarks.</p>\n\n<hr />\n\n<h6 id=\"setupbookmarkscontroller\">Setup bookmarks controller</h6>\n\n<p>I'll hop into the <strong>BookmarksListController</strong>.</p>\n\n<p><span class=\"filename\">bookmark.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\"><code class=\"language-javascript\">angular.module('categories.bookmarks', [  \n  'categories.bookmarks.create',\n  'categories.bookmarks.edit',\n  'eggly.models.bookmarks',\n  'eggly.models.bookmarks'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories.bookmarks', {\n      url: 'categories/:category',\n      views: {\n        'bookmarks@': {\n          templateUrl: 'app/categories/bookmarks/bookmarks.tmpl.html',\n          controller: 'BookmarksListController as bookmarksListController'\n        }\n      }\n    })\n})\n.controller('BookmarksListController', function ($stateParams, BookmarksModel) {\n  var bookmarksListController = this;\n  bookmarksListController.currentCategoryName = $stateParams.category;\n  bookmarksListController.bookmarks = BookmarksModel.getBookmarks();\n})\n;</code></pre>\n\n<p><strong>[19]</strong> The first thing we need to do is to actually inject the <strong>BookmarksModel</strong> like so instead of scope.</p>\n\n<p><strong>[23]</strong> We'll say <strong>bookmarksListCtrl.bookmarks = BookmarksModel.getBookmarks()</strong>.</p>\n\n<hr />\n\n<h6 id=\"setupbookmarksviewtemplate\">Setup bookmarks view template</h6>\n\n<p>What we can do is hop into the <strong>bookmarks</strong> view template.</p>\n\n<p>You can see that we were doing <strong>bookmark in bookmarks</strong>, but we need to be explicit because we're using the <strong>'controller as' syntax</strong>.</p>\n\n<p>We need to do <strong>bookmark in bookmarksListController.bookmarks</strong> inside the <strong>ng-repeat</strong>. </p>\n\n<p>As well as the headline for the <strong>bookmarksListController.currentCategoryName</strong>.</p>\n\n<p><span class=\"filename\">bookmarks.tmpl.html</span>  </p>\n\n<pre><code class=\"language-php\">&lt;h2&gt;{{bookmarksListController.currentCategoryName}}&lt;/h2&gt;  \n&lt;ul class=\"bookmarks-list\"&gt;  \n  &lt;li ng-class=\"{active: isSelectedBookmark(bookmark.id)}\" ng-repeat=\"bookmark in bookmarksListController.bookmarks | filter: {category: currentCategory.name}\"&gt;\n    &lt;a href=\"#\" ng-click=\"setEditedBookmark(bookmark); startEditing();\"&gt;&lt;i class=\"fa fa-pencil\"&gt;&lt;/i&gt;&lt;/a&gt;\n    &lt;a href=\"{{bookmark.url}}\" target=\"_blank\"&gt;{{bookmark.title}}&lt;/a&gt;\n    &lt;a href=\"#\" ng-click=\"deleteBookmark(bookmark)\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;  \n</code></pre>\n\n<hr />\n\n<h6 id=\"testthenewcode\">Test the new code</h6>\n\n<p>You can see that the bookmarks are still loading but we're pulling from the <strong>bookmarks</strong> model.</p>\n\n<p><img src=\"/content/images/2015/03/AngularJS_Architecture__Refactor_to_a_data_model_-_AngularJS_Video_Tutorial__pro__eggheadio.png\" alt=\"Pulling from bookmarks model\" /></p>\n\n<hr />\n\n<h6 id=\"promotethecategoriescollection\">Promote the categories collection</h6>\n\n<p>Let's go ahead and do the same thing for <strong>categories</strong>.</p>\n\n<p>We will hop back into the main controller. We're just going to chop out the categories.</p>\n\n<p><span class=\"filename\">categories.tmpl.html</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"16-21\"><code class=\"language-javascript\">angular.module('Eggly', [  \n  'ui.router',\n  'categories',\n  'categories.bookmarks'\n])\n.config(function($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('eggly', {\n      url: '',\n      abstract: true\n    });\n\n  $urlRouterProvider.otherwise('/');\n})\n.controller('MainController', function($scope, $state){\n  $scope.categories = [\n    {\"id\": 0, \"name\": \"Development\"},\n    {\"id\": 1, \"name\": \"Design\"},\n    {\"id\": 2, \"name\": \"Excercise\"},\n    {\"id\": 3, \"name\": \"Soccer\"}\n  ];</code></pre>\n\n<hr />\n\n<h6 id=\"setupcategoriesservice\">Setup categories service</h6>\n\n<p>Let's go to the <strong>categories</strong> model.</p>\n\n<p><span class=\"filename\">categories-model.js</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"4,5,13-17\"><code class=\"language-javascript\">angular.module('eggly.models.categories', [\n\n])\n.service('CategoriesModel', function () {\n  var model = this,\n      categories = [\n        {\"id\": 0, \"name\": \"Development\"},\n        {\"id\": 1, \"name\": \"Design\"},\n        {\"id\": 2, \"name\": \"Excercise\"},\n        {\"id\": 3, \"name\": \"Soccer\"}\n      ];\n\n  model.getCategories = function () {\n    console.log(\"getting categories\");\n\n    return categories;\n  };\n})\n;</code></pre>\n\n<p><strong>[4]</strong> We will create an actual <strong>categories</strong> model <strong>service</strong>.</p>\n\n<p><strong>[5]</strong> Also we'll set a variable <strong>model</strong> to <strong>this</strong>.</p>\n\n<p><strong>[13-17]</strong> We'll create a function <strong>model.getCategories</strong>, to return <strong>categories</strong>.</p>\n\n<hr />\n\n<h6 id=\"setupcategoriescontroller\">Setup categories controller</h6>\n\n<p>Now, let's hop into the <strong>CategoriesController</strong>.</p>\n\n<p><span class=\"filename\">categories.js</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"4,10,16,17\"><code class=\"language-javascript\">angular.module('categories', [  \n  'eggly.models.categories'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories', {\n      url: '/',\n      views: {\n        'categories@': {\n          controller: 'CategoriesListController as categoriesListController',\n          templateUrl: 'app/categories/categories.tmpl.html'\n        }\n      }\n    });\n})\n.controller('CategoriesListController', function CategoriesListController(CategoriesModel) {\n  var categoriesListController = this;\n  categoriesListController.categories = CategoriesModel.getCategories();\n})\n;</code></pre>\n\n<p><strong>[4]</strong> Remove CategoriesController as a dependency.</p>\n\n<p><strong>[10]</strong> While we're here, let's go ahead and take care of the <strong>'controller as' syntax</strong>.</p>\n\n<p><strong>[16]</strong> We no longer need scope, instead I'll just paste in the <strong>CategoriesModel</strong>.</p>\n\n<p><strong>[17]</strong> From here, we'll do our <strong>categoriesCtrl = this</strong> and <strong>categoriesListController.categories = CategoriesModel.getCategories();</strong>.</p>\n\n<hr />\n\n<h6 id=\"setupcategoriesviewtemplate\">Setup categories view template</h6>\n\n<p>Let's go ahead and hook this up in the <strong>categories</strong> template.</p>\n\n<p>We'll go here and set the ng-repeat to <strong>category in categoriesListController.categories</strong>.</p>\n\n<p>Since we're here, let's just go ahead and delete this <strong>ng-click</strong>. We no longer need this.</p>\n\n<p><span class=\"filename\">categories.tmpl.html</span>  </p>\n\n<pre><code class=\"language-php\">&lt;h1 ng-click=\"setCurrentCategory(null)\"&gt;Eggly&lt;/h1&gt;  \n&lt;ul class=\"category-list\"&gt;  \n  &lt;li ng-repeat=\"category in categoriesListController.categories\" ng-class=\"{'active': isCurrentCategory(category)}\"&gt;\n    &lt;a ui-sref=\"eggly.categories.bookmarks({category:category.name})\"&gt;{{category.name}}&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;  \n</code></pre>\n\n<hr />\n\n<h6 id=\"testthenewcode\">Test the new code</h6>\n\n<p>Let's refresh the page. Categories and bookmarks are now pulling from their respective models.</p>\n\n<p><img src=\"/content/images/2015/03/Pulling_from_respective_models.png\" alt=\"Pulling from respective models\" /></p>\n\n<p>Everything is working.</p>\n\n<hr />\n\n<h6 id=\"review\">Review</h6>\n\n<p>Just for review, we extracted or <strong>promoted</strong> the <strong>bookmarks</strong> and <strong>categories</strong> collections into their respective <strong>models</strong> and made it <strong>available via a property</strong>, in this case <strong>getBookmarks</strong> or <strong>getCategories</strong> and it returned that.</p>\n\n<p>Then, in the controllers, we injected the model and requested the model to return us the appropriate data structure which we assigned to a variable and then, bound to that in our template.</p>\n\n<hr />\n\n<h6 id=\"whatsnext\">What's next</h6>\n\n<p>Stay tuned for the next lesson where I'm going to actually show you how to pull that data structure from a remote file using the <strong>$http</strong> service.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/angularjs-architecture-prefer-the-controller-as-syntax\" style=\"width: 50%;\">'controller as' syntax</a><a class=\"next-article\" href=\"/angularjs-architecture-using-http-to-load-json-data\" style=\"float: right;width: 50%;text-align: right;\">HTTP to load JSON data</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1427743699878,"created_by":1,"updated_at":1427837452869,"updated_by":1,"published_at":1427743749739,"published_by":1},{"id":49,"uuid":"584bc6c7-6cb6-4ace-a7a0-b5c972cd4220","title":"AngularJS Architecture: Using $http to load JSON data","slug":"angularjs-architecture-using-http-to-load-json-data","markdown":"> Now let's learn how use the $http service to make requests to remote servers.\n\n> In our case, we will load the data from JSON files and then make them available in our controllers.\n\n> We will see a few techniques that I frequently use to make working with $http data a lot more convenient.\n\n![Part 1: Getting Started](/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png)\n\nIn this lesson, we are going to learn how to use the **$http** service to fetch remote data.\n\nThe **$http** service is a **core AngularJS service** that uses the browser's **XML, $http request object** or **JSONP** to communicate with remote servers.\n\nIn our case, we are going to use it to load a **JSON** file that has the **categories** collection that we've been working with, as well as load a separate **JSON** file for the **bookmarks** collection.\n\nWe are also going to see a few tricks that I've picked up that makes working with the **$http** service and a **model** a bit more convenient.\n\n----\n\n###### More convenient models ######\n\nIf we hop into our **categories** model.\n\n<span class=\"filename\">categories-models.js</span>\n<pre class=\"line-numbers\" data-line=\"4,6-8,9,12\"><code class=\"language-javascript\">angular.module('eggly.models.categories', [\n\n])\n.service('CategoriesModel', function ($http) {\n  var model = this,\n      URLS = {\n        FETCH: 'data/categories.json'\n      },\n      categories;\n\n  model.getCategories = function () {\n    return $http.get(URLS.FETCH);\n  };\n})\n;</code></pre>\n\n**[4]** Inject the **$http** service.\n\n**[6-8]** One thing that I like to do when I am working with remote services is to create an endpoint map for the possible endpoints that I would need to call. In this case, it is just a single endpoint. I'm going to create a **URLS** object and create a property under called **fetch** that we're going to point towards **data/categories.json**.\n\n**[9]** We can also get rid of the local **categories** collection.\n\n**[12]** Then, we'll replace this return object with an actual call using the **$http** service. The nice thing about the **$http** service is that it has convenience methods baked into it that match **RESTful** verbs. In our case, we want to call **GET**. This takes a **single argument which is a configuration object** that constructs the **$http** call itself. We're just going to pass in the **URLS.FETCH** like so.\n\n---\n\n###### Refactor categories controller ######\n\nLet's hop into the controller.\n\n<span class=\"filename\"></span>\n<pre class=\"line-numbers\" data-line=\"19,20,21,22\"><code class=\"language-javascript\">angular.module('categories', [\n  'eggly.models.categories'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories', {\n      url: '/',\n      views: {\n        'categories@': {\n          controller: 'CategoriesListController as categoriesListController',\n          templateUrl: 'app/categories/categories.tmpl.html'\n        }\n      }\n    });\n})\n.controller('CategoriesListController', function CategoriesListController(CategoriesModel) {\n  var categoriesListController = this;\n\n  CategoriesModel.getCategories() // returns a promise\n    .then(function (result) {\n      categoriesListController.categories = result.data;\n    });\n})\n;</code></pre>\n\n**[19]** We're going to call **getCategories()** immediately.\n\n**[20]** Because this returns a promise, we are going to use **then** to handle that. After we've made the call and the **result** has come back, then we can do something. This would take one argument, a function that represents the success handler of this call and that takes one argument which is the **result** of that call.\n\n**[21]** From here, we are going to say **categoriesListCtrl.categories = result.data**. There's going to be a problem with this. I will show you in just a moment.\n\n**[22]** Let's go ahead and console out this **result** and see what it looks like in the browser.\n\n---\n\n###### Extracting and Caching ######\n\nThe problem with this is that I prefer for my controllers not to know about the implementation details of how my data is being returned from the server.\n\nI like to use a trick to **extract** this data before I actually send it to the controller.\n\n<span class=\"filename\">categories-model.js</span>\n<pre class=\"line-numbers\" data-line=\"11-13,15-18\"><code class=\"language-javascript\">angular.module('eggly.models.categories', [\n\n])\n.service('CategoriesModel', function ($http) {\n  var model = this,\n      URLS = {\n        FETCH: 'data/categories.json'\n      },\n      categories;\n\n  function extract(result){\n    return result.data;\n  }\n\n  function cacheCategories(result){\n    categories = extract(result);\n    return categories;\n  }\n\n  model.getCategories = function () {\n    return $http.get(URLS.FETCH).then(cacheCategories);\n  };\n})\n;</code></pre>\n\n**[11]** What we will do here is create a method called **extract** that takes the **result** as an argument and it just returns **result.data**.\n\n**[15]** I'm going to create another method here called **cacheCategories**, because as it stands now, we're not actually storing the result of categories. It's actually stateless, but I want to actually store a reference to the server result so I can use it a bit later.\n\n**[16]** We will go **categories = extract(result)**\n\n**[17]** and then **return categories**.\n\n**[21]** From here, instead of returning just the call itself, we can **return a promise that has the result of cacheCategories**.\n\nAlso, be sure to remove the **.data** in the **categories** controller.\n\n<span class=\"filename\">categories.js</span>\n<pre class=\"line-numbers\" data-line=\"21\"><code class=\"language-javascript\">angular.module('categories', [\n  'eggly.models.categories'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories', {\n      url: '/',\n      views: {\n        'categories@': {\n          controller: 'CategoriesListController as categoriesListController',\n          templateUrl: 'app/categories/categories.tmpl.html'\n        }\n      }\n    });\n})\n.controller('CategoriesListController', function CategoriesListController(CategoriesModel) {\n  var categoriesListController = this;\n\n  CategoriesModel.getCategories() // returns a promise\n    .then(function (result) {\n      categoriesListController.categories = result;\n    });\n})\n;</code></pre>\n\n---\n\n###### Test the extracting and caching categories ######\n\nLet's refresh the page.\n\n![Test the extracting and caching categories](/content/images/2015/04/Test_the_extracting_and_caching_categories.png)\n\nYou can see that it's still working, but we are now **extracting** out that data and then **caching** a reference to the **categories** variable in the **CategoriesModel** service.\n\n---\n\n###### Refactor the bookmarks ######\n\nLet's go ahead and do this real quick for the bookmarks.\n\n<span class=\"filename\">bookmarks-model.js</span>\n<pre class=\"line-numbers\" data-line=\"4,6-8,11-13,15-18,20-22\"><code class=\"language-javascript\">angular.module('eggly.models.bookmarks', [\n\n])\n.service('BookmarksModel', function ($http) {\n  var model = this,\n      URLS = {\n        FETCH: 'data/bookmarks.json'\n      },\n      bookmarks;\n\n  function extract(result){\n    return result.data;\n  }\n\n  function cacheBookmarks(result){\n    bookmarks = extract(result);\n    return bookmarks;\n  }\n\n  model.getBookmarks = function () {\n    return $http.get(URLS.FETCH).then(cacheBookmarks);\n  };\n})\n;</code></pre>\n\n**[4]** Let's inject **$http**.\n\n**[6-8]** I'm going to delete the local collection here, create my endpoint map.\n\n**[11-13]** We'll create the **extract** method\n\n**[15-18]** the **cacheBookmarks** method\n\n**[20-22]** **$http.get** and **fetch**\n\n**[21]** **cacheBookmarks**\n\nWe'll go into our **bookmarksController**. We'll just shuffle this around a bit.\n\n<span class=\"filename\">bookmarks.js</span>\n<pre class=\"line-numbers\" data-line=\"20,22,24,26\"><code class=\"language-javascript\">angular.module('categories.bookmarks', [\n  'categories.bookmarks.create',\n  'categories.bookmarks.edit',\n  'eggly.models.categories',\n  'eggly.models.bookmarks'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories.bookmarks', {\n      url: 'categories/:category',\n      views: {\n        'bookmarks@': {\n          templateUrl: 'app/categories/bookmarks/bookmarks.tmpl.html',\n          controller: 'BookmarksListController as bookmarksListController'\n        }\n      }\n    })\n})\n.controller('BookmarksListController', function ($stateParams, BookmarksModel) {\n  var bookmarksListController = this;\n\n  bookmarksListController.currentCategoryName = $stateParams.category;\n\n  BookmarksModel.getBookmarks() // returns a promise\n    .then(function (result){\n      bookmarksListController.bookmarks = result;\n    });\n})\n;</code></pre>\n\n----\n\n###### Test the code ######\n\nLet's refresh the page.\n\n![test the code](/content/images/2015/04/test_the_code.png)\n\nYou can see now, we have categories and bookmarks coming in to our page as it was before but now, we're pulling it from the JSON files.\n\n---\n\n###### What's next ######\n\nIn the next lesson, we will extend this idea by **creating promises and manually resolving them**, giving us even more control over how we handle the data when it comes back from the server.\n\n---\n\n<a class=\"prev-article\" href=\"/angularjs-architecture-refactor-to-a-data-model\" style=\"width: 50%;\">Data Models</a><a class=\"next-article\" href=\"/angularjs-architecture-control-your-promises-with-q\" style=\"float: right;width: 50%;text-align: right;\">Promises with $q</a>","html":"<blockquote>\n  <p>Now let's learn how use the $http service to make requests to remote servers.</p>\n  \n  <p>In our case, we will load the data from JSON files and then make them available in our controllers.</p>\n  \n  <p>We will see a few techniques that I frequently use to make working with $http data a lot more convenient.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/egghead-angular-build-an-app-tutorial-lesson.png\" alt=\"Part 1: Getting Started\" /></p>\n\n<p>In this lesson, we are going to learn how to use the <strong>$http</strong> service to fetch remote data.</p>\n\n<p>The <strong>$http</strong> service is a <strong>core AngularJS service</strong> that uses the browser's <strong>XML, $http request object</strong> or <strong>JSONP</strong> to communicate with remote servers.</p>\n\n<p>In our case, we are going to use it to load a <strong>JSON</strong> file that has the <strong>categories</strong> collection that we've been working with, as well as load a separate <strong>JSON</strong> file for the <strong>bookmarks</strong> collection.</p>\n\n<p>We are also going to see a few tricks that I've picked up that makes working with the <strong>$http</strong> service and a <strong>model</strong> a bit more convenient.</p>\n\n<hr />\n\n<h6 id=\"moreconvenientmodels\">More convenient models</h6>\n\n<p>If we hop into our <strong>categories</strong> model.</p>\n\n<p><span class=\"filename\">categories-models.js</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"4,6-8,9,12\"><code class=\"language-javascript\">angular.module('eggly.models.categories', [\n\n])\n.service('CategoriesModel', function ($http) {\n  var model = this,\n      URLS = {\n        FETCH: 'data/categories.json'\n      },\n      categories;\n\n  model.getCategories = function () {\n    return $http.get(URLS.FETCH);\n  };\n})\n;</code></pre>\n\n<p><strong>[4]</strong> Inject the <strong>$http</strong> service.</p>\n\n<p><strong>[6-8]</strong> One thing that I like to do when I am working with remote services is to create an endpoint map for the possible endpoints that I would need to call. In this case, it is just a single endpoint. I'm going to create a <strong>URLS</strong> object and create a property under called <strong>fetch</strong> that we're going to point towards <strong>data/categories.json</strong>.</p>\n\n<p><strong>[9]</strong> We can also get rid of the local <strong>categories</strong> collection.</p>\n\n<p><strong>[12]</strong> Then, we'll replace this return object with an actual call using the <strong>$http</strong> service. The nice thing about the <strong>$http</strong> service is that it has convenience methods baked into it that match <strong>RESTful</strong> verbs. In our case, we want to call <strong>GET</strong>. This takes a <strong>single argument which is a configuration object</strong> that constructs the <strong>$http</strong> call itself. We're just going to pass in the <strong>URLS.FETCH</strong> like so.</p>\n\n<hr />\n\n<h6 id=\"refactorcategoriescontroller\">Refactor categories controller</h6>\n\n<p>Let's hop into the controller.</p>\n\n<p><span class=\"filename\"></span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"19,20,21,22\"><code class=\"language-javascript\">angular.module('categories', [  \n  'eggly.models.categories'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories', {\n      url: '/',\n      views: {\n        'categories@': {\n          controller: 'CategoriesListController as categoriesListController',\n          templateUrl: 'app/categories/categories.tmpl.html'\n        }\n      }\n    });\n})\n.controller('CategoriesListController', function CategoriesListController(CategoriesModel) {\n  var categoriesListController = this;\n\n  CategoriesModel.getCategories() // returns a promise\n    .then(function (result) {\n      categoriesListController.categories = result.data;\n    });\n})\n;</code></pre>\n\n<p><strong>[19]</strong> We're going to call <strong>getCategories()</strong> immediately.</p>\n\n<p><strong>[20]</strong> Because this returns a promise, we are going to use <strong>then</strong> to handle that. After we've made the call and the <strong>result</strong> has come back, then we can do something. This would take one argument, a function that represents the success handler of this call and that takes one argument which is the <strong>result</strong> of that call.</p>\n\n<p><strong>[21]</strong> From here, we are going to say <strong>categoriesListCtrl.categories = result.data</strong>. There's going to be a problem with this. I will show you in just a moment.</p>\n\n<p><strong>[22]</strong> Let's go ahead and console out this <strong>result</strong> and see what it looks like in the browser.</p>\n\n<hr />\n\n<h6 id=\"extractingandcaching\">Extracting and Caching</h6>\n\n<p>The problem with this is that I prefer for my controllers not to know about the implementation details of how my data is being returned from the server.</p>\n\n<p>I like to use a trick to <strong>extract</strong> this data before I actually send it to the controller.</p>\n\n<p><span class=\"filename\">categories-model.js</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"11-13,15-18\"><code class=\"language-javascript\">angular.module('eggly.models.categories', [\n\n])\n.service('CategoriesModel', function ($http) {\n  var model = this,\n      URLS = {\n        FETCH: 'data/categories.json'\n      },\n      categories;\n\n  function extract(result){\n    return result.data;\n  }\n\n  function cacheCategories(result){\n    categories = extract(result);\n    return categories;\n  }\n\n  model.getCategories = function () {\n    return $http.get(URLS.FETCH).then(cacheCategories);\n  };\n})\n;</code></pre>\n\n<p><strong>[11]</strong> What we will do here is create a method called <strong>extract</strong> that takes the <strong>result</strong> as an argument and it just returns <strong>result.data</strong>.</p>\n\n<p><strong>[15]</strong> I'm going to create another method here called <strong>cacheCategories</strong>, because as it stands now, we're not actually storing the result of categories. It's actually stateless, but I want to actually store a reference to the server result so I can use it a bit later.</p>\n\n<p><strong>[16]</strong> We will go <strong>categories = extract(result)</strong></p>\n\n<p><strong>[17]</strong> and then <strong>return categories</strong>.</p>\n\n<p><strong>[21]</strong> From here, instead of returning just the call itself, we can <strong>return a promise that has the result of cacheCategories</strong>.</p>\n\n<p>Also, be sure to remove the <strong>.data</strong> in the <strong>categories</strong> controller.</p>\n\n<p><span class=\"filename\">categories.js</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"21\"><code class=\"language-javascript\">angular.module('categories', [  \n  'eggly.models.categories'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories', {\n      url: '/',\n      views: {\n        'categories@': {\n          controller: 'CategoriesListController as categoriesListController',\n          templateUrl: 'app/categories/categories.tmpl.html'\n        }\n      }\n    });\n})\n.controller('CategoriesListController', function CategoriesListController(CategoriesModel) {\n  var categoriesListController = this;\n\n  CategoriesModel.getCategories() // returns a promise\n    .then(function (result) {\n      categoriesListController.categories = result;\n    });\n})\n;</code></pre>\n\n<hr />\n\n<h6 id=\"testtheextractingandcachingcategories\">Test the extracting and caching categories</h6>\n\n<p>Let's refresh the page.</p>\n\n<p><img src=\"/content/images/2015/04/Test_the_extracting_and_caching_categories.png\" alt=\"Test the extracting and caching categories\" /></p>\n\n<p>You can see that it's still working, but we are now <strong>extracting</strong> out that data and then <strong>caching</strong> a reference to the <strong>categories</strong> variable in the <strong>CategoriesModel</strong> service.</p>\n\n<hr />\n\n<h6 id=\"refactorthebookmarks\">Refactor the bookmarks</h6>\n\n<p>Let's go ahead and do this real quick for the bookmarks.</p>\n\n<p><span class=\"filename\">bookmarks-model.js</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"4,6-8,11-13,15-18,20-22\"><code class=\"language-javascript\">angular.module('eggly.models.bookmarks', [\n\n])\n.service('BookmarksModel', function ($http) {\n  var model = this,\n      URLS = {\n        FETCH: 'data/bookmarks.json'\n      },\n      bookmarks;\n\n  function extract(result){\n    return result.data;\n  }\n\n  function cacheBookmarks(result){\n    bookmarks = extract(result);\n    return bookmarks;\n  }\n\n  model.getBookmarks = function () {\n    return $http.get(URLS.FETCH).then(cacheBookmarks);\n  };\n})\n;</code></pre>\n\n<p><strong>[4]</strong> Let's inject <strong>$http</strong>.</p>\n\n<p><strong>[6-8]</strong> I'm going to delete the local collection here, create my endpoint map.</p>\n\n<p><strong>[11-13]</strong> We'll create the <strong>extract</strong> method</p>\n\n<p><strong>[15-18]</strong> the <strong>cacheBookmarks</strong> method</p>\n\n<p><strong>[20-22]</strong> <strong>$http.get</strong> and <strong>fetch</strong></p>\n\n<p><strong>[21]</strong> <strong>cacheBookmarks</strong></p>\n\n<p>We'll go into our <strong>bookmarksController</strong>. We'll just shuffle this around a bit.</p>\n\n<p><span class=\"filename\">bookmarks.js</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"20,22,24,26\"><code class=\"language-javascript\">angular.module('categories.bookmarks', [  \n  'categories.bookmarks.create',\n  'categories.bookmarks.edit',\n  'eggly.models.categories',\n  'eggly.models.bookmarks'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories.bookmarks', {\n      url: 'categories/:category',\n      views: {\n        'bookmarks@': {\n          templateUrl: 'app/categories/bookmarks/bookmarks.tmpl.html',\n          controller: 'BookmarksListController as bookmarksListController'\n        }\n      }\n    })\n})\n.controller('BookmarksListController', function ($stateParams, BookmarksModel) {\n  var bookmarksListController = this;\n\n  bookmarksListController.currentCategoryName = $stateParams.category;\n\n  BookmarksModel.getBookmarks() // returns a promise\n    .then(function (result){\n      bookmarksListController.bookmarks = result;\n    });\n})\n;</code></pre>\n\n<hr />\n\n<h6 id=\"testthecode\">Test the code</h6>\n\n<p>Let's refresh the page.</p>\n\n<p><img src=\"/content/images/2015/04/test_the_code.png\" alt=\"test the code\" /></p>\n\n<p>You can see now, we have categories and bookmarks coming in to our page as it was before but now, we're pulling it from the JSON files.</p>\n\n<hr />\n\n<h6 id=\"whatsnext\">What's next</h6>\n\n<p>In the next lesson, we will extend this idea by <strong>creating promises and manually resolving them</strong>, giving us even more control over how we handle the data when it comes back from the server.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/angularjs-architecture-refactor-to-a-data-model\" style=\"width: 50%;\">Data Models</a><a class=\"next-article\" href=\"/angularjs-architecture-control-your-promises-with-q\" style=\"float: right;width: 50%;text-align: right;\">Promises with $q</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1427837275952,"created_by":1,"updated_at":1427899660825,"updated_by":1,"published_at":1427837303224,"published_by":1},{"id":50,"uuid":"23be89f6-3c81-4b60-b890-e2626a36324e","title":"AngularJS Architecture: Control your promises with $q","slug":"angularjs-architecture-control-your-promises-with-q","markdown":"> Learn how to manually control how asynchronous requests are handled with the use of promises.\n\n> Because $http is built to work with promises, we saw a foreshadow of them in the previous lesson.\n\n> We will take this a step further but seeing how to manually create a promise and then resolve or reject it as we see fit.\n\n![Part 2: Application Architecture](/content/images/2015/04/eggly-series-2-banner.png)\n\nIn the previous lesson, we learned how to make a remote server call using the **$http** service that is part of the **AngularJS core**. The **$http** service is built on top of **promises**.\n\n> It implicitly returns a promise when you make a call to the server using the $http service.\n\nThere are situations where you may want to actually do something before you actually pass that data back to the controller for consumption.\n\nFor instance, what if you wanted to actually **return a cached version of that data structure**, not actually incur the overhead of making an extra call?\n\nYou would need a way to manually resolve that **promise** instead of allowing the **$http** service to do that for you.\n\n> The goal is to show you how to use **promises in your model** and do it in such a way that your controllers are oblivious to whether or not it was coming from the **$http** service or you were manually resolving it.\n\nThis is where the **$q** service comes in. AngularJS uses the **$q** service to handle promises.\n\n----\n\n###### Inject $q service ######\n\n<span class=\"filename\">categories-model.js</span>\n<pre class=\"line-numbers\" data-line=\"4,21\"><code class=\"language-javascript\">angular.module('eggly.models.categories', [\n\n])\n.service('CategoriesModel', function ($http, $q) {\n  var model = this,\n      URLS = {\n        FETCH: 'data/categories.json'\n      },\n      categories;\n\n  function extract(result){\n    return result.data;\n  }\n\n  function cacheCategories(result){\n    categories = extract(result);\n    return categories;\n  }\n\n  model.getCategories = function () {\n    return (categories) ? $q.when(categories) : $http.get(URLS.FETCH).then(cacheCategories);\n  };\n})\n;</code></pre>\n\n**[4]** We are going to inject the **$q** service into the categories model.\n\n**[20]** From here, let's go to where we're calling getCategories. Let's check to see if we actually have categories. Does it exist? Have we already made this call?\n\n**[21]** If it does exist, let's go ahead and just return a **promise**. We can use a method on the **$q** service called **when**.\n\n> What this does is it takes an object and it **wraps a promise around it.**\n\n**[21]** Now, what we're doing is we're saying, if **categories** exist, go ahead and return a **promise** using this **when** method. In the promise, put the **categories**.\n\n**[21]** At this point, we are actually going to check to see if **categories** exist. If it does, then it will be as if we already made a call to the server and got **categories**.\n\n---\n\n###### Gentle intro to promises ######\n\nThis is a really gentle introduction into **promises** and probably the easiest scenario that you're going to see.\n\nBut let's take this a little deeper.\n\n<span class=\"filename\">categories-model.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"27,28,45,30-34,36-43\"><code class=\"language-javascript\">angular.module('eggly.models.categories', [\n\n])\n.service('CategoriesModel', function ($http, $q) {\n  var model = this,\n      URLS = {\n        FETCH: 'data/categories.json'\n      },\n      categories;\n\n  function extract(result){\n    return result.data;\n  }\n\n  function cacheCategories(result){\n    categories = extract(result);\n    return categories;\n  }\n\n  model.getCategories = function () {\n    return (categories) ? $q.when(categories) : $http.get(URLS.FETCH).then(cacheCategories);\n  };\n\n  /**\n   * Here is where we can manually resolve or reject a promise\n   */\n  model.getCategoryByName = function(categoryName) {\n    var deferred = $q.defer(); // create deferred object aka put on hold\n\n    function findCategory() {\n      return _.find(categories, function(c){\n        return c.name == categoryName;\n      })\n    }\n\n    if(categories){\n      deferred.resolve(findCategory());\n    } else {\n      model.getCategories\n        .then(function(result){\n          deferred.resolve(findCategory());\n        })\n    }\n\n    return deferred.promise; // return result of the promise on the deferred object\n  }\n})\n;</code></pre>\n\n**[27]** We are going to create a method called **getCategoryByName**.\n\n**[28]** We are going to create a deferred object by calling **$q.defer**. This returns a **deferred object**.\n\n**[45]** What I'm going to do here is create the bookends for this **promise**. We actually created a deferred object and then we **return the promise**.\n\n> It's important to understand these two parts, is that you create a deferred object by calling **$q.defer**.\n\n> Then, you return the **promise** object on that deferred object.\n\n**[30-34]** I'm going to create a convenience method here called **findCategory**. What this is going to do is just loop over the **categories** collection and compare the **name of the current category** to the **categoryName** parameter that we actually need to define up here. What this is going to do is loop over the categories and find the category with that name.\n\n**[36-43]** From here, we can manually resolve or reject the promise at our discretion. From here, we will say, does **categories** exist? If so, then we are going to resolve the **promise** with the results of **findCategory**.\n\n**[36-43]** The reason why we're checking if **categories** exist is because you could possibly want to find a **category** before you've actually had the opportunity to go and fetch the **categories** from the server.\n\n**[36-43]** If categories does not exist, then we need to call getCategories. From there, take the result and we will use the result to resolve the promise like so. We are simply just adding in an extra step.\n\n**[36-43]** If categories exist, we're just looping over the **categories** and finding the **category** for that name and resolving the **promise** with that value. If it does not exist, we are making a call to the server, getting the **categories**, and then resolving the **promise** that we created with the results of **findCategory**. We're just inserting that extra step.\n\n---\n\n###### Review ######\n\nThis is the technique for manually creating a promise. We return it to the consumer and then we can either resolve or reject it.\n\n---\n\n###### What's Next ######\n\nStay tuned for the next lesson where we will continue to refactor the functionality from the main controller back into the appropriate parts of the eggly application. I look forward to seeing you in the next lesson.\n\n---\n\n<a class=\"prev-article\" href=\"/angularjs-architecture-using-http-to-load-json-data\" style=\"width: 50%;\">$http to load JSON</a><a class=\"next-article\" href=\"/angularjs-architecture-edit-and-create-bookmark-states\" style=\"float: right;width: 50%;text-align: right;\">Edit and create states</a>","html":"<blockquote>\n  <p>Learn how to manually control how asynchronous requests are handled with the use of promises.</p>\n  \n  <p>Because $http is built to work with promises, we saw a foreshadow of them in the previous lesson.</p>\n  \n  <p>We will take this a step further but seeing how to manually create a promise and then resolve or reject it as we see fit.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/04/eggly-series-2-banner.png\" alt=\"Part 2: Application Architecture\" /></p>\n\n<p>In the previous lesson, we learned how to make a remote server call using the <strong>$http</strong> service that is part of the <strong>AngularJS core</strong>. The <strong>$http</strong> service is built on top of <strong>promises</strong>.</p>\n\n<blockquote>\n  <p>It implicitly returns a promise when you make a call to the server using the $http service.</p>\n</blockquote>\n\n<p>There are situations where you may want to actually do something before you actually pass that data back to the controller for consumption.</p>\n\n<p>For instance, what if you wanted to actually <strong>return a cached version of that data structure</strong>, not actually incur the overhead of making an extra call?</p>\n\n<p>You would need a way to manually resolve that <strong>promise</strong> instead of allowing the <strong>$http</strong> service to do that for you.</p>\n\n<blockquote>\n  <p>The goal is to show you how to use <strong>promises in your model</strong> and do it in such a way that your controllers are oblivious to whether or not it was coming from the <strong>$http</strong> service or you were manually resolving it.</p>\n</blockquote>\n\n<p>This is where the <strong>$q</strong> service comes in. AngularJS uses the <strong>$q</strong> service to handle promises.</p>\n\n<hr />\n\n<h6 id=\"injectdqservice\">Inject $q service</h6>\n\n<p><span class=\"filename\">categories-model.js</span>  </p>\n\n<pre class=\"line-numbers\" data-line=\"4,21\"><code class=\"language-javascript\">angular.module('eggly.models.categories', [\n\n])\n.service('CategoriesModel', function ($http, $q) {\n  var model = this,\n      URLS = {\n        FETCH: 'data/categories.json'\n      },\n      categories;\n\n  function extract(result){\n    return result.data;\n  }\n\n  function cacheCategories(result){\n    categories = extract(result);\n    return categories;\n  }\n\n  model.getCategories = function () {\n    return (categories) ? $q.when(categories) : $http.get(URLS.FETCH).then(cacheCategories);\n  };\n})\n;</code></pre>\n\n<p><strong>[4]</strong> We are going to inject the <strong>$q</strong> service into the categories model.</p>\n\n<p><strong>[20]</strong> From here, let's go to where we're calling getCategories. Let's check to see if we actually have categories. Does it exist? Have we already made this call?</p>\n\n<p><strong>[21]</strong> If it does exist, let's go ahead and just return a <strong>promise</strong>. We can use a method on the <strong>$q</strong> service called <strong>when</strong>.</p>\n\n<blockquote>\n  <p>What this does is it takes an object and it <strong>wraps a promise around it.</strong></p>\n</blockquote>\n\n<p><strong>[21]</strong> Now, what we're doing is we're saying, if <strong>categories</strong> exist, go ahead and return a <strong>promise</strong> using this <strong>when</strong> method. In the promise, put the <strong>categories</strong>.</p>\n\n<p><strong>[21]</strong> At this point, we are actually going to check to see if <strong>categories</strong> exist. If it does, then it will be as if we already made a call to the server and got <strong>categories</strong>.</p>\n\n<hr />\n\n<h6 id=\"gentleintrotopromises\">Gentle intro to promises</h6>\n\n<p>This is a really gentle introduction into <strong>promises</strong> and probably the easiest scenario that you're going to see.</p>\n\n<p>But let's take this a little deeper.</p>\n\n<p><span class=\"filename\">categories-model.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"27,28,45,30-34,36-43\"><code class=\"language-javascript\">angular.module('eggly.models.categories', [\n\n])\n.service('CategoriesModel', function ($http, $q) {\n  var model = this,\n      URLS = {\n        FETCH: 'data/categories.json'\n      },\n      categories;\n\n  function extract(result){\n    return result.data;\n  }\n\n  function cacheCategories(result){\n    categories = extract(result);\n    return categories;\n  }\n\n  model.getCategories = function () {\n    return (categories) ? $q.when(categories) : $http.get(URLS.FETCH).then(cacheCategories);\n  };\n\n  /**\n   * Here is where we can manually resolve or reject a promise\n   */\n  model.getCategoryByName = function(categoryName) {\n    var deferred = $q.defer(); // create deferred object aka put on hold\n\n    function findCategory() {\n      return _.find(categories, function(c){\n        return c.name == categoryName;\n      })\n    }\n\n    if(categories){\n      deferred.resolve(findCategory());\n    } else {\n      model.getCategories\n        .then(function(result){\n          deferred.resolve(findCategory());\n        })\n    }\n\n    return deferred.promise; // return result of the promise on the deferred object\n  }\n})\n;</code></pre>\n\n<p><strong>[27]</strong> We are going to create a method called <strong>getCategoryByName</strong>.</p>\n\n<p><strong>[28]</strong> We are going to create a deferred object by calling <strong>$q.defer</strong>. This returns a <strong>deferred object</strong>.</p>\n\n<p><strong>[45]</strong> What I'm going to do here is create the bookends for this <strong>promise</strong>. We actually created a deferred object and then we <strong>return the promise</strong>.</p>\n\n<blockquote>\n  <p>It's important to understand these two parts, is that you create a deferred object by calling <strong>$q.defer</strong>.</p>\n  \n  <p>Then, you return the <strong>promise</strong> object on that deferred object.</p>\n</blockquote>\n\n<p><strong>[30-34]</strong> I'm going to create a convenience method here called <strong>findCategory</strong>. What this is going to do is just loop over the <strong>categories</strong> collection and compare the <strong>name of the current category</strong> to the <strong>categoryName</strong> parameter that we actually need to define up here. What this is going to do is loop over the categories and find the category with that name.</p>\n\n<p><strong>[36-43]</strong> From here, we can manually resolve or reject the promise at our discretion. From here, we will say, does <strong>categories</strong> exist? If so, then we are going to resolve the <strong>promise</strong> with the results of <strong>findCategory</strong>.</p>\n\n<p><strong>[36-43]</strong> The reason why we're checking if <strong>categories</strong> exist is because you could possibly want to find a <strong>category</strong> before you've actually had the opportunity to go and fetch the <strong>categories</strong> from the server.</p>\n\n<p><strong>[36-43]</strong> If categories does not exist, then we need to call getCategories. From there, take the result and we will use the result to resolve the promise like so. We are simply just adding in an extra step.</p>\n\n<p><strong>[36-43]</strong> If categories exist, we're just looping over the <strong>categories</strong> and finding the <strong>category</strong> for that name and resolving the <strong>promise</strong> with that value. If it does not exist, we are making a call to the server, getting the <strong>categories</strong>, and then resolving the <strong>promise</strong> that we created with the results of <strong>findCategory</strong>. We're just inserting that extra step.</p>\n\n<hr />\n\n<h6 id=\"review\">Review</h6>\n\n<p>This is the technique for manually creating a promise. We return it to the consumer and then we can either resolve or reject it.</p>\n\n<hr />\n\n<h6 id=\"whatsnext\">What's Next</h6>\n\n<p>Stay tuned for the next lesson where we will continue to refactor the functionality from the main controller back into the appropriate parts of the eggly application. I look forward to seeing you in the next lesson.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/angularjs-architecture-using-http-to-load-json-data\" style=\"width: 50%;\">$http to load JSON</a><a class=\"next-article\" href=\"/angularjs-architecture-edit-and-create-bookmark-states\" style=\"float: right;width: 50%;text-align: right;\">Edit and create states</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1427899635632,"created_by":1,"updated_at":1427953374025,"updated_by":1,"published_at":1427899638750,"published_by":1},{"id":51,"uuid":"6e239270-24dc-4457-80de-1656d4f481a2","title":"AngularJS Architecture: Edit and Create Bookmark States","slug":"angularjs-architecture-edit-and-create-bookmark-states","markdown":"> In this lesson, we continue to dig into **ui-router** while doing some significant refactoring to our Eggly application.\n\n> We will start out by removing **MainController** entirely from the application as we start to move functionality to more appropriate places with the application.\n\n> We will build out the edit and create **sub-modules** to include the **states** and **controllers** for editing and creating a **bookmark**.\n\n> With our states defined, will leverage them to manage our view instead of the **ng-if** statements we were previously using.\n\n> We tie it all together by using **CategoriesModel** to track the current **category** and provide functionality to the **BookmarksListCtrl**.\n\n> We cover a lot of material in this lesson as we start to apply the concepts covered previously to finalize functionality in the application.\n\n![Eggly Series 2 Banner](/content/images/2015/03/eggly-series-2-banner.png)\n\nWe are going to start to build out the edit and create **bookmark** functionality in Eggly. In doing so, we are going to dig a little deeper into **ui-router**, as well as perform some housecleaning along the way.\n\nThe first thing that we're going to do is **delete** the **MainController**.\n\nIt has been good to us, but it's time to move along. We'll start to move out the pieces of specific functionality into more appropriate places within the Eggly application.\n\n---\n\n###### Remove MainController from index.html ######\n\nWithin the index.html file...\n\n<span class=\"filename\">index.html</span>\n```php\n  <body>\n    <aside class=\"small-4 columns\" ui-view=\"categories\">\n    </aside>\n    <section class=\"small-8 columns\" ui-view=\"bookmarks\">\n    </section>\n  </body>\n```\n\nWe will delete the **ng-controller** reference/attribute located with the **body** tag.\n\n---\n\n###### Remove MainController from eggly.js ######\n\nIn **eggly.js**...\n\n<span class=\"filename\">eggly.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">angular.module('Eggly', [\n  'ui.router',\n  'categories',\n  'categories.bookmarks'\n])\n.config(function($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('eggly', {\n      url: '',\n      abstract: true\n    });\n\n  $urlRouterProvider.otherwise('/');\n});</code></pre>\n\n---\n\n###### Review current routes and states ######\n\nWe will go ahead and just delete this controller entirely.\n\nNow that we have cleared the deck, so to speak, let's take a moment to review the **routes** or **states** that we have in place, because each one builds on top of each other.\n\nThis will be helpful as we get into building our **edit** and **create** states.\n\n<span class=\"filename\">eggly.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"8-11\"><code class=\"language-javascript\">angular.module('Eggly', [\n  'ui.router',\n  'categories',\n  'categories.bookmarks'\n])\n.config(function($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('eggly', {\n      url: '',\n      abstract: true\n    });\n\n  $urlRouterProvider.otherwise('/');\n});</code></pre>\n\n**[8-11]** At the top level, we have this **abstract Eggly state** that serves as a **placeholder** or a **namespace** for **application states**. \n\n<span class=\"filename\">categories.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"6-18\"><code class=\"language-javascript\">angular.module('categories', [\n  'eggly.models.categories'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories', {\n      url: '/',\n      views: {\n        'categories@': {\n          controller: 'CategoriesListController as categoriesListController',\n          templateUrl: 'app/categories/categories.tmpl.html'\n        },\n        'bookmarks@': {\n          controller: 'BookmarksListCtrl as bookmarksListCtrl',\n          templateUrl: 'app/categories/bookmarks/bookmarks.tmpl.html'\n        }\n      }\n    });\n})\n.controller('CategoriesListController', function CategoriesListController(CategoriesModel) {\n  var categoriesListController = this;\n\n  CategoriesModel.getCategories() // returns a promise\n    .then(function (result) {\n      categoriesListController.categories = result;\n    });\n})\n;</code></pre>\n\n**[6-18]** We can see this state being built upon in the **categories.js** file, where we define the **eggly.categories** state. This state has two named views, a **categories** and **bookmarks** view.\n\nThe **categories** view targets the UI element named \"**categories**\" in the abstract top-level state, which is '**eggly**'.\n\nThe **bookmarks** named view targets the UI view named \"**bookmarks**,\" also, in the abstract top-level state, which is '**eggly**'.\n\n<span class=\"filename\">bookmarks.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"9-17\"><code class=\"language-javascript\">angular.module('categories.bookmarks', [\n  'categories.bookmarks.create',\n  'categories.bookmarks.edit',\n  'eggly.models.categories',\n  'eggly.models.bookmarks'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories.bookmarks', {\n      url: 'categories/:category',\n      views: {\n        'bookmarks@': {\n          templateUrl: 'app/categories/bookmarks/bookmarks.tmpl.html',\n          controller: 'BookmarksListController as bookmarksListController'\n        }\n      }\n    })\n})\n.controller('BookmarksListController', function ($stateParams, BookmarksModel) {\n  var bookmarksListController = this;\n\n  bookmarksListController.currentCategoryName = $stateParams.category;\n\n  BookmarksModel.getBookmarks() // returns a promise\n    .then(function (result){\n      bookmarksListController.bookmarks = result;\n    });\n})\n;</code></pre>\n\n**[9-17]** In the bookmarks file, we have defined an **eggly.categories.bookmarks** state that also targets the **bookmarks** named view in the abstract top-level state, which is '**eggly**'.\n\n---\n\n###### Refactoring bookmarks templates ######\n\nBefore we start to build out the **create** and **edit** states, let's go ahead and just build out the **templates** by refactoring the **bookmarks** template.\n\nI'm going to hop in, take this edit form\n\n<span class=\"filename\">bookmarks.tmpl.html</span>\n```php\n<!-- EDITING -->\n<div ng-if=\"shouldShowEditing()\">\n  <h4>Editing {{editedBookmark.title}}</h4>\n\n  <form class=\"edit-form\" role=\"form\" ng-submit=\"updateBookmark(editedBookmark)\">\n    <div class=\"form-group\">\n      <label>Bookmark Title</label>\n      <input type=\"text\" class=\"form-control\" placeholder=\"Enter title\" ng-model=\"editedBookmark.title\">\n    </div>\n    <div class=\"form-group\">\n      <label>Bookmark URL</label>\n      <input type=\"text\" class=\"form-control\" placeholder=\"Enter URL\" ng-model=\"editedBookmark.url\">\n    </div>\n    <button type=\"submit\" class=\"btn btn-info btn-lg\">Save</button>\n    <button type=\"button\" class=\"btn btn-default btn-lg pull-right\" ng-click=\"cancelEditing();\">Cancel</button>\n  </form>\n</div>\n```\n\nJust paste this into the **bookmarks-edit** template.\n\n<span class=\"filename\">bookmarks-edit.tmpl.html</span>\n```php\n<form class=\"edit-form\" role=\"form\" ng-submit=\"updateBookmark(editedBookmark)\">\n  <div class=\"form-group\">\n    <label>Bookmark Title</label>\n    <input type=\"text\" class=\"form-control\" placeholder=\"Enter title\" ng-model=\"editedBookmark.title\">\n  </div>\n  <div class=\"form-group\">\n    <label>Bookmark URL</label>\n    <input type=\"text\" class=\"form-control\" placeholder=\"Enter URL\" ng-model=\"editedBookmark.url\">\n  </div>\n  <button type=\"submit\" class=\"btn btn-info btn-lg\">Save</button>\n  <button type=\"button\" class=\"btn btn-default btn-lg pull-right\" ng-click=\"cancelEditing();\">Cancel</button>\n</form>\n```\n\nWe can delete the remains of the editing section out of the **bookmarks** template, and **cut** this create form out, and convert this **div** wrapper into a **ui-view** element. We're going to leave this as an unnamed **ui-view** element that we'll revisit in just a moment.\n\n\n<span class=\"filename\">bookmarks.tmpl.html</span>\n```php\n<h2>{{bookmarksListController.currentCategoryName}}</h2>\n<ul class=\"bookmarks-list\">\n  <li ng-class=\"{active: isSelectedBookmark(bookmark.id)}\" ng-repeat=\"bookmark in bookmarksListController.bookmarks | filter: {category: currentCategory.name}\">\n    <a href=\"#\" ng-click=\"setEditedBookmark(bookmark); startEditing();\"><i class=\"fa fa-pencil\"></i></a>\n    <a href=\"{{bookmark.url}}\" target=\"_blank\">{{bookmark.title}}</a>\n    <a href=\"#\" ng-click=\"deleteBookmark(bookmark)\"><i class=\"fa fa-times\"></i></a>\n  </li>\n</ul>\n\n<hr>\n\n<!-- CREATING -->\n<ui-view ng-if=\"shouldShowCreating()\">\n  <a href=\"#\" ng-click=\"startCreating();\"><i class=\"fa fa-plus\"></i> Create Bookmark</a>\n</ui-view>\n```\n\nWe will just paste this into the **bookmarks-create** template, and delete this **ng-show** from the **form** tag, because we want this form to show at all times when we're in a **create** state.\n\n<span class=\"filename\">bookmarks-create.tmpl.html</span>\n```php\n  <form class=\"create-form\" role=\"form\" ng-submit=\"createBookmark(newBookmark)\" novalidate>\n      <div class=\"form-group\">\n        <label for=\"newBookmarkTitle\">Bookmark Title</label>\n        <input type=\"text\" class=\"form-control\" id=\"newBookmarkTitle\" ng-model=\"newBookmark.title\" placeholder=\"Enter title\">\n      </div>\n      <div class=\"form-group\">\n        <label for=\"newBookmarkURL\">Bookmark URL</label>\n        <input type=\"text\" class=\"form-control\" id=\"newBookmarkURL\" ng-model=\"newBookmark.url\" placeholder=\"Enter URL\">\n      </div>\n      <button type=\"submit\" class=\"btn btn-info btn-lg\">Create</button>\n      <button type=\"button\" class=\"btn btn-default btn-lg pull-right\" ng-click=\"cancelCreating()\">Cancel</button>\n    </form>\n```\n\n---\n\n###### Refactoring boomark-create controller ######\n\nNow that we have the **template** refactored into the smaller, more specific templates, let's go into the **bookmark-create** module and define the **create** state.\n\n<span class=\"filename\">bookmarks-create.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"4,6-9,13\"><code class=\"language-javascript\">angular.module('categories.bookmarks.create', [\n\n])\n.config(function($stateProvider){\n  $stateProvider\n    .state('eggly.categories.bookmarks.create', {\n      url: '/bookmarks/create',\n      templateUrl: 'app/categories/bookmarks/create/bookmark-create.tmpl.html',\n      controller: 'CreateBookmarkController as createBookmarkController'\n    })\n  ;\n})\n.controller('CreateBookmarkController', function(){\n\n})\n;</code></pre>\n\n**[4]** We are going to define a config block, inject stateProvider in.\n\n**[6]** We will define our first state as **eggly.categories.bookmarks.create**.\n\n**[7]** We'll give this a URL of **bookmarks/create**.\n\n**[8]** The template URL is going to be **'app/categories/bookmarks/create/bookmark-create.tmpl.html'**\n\n**[9]** The controller will be '**CreateBookmarkCtrl as createBookmarkController**'.\n\n**[13]** Let's go ahead and stub out this controller.\n\n---\n\n###### Refactoring boomark-edit controller ######\n\nLet's go ahead and do the same thing for the **bookmarks-edit** state.\n\nWe'll hop into the bookmark-edit sub-module.\n\n<span class=\"filename\">bookmark-edit.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"4,6-8,13\"><code class=\"language-javascript\">angular.module('categories.bookmarks.edit', [\n\n])\n.config(function($stateProvider){\n  $stateProvider\n    .state('eggly.categories.bookmarks.edit', {\n      url: '/bookmarks/:bookmarkID/edit',\n      templateUrl: 'app/categories/bookmarks/edit/bookmark-edit.tmpl.html',\n      controller: 'EditBookmarkController as editBookmarkController'\n    })\n  ;\n})\n.controller('EditBookmarkController', function(){\n\n})\n;</code></pre>\n\n**[4]** We will define our **config** block, inject **stateProvider** in.\n\n**[6]** The state will be **eggly.categories.bookmarks.edit**.\n\n**[7]** The URL will be bookmarks. We do need to pass in a bookmarkID since this is dependent on the bookmark that we're editing.\n\n**[8]** We'll do the **templateUrl** as **'app/categories/bookmarks/edit/bookmark-edit.tmpl.html'**\n\n**[9]** We will define the controller as **\"EditBookmarkCtrl as editBookmarkCtrl\"**.\n\n**[13]** We will just go ahead and build out this controller just real quick.\n\n---\n\n###### Refactoring Categories Model to handle current category ######\n\nWe have successfully defined the two states for creating and editing a bookmark. We need to do a few additional steps so that we can successfully navigate to these newly created states.\n\nWe are going to hop into the **CategoriesModel**, create a few new methods, and add an additional property to keep track of the **current category** we are on.\n\n<span class=\"filename\">categories-model.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"10,29-33,40-42,47-49\"><code class=\"language-javascript\">angular.module('eggly.models.categories', [\n\n])\n.service('CategoriesModel', function ($http, $q) {\n  var model = this,\n      URLS = {\n        FETCH: 'data/categories.json'\n      },\n      categories,\n      currentCategory;\n\n  function extract(result){\n    return result.data;\n  }\n\n  function cacheCategories(result){\n    categories = extract(result);\n    return categories;\n  }\n\n  model.getCategories = function () {\n    return (categories) ? $q.when(categories) : $http.get(URLS.FETCH).then(cacheCategories);\n  };\n\n  /**\n   * Setter for current category\n   * @param {string} categoryName [name of category being set]\n   */\n  model.setCurrentCategory = function (categoryName){\n    return model.getCategoryByName(categoryName) // promise that this category exists\n      .then(function(category){\n        currentCategory = category;\n      })\n    ;\n  };\n\n  /**\n   * Getter for current category\n   */\n  model.getCurrentCategory = function(){\n    return currentCategory;\n  }\n\n  /**\n   * Getter that is specifically getting category name\n   */\n  model.getCurrentCategoryName = function(){\n    return currentCategory ? currentCategory.name : '';\n  }\n\n  /**\n   * Here is where we can manually resolve or reject a promise\n   */\n  model.getCategoryByName = function(categoryName) {\n    var deferred = $q.defer(); // create deferred object aka put on hold\n\n    function findCategory() {\n      return _.find(categories, function(c){\n        return c.name == categoryName;\n      })\n    }\n\n    if(categories){\n      deferred.resolve(findCategory());\n    } else {\n      model.getCategories()\n        .then(function(result){\n          deferred.resolve(findCategory());\n        })\n    }\n\n    return deferred.promise; // return result of the promise on the deferred object\n  }\n})\n;</code></pre>\n\n**[10]** Let's define a new property called \"**currentCategory**\".\n\n**[29]** We will create a method called \"**setCurrentCategory**\", that accepts a **categoryName**.\n\n**[30]** From here, we will return the result of getCategoryByName, pass in the categoryName.\n\n**[31-33]** We'll take the **promised category/result** that is returned from this. We'll set it to **currentCategory**.\n\n**[40-42]** Then, let's define two more methods, which are fairly simple in nature, **getCurrentCategory**, which just returns **currentCategory**\n\n**[47-49]** Define the method **getCurrentCategoryName**. It checks to see if **currentCategory** exists. If it does, it returns currentCategory.name. If not, it just returns an empty string.\n\n---\n\n###### Refactoring Bookmarks List Controller to handle current category ######\n\n<span class=\"filename\">bookmarks.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"19,22,25-27,30-31\"><code class=\"language-javascript\">angular.module('categories.bookmarks', [\n  'categories.bookmarks.create',\n  'categories.bookmarks.edit',\n  'eggly.models.categories',\n  'eggly.models.bookmarks'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories.bookmarks', {\n      url: 'categories/:category',\n      views: {\n        'bookmarks@': {\n          templateUrl: 'app/categories/bookmarks/bookmarks.tmpl.html',\n          controller: 'BookmarksListController as bookmarksListController'\n        }\n      }\n    })\n})\n.controller('BookmarksListController', function ($stateParams, BookmarksModel, CategoriesModel) {\n  var bookmarksListController = this;\n\n  CategoriesModel.setCurrentCategory($stateParams.category);\n\n  BookmarksModel.getBookmarks() // returns a promise\n    .then(function (bookmarks){\n      bookmarksListController.bookmarks = bookmarks;\n    })\n  ;\n\n  bookmarksListController.getCurrentCategory = CategoriesModel.getCurrentCategory;\n  bookmarksListController.getCurrentCategoryName = CategoriesModel.getCurrentCategoryName;\n})\n;</code></pre>\n\n**[19]** Now that we have modified the **CategoriesModel**, now that we have defined the **CategoriesModel**, let's inject it into the **bookmarksListCtrl**.\n\n**[22]** Instead of setting this locally, we will pass this into or we will delegate this to the **CategoriesModel** and pass in the **$stateParams.category** property.\n\n**[25-27]** From here, while I'm looking at this, let's just update **result** to **bookmarks** so that it's a little bit more self-descriptive.\n\n**[30-31]** Then, we're going to pull some methods off of the **CategoriesModel** and make them available to the local **bookmarksListCtrl**. One of them is **getCurrentCategory**. We'll do the same for **getCurrentCategoryName**.\n\n---\n\n###### Refactor the bookmarks template ######\n\nWith that in place, we are ready to actually wire up this template.\n\n<span class=\"filename\">bookmarks.tmpl.html</span>\n```php\n<h1>{{bookmarksListController.getCurrentCategoryName()}}</h1>\n<ul class=\"bookmarks-list\">\n  <li ng-class=\"{active: isSelectedBookmark(bookmark.id)}\" ng-repeat=\"bookmark in bookmarksListController.bookmarks | filter: {category: bookmarksListController.getCurrentCategoryName()}\">\n    <a href=\"#\" ui-sref=\"eggly.categories.bookmarks.edit({bookmarkID:bookmark.id})\"><i class=\"fa fa-pencil\"></i></a>\n    <a href=\"{{bookmark.url}}\" target=\"_blank\">{{bookmark.title}}</a>\n    <a href=\"#\"><i class=\"fa fa-times\"></i></a>\n  </li>\n</ul>\n\n<hr>\n\n<!-- CREATING -->\n<ui-view ng-if=\"bookmarksListController.getCurrentCategory()\">\n  <a href=\"#\" ui-sref=\"eggly.categories.bookmarks.create\"><i class=\"fa fa-plus\"></i> Create Bookmark</a>\n</ui-view>\n```\n\nThe first thing we need to do is update this **ng-if of the ui-view element to target the bookmarksListController.getCurrentCategory()**. If a current category exists, then, we will show this.\n\nThe **ng-click** here to initiate the creation of a bookmark is no longer valid. We're going to replace this with a **ui-sref**. We're going to navigate to e**ggly.categories.bookmarks.create**. \n\nLet's also update the ng-click event for going into the **edit** state. We will replace the **ng-click** with a **ui-sref**. We're going to navigate to **eggly.categories.bookmarks.edit**, and we're going to pass in an object with **bookmarkID:bookmark.id**.\n\nLet's go ahead and update this filter in the **li element's ng-repeat** here to call **bookmarksListController.getCurrentCategoryName()**.\n\n---\n\n###### Refactor the categories template ######\n\nLet's go into the **categories** template.\n\nI want to actually allow a click on the logo to reset or go back to the default category state. We'll delete that **ng-click**. ui-sref. We'll navigate to **eggly.categories**.\n\n<span class=\"filename\">categories.tmpl.html</span>\n```php\n<h1 ui-sref=\"eggly.categories\">Eggly</h1>\n<ul class=\"category-list\">\n  <li ng-repeat=\"category in categoriesListController.categories\" ng-class=\"{'active': isCurrentCategory(category)}\">\n    <a ui-sref=\"eggly.categories.bookmarks({category:category.name})\" ng-click=\"setCurrentCategory(category)\">{{category.name}}</a>\n  </li>\n</ul>\n```\n\n---\n\n###### Test the code ######\n\nI believe I've covered everything. Let's hop into the browser, give this a spin, and see if this is working. We'll select Development, Design. You can see now we're filtering on the current category.\n\n![filtering on current category](/content/images/2015/04/filtering_on_current_category.png)\n\nI can **click the logo**, and it goes back to the base category state. \n\n![clicking on logo](/content/images/2015/04/clicking_on_logo.png)\n\nFrom here, if I click \"**Edit**\", then, you can see it's navigating to the edit state.\n\n![clicking on edit](/content/images/2015/04/click_edit.png)\n\nIf I click \"**Create**\", then, you can see it's navigating to the create form.\n\n![click on create](/content/images/2015/04/click_on_create.png)\n\n---\n\n###### Review ######\n\nWe have covered quite a bit of material in this lesson, but the main thing that I'd like to just quickly go over, that we did, is we created some methods on the **CategoriesModel** to expose the **current category** that we are on.\n\nThen we created **two new routes**, one to **edit** a current bookmark and one to **create** a new bookmark.\n\n---\n\n###### What's next ######\n\nWe will continue to finalize the functionality in the Eggly application.\n\n---\n\n<a class=\"prev-article\" href=\"/angularjs-architecture-control-your-promises-with-q\" style=\"width: 50%;\">Promises with $q</a><a class=\"next-article\" href=\"/angularjs-architecture-create-bookmark\" style=\"float: right;width: 50%;text-align: right;\">Create Bookmark</a>","html":"<blockquote>\n  <p>In this lesson, we continue to dig into <strong>ui-router</strong> while doing some significant refactoring to our Eggly application.</p>\n  \n  <p>We will start out by removing <strong>MainController</strong> entirely from the application as we start to move functionality to more appropriate places with the application.</p>\n  \n  <p>We will build out the edit and create <strong>sub-modules</strong> to include the <strong>states</strong> and <strong>controllers</strong> for editing and creating a <strong>bookmark</strong>.</p>\n  \n  <p>With our states defined, will leverage them to manage our view instead of the <strong>ng-if</strong> statements we were previously using.</p>\n  \n  <p>We tie it all together by using <strong>CategoriesModel</strong> to track the current <strong>category</strong> and provide functionality to the <strong>BookmarksListCtrl</strong>.</p>\n  \n  <p>We cover a lot of material in this lesson as we start to apply the concepts covered previously to finalize functionality in the application.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/eggly-series-2-banner.png\" alt=\"Eggly Series 2 Banner\" /></p>\n\n<p>We are going to start to build out the edit and create <strong>bookmark</strong> functionality in Eggly. In doing so, we are going to dig a little deeper into <strong>ui-router</strong>, as well as perform some housecleaning along the way.</p>\n\n<p>The first thing that we're going to do is <strong>delete</strong> the <strong>MainController</strong>.</p>\n\n<p>It has been good to us, but it's time to move along. We'll start to move out the pieces of specific functionality into more appropriate places within the Eggly application.</p>\n\n<hr />\n\n<h6 id=\"removemaincontrollerfromindexhtml\">Remove MainController from index.html</h6>\n\n<p>Within the index.html file...</p>\n\n<p><span class=\"filename\">index.html</span>  </p>\n\n<pre><code class=\"language-php\">  &lt;body&gt;\n    &lt;aside class=\"small-4 columns\" ui-view=\"categories\"&gt;\n    &lt;/aside&gt;\n    &lt;section class=\"small-8 columns\" ui-view=\"bookmarks\"&gt;\n    &lt;/section&gt;\n  &lt;/body&gt;\n</code></pre>\n\n<p>We will delete the <strong>ng-controller</strong> reference/attribute located with the <strong>body</strong> tag.</p>\n\n<hr />\n\n<h6 id=\"removemaincontrollerfromegglyjs\">Remove MainController from eggly.js</h6>\n\n<p>In <strong>eggly.js</strong>...</p>\n\n<p><span class=\"filename\">eggly.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">angular.module('Eggly', [  \n  'ui.router',\n  'categories',\n  'categories.bookmarks'\n])\n.config(function($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('eggly', {\n      url: '',\n      abstract: true\n    });\n\n  $urlRouterProvider.otherwise('/');\n});</code></pre>\n\n<hr />\n\n<h6 id=\"reviewcurrentroutesandstates\">Review current routes and states</h6>\n\n<p>We will go ahead and just delete this controller entirely.</p>\n\n<p>Now that we have cleared the deck, so to speak, let's take a moment to review the <strong>routes</strong> or <strong>states</strong> that we have in place, because each one builds on top of each other.</p>\n\n<p>This will be helpful as we get into building our <strong>edit</strong> and <strong>create</strong> states.</p>\n\n<p><span class=\"filename\">eggly.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"8-11\"><code class=\"language-javascript\">angular.module('Eggly', [  \n  'ui.router',\n  'categories',\n  'categories.bookmarks'\n])\n.config(function($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('eggly', {\n      url: '',\n      abstract: true\n    });\n\n  $urlRouterProvider.otherwise('/');\n});</code></pre>\n\n<p><strong>[8-11]</strong> At the top level, we have this <strong>abstract Eggly state</strong> that serves as a <strong>placeholder</strong> or a <strong>namespace</strong> for <strong>application states</strong>. </p>\n\n<p><span class=\"filename\">categories.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"6-18\"><code class=\"language-javascript\">angular.module('categories', [  \n  'eggly.models.categories'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories', {\n      url: '/',\n      views: {\n        'categories@': {\n          controller: 'CategoriesListController as categoriesListController',\n          templateUrl: 'app/categories/categories.tmpl.html'\n        },\n        'bookmarks@': {\n          controller: 'BookmarksListCtrl as bookmarksListCtrl',\n          templateUrl: 'app/categories/bookmarks/bookmarks.tmpl.html'\n        }\n      }\n    });\n})\n.controller('CategoriesListController', function CategoriesListController(CategoriesModel) {\n  var categoriesListController = this;\n\n  CategoriesModel.getCategories() // returns a promise\n    .then(function (result) {\n      categoriesListController.categories = result;\n    });\n})\n;</code></pre>\n\n<p><strong>[6-18]</strong> We can see this state being built upon in the <strong>categories.js</strong> file, where we define the <strong>eggly.categories</strong> state. This state has two named views, a <strong>categories</strong> and <strong>bookmarks</strong> view.</p>\n\n<p>The <strong>categories</strong> view targets the UI element named \"<strong>categories</strong>\" in the abstract top-level state, which is '<strong>eggly</strong>'.</p>\n\n<p>The <strong>bookmarks</strong> named view targets the UI view named \"<strong>bookmarks</strong>,\" also, in the abstract top-level state, which is '<strong>eggly</strong>'.</p>\n\n<p><span class=\"filename\">bookmarks.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"9-17\"><code class=\"language-javascript\">angular.module('categories.bookmarks', [  \n  'categories.bookmarks.create',\n  'categories.bookmarks.edit',\n  'eggly.models.categories',\n  'eggly.models.bookmarks'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories.bookmarks', {\n      url: 'categories/:category',\n      views: {\n        'bookmarks@': {\n          templateUrl: 'app/categories/bookmarks/bookmarks.tmpl.html',\n          controller: 'BookmarksListController as bookmarksListController'\n        }\n      }\n    })\n})\n.controller('BookmarksListController', function ($stateParams, BookmarksModel) {\n  var bookmarksListController = this;\n\n  bookmarksListController.currentCategoryName = $stateParams.category;\n\n  BookmarksModel.getBookmarks() // returns a promise\n    .then(function (result){\n      bookmarksListController.bookmarks = result;\n    });\n})\n;</code></pre>\n\n<p><strong>[9-17]</strong> In the bookmarks file, we have defined an <strong>eggly.categories.bookmarks</strong> state that also targets the <strong>bookmarks</strong> named view in the abstract top-level state, which is '<strong>eggly</strong>'.</p>\n\n<hr />\n\n<h6 id=\"refactoringbookmarkstemplates\">Refactoring bookmarks templates</h6>\n\n<p>Before we start to build out the <strong>create</strong> and <strong>edit</strong> states, let's go ahead and just build out the <strong>templates</strong> by refactoring the <strong>bookmarks</strong> template.</p>\n\n<p>I'm going to hop in, take this edit form</p>\n\n<p><span class=\"filename\">bookmarks.tmpl.html</span>  </p>\n\n<pre><code class=\"language-php\">&lt;!-- EDITING --&gt;  \n&lt;div ng-if=\"shouldShowEditing()\"&gt;  \n  &lt;h4&gt;Editing {{editedBookmark.title}}&lt;/h4&gt;\n\n  &lt;form class=\"edit-form\" role=\"form\" ng-submit=\"updateBookmark(editedBookmark)\"&gt;\n    &lt;div class=\"form-group\"&gt;\n      &lt;label&gt;Bookmark Title&lt;/label&gt;\n      &lt;input type=\"text\" class=\"form-control\" placeholder=\"Enter title\" ng-model=\"editedBookmark.title\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"form-group\"&gt;\n      &lt;label&gt;Bookmark URL&lt;/label&gt;\n      &lt;input type=\"text\" class=\"form-control\" placeholder=\"Enter URL\" ng-model=\"editedBookmark.url\"&gt;\n    &lt;/div&gt;\n    &lt;button type=\"submit\" class=\"btn btn-info btn-lg\"&gt;Save&lt;/button&gt;\n    &lt;button type=\"button\" class=\"btn btn-default btn-lg pull-right\" ng-click=\"cancelEditing();\"&gt;Cancel&lt;/button&gt;\n  &lt;/form&gt;\n&lt;/div&gt;  \n</code></pre>\n\n<p>Just paste this into the <strong>bookmarks-edit</strong> template.</p>\n\n<p><span class=\"filename\">bookmarks-edit.tmpl.html</span>  </p>\n\n<pre><code class=\"language-php\">&lt;form class=\"edit-form\" role=\"form\" ng-submit=\"updateBookmark(editedBookmark)\"&gt;  \n  &lt;div class=\"form-group\"&gt;\n    &lt;label&gt;Bookmark Title&lt;/label&gt;\n    &lt;input type=\"text\" class=\"form-control\" placeholder=\"Enter title\" ng-model=\"editedBookmark.title\"&gt;\n  &lt;/div&gt;\n  &lt;div class=\"form-group\"&gt;\n    &lt;label&gt;Bookmark URL&lt;/label&gt;\n    &lt;input type=\"text\" class=\"form-control\" placeholder=\"Enter URL\" ng-model=\"editedBookmark.url\"&gt;\n  &lt;/div&gt;\n  &lt;button type=\"submit\" class=\"btn btn-info btn-lg\"&gt;Save&lt;/button&gt;\n  &lt;button type=\"button\" class=\"btn btn-default btn-lg pull-right\" ng-click=\"cancelEditing();\"&gt;Cancel&lt;/button&gt;\n&lt;/form&gt;  \n</code></pre>\n\n<p>We can delete the remains of the editing section out of the <strong>bookmarks</strong> template, and <strong>cut</strong> this create form out, and convert this <strong>div</strong> wrapper into a <strong>ui-view</strong> element. We're going to leave this as an unnamed <strong>ui-view</strong> element that we'll revisit in just a moment.</p>\n\n<p><span class=\"filename\">bookmarks.tmpl.html</span>  </p>\n\n<pre><code class=\"language-php\">&lt;h2&gt;{{bookmarksListController.currentCategoryName}}&lt;/h2&gt;  \n&lt;ul class=\"bookmarks-list\"&gt;  \n  &lt;li ng-class=\"{active: isSelectedBookmark(bookmark.id)}\" ng-repeat=\"bookmark in bookmarksListController.bookmarks | filter: {category: currentCategory.name}\"&gt;\n    &lt;a href=\"#\" ng-click=\"setEditedBookmark(bookmark); startEditing();\"&gt;&lt;i class=\"fa fa-pencil\"&gt;&lt;/i&gt;&lt;/a&gt;\n    &lt;a href=\"{{bookmark.url}}\" target=\"_blank\"&gt;{{bookmark.title}}&lt;/a&gt;\n    &lt;a href=\"#\" ng-click=\"deleteBookmark(bookmark)\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;!-- CREATING --&gt;  \n&lt;ui-view ng-if=\"shouldShowCreating()\"&gt;  \n  &lt;a href=\"#\" ng-click=\"startCreating();\"&gt;&lt;i class=\"fa fa-plus\"&gt;&lt;/i&gt; Create Bookmark&lt;/a&gt;\n&lt;/ui-view&gt;  \n</code></pre>\n\n<p>We will just paste this into the <strong>bookmarks-create</strong> template, and delete this <strong>ng-show</strong> from the <strong>form</strong> tag, because we want this form to show at all times when we're in a <strong>create</strong> state.</p>\n\n<p><span class=\"filename\">bookmarks-create.tmpl.html</span>  </p>\n\n<pre><code class=\"language-php\">  &lt;form class=\"create-form\" role=\"form\" ng-submit=\"createBookmark(newBookmark)\" novalidate&gt;\n      &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"newBookmarkTitle\"&gt;Bookmark Title&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"newBookmarkTitle\" ng-model=\"newBookmark.title\" placeholder=\"Enter title\"&gt;\n      &lt;/div&gt;\n      &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"newBookmarkURL\"&gt;Bookmark URL&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"newBookmarkURL\" ng-model=\"newBookmark.url\" placeholder=\"Enter URL\"&gt;\n      &lt;/div&gt;\n      &lt;button type=\"submit\" class=\"btn btn-info btn-lg\"&gt;Create&lt;/button&gt;\n      &lt;button type=\"button\" class=\"btn btn-default btn-lg pull-right\" ng-click=\"cancelCreating()\"&gt;Cancel&lt;/button&gt;\n    &lt;/form&gt;\n</code></pre>\n\n<hr />\n\n<h6 id=\"refactoringboomarkcreatecontroller\">Refactoring boomark-create controller</h6>\n\n<p>Now that we have the <strong>template</strong> refactored into the smaller, more specific templates, let's go into the <strong>bookmark-create</strong> module and define the <strong>create</strong> state.</p>\n\n<p><span class=\"filename\">bookmarks-create.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"4,6-9,13\"><code class=\"language-javascript\">angular.module('categories.bookmarks.create', [\n\n])\n.config(function($stateProvider){\n  $stateProvider\n    .state('eggly.categories.bookmarks.create', {\n      url: '/bookmarks/create',\n      templateUrl: 'app/categories/bookmarks/create/bookmark-create.tmpl.html',\n      controller: 'CreateBookmarkController as createBookmarkController'\n    })\n  ;\n})\n.controller('CreateBookmarkController', function(){\n\n})\n;</code></pre>\n\n<p><strong>[4]</strong> We are going to define a config block, inject stateProvider in.</p>\n\n<p><strong>[6]</strong> We will define our first state as <strong>eggly.categories.bookmarks.create</strong>.</p>\n\n<p><strong>[7]</strong> We'll give this a URL of <strong>bookmarks/create</strong>.</p>\n\n<p><strong>[8]</strong> The template URL is going to be <strong>'app/categories/bookmarks/create/bookmark-create.tmpl.html'</strong></p>\n\n<p><strong>[9]</strong> The controller will be '<strong>CreateBookmarkCtrl as createBookmarkController</strong>'.</p>\n\n<p><strong>[13]</strong> Let's go ahead and stub out this controller.</p>\n\n<hr />\n\n<h6 id=\"refactoringboomarkeditcontroller\">Refactoring boomark-edit controller</h6>\n\n<p>Let's go ahead and do the same thing for the <strong>bookmarks-edit</strong> state.</p>\n\n<p>We'll hop into the bookmark-edit sub-module.</p>\n\n<p><span class=\"filename\">bookmark-edit.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"4,6-8,13\"><code class=\"language-javascript\">angular.module('categories.bookmarks.edit', [\n\n])\n.config(function($stateProvider){\n  $stateProvider\n    .state('eggly.categories.bookmarks.edit', {\n      url: '/bookmarks/:bookmarkID/edit',\n      templateUrl: 'app/categories/bookmarks/edit/bookmark-edit.tmpl.html',\n      controller: 'EditBookmarkController as editBookmarkController'\n    })\n  ;\n})\n.controller('EditBookmarkController', function(){\n\n})\n;</code></pre>\n\n<p><strong>[4]</strong> We will define our <strong>config</strong> block, inject <strong>stateProvider</strong> in.</p>\n\n<p><strong>[6]</strong> The state will be <strong>eggly.categories.bookmarks.edit</strong>.</p>\n\n<p><strong>[7]</strong> The URL will be bookmarks. We do need to pass in a bookmarkID since this is dependent on the bookmark that we're editing.</p>\n\n<p><strong>[8]</strong> We'll do the <strong>templateUrl</strong> as <strong>'app/categories/bookmarks/edit/bookmark-edit.tmpl.html'</strong></p>\n\n<p><strong>[9]</strong> We will define the controller as <strong>\"EditBookmarkCtrl as editBookmarkCtrl\"</strong>.</p>\n\n<p><strong>[13]</strong> We will just go ahead and build out this controller just real quick.</p>\n\n<hr />\n\n<h6 id=\"refactoringcategoriesmodeltohandlecurrentcategory\">Refactoring Categories Model to handle current category</h6>\n\n<p>We have successfully defined the two states for creating and editing a bookmark. We need to do a few additional steps so that we can successfully navigate to these newly created states.</p>\n\n<p>We are going to hop into the <strong>CategoriesModel</strong>, create a few new methods, and add an additional property to keep track of the <strong>current category</strong> we are on.</p>\n\n<p><span class=\"filename\">categories-model.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"10,29-33,40-42,47-49\"><code class=\"language-javascript\">angular.module('eggly.models.categories', [\n\n])\n.service('CategoriesModel', function ($http, $q) {\n  var model = this,\n      URLS = {\n        FETCH: 'data/categories.json'\n      },\n      categories,\n      currentCategory;\n\n  function extract(result){\n    return result.data;\n  }\n\n  function cacheCategories(result){\n    categories = extract(result);\n    return categories;\n  }\n\n  model.getCategories = function () {\n    return (categories) ? $q.when(categories) : $http.get(URLS.FETCH).then(cacheCategories);\n  };\n\n  /**\n   * Setter for current category\n   * @param {string} categoryName [name of category being set]\n   */\n  model.setCurrentCategory = function (categoryName){\n    return model.getCategoryByName(categoryName) // promise that this category exists\n      .then(function(category){\n        currentCategory = category;\n      })\n    ;\n  };\n\n  /**\n   * Getter for current category\n   */\n  model.getCurrentCategory = function(){\n    return currentCategory;\n  }\n\n  /**\n   * Getter that is specifically getting category name\n   */\n  model.getCurrentCategoryName = function(){\n    return currentCategory ? currentCategory.name : '';\n  }\n\n  /**\n   * Here is where we can manually resolve or reject a promise\n   */\n  model.getCategoryByName = function(categoryName) {\n    var deferred = $q.defer(); // create deferred object aka put on hold\n\n    function findCategory() {\n      return _.find(categories, function(c){\n        return c.name == categoryName;\n      })\n    }\n\n    if(categories){\n      deferred.resolve(findCategory());\n    } else {\n      model.getCategories()\n        .then(function(result){\n          deferred.resolve(findCategory());\n        })\n    }\n\n    return deferred.promise; // return result of the promise on the deferred object\n  }\n})\n;</code></pre>\n\n<p><strong>[10]</strong> Let's define a new property called \"<strong>currentCategory</strong>\".</p>\n\n<p><strong>[29]</strong> We will create a method called \"<strong>setCurrentCategory</strong>\", that accepts a <strong>categoryName</strong>.</p>\n\n<p><strong>[30]</strong> From here, we will return the result of getCategoryByName, pass in the categoryName.</p>\n\n<p><strong>[31-33]</strong> We'll take the <strong>promised category/result</strong> that is returned from this. We'll set it to <strong>currentCategory</strong>.</p>\n\n<p><strong>[40-42]</strong> Then, let's define two more methods, which are fairly simple in nature, <strong>getCurrentCategory</strong>, which just returns <strong>currentCategory</strong></p>\n\n<p><strong>[47-49]</strong> Define the method <strong>getCurrentCategoryName</strong>. It checks to see if <strong>currentCategory</strong> exists. If it does, it returns currentCategory.name. If not, it just returns an empty string.</p>\n\n<hr />\n\n<h6 id=\"refactoringbookmarkslistcontrollertohandlecurrentcategory\">Refactoring Bookmarks List Controller to handle current category</h6>\n\n<p><span class=\"filename\">bookmarks.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"19,22,25-27,30-31\"><code class=\"language-javascript\">angular.module('categories.bookmarks', [  \n  'categories.bookmarks.create',\n  'categories.bookmarks.edit',\n  'eggly.models.categories',\n  'eggly.models.bookmarks'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories.bookmarks', {\n      url: 'categories/:category',\n      views: {\n        'bookmarks@': {\n          templateUrl: 'app/categories/bookmarks/bookmarks.tmpl.html',\n          controller: 'BookmarksListController as bookmarksListController'\n        }\n      }\n    })\n})\n.controller('BookmarksListController', function ($stateParams, BookmarksModel, CategoriesModel) {\n  var bookmarksListController = this;\n\n  CategoriesModel.setCurrentCategory($stateParams.category);\n\n  BookmarksModel.getBookmarks() // returns a promise\n    .then(function (bookmarks){\n      bookmarksListController.bookmarks = bookmarks;\n    })\n  ;\n\n  bookmarksListController.getCurrentCategory = CategoriesModel.getCurrentCategory;\n  bookmarksListController.getCurrentCategoryName = CategoriesModel.getCurrentCategoryName;\n})\n;</code></pre>\n\n<p><strong>[19]</strong> Now that we have modified the <strong>CategoriesModel</strong>, now that we have defined the <strong>CategoriesModel</strong>, let's inject it into the <strong>bookmarksListCtrl</strong>.</p>\n\n<p><strong>[22]</strong> Instead of setting this locally, we will pass this into or we will delegate this to the <strong>CategoriesModel</strong> and pass in the <strong>$stateParams.category</strong> property.</p>\n\n<p><strong>[25-27]</strong> From here, while I'm looking at this, let's just update <strong>result</strong> to <strong>bookmarks</strong> so that it's a little bit more self-descriptive.</p>\n\n<p><strong>[30-31]</strong> Then, we're going to pull some methods off of the <strong>CategoriesModel</strong> and make them available to the local <strong>bookmarksListCtrl</strong>. One of them is <strong>getCurrentCategory</strong>. We'll do the same for <strong>getCurrentCategoryName</strong>.</p>\n\n<hr />\n\n<h6 id=\"refactorthebookmarkstemplate\">Refactor the bookmarks template</h6>\n\n<p>With that in place, we are ready to actually wire up this template.</p>\n\n<p><span class=\"filename\">bookmarks.tmpl.html</span>  </p>\n\n<pre><code class=\"language-php\">&lt;h1&gt;{{bookmarksListController.getCurrentCategoryName()}}&lt;/h1&gt;  \n&lt;ul class=\"bookmarks-list\"&gt;  \n  &lt;li ng-class=\"{active: isSelectedBookmark(bookmark.id)}\" ng-repeat=\"bookmark in bookmarksListController.bookmarks | filter: {category: bookmarksListController.getCurrentCategoryName()}\"&gt;\n    &lt;a href=\"#\" ui-sref=\"eggly.categories.bookmarks.edit({bookmarkID:bookmark.id})\"&gt;&lt;i class=\"fa fa-pencil\"&gt;&lt;/i&gt;&lt;/a&gt;\n    &lt;a href=\"{{bookmark.url}}\" target=\"_blank\"&gt;{{bookmark.title}}&lt;/a&gt;\n    &lt;a href=\"#\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;!-- CREATING --&gt;  \n&lt;ui-view ng-if=\"bookmarksListController.getCurrentCategory()\"&gt;  \n  &lt;a href=\"#\" ui-sref=\"eggly.categories.bookmarks.create\"&gt;&lt;i class=\"fa fa-plus\"&gt;&lt;/i&gt; Create Bookmark&lt;/a&gt;\n&lt;/ui-view&gt;  \n</code></pre>\n\n<p>The first thing we need to do is update this <strong>ng-if of the ui-view element to target the bookmarksListController.getCurrentCategory()</strong>. If a current category exists, then, we will show this.</p>\n\n<p>The <strong>ng-click</strong> here to initiate the creation of a bookmark is no longer valid. We're going to replace this with a <strong>ui-sref</strong>. We're going to navigate to e<strong>ggly.categories.bookmarks.create</strong>. </p>\n\n<p>Let's also update the ng-click event for going into the <strong>edit</strong> state. We will replace the <strong>ng-click</strong> with a <strong>ui-sref</strong>. We're going to navigate to <strong>eggly.categories.bookmarks.edit</strong>, and we're going to pass in an object with <strong>bookmarkID:bookmark.id</strong>.</p>\n\n<p>Let's go ahead and update this filter in the <strong>li element's ng-repeat</strong> here to call <strong>bookmarksListController.getCurrentCategoryName()</strong>.</p>\n\n<hr />\n\n<h6 id=\"refactorthecategoriestemplate\">Refactor the categories template</h6>\n\n<p>Let's go into the <strong>categories</strong> template.</p>\n\n<p>I want to actually allow a click on the logo to reset or go back to the default category state. We'll delete that <strong>ng-click</strong>. ui-sref. We'll navigate to <strong>eggly.categories</strong>.</p>\n\n<p><span class=\"filename\">categories.tmpl.html</span>  </p>\n\n<pre><code class=\"language-php\">&lt;h1 ui-sref=\"eggly.categories\"&gt;Eggly&lt;/h1&gt;  \n&lt;ul class=\"category-list\"&gt;  \n  &lt;li ng-repeat=\"category in categoriesListController.categories\" ng-class=\"{'active': isCurrentCategory(category)}\"&gt;\n    &lt;a ui-sref=\"eggly.categories.bookmarks({category:category.name})\" ng-click=\"setCurrentCategory(category)\"&gt;{{category.name}}&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;  \n</code></pre>\n\n<hr />\n\n<h6 id=\"testthecode\">Test the code</h6>\n\n<p>I believe I've covered everything. Let's hop into the browser, give this a spin, and see if this is working. We'll select Development, Design. You can see now we're filtering on the current category.</p>\n\n<p><img src=\"/content/images/2015/04/filtering_on_current_category.png\" alt=\"filtering on current category\" /></p>\n\n<p>I can <strong>click the logo</strong>, and it goes back to the base category state. </p>\n\n<p><img src=\"/content/images/2015/04/clicking_on_logo.png\" alt=\"clicking on logo\" /></p>\n\n<p>From here, if I click \"<strong>Edit</strong>\", then, you can see it's navigating to the edit state.</p>\n\n<p><img src=\"/content/images/2015/04/click_edit.png\" alt=\"clicking on edit\" /></p>\n\n<p>If I click \"<strong>Create</strong>\", then, you can see it's navigating to the create form.</p>\n\n<p><img src=\"/content/images/2015/04/click_on_create.png\" alt=\"click on create\" /></p>\n\n<hr />\n\n<h6 id=\"review\">Review</h6>\n\n<p>We have covered quite a bit of material in this lesson, but the main thing that I'd like to just quickly go over, that we did, is we created some methods on the <strong>CategoriesModel</strong> to expose the <strong>current category</strong> that we are on.</p>\n\n<p>Then we created <strong>two new routes</strong>, one to <strong>edit</strong> a current bookmark and one to <strong>create</strong> a new bookmark.</p>\n\n<hr />\n\n<h6 id=\"whatsnext\">What's next</h6>\n\n<p>We will continue to finalize the functionality in the Eggly application.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/angularjs-architecture-control-your-promises-with-q\" style=\"width: 50%;\">Promises with $q</a><a class=\"next-article\" href=\"/angularjs-architecture-create-bookmark\" style=\"float: right;width: 50%;text-align: right;\">Create Bookmark</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1427940835901,"created_by":1,"updated_at":1427993315672,"updated_by":1,"published_at":1427940870018,"published_by":1},{"id":52,"uuid":"255243e7-32a8-4838-984a-435293f547a8","title":"AngularJS Architecture: Create Bookmark","slug":"angularjs-architecture-create-bookmark","markdown":"> In this lesson, we will complete the functionality to create a **bookmark**.\n\n> We start by adding a **createBookmark** method on the **BookmarksModel** and then making it available to the **CreateBookmarksController**. From there, we flesh out the **CreateBookmarksController** and refactor the template to use the new **\"controller as\" syntax**.\n\n![Eggly Series 2 Banner](/content/images/2015/03/eggly-series-2-banner.png)\n\nWe are going to complete the **create bookmark** functionality.\n\n<span class=\"filename\">bookmarks-model.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"24-27\"><code class=\"language-javascript\">angular.module('eggly.models.bookmarks', [\n\n])\n.service('BookmarksModel', function ($http) {\n  var model = this,\n      URLS = {\n        FETCH: 'data/bookmarks.json'\n      },\n      bookmarks;\n\n  function extract(result){\n    return result.data;\n  }\n\n  function cacheBookmarks(result){\n    bookmarks = extract(result);\n    return bookmarks;\n  }\n\n  model.getBookmarks = function () {\n    return $http.get(URLS.FETCH).then(cacheBookmarks);\n  };\n\n  model.createBookmark = function(bookmark){\n    bookmark.id = _.size(bookmarks); // Not good for production\n    bookmarks.push(bookmark);\n  }\n})\n;</code></pre>\n\n**[24]** Create a method on the **bookmarks model** to actually add a **bookmark** to the **bookmarks collection**. Will accept a bookmark object.\n\n**[25]** From here we are going to create a unique ID based on the length of the bookmarks collection. This is will not work in production and is only to simulate a persistent backend server in memory. The completed app will cause unexpected behavior.\n\n**[26]** We are going to push the new bookmarks object into the bookmark colleciton.\n\n---\n\n###### Add to the bookmark-create controller ######\n\n<span class=\"filename\">bookmark-create.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"14,15,17,18,23,27-29,31-33,36-41,44-45,47\"><code class=\"language-javascript\">angular.module('categories.bookmarks.create', [\n\n])\n.config(function($stateProvider){\n  $stateProvider\n    .state('eggly.categories.bookmarks.create', {\n      url: '/bookmarks/create',\n      // target the un-named 'ui-view' in PARENT states template\n      templateUrl: 'app/categories/bookmarks/create/bookmark-create.tmpl.html',\n      controller: 'CreateBookmarkController as createBookmarkController'\n    })\n  ;\n})\n.controller('CreateBookmarkController', function($state, $stateParams, BookmarksModel){\n  var createBookmarkController = this;\n\n  /**\n   * Navigate back to the bookmarkstate when\n   * completing or canceling creating a bookmark\n   */\n  function returnToBookmarks(){\n    $state.go('eggly.categories.bookmarks', {\n      category: $stateParams.category\n    });\n  }\n\n  function cancelCreating(){\n    returnToBookmarks();\n  }\n\n  function createBookmark(){\n    BookmarksModel.createBookmark(createBookmarkController.newBookmark);\n    returnToBookmarks();\n  }\n\n  function resetForm(){\n    createBookmarkController.newBookmark = {\n      title: '',\n      url: '',\n      category: $stateParams.category\n    };\n  }\n\n  createBookmarkController.cancelCreating = cancelCreating;\n  createBookmarkController.createBookmark = createBookmark;\n\n  resetForm();\n})\n;</code></pre>\n\n**[14]** Inject the services we are going to need: **$state, $stateParams, BookmarksModel**\n\n**[15]** Start out controller with a top-level reference to **this**.\n\n**[17]** Create method **returnToBookmarks** to navigate back to **bookmarks** state in case we **cancel creating a bookmark** or **completed creating a bookmark**.\n\n**[18]** We need to go back with **$state.go('eggly.categories.bookmarks')**\n\n**[23]** We are going to pass in a **category** parameter using **$stateParams.category**\n\n**[27-29]** Let's create a more descriptive method called **cancelCreating** that all it will do is **returnToBookmarks**\n\n**[31]** Add a method called **createBookmark** that is going to accept a **bookmark** object.\n\n**[32]** Delegating the operation to the **BookmarkModel.createBookmark(bookmark)**\n\n**[33]** Then return to the bookmark state with **returnToBookmarks()**\n\n**[36]** Finally, add a method called **resetForm()** that pre-initializes the object we are binding the **create form** to and will allow us to reset it if we were to stay on the page or just to ensure that it is set to the exact state that we want everytime we load the page.\n\n**[37-41]** Add a property to **createBookmarkController** called **newBookmark** that is just a plain javascript object with a title property, url property, and a category property set to $stateParams.category\n\n**[44-45]** We have methods here that we've defined, but are not available to be called from the **view**. We need to actually attach those to the instance of the **createBookmarkController** with:\n\n- **createBookmarkController.cancel = cancelCreating();**\n- **createBookmarkController.createBookmark = createBookmark();**\n\nNice way of determining what is private and what is public.\n\n**[47]** When this loads we will just call **resetForm()**\n\n---\n\n###### Update bookmark-create view with 'control as' syntax ######\n\nNow that we have completed the create bookmark controller need to update the view to use the new **'control as' syntax**.\n\n> When you use **'control as' syntax** you have to reference things **explicitly**.\n\n<span class=\"filename\">bookmark-create.tmpl.html</span>\n```php\n<form class=\"create-form\" role=\"form\" ng-submit=\"createBookmarkController.createBookmark()\" novalidate>\n  <div class=\"form-group\">\n    <label for=\"newBookmarkTitle\">Bookmark Title</label>\n    <input type=\"text\" class=\"form-control\" id=\"newBookmarkTitle\" ng-model=\"createBookmarkController.newBookmark.title\" placeholder=\"Enter title\">\n  </div>\n  <div class=\"form-group\">\n    <label for=\"newBookmarkURL\">Bookmark URL</label>\n    <input type=\"text\" class=\"form-control\" id=\"newBookmarkURL\" ng-model=\"createBookmarkController.newBookmark.url\" placeholder=\"Enter URL\">\n  </div>\n  <button type=\"submit\" class=\"btn btn-info btn-lg\">Create</button>\n  <button type=\"button\" class=\"btn btn-default btn-lg pull-right\" ng-click=\"createBookmarkController.cancelCreating()\">Cancel</button>\n</form>\n```\n\n1. **createBookmark(newBookmark)** becomes **createBookmarkController.createBookmark(newBookmark)**\n- references to newBookmark need to be preceded by **createBookmarkController**\n\t- **createBookmarkController.newBookmark.title**\n    - **createBookmarkController.newBookmark.url**\n- **cancelCreating()** becomes **createBookmarkController.cancelCreating()**\n\n---\n\n###### Test code in browser ######\n\n![create and cancel](/content/images/2015/04/create_and_cancel.png)\n\n---\n\n###### What's next ######\n\nAdd the ability to edit an existing bookmark.\n\n---\n\n<a class=\"prev-article\" href=\"/angularjs-architecture-edit-and-create-bookmark-states\" style=\"width: 50%;\">Edit and Create Bookmark States</a><a class=\"next-article\" href=\"/angularjs-architecture-edit-bookmark-2\" style=\"float: right;width: 50%;text-align: right;\">Edit Bookmark</a>","html":"<blockquote>\n  <p>In this lesson, we will complete the functionality to create a <strong>bookmark</strong>.</p>\n  \n  <p>We start by adding a <strong>createBookmark</strong> method on the <strong>BookmarksModel</strong> and then making it available to the <strong>CreateBookmarksController</strong>. From there, we flesh out the <strong>CreateBookmarksController</strong> and refactor the template to use the new <strong>\"controller as\" syntax</strong>.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/eggly-series-2-banner.png\" alt=\"Eggly Series 2 Banner\" /></p>\n\n<p>We are going to complete the <strong>create bookmark</strong> functionality.</p>\n\n<p><span class=\"filename\">bookmarks-model.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"24-27\"><code class=\"language-javascript\">angular.module('eggly.models.bookmarks', [\n\n])\n.service('BookmarksModel', function ($http) {\n  var model = this,\n      URLS = {\n        FETCH: 'data/bookmarks.json'\n      },\n      bookmarks;\n\n  function extract(result){\n    return result.data;\n  }\n\n  function cacheBookmarks(result){\n    bookmarks = extract(result);\n    return bookmarks;\n  }\n\n  model.getBookmarks = function () {\n    return $http.get(URLS.FETCH).then(cacheBookmarks);\n  };\n\n  model.createBookmark = function(bookmark){\n    bookmark.id = _.size(bookmarks); // Not good for production\n    bookmarks.push(bookmark);\n  }\n})\n;</code></pre>\n\n<p><strong>[24]</strong> Create a method on the <strong>bookmarks model</strong> to actually add a <strong>bookmark</strong> to the <strong>bookmarks collection</strong>. Will accept a bookmark object.</p>\n\n<p><strong>[25]</strong> From here we are going to create a unique ID based on the length of the bookmarks collection. This is will not work in production and is only to simulate a persistent backend server in memory. The completed app will cause unexpected behavior.</p>\n\n<p><strong>[26]</strong> We are going to push the new bookmarks object into the bookmark colleciton.</p>\n\n<hr />\n\n<h6 id=\"addtothebookmarkcreatecontroller\">Add to the bookmark-create controller</h6>\n\n<p><span class=\"filename\">bookmark-create.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"14,15,17,18,23,27-29,31-33,36-41,44-45,47\"><code class=\"language-javascript\">angular.module('categories.bookmarks.create', [\n\n])\n.config(function($stateProvider){\n  $stateProvider\n    .state('eggly.categories.bookmarks.create', {\n      url: '/bookmarks/create',\n      // target the un-named 'ui-view' in PARENT states template\n      templateUrl: 'app/categories/bookmarks/create/bookmark-create.tmpl.html',\n      controller: 'CreateBookmarkController as createBookmarkController'\n    })\n  ;\n})\n.controller('CreateBookmarkController', function($state, $stateParams, BookmarksModel){\n  var createBookmarkController = this;\n\n  /**\n   * Navigate back to the bookmarkstate when\n   * completing or canceling creating a bookmark\n   */\n  function returnToBookmarks(){\n    $state.go('eggly.categories.bookmarks', {\n      category: $stateParams.category\n    });\n  }\n\n  function cancelCreating(){\n    returnToBookmarks();\n  }\n\n  function createBookmark(){\n    BookmarksModel.createBookmark(createBookmarkController.newBookmark);\n    returnToBookmarks();\n  }\n\n  function resetForm(){\n    createBookmarkController.newBookmark = {\n      title: '',\n      url: '',\n      category: $stateParams.category\n    };\n  }\n\n  createBookmarkController.cancelCreating = cancelCreating;\n  createBookmarkController.createBookmark = createBookmark;\n\n  resetForm();\n})\n;</code></pre>\n\n<p><strong>[14]</strong> Inject the services we are going to need: <strong>$state, $stateParams, BookmarksModel</strong></p>\n\n<p><strong>[15]</strong> Start out controller with a top-level reference to <strong>this</strong>.</p>\n\n<p><strong>[17]</strong> Create method <strong>returnToBookmarks</strong> to navigate back to <strong>bookmarks</strong> state in case we <strong>cancel creating a bookmark</strong> or <strong>completed creating a bookmark</strong>.</p>\n\n<p><strong>[18]</strong> We need to go back with <strong>$state.go('eggly.categories.bookmarks')</strong></p>\n\n<p><strong>[23]</strong> We are going to pass in a <strong>category</strong> parameter using <strong>$stateParams.category</strong></p>\n\n<p><strong>[27-29]</strong> Let's create a more descriptive method called <strong>cancelCreating</strong> that all it will do is <strong>returnToBookmarks</strong></p>\n\n<p><strong>[31]</strong> Add a method called <strong>createBookmark</strong> that is going to accept a <strong>bookmark</strong> object.</p>\n\n<p><strong>[32]</strong> Delegating the operation to the <strong>BookmarkModel.createBookmark(bookmark)</strong></p>\n\n<p><strong>[33]</strong> Then return to the bookmark state with <strong>returnToBookmarks()</strong></p>\n\n<p><strong>[36]</strong> Finally, add a method called <strong>resetForm()</strong> that pre-initializes the object we are binding the <strong>create form</strong> to and will allow us to reset it if we were to stay on the page or just to ensure that it is set to the exact state that we want everytime we load the page.</p>\n\n<p><strong>[37-41]</strong> Add a property to <strong>createBookmarkController</strong> called <strong>newBookmark</strong> that is just a plain javascript object with a title property, url property, and a category property set to $stateParams.category</p>\n\n<p><strong>[44-45]</strong> We have methods here that we've defined, but are not available to be called from the <strong>view</strong>. We need to actually attach those to the instance of the <strong>createBookmarkController</strong> with:</p>\n\n<ul>\n<li><strong>createBookmarkController.cancel = cancelCreating();</strong></li>\n<li><strong>createBookmarkController.createBookmark = createBookmark();</strong></li>\n</ul>\n\n<p>Nice way of determining what is private and what is public.</p>\n\n<p><strong>[47]</strong> When this loads we will just call <strong>resetForm()</strong></p>\n\n<hr />\n\n<h6 id=\"updatebookmarkcreateviewwithcontrolassyntax\">Update bookmark-create view with 'control as' syntax</h6>\n\n<p>Now that we have completed the create bookmark controller need to update the view to use the new <strong>'control as' syntax</strong>.</p>\n\n<blockquote>\n  <p>When you use <strong>'control as' syntax</strong> you have to reference things <strong>explicitly</strong>.</p>\n</blockquote>\n\n<p><span class=\"filename\">bookmark-create.tmpl.html</span>  </p>\n\n<pre><code class=\"language-php\">&lt;form class=\"create-form\" role=\"form\" ng-submit=\"createBookmarkController.createBookmark()\" novalidate&gt;  \n  &lt;div class=\"form-group\"&gt;\n    &lt;label for=\"newBookmarkTitle\"&gt;Bookmark Title&lt;/label&gt;\n    &lt;input type=\"text\" class=\"form-control\" id=\"newBookmarkTitle\" ng-model=\"createBookmarkController.newBookmark.title\" placeholder=\"Enter title\"&gt;\n  &lt;/div&gt;\n  &lt;div class=\"form-group\"&gt;\n    &lt;label for=\"newBookmarkURL\"&gt;Bookmark URL&lt;/label&gt;\n    &lt;input type=\"text\" class=\"form-control\" id=\"newBookmarkURL\" ng-model=\"createBookmarkController.newBookmark.url\" placeholder=\"Enter URL\"&gt;\n  &lt;/div&gt;\n  &lt;button type=\"submit\" class=\"btn btn-info btn-lg\"&gt;Create&lt;/button&gt;\n  &lt;button type=\"button\" class=\"btn btn-default btn-lg pull-right\" ng-click=\"createBookmarkController.cancelCreating()\"&gt;Cancel&lt;/button&gt;\n&lt;/form&gt;  \n</code></pre>\n\n<ol>\n<li><strong>createBookmark(newBookmark)</strong> becomes <strong>createBookmarkController.createBookmark(newBookmark)</strong>  </li>\n<li>references to newBookmark need to be preceded by <strong>createBookmarkController</strong>\n<ul><li><strong>createBookmarkController.newBookmark.title</strong></li>\n<li><strong>createBookmarkController.newBookmark.url</strong></li></ul></li>\n<li><strong>cancelCreating()</strong> becomes <strong>createBookmarkController.cancelCreating()</strong></li>\n</ol>\n\n<hr />\n\n<h6 id=\"testcodeinbrowser\">Test code in browser</h6>\n\n<p><img src=\"/content/images/2015/04/create_and_cancel.png\" alt=\"create and cancel\" /></p>\n\n<hr />\n\n<h6 id=\"whatsnext\">What's next</h6>\n\n<p>Add the ability to edit an existing bookmark.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/angularjs-architecture-edit-and-create-bookmark-states\" style=\"width: 50%;\">Edit and Create Bookmark States</a><a class=\"next-article\" href=\"/angularjs-architecture-edit-bookmark-2\" style=\"float: right;width: 50%;text-align: right;\">Edit Bookmark</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1427940892384,"created_by":1,"updated_at":1428009545631,"updated_by":1,"published_at":1427940923960,"published_by":1},{"id":53,"uuid":"8e3fa820-5351-4590-99f7-dd1955df4d1c","title":"AngularJS Architecture: Edit Bookmark","slug":"angularjs-architecture-edit-bookmark-2","markdown":"> In this lesson, we are going to complete the functionality for **editing** a bookmark. We will start by augmenting the **BookmarksModel** and then updating the **controller** and **view** to utilize the new functionality.\n\n> We will also update the **BookmarksModel.getBookmarks** to cache the bookmarks so that we are not overwriting our updates on every call.\n\n![Eggly Series 2 Banner](/content/images/2015/03/eggly-series-2-banner.png)\n\nIn this lesson, we are going to complete the functionality for **editing** a bookmark in Eggly.\n\nWe're going to start with the **BookmarksModel**, add in the business logic, then make that available to the bookmark edit **controller**, and then update the **template**.\n\n<span class=\"filename\">bookmarks-model.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"4,20-24,26-38,40-52,54-57,59-62,64\"><code class=\"language-javascript\">angular.module('eggly.models.bookmarks', [\n\n])\n.service('BookmarksModel', function ($http, $q) {\n  var model = this,\n      URLS = {\n        FETCH: 'data/bookmarks.json'\n      },\n      bookmarks;\n\n  function extract(result){\n    return result.data;\n  }\n\n  function cacheBookmarks(result){\n    bookmarks = extract(result);\n    return bookmarks;\n  }\n\n  function findBookmark(bookmarkID){\n    return _.find(bookmarks, function(bookmark){\n      return bookmark.id === parseInt(bookmarkID, 10);\n    });\n  }\n\n  model.getBookmarkByID = function(bookmarkID){\n    var deferred = $q.defer();\n\n    if(bookmarks){\n      deferred.resolve(findBookmark(bookmarkID));\n    } else {\n      model.getBookmarks().then(function(){\n        deferred.resolve(findBookmark(bookmarkID));\n      });\n    }\n\n    return deferred.promise;\n  };\n\n  model.getBookmarks = function () {\n    var deferred = $q.defer();\n\n    if(bookmarks){\n      deferred.resolve(bookmarks);\n    } else {\n      $http.get(URLS.FETCH).then(function(bookmarks){\n        deferred.resolve(cacheBookmarks(bookmarks));\n      });\n    }\n\n    return deferred.promise;\n  };\n\n  model.createBookmark = function(bookmark){\n    bookmark.id = bookmarks.length; // Not good for production\n    bookmarks.push(bookmark);\n  };\n\n  model.updateBookmark = function(bookmark){\n    var index = _.findIndex(bookmarks, function(b){ // Not good for production\n      return b.id == bookmark.id;\n    });\n\n    bookmarks[index] = bookmark;\n  };\n})\n;</code></pre>\n\n**[4]** We'll inject the **$q** service into the **BookmarksModel**.\n\n**[20]** The first thing that we're going to do is create a 'convenience function' called \"**findBookmark**\" that accepts a **bookmarkID**.\n\n**[21]** We are going to return the results of a lodash's **find** method call.\n\n**[22]** We are going to compare the **bookmark.id** in the iterator to the **bookmarkID** that we're passing in as a parameter. If it matches, then it will return that **bookmark** object.\n\n**[26-38]** Then what we're going to do is make this available by creating a method called \"**getBookmarkByID**\" that takes a **bookmarkID** parameter and then returns the appropriate **bookmark** as it is called from the controller.\n\n**[27,37]** Before we get started, we're actually going to **resolve** this with a **promise**.\n\n**[27]** From here, we're going to create a **deferred** object.\n\n**[37]** I like to go ahead and just finish the **return** statement right when I start it, because the pattern's always the same, by returning the **deferred.promise** object. This then frees me up to just figure out how I'm going to resolve it in between these two lines.\n\n**[29]** From here, we're going to say, \"**If bookmarks exist**\", \n\n**[30]** Then this is fairly easy. We just have to call **deferred.resolve findBookmark** and then pass in the **bookmarkID**.\n\n**[31]** If the **bookmarks** do not exist, then we need to make that method call to get the **bookmarks** and then find the appropriate **bookmark** from the collection that is **returned**. \n\n**[32]** From here, we will call **model.getBookmarks**.\n\n**[33]** Then, in the callback method, we are going to **deferred.resolve**. Then we will just resolve it like we did above. This is how we can get the **bookmark by ID** and then **make sure that we always have a bookmarks collection**.\n\n**[40-52]** Let's hop into the **getBookmarks** method. Every time we call **getBookmarks**, we're calling the **$http** service and refreshing the **bookmarks** collection. Now that we're editing a specific bookmark, we **do not want to overwrite those changes**. Let's go ahead and replace this with a call that allows us to cache this.\n\n**[44]** If **bookmarks** exists, we're just going to resolve it with the existing **bookmarks**.\n\n**[46]** If not, then we're just going to make the **$http.get** call.\n\n**[47]** From here, we'll take the **result/bookmarks**. We will resolve it with a **cached version of the bookmarks**.\n\n**[54]** We have the **createBookmark** method in place.\n\n**[59]** Let's go ahead and create an **updateBookmark** method. \n\n**[60-62]** What we're going to do here is we're just going to **get the index of the bookmark** that we're dealing with. Again, we're simulating a back end in memory. This is purely for example purposes. This is actually taking a single **bookmark** argument.\n\n**[64]** Now that we have the index, we can just say, **\"At this index within bookmarks, go ahead and replace it with this new object\"**. This is just for example purposes, but it will allow us to edit the bookmark object in memory.\n\nNow that we have completed the **BookmarksModel** by introducing the **findBookmark** method, **getBookmarkById**. We've updated **getBookmarks** to actually use a **cached version of the bookmarks**, and then we've introduced this **updateBookmark** method.\n\n---\n\n###### Refactor bookmark-edit controller ######\n\nLet's hop into the **bookmark-edit** controller and build this out before we update the **template**.\n\n<span class=\"filename\">bookmark-edit.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"13,14,16-20,22-24,26-30,32-41,43,44\"><code class=\"language-javascript\">angular.module('categories.bookmarks.edit', [\n\n])\n.config(function($stateProvider){\n  $stateProvider\n    .state('eggly.categories.bookmarks.edit', {\n      url: '/bookmarks/:bookmarkID/edit',\n      templateUrl: 'app/categories/bookmarks/edit/bookmark-edit.tmpl.html',\n      controller: 'EditBookmarkController as editBookmarkController'\n    })\n  ;\n})\n.controller('EditBookmarkController', function($state, $stateParams, BookmarksModel){\n  var editBookmarkController = this;\n\n  function returnToBookmarks(){\n    $state.go('eggly.categories.bookmarks', {\n      category: $stateParams.category\n    });\n  }\n\n  function cancelEditing(){\n    returnToBookmarks();\n  }\n\n  function updateBookmark(bookmark){\n    editBookmarkController.bookmark = angular.copy(editBookmarkController.editedBookmark);\n    BookmarksModel.updateBookmark(editBookmarkController.bookmark);\n    returnToBookmarks();\n  }\n\n  BookmarksModel.getBookmarkByID($stateParams.bookmarkID)\n    .then(function(bookmark){\n      if(bookmark) {\n        editBookmarkController.bookmark = bookmark;\n        editBookmarkController.editedBookmark = angular.copy(editBookmarkController.bookmark);\n      } else {\n        returnToBookmarks();\n      }\n    })\n  ;\n\n  editBookmarkController.cancelEditing = cancelEditing;\n  editBookmarkController.updateBookmark = updateBookmark;\n\n})\n;</code></pre>\n\n**[13]** The first thing we're going to need is to inject some services. We'll go with the **$state**, **$stateParams**, and the **BookmarksModel**.\n\n**[14]** Then we'll create a top-level reference to this just as a force of habit.\n\n> Then let us start to build out the methods that we need for this controller. \n\n**[16]** The first one that we need is a method to **returnToBookmarks**. This is exactly like we saw in the create **bookmark** controller.\n\n**[17]** We are going to go to **eggly.categories.bookmarks**.\n\n**[18]** We are going to pass in a **category** param.\n\n**[22-24]** From here, let's create a method to actually call the **returnToBookmarks** that is a little more descriptive, called \"**cancelEditing**.\" All this does is calls **returnToBookmarks**. This just reads a little better in the view.\n\n> Now let us get down to the star of the show, the **updateBookmark** method. Now it's time for us to actually create a method to update the bookmark, but before I do that, I want to actually build out the method that we're calling to actually get the **bookmark that we're editing**.\n\n**[32]** We'll go \"**BookmarksModel.getBookmarkByID**\". We're going to call **stateParams** and pass in the **bookmarkID**.\n\n**[33]** When this resolves, we're going to take the **bookmark** that it is returning.\n\n**[37-39]** If the **bookmark does not exist**, we'll just go ahead and **returnToBookmarks**. There's no point in going any further.\n\n**[34]** If the **bookmark does exist**\n\n**[35]** We are going to **create a reference to that and call this bookmark**.\n\n**[36]** What I'm also going to do is I like to **create a copy** of that that we're actually going to be editing. If you **edit an object directly in memory, there's no way to back out of it**. By creating a copy, such as a property called \"**editedBookmark**\", we can make all the changes we want to **editedBookmark**. When we're done, we just **copy it back to the bookmark reference**. This is a **way to make edits and have it not be so destructive**.\n\n**[26]** Now that we've actually gotten the bookmark and we've created this **bookmark** reference and this **editedBookmark**, then we can create a method to actually update the bookmark. We're going to create a method called \"**updateBookmark**\".\n\n**[27]** From here, we are going to copy the **editedBookmark** back to the **bookmark**. Using **angular.copy **again, we're going to **create a copy** of that and assign it to **bookmark**. \n\n**[28]** Then we're going to call **BookmarksModel.updateBookmark** and pass in the **editedBookmark.bookmark**.\n\n**[29]** From there, we are ready to **returnToBookmarks**.\n\n**[43,44]** Now we just need to make these methods available on our **controller**. We will create a method for **cancelEditing** and do the same for **updateBookmark**.\n\n> Now we have not only built out the model, but we have built out the controller.\n\n---\n\n###### Update the bookmark-edit view with new controller and model functionality ######\n\nLet's go ahead and update the template appropriately.\n\n<span class=\"filename\">bookmark-edit.tmpl.html</span>\n```php\n<h4>Editing {{editBookmarkController.bookmark.title}}</h4>\n\n<form class=\"edit-form\" role=\"form\" ng-submit=\"editBookmarkController.updateBookmark(editBookmarkController.editedBookmark)\">\n  <div class=\"form-group\">\n    <label>Bookmark Title</label>\n    <input type=\"text\" class=\"form-control\" placeholder=\"Enter title\" ng-model=\"editBookmarkController.editedBookmark.title\">\n  </div>\n  <div class=\"form-group\">\n    <label>Bookmark URL</label>\n    <input type=\"text\" class=\"form-control\" placeholder=\"Enter URL\" ng-model=\"editBookmarkController.editedBookmark.url\">\n  </div>\n  <button type=\"submit\" class=\"btn btn-info btn-lg\">Save</button>\n  <button type=\"button\" class=\"btn btn-default btn-lg pull-right\" ng-click=\"editBookmarkController.cancelEditing();\">Cancel</button>\n</form>\n```\n\nFrom here, we're displaying the **editedBookmark**, but let's go ahead and just show the bookmark so we can see which one we are editing.\n\n- Change **editedBookmark.title** to **editBookmarkController.bookmark.title**\n\nWe'll update this to point to the controller, appropriately, because we're using \"**controller as**\" syntax.\n\n- Change **updateBookmark(editedBookmark)** to **editBookmarkController.updateBookmark(editBookmarkController.editedBookmark)**\n\nThen you can see that we're editing the **editedBookmark** by binding to it in **ng-model**, here.\n\n- Change **editedBookmark.title** to **editBookmarkController.editedBookmark.title**\n- Chagne **editedBookmark.url** to **editBookmarkController.editedBookmark.url**\n\n---\n\n###### Update bookmarks template/view ######\n\nIn the **bookmarks** template, I had this **ng-class** that sets this **active** class if it is the right bookmark.\n\nThis is no longer necessary because we are actually going into a specific state.\n\n**Remove/delte this ng-class directive.**\n\nIt's pretty obvious what bookmark we're actually editing.\n\n<span class=\"filename\">bookmarks.tmpl.html</span>\n```php\n<h1>{{bookmarksListController.getCurrentCategoryName()}}</h1>\n<ul class=\"bookmarks-list\">\n  <li ng-repeat=\"bookmark in bookmarksListController.bookmarks | filter: {category: bookmarksListController.getCurrentCategoryName()}\">\n    <a href=\"#\" ui-sref=\"eggly.categories.bookmarks.edit({bookmarkID:bookmark.id})\"><i class=\"fa fa-pencil\"></i></a>\n    <a href=\"{{bookmark.url}}\" target=\"_blank\">{{bookmark.title}}</a>\n    <a href=\"#\"><i class=\"fa fa-times\"></i></a>\n  </li>\n</ul>\n\n<hr>\n\n<!-- CREATING -->\n<ui-view ng-if=\"bookmarksListController.getCurrentCategory()\">\n  <a href=\"#\" ui-sref=\"eggly.categories.bookmarks.create\"><i class=\"fa fa-plus\"></i> Create Bookmark</a>\n</ui-view>\n```\n\n---\n\n###### Test the code ######\n\nLet me hop into the browser. Let's see this in action. I'll go to edit this.\n\n![edit this](/content/images/2015/04/editing_bookmark.png)\n\n> Material Up on a Tuesday.\n\nWe'll click \"**Save**\". You can see here that it saved it.\n\nYou can see it is **persisting** in the **bookmarks** collection.\n\nThis covers the **edit bookmark functionality**.\n\n---\n\n###### What's next ######\n\nWe will learn how to add in the delete bookmark functionality.\n\n---\n\n<a class=\"prev-article\" href=\"/angularjs-architecture-create-bookmark\" style=\"width: 50%;\">Create Bookmark</a><a class=\"next-article\" href=\"/angularjs-architecture-delete-bookmark\" style=\"float: right;width: 50%;text-align: right;\">Delete Bookmark</a>","html":"<blockquote>\n  <p>In this lesson, we are going to complete the functionality for <strong>editing</strong> a bookmark. We will start by augmenting the <strong>BookmarksModel</strong> and then updating the <strong>controller</strong> and <strong>view</strong> to utilize the new functionality.</p>\n  \n  <p>We will also update the <strong>BookmarksModel.getBookmarks</strong> to cache the bookmarks so that we are not overwriting our updates on every call.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/eggly-series-2-banner.png\" alt=\"Eggly Series 2 Banner\" /></p>\n\n<p>In this lesson, we are going to complete the functionality for <strong>editing</strong> a bookmark in Eggly.</p>\n\n<p>We're going to start with the <strong>BookmarksModel</strong>, add in the business logic, then make that available to the bookmark edit <strong>controller</strong>, and then update the <strong>template</strong>.</p>\n\n<p><span class=\"filename\">bookmarks-model.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"4,20-24,26-38,40-52,54-57,59-62,64\"><code class=\"language-javascript\">angular.module('eggly.models.bookmarks', [\n\n])\n.service('BookmarksModel', function ($http, $q) {\n  var model = this,\n      URLS = {\n        FETCH: 'data/bookmarks.json'\n      },\n      bookmarks;\n\n  function extract(result){\n    return result.data;\n  }\n\n  function cacheBookmarks(result){\n    bookmarks = extract(result);\n    return bookmarks;\n  }\n\n  function findBookmark(bookmarkID){\n    return _.find(bookmarks, function(bookmark){\n      return bookmark.id <mark>= parseInt(bookmarkID, 10);\n    });\n  }\n\n  model.getBookmarkByID = function(bookmarkID){\n    var deferred = $q.defer();\n\n    if(bookmarks){\n      deferred.resolve(findBookmark(bookmarkID));\n    } else {\n      model.getBookmarks().then(function(){\n        deferred.resolve(findBookmark(bookmarkID));\n      });\n    }\n\n    return deferred.promise;\n  };\n\n  model.getBookmarks = function () {\n    var deferred = $q.defer();\n\n    if(bookmarks){\n      deferred.resolve(bookmarks);\n    } else {\n      $http.get(URLS.FETCH).then(function(bookmarks){\n        deferred.resolve(cacheBookmarks(bookmarks));\n      });\n    }\n\n    return deferred.promise;\n  };\n\n  model.createBookmark = function(bookmark){\n    bookmark.id = bookmarks.length; // Not good for production\n    bookmarks.push(bookmark);\n  };\n\n  model.updateBookmark = function(bookmark){\n    var index = _.findIndex(bookmarks, function(b){ // Not good for production\n      return b.id </mark> bookmark.id;\n    });\n\n    bookmarks[index] = bookmark;\n  };\n})\n;</code></pre>\n\n<p><strong>[4]</strong> We'll inject the <strong>$q</strong> service into the <strong>BookmarksModel</strong>.</p>\n\n<p><strong>[20]</strong> The first thing that we're going to do is create a 'convenience function' called \"<strong>findBookmark</strong>\" that accepts a <strong>bookmarkID</strong>.</p>\n\n<p><strong>[21]</strong> We are going to return the results of a lodash's <strong>find</strong> method call.</p>\n\n<p><strong>[22]</strong> We are going to compare the <strong>bookmark.id</strong> in the iterator to the <strong>bookmarkID</strong> that we're passing in as a parameter. If it matches, then it will return that <strong>bookmark</strong> object.</p>\n\n<p><strong>[26-38]</strong> Then what we're going to do is make this available by creating a method called \"<strong>getBookmarkByID</strong>\" that takes a <strong>bookmarkID</strong> parameter and then returns the appropriate <strong>bookmark</strong> as it is called from the controller.</p>\n\n<p><strong>[27,37]</strong> Before we get started, we're actually going to <strong>resolve</strong> this with a <strong>promise</strong>.</p>\n\n<p><strong>[27]</strong> From here, we're going to create a <strong>deferred</strong> object.</p>\n\n<p><strong>[37]</strong> I like to go ahead and just finish the <strong>return</strong> statement right when I start it, because the pattern's always the same, by returning the <strong>deferred.promise</strong> object. This then frees me up to just figure out how I'm going to resolve it in between these two lines.</p>\n\n<p><strong>[29]</strong> From here, we're going to say, \"<strong>If bookmarks exist</strong>\", </p>\n\n<p><strong>[30]</strong> Then this is fairly easy. We just have to call <strong>deferred.resolve findBookmark</strong> and then pass in the <strong>bookmarkID</strong>.</p>\n\n<p><strong>[31]</strong> If the <strong>bookmarks</strong> do not exist, then we need to make that method call to get the <strong>bookmarks</strong> and then find the appropriate <strong>bookmark</strong> from the collection that is <strong>returned</strong>. </p>\n\n<p><strong>[32]</strong> From here, we will call <strong>model.getBookmarks</strong>.</p>\n\n<p><strong>[33]</strong> Then, in the callback method, we are going to <strong>deferred.resolve</strong>. Then we will just resolve it like we did above. This is how we can get the <strong>bookmark by ID</strong> and then <strong>make sure that we always have a bookmarks collection</strong>.</p>\n\n<p><strong>[40-52]</strong> Let's hop into the <strong>getBookmarks</strong> method. Every time we call <strong>getBookmarks</strong>, we're calling the <strong>$http</strong> service and refreshing the <strong>bookmarks</strong> collection. Now that we're editing a specific bookmark, we <strong>do not want to overwrite those changes</strong>. Let's go ahead and replace this with a call that allows us to cache this.</p>\n\n<p><strong>[44]</strong> If <strong>bookmarks</strong> exists, we're just going to resolve it with the existing <strong>bookmarks</strong>.</p>\n\n<p><strong>[46]</strong> If not, then we're just going to make the <strong>$http.get</strong> call.</p>\n\n<p><strong>[47]</strong> From here, we'll take the <strong>result/bookmarks</strong>. We will resolve it with a <strong>cached version of the bookmarks</strong>.</p>\n\n<p><strong>[54]</strong> We have the <strong>createBookmark</strong> method in place.</p>\n\n<p><strong>[59]</strong> Let's go ahead and create an <strong>updateBookmark</strong> method. </p>\n\n<p><strong>[60-62]</strong> What we're going to do here is we're just going to <strong>get the index of the bookmark</strong> that we're dealing with. Again, we're simulating a back end in memory. This is purely for example purposes. This is actually taking a single <strong>bookmark</strong> argument.</p>\n\n<p><strong>[64]</strong> Now that we have the index, we can just say, <strong>\"At this index within bookmarks, go ahead and replace it with this new object\"</strong>. This is just for example purposes, but it will allow us to edit the bookmark object in memory.</p>\n\n<p>Now that we have completed the <strong>BookmarksModel</strong> by introducing the <strong>findBookmark</strong> method, <strong>getBookmarkById</strong>. We've updated <strong>getBookmarks</strong> to actually use a <strong>cached version of the bookmarks</strong>, and then we've introduced this <strong>updateBookmark</strong> method.</p>\n\n<hr />\n\n<h6 id=\"refactorbookmarkeditcontroller\">Refactor bookmark-edit controller</h6>\n\n<p>Let's hop into the <strong>bookmark-edit</strong> controller and build this out before we update the <strong>template</strong>.</p>\n\n<p><span class=\"filename\">bookmark-edit.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"13,14,16-20,22-24,26-30,32-41,43,44\"><code class=\"language-javascript\">angular.module('categories.bookmarks.edit', [\n\n])\n.config(function($stateProvider){\n  $stateProvider\n    .state('eggly.categories.bookmarks.edit', {\n      url: '/bookmarks/:bookmarkID/edit',\n      templateUrl: 'app/categories/bookmarks/edit/bookmark-edit.tmpl.html',\n      controller: 'EditBookmarkController as editBookmarkController'\n    })\n  ;\n})\n.controller('EditBookmarkController', function($state, $stateParams, BookmarksModel){\n  var editBookmarkController = this;\n\n  function returnToBookmarks(){\n    $state.go('eggly.categories.bookmarks', {\n      category: $stateParams.category\n    });\n  }\n\n  function cancelEditing(){\n    returnToBookmarks();\n  }\n\n  function updateBookmark(bookmark){\n    editBookmarkController.bookmark = angular.copy(editBookmarkController.editedBookmark);\n    BookmarksModel.updateBookmark(editBookmarkController.bookmark);\n    returnToBookmarks();\n  }\n\n  BookmarksModel.getBookmarkByID($stateParams.bookmarkID)\n    .then(function(bookmark){\n      if(bookmark) {\n        editBookmarkController.bookmark = bookmark;\n        editBookmarkController.editedBookmark = angular.copy(editBookmarkController.bookmark);\n      } else {\n        returnToBookmarks();\n      }\n    })\n  ;\n\n  editBookmarkController.cancelEditing = cancelEditing;\n  editBookmarkController.updateBookmark = updateBookmark;\n\n})\n;</code></pre>\n\n<p><strong>[13]</strong> The first thing we're going to need is to inject some services. We'll go with the <strong>$state</strong>, <strong>$stateParams</strong>, and the <strong>BookmarksModel</strong>.</p>\n\n<p><strong>[14]</strong> Then we'll create a top-level reference to this just as a force of habit.</p>\n\n<blockquote>\n  <p>Then let us start to build out the methods that we need for this controller. </p>\n</blockquote>\n\n<p><strong>[16]</strong> The first one that we need is a method to <strong>returnToBookmarks</strong>. This is exactly like we saw in the create <strong>bookmark</strong> controller.</p>\n\n<p><strong>[17]</strong> We are going to go to <strong>eggly.categories.bookmarks</strong>.</p>\n\n<p><strong>[18]</strong> We are going to pass in a <strong>category</strong> param.</p>\n\n<p><strong>[22-24]</strong> From here, let's create a method to actually call the <strong>returnToBookmarks</strong> that is a little more descriptive, called \"<strong>cancelEditing</strong>.\" All this does is calls <strong>returnToBookmarks</strong>. This just reads a little better in the view.</p>\n\n<blockquote>\n  <p>Now let us get down to the star of the show, the <strong>updateBookmark</strong> method. Now it's time for us to actually create a method to update the bookmark, but before I do that, I want to actually build out the method that we're calling to actually get the <strong>bookmark that we're editing</strong>.</p>\n</blockquote>\n\n<p><strong>[32]</strong> We'll go \"<strong>BookmarksModel.getBookmarkByID</strong>\". We're going to call <strong>stateParams</strong> and pass in the <strong>bookmarkID</strong>.</p>\n\n<p><strong>[33]</strong> When this resolves, we're going to take the <strong>bookmark</strong> that it is returning.</p>\n\n<p><strong>[37-39]</strong> If the <strong>bookmark does not exist</strong>, we'll just go ahead and <strong>returnToBookmarks</strong>. There's no point in going any further.</p>\n\n<p><strong>[34]</strong> If the <strong>bookmark does exist</strong></p>\n\n<p><strong>[35]</strong> We are going to <strong>create a reference to that and call this bookmark</strong>.</p>\n\n<p><strong>[36]</strong> What I'm also going to do is I like to <strong>create a copy</strong> of that that we're actually going to be editing. If you <strong>edit an object directly in memory, there's no way to back out of it</strong>. By creating a copy, such as a property called \"<strong>editedBookmark</strong>\", we can make all the changes we want to <strong>editedBookmark</strong>. When we're done, we just <strong>copy it back to the bookmark reference</strong>. This is a <strong>way to make edits and have it not be so destructive</strong>.</p>\n\n<p><strong>[26]</strong> Now that we've actually gotten the bookmark and we've created this <strong>bookmark</strong> reference and this <strong>editedBookmark</strong>, then we can create a method to actually update the bookmark. We're going to create a method called \"<strong>updateBookmark</strong>\".</p>\n\n<p><strong>[27]</strong> From here, we are going to copy the <strong>editedBookmark</strong> back to the <strong>bookmark</strong>. Using <strong>angular.copy <em>*again, we're going to *</em>create a copy</strong> of that and assign it to <strong>bookmark</strong>. </p>\n\n<p><strong>[28]</strong> Then we're going to call <strong>BookmarksModel.updateBookmark</strong> and pass in the <strong>editedBookmark.bookmark</strong>.</p>\n\n<p><strong>[29]</strong> From there, we are ready to <strong>returnToBookmarks</strong>.</p>\n\n<p><strong>[43,44]</strong> Now we just need to make these methods available on our <strong>controller</strong>. We will create a method for <strong>cancelEditing</strong> and do the same for <strong>updateBookmark</strong>.</p>\n\n<blockquote>\n  <p>Now we have not only built out the model, but we have built out the controller.</p>\n</blockquote>\n\n<hr />\n\n<h6 id=\"updatethebookmarkeditviewwithnewcontrollerandmodelfunctionality\">Update the bookmark-edit view with new controller and model functionality</h6>\n\n<p>Let's go ahead and update the template appropriately.</p>\n\n<p><span class=\"filename\">bookmark-edit.tmpl.html</span>  </p>\n\n<pre><code class=\"language-php\">&lt;h4&gt;Editing {{editBookmarkController.bookmark.title}}&lt;/h4&gt;\n\n&lt;form class=\"edit-form\" role=\"form\" ng-submit=\"editBookmarkController.updateBookmark(editBookmarkController.editedBookmark)\"&gt;  \n  &lt;div class=\"form-group\"&gt;\n    &lt;label&gt;Bookmark Title&lt;/label&gt;\n    &lt;input type=\"text\" class=\"form-control\" placeholder=\"Enter title\" ng-model=\"editBookmarkController.editedBookmark.title\"&gt;\n  &lt;/div&gt;\n  &lt;div class=\"form-group\"&gt;\n    &lt;label&gt;Bookmark URL&lt;/label&gt;\n    &lt;input type=\"text\" class=\"form-control\" placeholder=\"Enter URL\" ng-model=\"editBookmarkController.editedBookmark.url\"&gt;\n  &lt;/div&gt;\n  &lt;button type=\"submit\" class=\"btn btn-info btn-lg\"&gt;Save&lt;/button&gt;\n  &lt;button type=\"button\" class=\"btn btn-default btn-lg pull-right\" ng-click=\"editBookmarkController.cancelEditing();\"&gt;Cancel&lt;/button&gt;\n&lt;/form&gt;  \n</code></pre>\n\n<p>From here, we're displaying the <strong>editedBookmark</strong>, but let's go ahead and just show the bookmark so we can see which one we are editing.</p>\n\n<ul>\n<li>Change <strong>editedBookmark.title</strong> to <strong>editBookmarkController.bookmark.title</strong></li>\n</ul>\n\n<p>We'll update this to point to the controller, appropriately, because we're using \"<strong>controller as</strong>\" syntax.</p>\n\n<ul>\n<li>Change <strong>updateBookmark(editedBookmark)</strong> to <strong>editBookmarkController.updateBookmark(editBookmarkController.editedBookmark)</strong></li>\n</ul>\n\n<p>Then you can see that we're editing the <strong>editedBookmark</strong> by binding to it in <strong>ng-model</strong>, here.</p>\n\n<ul>\n<li>Change <strong>editedBookmark.title</strong> to <strong>editBookmarkController.editedBookmark.title</strong></li>\n<li>Chagne <strong>editedBookmark.url</strong> to <strong>editBookmarkController.editedBookmark.url</strong></li>\n</ul>\n\n<hr />\n\n<h6 id=\"updatebookmarkstemplateview\">Update bookmarks template/view</h6>\n\n<p>In the <strong>bookmarks</strong> template, I had this <strong>ng-class</strong> that sets this <strong>active</strong> class if it is the right bookmark.</p>\n\n<p>This is no longer necessary because we are actually going into a specific state.</p>\n\n<p><strong>Remove/delte this ng-class directive.</strong></p>\n\n<p>It's pretty obvious what bookmark we're actually editing.</p>\n\n<p><span class=\"filename\">bookmarks.tmpl.html</span>  </p>\n\n<pre><code class=\"language-php\">&lt;h1&gt;{{bookmarksListController.getCurrentCategoryName()}}&lt;/h1&gt;  \n&lt;ul class=\"bookmarks-list\"&gt;  \n  &lt;li ng-repeat=\"bookmark in bookmarksListController.bookmarks | filter: {category: bookmarksListController.getCurrentCategoryName()}\"&gt;\n    &lt;a href=\"#\" ui-sref=\"eggly.categories.bookmarks.edit({bookmarkID:bookmark.id})\"&gt;&lt;i class=\"fa fa-pencil\"&gt;&lt;/i&gt;&lt;/a&gt;\n    &lt;a href=\"{{bookmark.url}}\" target=\"_blank\"&gt;{{bookmark.title}}&lt;/a&gt;\n    &lt;a href=\"#\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;!-- CREATING --&gt;  \n&lt;ui-view ng-if=\"bookmarksListController.getCurrentCategory()\"&gt;  \n  &lt;a href=\"#\" ui-sref=\"eggly.categories.bookmarks.create\"&gt;&lt;i class=\"fa fa-plus\"&gt;&lt;/i&gt; Create Bookmark&lt;/a&gt;\n&lt;/ui-view&gt;  \n</code></pre>\n\n<hr />\n\n<h6 id=\"testthecode\">Test the code</h6>\n\n<p>Let me hop into the browser. Let's see this in action. I'll go to edit this.</p>\n\n<p><img src=\"/content/images/2015/04/editing_bookmark.png\" alt=\"edit this\" /></p>\n\n<blockquote>\n  <p>Material Up on a Tuesday.</p>\n</blockquote>\n\n<p>We'll click \"<strong>Save</strong>\". You can see here that it saved it.</p>\n\n<p>You can see it is <strong>persisting</strong> in the <strong>bookmarks</strong> collection.</p>\n\n<p>This covers the <strong>edit bookmark functionality</strong>.</p>\n\n<hr />\n\n<h6 id=\"whatsnext\">What's next</h6>\n\n<p>We will learn how to add in the delete bookmark functionality.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/angularjs-architecture-create-bookmark\" style=\"width: 50%;\">Create Bookmark</a><a class=\"next-article\" href=\"/angularjs-architecture-delete-bookmark\" style=\"float: right;width: 50%;text-align: right;\">Delete Bookmark</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1427940942833,"created_by":1,"updated_at":1428016445444,"updated_by":1,"published_at":1427940977136,"published_by":1},{"id":54,"uuid":"aa02caea-81e5-4571-aaf3-ad02a18b4936","title":"AngularJS Architecture: Delete Bookmark","slug":"angularjs-architecture-delete-bookmark","markdown":"> In this lesson, we are going to complete the functionality for **deleting** a bookmark.\n\n> Deleting a bookmark is significantly easier than **creating** or **editing** a bookmark with the essence being a single method in the **BookmarksModel** that we make available to the **controller** and **view**.\n\n![Eggly Series 2 Banner](/content/images/2015/03/eggly-series-2-banner.png)\n\nWe are going to complete the functionality for **deleting** a bookmark from Eggly.\n\nThis is going to be much simpler than when we were **creating** a bookmark, or specifically, **editing** a bookmark.\n\nThis is really going to come down to a **single method call** in the **bookmark's model**, then **wiring it up in the controller, and the template**.\n\n---\n\n###### Add a single method to bookmarks model ######\n\nIn the bookmark's model...\n\n<span class=\"filename\">bookmarks-model.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">angular.module('eggly.models.bookmarks', [\n\n])\n.service('BookmarksModel', function ($http, $q) {\n  var model = this,\n      URLS = {\n        FETCH: 'data/bookmarks.json'\n      },\n      bookmarks;\n\n  function extract(result){\n    return result.data;\n  }\n\n  function cacheBookmarks(result){\n    bookmarks = extract(result);\n    return bookmarks;\n  }\n\n  function findBookmark(bookmarkID){\n    return _.find(bookmarks, function(bookmark){\n      return bookmark.id === parseInt(bookmarkID, 10);\n    });\n  }\n\n  model.getBookmarkByID = function(bookmarkID){\n    var deferred = $q.defer();\n\n    if(bookmarks){\n      deferred.resolve(findBookmark(bookmarkID));\n    } else {\n      model.getBookmarks().then(function(){\n        deferred.resolve(findBookmark(bookmarkID));\n      });\n    }\n\n    return deferred.promise;\n  };\n\n  model.getBookmarks = function () {\n    var deferred = $q.defer();\n\n    if(bookmarks){\n      deferred.resolve(bookmarks);\n    } else {\n      $http.get(URLS.FETCH).then(function(bookmarks){\n        deferred.resolve(cacheBookmarks(bookmarks));\n      });\n    }\n\n    return deferred.promise;\n  };\n\n  model.createBookmark = function(bookmark){\n    bookmark.id = bookmarks.length; // Not good for production\n    bookmarks.push(bookmark);\n  };\n\n  model.updateBookmark = function(bookmark){\n    var index = _.findIndex(bookmarks, function(b){ // Not good for production\n      return b.id == bookmark.id;\n    });\n\n    bookmarks[index] = bookmark;\n  };\n\n  model.deleteBookmark = function(bookmark){\n    _.remove(bookmarks, function(b){ // Not good for production\n      return b.id == bookmark.id;\n    });\n  };\n})\n;</code></pre>\n\n**[67]** we are going to create a method called \"**deleteBookmark**\", that takes a **bookmark** object.\n\n**[68]** From here, we are going to call a **low dash method** called \"**Remove**\".\n\n**[69]** It just **iterates** over the **bookmarks** collection, **compares the ID**. If there is a match, then it will remove it from the **bookmarks** collection. I've said this before, but I will say this again. This is merely for illustration purposes. We are simulating a backend in memory, but for these purposes, it works and we can convey the point that we are trying to get across.\n\n---\n\n###### Wire up to bookmarks controller ######\n\nIf we go into the **bookmarks controller**...\n\n<span class=\"filename\">bookmarks.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"32\"><code class=\"language-javascript\">angular.module('categories.bookmarks', [\n  'categories.bookmarks.create',\n  'categories.bookmarks.edit',\n  'eggly.models.categories',\n  'eggly.models.bookmarks'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories.bookmarks', {\n      url: 'categories/:category',\n      views: {\n        'bookmarks@': {\n          templateUrl: 'app/categories/bookmarks/bookmarks.tmpl.html',\n          controller: 'BookmarksListController as bookmarksListController'\n        }\n      }\n    })\n})\n.controller('BookmarksListController', function ($stateParams, BookmarksModel, CategoriesModel) {\n  var bookmarksListController = this;\n\n  CategoriesModel.setCurrentCategory($stateParams.category);\n\n  BookmarksModel.getBookmarks() // returns a promise\n    .then(function (bookmarks){\n      bookmarksListController.bookmarks = bookmarks;\n    })\n  ;\n\n  bookmarksListController.getCurrentCategory = CategoriesModel.getCurrentCategory;\n  bookmarksListController.getCurrentCategoryName = CategoriesModel.getCurrentCategoryName;\n  bookmarksListController.deleteBookmark = BookmarksModel.deleteBookmark;\n})\n;</code></pre>\n\n**[32]** We simply need to create a reference to the delete bookmark method on our controller.\n\n---\n\n###### Wire up to bookmarks template/view ######\n\nThen in our **template/view**...\n\n<span class=\"filename\">bookmarks.tmpl.html</span>\n```php\n<h1>{{bookmarksListController.getCurrentCategoryName()}}</h1>\n<ul class=\"bookmarks-list\">\n  <li ng-repeat=\"bookmark in bookmarksListController.bookmarks | filter: {category: bookmarksListController.getCurrentCategoryName()}\">\n    <a href=\"#\" ui-sref=\"eggly.categories.bookmarks.edit({bookmarkID:bookmark.id})\"><i class=\"fa fa-pencil\"></i></a>\n    <a href=\"{{bookmark.url}}\" target=\"_blank\">{{bookmark.title}}</a>\n    <a href=\"#\" ng-click=\"bookmarksListController.deleteBookmark(bookmark)\"><i class=\"fa fa-times\"></i></a>\n  </li>\n</ul>\n\n<hr>\n\n<!-- CREATING -->\n<ui-view ng-if=\"bookmarksListController.getCurrentCategory()\">\n  <a href=\"#\" ui-sref=\"eggly.categories.bookmarks.create\"><i class=\"fa fa-plus\"></i> Create Bookmark</a>\n</ui-view>\n```\n\nWe'll just go up here and update this to point to the controller appropriately on the delete trigger.\n\n---\n\n###### Test the code in the browser ######\n\nLet's hop into the **browser** and see this in action.\n\nWe'll refresh the page.\n\nThen if we click this delete button here, you can see that we are indeed **removing** these **bookmarks** from the **bookmarks** collection.\n\n![delete bookmarks](/content/images/2015/04/delete_bookmarks.png)\n\n---\n\n###### What's next ######\n\nWe'll see how to animate state changes.\n\n---\n\n<a class=\"prev-article\" href=\"/angularjs-architecture-edit-bookmark-2\" style=\"width: 50%;\">Edit Bookmark</a><a class=\"next-article\" href=\"/angularjs-architecture-animate-state-transitions-with-ui-router\" style=\"float: right;width: 50%;text-align: right;\">Animate State Transitions</a>\n","html":"<blockquote>\n  <p>In this lesson, we are going to complete the functionality for <strong>deleting</strong> a bookmark.</p>\n  \n  <p>Deleting a bookmark is significantly easier than <strong>creating</strong> or <strong>editing</strong> a bookmark with the essence being a single method in the <strong>BookmarksModel</strong> that we make available to the <strong>controller</strong> and <strong>view</strong>.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/eggly-series-2-banner.png\" alt=\"Eggly Series 2 Banner\" /></p>\n\n<p>We are going to complete the functionality for <strong>deleting</strong> a bookmark from Eggly.</p>\n\n<p>This is going to be much simpler than when we were <strong>creating</strong> a bookmark, or specifically, <strong>editing</strong> a bookmark.</p>\n\n<p>This is really going to come down to a <strong>single method call</strong> in the <strong>bookmark's model</strong>, then <strong>wiring it up in the controller, and the template</strong>.</p>\n\n<hr />\n\n<h6 id=\"addasinglemethodtobookmarksmodel\">Add a single method to bookmarks model</h6>\n\n<p>In the bookmark's model...</p>\n\n<p><span class=\"filename\">bookmarks-model.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">angular.module('eggly.models.bookmarks', [\n\n])\n.service('BookmarksModel', function ($http, $q) {\n  var model = this,\n      URLS = {\n        FETCH: 'data/bookmarks.json'\n      },\n      bookmarks;\n\n  function extract(result){\n    return result.data;\n  }\n\n  function cacheBookmarks(result){\n    bookmarks = extract(result);\n    return bookmarks;\n  }\n\n  function findBookmark(bookmarkID){\n    return _.find(bookmarks, function(bookmark){\n      return bookmark.id <mark>= parseInt(bookmarkID, 10);\n    });\n  }\n\n  model.getBookmarkByID = function(bookmarkID){\n    var deferred = $q.defer();\n\n    if(bookmarks){\n      deferred.resolve(findBookmark(bookmarkID));\n    } else {\n      model.getBookmarks().then(function(){\n        deferred.resolve(findBookmark(bookmarkID));\n      });\n    }\n\n    return deferred.promise;\n  };\n\n  model.getBookmarks = function () {\n    var deferred = $q.defer();\n\n    if(bookmarks){\n      deferred.resolve(bookmarks);\n    } else {\n      $http.get(URLS.FETCH).then(function(bookmarks){\n        deferred.resolve(cacheBookmarks(bookmarks));\n      });\n    }\n\n    return deferred.promise;\n  };\n\n  model.createBookmark = function(bookmark){\n    bookmark.id = bookmarks.length; // Not good for production\n    bookmarks.push(bookmark);\n  };\n\n  model.updateBookmark = function(bookmark){\n    var index = _.findIndex(bookmarks, function(b){ // Not good for production\n      return b.id </mark> bookmark.id;\n    });\n\n    bookmarks[index] = bookmark;\n  };\n\n  model.deleteBookmark = function(bookmark){\n    _.remove(bookmarks, function(b){ // Not good for production\n      return b.id == bookmark.id;\n    });\n  };\n})\n;</code></pre>\n\n<p><strong>[67]</strong> we are going to create a method called \"<strong>deleteBookmark</strong>\", that takes a <strong>bookmark</strong> object.</p>\n\n<p><strong>[68]</strong> From here, we are going to call a <strong>low dash method</strong> called \"<strong>Remove</strong>\".</p>\n\n<p><strong>[69]</strong> It just <strong>iterates</strong> over the <strong>bookmarks</strong> collection, <strong>compares the ID</strong>. If there is a match, then it will remove it from the <strong>bookmarks</strong> collection. I've said this before, but I will say this again. This is merely for illustration purposes. We are simulating a backend in memory, but for these purposes, it works and we can convey the point that we are trying to get across.</p>\n\n<hr />\n\n<h6 id=\"wireuptobookmarkscontroller\">Wire up to bookmarks controller</h6>\n\n<p>If we go into the <strong>bookmarks controller</strong>...</p>\n\n<p><span class=\"filename\">bookmarks.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"32\"><code class=\"language-javascript\">angular.module('categories.bookmarks', [  \n  'categories.bookmarks.create',\n  'categories.bookmarks.edit',\n  'eggly.models.categories',\n  'eggly.models.bookmarks'\n])\n.config(function ($stateProvider) {\n  $stateProvider\n    .state('eggly.categories.bookmarks', {\n      url: 'categories/:category',\n      views: {\n        'bookmarks@': {\n          templateUrl: 'app/categories/bookmarks/bookmarks.tmpl.html',\n          controller: 'BookmarksListController as bookmarksListController'\n        }\n      }\n    })\n})\n.controller('BookmarksListController', function ($stateParams, BookmarksModel, CategoriesModel) {\n  var bookmarksListController = this;\n\n  CategoriesModel.setCurrentCategory($stateParams.category);\n\n  BookmarksModel.getBookmarks() // returns a promise\n    .then(function (bookmarks){\n      bookmarksListController.bookmarks = bookmarks;\n    })\n  ;\n\n  bookmarksListController.getCurrentCategory = CategoriesModel.getCurrentCategory;\n  bookmarksListController.getCurrentCategoryName = CategoriesModel.getCurrentCategoryName;\n  bookmarksListController.deleteBookmark = BookmarksModel.deleteBookmark;\n})\n;</code></pre>\n\n<p><strong>[32]</strong> We simply need to create a reference to the delete bookmark method on our controller.</p>\n\n<hr />\n\n<h6 id=\"wireuptobookmarkstemplateview\">Wire up to bookmarks template/view</h6>\n\n<p>Then in our <strong>template/view</strong>...</p>\n\n<p><span class=\"filename\">bookmarks.tmpl.html</span>  </p>\n\n<pre><code class=\"language-php\">&lt;h1&gt;{{bookmarksListController.getCurrentCategoryName()}}&lt;/h1&gt;  \n&lt;ul class=\"bookmarks-list\"&gt;  \n  &lt;li ng-repeat=\"bookmark in bookmarksListController.bookmarks | filter: {category: bookmarksListController.getCurrentCategoryName()}\"&gt;\n    &lt;a href=\"#\" ui-sref=\"eggly.categories.bookmarks.edit({bookmarkID:bookmark.id})\"&gt;&lt;i class=\"fa fa-pencil\"&gt;&lt;/i&gt;&lt;/a&gt;\n    &lt;a href=\"{{bookmark.url}}\" target=\"_blank\"&gt;{{bookmark.title}}&lt;/a&gt;\n    &lt;a href=\"#\" ng-click=\"bookmarksListController.deleteBookmark(bookmark)\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;!-- CREATING --&gt;  \n&lt;ui-view ng-if=\"bookmarksListController.getCurrentCategory()\"&gt;  \n  &lt;a href=\"#\" ui-sref=\"eggly.categories.bookmarks.create\"&gt;&lt;i class=\"fa fa-plus\"&gt;&lt;/i&gt; Create Bookmark&lt;/a&gt;\n&lt;/ui-view&gt;  \n</code></pre>\n\n<p>We'll just go up here and update this to point to the controller appropriately on the delete trigger.</p>\n\n<hr />\n\n<h6 id=\"testthecodeinthebrowser\">Test the code in the browser</h6>\n\n<p>Let's hop into the <strong>browser</strong> and see this in action.</p>\n\n<p>We'll refresh the page.</p>\n\n<p>Then if we click this delete button here, you can see that we are indeed <strong>removing</strong> these <strong>bookmarks</strong> from the <strong>bookmarks</strong> collection.</p>\n\n<p><img src=\"/content/images/2015/04/delete_bookmarks.png\" alt=\"delete bookmarks\" /></p>\n\n<hr />\n\n<h6 id=\"whatsnext\">What's next</h6>\n\n<p>We'll see how to animate state changes.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/angularjs-architecture-edit-bookmark-2\" style=\"width: 50%;\">Edit Bookmark</a><a class=\"next-article\" href=\"/angularjs-architecture-animate-state-transitions-with-ui-router\" style=\"float: right;width: 50%;text-align: right;\">Animate State Transitions</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1427941003082,"created_by":1,"updated_at":1428018444736,"updated_by":1,"published_at":1427941080436,"published_by":1},{"id":55,"uuid":"6d51a9db-a9f2-4838-b40d-74b65ca90ba8","title":"AngularJS Architecture: Animate state transitions with ui-router","slug":"angularjs-architecture-animate-state-transitions-with-ui-router","markdown":"> In this lesson, we are going to learn how easy it is to **animate** **ui-router state** changes using **ngAnimate** and about 10 lines of CSS.\n\n![Eggly Series 2 Banner](/content/images/2015/03/eggly-series-2-banner.png)\n\nWe are going to **animate** the **state changes** in **ui-router** using **ngAnimate**.\n\nThe first thing we need to do is add in the **ngAnimate** submodule resource because it's not a part of core.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ bower install angular-animate --save\n```\n\nWe'll just add the **JS resource** into our **index.html**.\n\n<span class=\"filename\">index.html</span>\n```php\n<!doctype html>\n<html ng-app=\"Eggly\">\n  <head>\n    <link rel=\"stylesheet\" href=\"bower_components/foundation/css/normalize.css\">\n    <link rel=\"stylesheet\" href=\"bower_components/foundation/css/foundation.css\">\n    <link href=\"http://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"style.css\">\n  </head>\n\n  <body>\n    <aside class=\"small-4 columns\" ui-view=\"categories\">\n    </aside>\n    <section class=\"small-8 columns\" ui-view=\"bookmarks\">\n    </section>\n  </body>\n\n  <script type=\"text/javascript\" src=\"bower_components/jquery/dist/jquery.min.js\"></script>\n  <script type=\"text/javascript\" src=\"bower_components/foundation/js/foundation.min.js\"></script>\n  <script type=\"text/javascript\" src=\"bower_components/lodash/lodash.min.js\"></script>\n  <script type=\"text/javascript\" src=\"bower_components/angular/angular.min.js\"></script>\n  <script type=\"text/javascript\" src=\"bower_components/angular-ui-router/release/angular-ui-router.js\"></script>\n  <script type=\"text/javascript\" src=\"bower_components/angular-animate/angular-animate.min.js\"></script>\n\n  <script type=\"text/javascript\" src=\"app/eggly.js\"></script>\n  <script type=\"text/javascript\" src=\"app/categories/categories.js\"></script>\n  <script type=\"text/javascript\" src=\"app/categories/bookmarks/bookmarks.js\"></script>\n  <script type=\"text/javascript\" src=\"app/categories/bookmarks/create/bookmark-create.js\"></script>\n  <script type=\"text/javascript\" src=\"app/categories/bookmarks/edit/bookmark-edit.js\"></script>\n  <script type=\"text/javascript\" src=\"app/common/models/categories-model.js\"></script>\n  <script type=\"text/javascript\" src=\"app/common/models/bookmarks-model.js\"></script>\n</html>\n```\n\n----\n\n###### Add ngAnimate submodule to main app file ######\n\nThen we'll hop into our main application file here...\n\n<span class=\"filename\">eggly.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"2\"><code class=\"language-javascript\">angular.module('Eggly', [\n  'ngAnimate',\n  'ui.router',\n  'categories',\n  'categories.bookmarks'\n])\n.config(function($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('eggly', {\n      url: '',\n      abstract: true\n    });\n\n  $urlRouterProvider.otherwise('/');\n});</code></pre>\n\n**[2]** Add in the ngAnimate submodule.\n\n---\n\n###### Add animations to CSS file ######\n\nThen we will put our animations in the animations.css file.\n\nHow this works is we'll define our base animation using this syntax here.\n\n<span class=\"filename\">animate.css</span>\n```bash\n[ui-view].ng-enter, [ui-view].ng-leave {\n  position: absolute;\n  left: 0;\n  right: 0;\n  -webkit-transition:all .5s ease-in-out;\n  transition:all .5s ease-in-out;\n}\n\n[ui-view].ng-enter {\n  opacity: 0;\n}\n\n[ui-view].ng-enter-active {\n  opacity: 1;\n}\n\n[ui-view].ng-leave {\n  opacity: 1;\n}\n\n[ui-view].ng-leave-active {\n  opacity: 0;\n}\n```\n\nWe've defined the base transition. We need to define an animation or transition from when a **ui-view** state is initiated to when it is actively applied. \n\nWe'll go, \"ng-enter.\" We'll start with opacity of zero.\n\nWhen this state is actively applied or essentially the **finished** state or **completed** state of this, we want **opacity to be one**.\n\nWhat we are going to do now is just copy this. We're going to reverse it.\n\nWe'll go, \"**ng-leave**\". When **ng-leave** is initiated, we're going to set the property, and then, when it's actively applied, we'll set it to something else.\n\nIn this case, we want it to go from **full opacity to zero opacity**.\n\nWhat we've done is we've defined our base transition using this \"[ui-view].ng-enter, [ui-view].ng-leave\".\n\nThen we've defined the enter and enter active states of opacity zero, opacity one.\n\nThen we've done the reverse for ng-leave.\n\n---\n\n###### Test the code in the browser ######\n\nLet's hop into the browser and see this in action. Refresh the page.\n\nYou can see that now things are starting to actually really transition in quite nicely.\n\nWe were able to do that by just adding the ngAnimate code or submodule into our code and then defining these few simple states using CSS.\n\nI love the ng animations. I think it just really gives an application an one-up in terms of the user experience. They're super-easy to add. It just makes it look really nice.\n\n---\n\n<a class=\"prev-article\" href=\"/angularjs-architecture-delete-bookmark\" style=\"width: 50%;\">Delete Bookmark</a><a class=\"next-article\" href=\"/angularjs-architecture-review\" style=\"float: right;width: 50%;text-align: right;\">Review</a>","html":"<blockquote>\n  <p>In this lesson, we are going to learn how easy it is to <strong>animate</strong> <strong>ui-router state</strong> changes using <strong>ngAnimate</strong> and about 10 lines of CSS.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/eggly-series-2-banner.png\" alt=\"Eggly Series 2 Banner\" /></p>\n\n<p>We are going to <strong>animate</strong> the <strong>state changes</strong> in <strong>ui-router</strong> using <strong>ngAnimate</strong>.</p>\n\n<p>The first thing we need to do is add in the <strong>ngAnimate</strong> submodule resource because it's not a part of core.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ bower install angular-animate --save\n</code></pre>\n\n<p>We'll just add the <strong>JS resource</strong> into our <strong>index.html</strong>.</p>\n\n<p><span class=\"filename\">index.html</span>  </p>\n\n<pre><code class=\"language-php\">&lt;!doctype html&gt;  \n&lt;html ng-app=\"Eggly\"&gt;  \n  &lt;head&gt;\n    &lt;link rel=\"stylesheet\" href=\"bower_components/foundation/css/normalize.css\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"bower_components/foundation/css/foundation.css\"&gt;\n    &lt;link href=\"http://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css\" rel=\"stylesheet\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;aside class=\"small-4 columns\" ui-view=\"categories\"&gt;\n    &lt;/aside&gt;\n    &lt;section class=\"small-8 columns\" ui-view=\"bookmarks\"&gt;\n    &lt;/section&gt;\n  &lt;/body&gt;\n\n  &lt;script type=\"text/javascript\" src=\"bower_components/jquery/dist/jquery.min.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"bower_components/foundation/js/foundation.min.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"bower_components/lodash/lodash.min.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"bower_components/angular/angular.min.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"bower_components/angular-ui-router/release/angular-ui-router.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"bower_components/angular-animate/angular-animate.min.js\"&gt;&lt;/script&gt;\n\n  &lt;script type=\"text/javascript\" src=\"app/eggly.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"app/categories/categories.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"app/categories/bookmarks/bookmarks.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"app/categories/bookmarks/create/bookmark-create.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"app/categories/bookmarks/edit/bookmark-edit.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"app/common/models/categories-model.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"app/common/models/bookmarks-model.js\"&gt;&lt;/script&gt;\n&lt;/html&gt;  \n</code></pre>\n\n<hr />\n\n<h6 id=\"addnganimatesubmoduletomainappfile\">Add ngAnimate submodule to main app file</h6>\n\n<p>Then we'll hop into our main application file here...</p>\n\n<p><span class=\"filename\">eggly.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"2\"><code class=\"language-javascript\">angular.module('Eggly', [  \n  'ngAnimate',\n  'ui.router',\n  'categories',\n  'categories.bookmarks'\n])\n.config(function($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('eggly', {\n      url: '',\n      abstract: true\n    });\n\n  $urlRouterProvider.otherwise('/');\n});</code></pre>\n\n<p><strong>[2]</strong> Add in the ngAnimate submodule.</p>\n\n<hr />\n\n<h6 id=\"addanimationstocssfile\">Add animations to CSS file</h6>\n\n<p>Then we will put our animations in the animations.css file.</p>\n\n<p>How this works is we'll define our base animation using this syntax here.</p>\n\n<p><span class=\"filename\">animate.css</span>  </p>\n\n<pre><code class=\"language-bash\">[ui-view].ng-enter, [ui-view].ng-leave {\n  position: absolute;\n  left: 0;\n  right: 0;\n  -webkit-transition:all .5s ease-in-out;\n  transition:all .5s ease-in-out;\n}\n\n[ui-view].ng-enter {\n  opacity: 0;\n}\n\n[ui-view].ng-enter-active {\n  opacity: 1;\n}\n\n[ui-view].ng-leave {\n  opacity: 1;\n}\n\n[ui-view].ng-leave-active {\n  opacity: 0;\n}\n</code></pre>\n\n<p>We've defined the base transition. We need to define an animation or transition from when a <strong>ui-view</strong> state is initiated to when it is actively applied. </p>\n\n<p>We'll go, \"ng-enter.\" We'll start with opacity of zero.</p>\n\n<p>When this state is actively applied or essentially the <strong>finished</strong> state or <strong>completed</strong> state of this, we want <strong>opacity to be one</strong>.</p>\n\n<p>What we are going to do now is just copy this. We're going to reverse it.</p>\n\n<p>We'll go, \"<strong>ng-leave</strong>\". When <strong>ng-leave</strong> is initiated, we're going to set the property, and then, when it's actively applied, we'll set it to something else.</p>\n\n<p>In this case, we want it to go from <strong>full opacity to zero opacity</strong>.</p>\n\n<p>What we've done is we've defined our base transition using this \"[ui-view].ng-enter, [ui-view].ng-leave\".</p>\n\n<p>Then we've defined the enter and enter active states of opacity zero, opacity one.</p>\n\n<p>Then we've done the reverse for ng-leave.</p>\n\n<hr />\n\n<h6 id=\"testthecodeinthebrowser\">Test the code in the browser</h6>\n\n<p>Let's hop into the browser and see this in action. Refresh the page.</p>\n\n<p>You can see that now things are starting to actually really transition in quite nicely.</p>\n\n<p>We were able to do that by just adding the ngAnimate code or submodule into our code and then defining these few simple states using CSS.</p>\n\n<p>I love the ng animations. I think it just really gives an application an one-up in terms of the user experience. They're super-easy to add. It just makes it look really nice.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/angularjs-architecture-delete-bookmark\" style=\"width: 50%;\">Delete Bookmark</a><a class=\"next-article\" href=\"/angularjs-architecture-review\" style=\"float: right;width: 50%;text-align: right;\">Review</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1427941153984,"created_by":1,"updated_at":1428019695393,"updated_by":1,"published_at":1427941207092,"published_by":1},{"id":56,"uuid":"b47e849a-8eeb-4118-91e8-ecdc7f2e55f3","title":"AngularJS Architecture: Review","slug":"angularjs-architecture-review","markdown":"> In this lesson, we review the high level concepts that we covered over the course of this series including **file structure**, **sub-modules**, **data models**, **ui-router**, and **animations**.\n\n![Eggly Series 2 Banner](/content/images/2015/03/eggly-series-2-banner.png)\n\nNow that we have completed the Eggly architecture series, I wanted to take a moment to review the key concepts that we covered over the course of this series.\n\nWhen we started the application, we had all of this layout in a single HTML page.\n\nAs well as we had this large, monolithic main controller in the Eggly-app.js.\n\nOver the course of this series, we started to break that out and refactor it into meaningful and specific places and pieces of code.\n\nWe created a file structure that reflected the entities that existed within the Eggly application, the main two entities being **categories** and **bookmarks**.\n\nWe created a **categories** folder and within that, we put a **bookmarks** directory because we are **creating** and **editing** a bookmark. Each one of those requires a separate **controller** and **view**. We created a directory for those as well.\n\nOnce we had the **file structure** in place, we started to build out **sub-modules**. We started with the **main Eggly module** and then from here we introduced the **categories module**. Then we introduced the **categories.bookmarks module** and built it all the way out to **create** and **edit**.\n\nWith the **sub-modules** in place we also introduced the concept of **promoting data to models**. We took out the local data within the **main controller** and promoted it to a **bookmarks model** and a **categories model** where we talked about some different strategies for **retrieving the data**, **caching the data**, and **performing business logic**.\n\nFrom here, we introduced **ui-router** and started to build out states to navigate from the different states or routes in our Eggly application.\n\nWe started out with a very basic, **abstract Eggly route** that is a **placeholder for all of the rest of our routes within the application**. Then we defined our **categories route** with **two named views**. Categories targeting the **categories ui-view** and the **bookmarks** named **route targeting** the **ui-view named bookmarks**.\n\nThen we also created a unique route for the state where you have actually a **category** selected to show just the **bookmarks** for that **category** in **Eggly.categories.bookmarks**. Then we created a **create** and **edit** state as well for **editing** and **creating** a bookmark.\n\nOnce those were in place and we were able to navigate to the specific places within the application, we needed to go back and wire up the functionality we introduced in the first app into our new app.\n\nWe set up the ability to **create** a bookmark, **edit** a bookmark, and **delete** a bookmark.\n\nOnce those were completed, we finished things off with a fun animation to **animate** between **ui-router state changes**.\n\nIn about 20 lines of code, we were able to add in a really nice transition and end up with a much nicer, cleaner extensible version of the Eggly application.\n\n<a class=\"prev-article\" href=\"/angularjs-architecture-animate-state-transitions-with-ui-router\" style=\"width: 100%;\">Animate State Transitions</a>","html":"<blockquote>\n  <p>In this lesson, we review the high level concepts that we covered over the course of this series including <strong>file structure</strong>, <strong>sub-modules</strong>, <strong>data models</strong>, <strong>ui-router</strong>, and <strong>animations</strong>.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/03/eggly-series-2-banner.png\" alt=\"Eggly Series 2 Banner\" /></p>\n\n<p>Now that we have completed the Eggly architecture series, I wanted to take a moment to review the key concepts that we covered over the course of this series.</p>\n\n<p>When we started the application, we had all of this layout in a single HTML page.</p>\n\n<p>As well as we had this large, monolithic main controller in the Eggly-app.js.</p>\n\n<p>Over the course of this series, we started to break that out and refactor it into meaningful and specific places and pieces of code.</p>\n\n<p>We created a file structure that reflected the entities that existed within the Eggly application, the main two entities being <strong>categories</strong> and <strong>bookmarks</strong>.</p>\n\n<p>We created a <strong>categories</strong> folder and within that, we put a <strong>bookmarks</strong> directory because we are <strong>creating</strong> and <strong>editing</strong> a bookmark. Each one of those requires a separate <strong>controller</strong> and <strong>view</strong>. We created a directory for those as well.</p>\n\n<p>Once we had the <strong>file structure</strong> in place, we started to build out <strong>sub-modules</strong>. We started with the <strong>main Eggly module</strong> and then from here we introduced the <strong>categories module</strong>. Then we introduced the <strong>categories.bookmarks module</strong> and built it all the way out to <strong>create</strong> and <strong>edit</strong>.</p>\n\n<p>With the <strong>sub-modules</strong> in place we also introduced the concept of <strong>promoting data to models</strong>. We took out the local data within the <strong>main controller</strong> and promoted it to a <strong>bookmarks model</strong> and a <strong>categories model</strong> where we talked about some different strategies for <strong>retrieving the data</strong>, <strong>caching the data</strong>, and <strong>performing business logic</strong>.</p>\n\n<p>From here, we introduced <strong>ui-router</strong> and started to build out states to navigate from the different states or routes in our Eggly application.</p>\n\n<p>We started out with a very basic, <strong>abstract Eggly route</strong> that is a <strong>placeholder for all of the rest of our routes within the application</strong>. Then we defined our <strong>categories route</strong> with <strong>two named views</strong>. Categories targeting the <strong>categories ui-view</strong> and the <strong>bookmarks</strong> named <strong>route targeting</strong> the <strong>ui-view named bookmarks</strong>.</p>\n\n<p>Then we also created a unique route for the state where you have actually a <strong>category</strong> selected to show just the <strong>bookmarks</strong> for that <strong>category</strong> in <strong>Eggly.categories.bookmarks</strong>. Then we created a <strong>create</strong> and <strong>edit</strong> state as well for <strong>editing</strong> and <strong>creating</strong> a bookmark.</p>\n\n<p>Once those were in place and we were able to navigate to the specific places within the application, we needed to go back and wire up the functionality we introduced in the first app into our new app.</p>\n\n<p>We set up the ability to <strong>create</strong> a bookmark, <strong>edit</strong> a bookmark, and <strong>delete</strong> a bookmark.</p>\n\n<p>Once those were completed, we finished things off with a fun animation to <strong>animate</strong> between <strong>ui-router state changes</strong>.</p>\n\n<p>In about 20 lines of code, we were able to add in a really nice transition and end up with a much nicer, cleaner extensible version of the Eggly application.</p>\n\n<p><a class=\"prev-article\" href=\"/angularjs-architecture-animate-state-transitions-with-ui-router\" style=\"width: 100%;\">Animate State Transitions</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1427941237709,"created_by":1,"updated_at":1428019941280,"updated_by":1,"published_at":1427941273897,"published_by":1},{"id":57,"uuid":"811a36a2-1a6c-4ab2-9d85-236894e24222","title":"Building Angular.js and Node.js with the MEAN stack - Deploying to Heroku: Introduction","slug":"building-angular-js-and-node-js-with-the-mean-stack-deploying-to-heroku-introduction","markdown":"> In this module we are going to learn all about deploying our application to Heroku.\n\nWe'll look at how to set up a **MongoDB instance** that will work when our application is running in the Cloud on Heroku.\n\nAfter that is done we'll actually deploy our application by pushing it to Heroku with Git.\n\nOnce our application is up and running, we'll discuss how to troubleshoot application issues with Heroku. There will be two sections here:\n\n- one on some general troubleshooting tips\n- one section devoted to troubleshooting and managing your SSH keys\n\n---\n\n###### Heroku ######\n\n**Heroku** is a popular Cloud platform as a service (**PaaS**). It supports many programming languages. \n\nOf course, for our needs we only care about **Node.js**.\n\n**Heroku** is extremely popular for **Node** applications since you can get some basic hosting for free and it will scale as you do. In addition, it supports many add-ons that can provide a lot of value to your application.\n\nIn order to use **Heroku** for deployments, we'll need to do two things.\n\n- First, create an account with Heroku.\n\nIf you simply go to **[heroku.com](http://heroku.com)** you will be prompted here to sign up for free.\n\n- Second, you need to download and install the Heroku tool belt. That is available as a free download at **[toolbelt.heroku.com](http://toolbelt.heroku.com)**.\n\n![Heroku Toolbelt](/content/images/2015/04/Heroku_Toolbelt.png)\n\nOnce you have downloaded and installed the toolbelt, be sure to close down and reopen your command shell and the Heroku command line interface will now be available for you to use.\n\nNow let's move on and get our application deployed to Heroku.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-summary/\" style=\"width: 50%;\">Walking Skeleton Summary</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-deploying-to-heroku-preparing-for-heroku\" style=\"float: right;width: 50%;text-align: right;\">Preparing for Heroku</a>","html":"<blockquote>\n  <p>In this module we are going to learn all about deploying our application to Heroku.</p>\n</blockquote>\n\n<p>We'll look at how to set up a <strong>MongoDB instance</strong> that will work when our application is running in the Cloud on Heroku.</p>\n\n<p>After that is done we'll actually deploy our application by pushing it to Heroku with Git.</p>\n\n<p>Once our application is up and running, we'll discuss how to troubleshoot application issues with Heroku. There will be two sections here:</p>\n\n<ul>\n<li>one on some general troubleshooting tips</li>\n<li>one section devoted to troubleshooting and managing your SSH keys</li>\n</ul>\n\n<hr />\n\n<h6 id=\"heroku\">Heroku</h6>\n\n<p><strong>Heroku</strong> is a popular Cloud platform as a service (<strong>PaaS</strong>). It supports many programming languages. </p>\n\n<p>Of course, for our needs we only care about <strong>Node.js</strong>.</p>\n\n<p><strong>Heroku</strong> is extremely popular for <strong>Node</strong> applications since you can get some basic hosting for free and it will scale as you do. In addition, it supports many add-ons that can provide a lot of value to your application.</p>\n\n<p>In order to use <strong>Heroku</strong> for deployments, we'll need to do two things.</p>\n\n<ul>\n<li>First, create an account with Heroku.</li>\n</ul>\n\n<p>If you simply go to <strong><a href=\"http://heroku.com\">heroku.com</a></strong> you will be prompted here to sign up for free.</p>\n\n<ul>\n<li>Second, you need to download and install the Heroku tool belt. That is available as a free download at <strong><a href=\"http://toolbelt.heroku.com\">toolbelt.heroku.com</a></strong>.</li>\n</ul>\n\n<p><img src=\"/content/images/2015/04/Heroku_Toolbelt.png\" alt=\"Heroku Toolbelt\" /></p>\n\n<p>Once you have downloaded and installed the toolbelt, be sure to close down and reopen your command shell and the Heroku command line interface will now be available for you to use.</p>\n\n<p>Now let's move on and get our application deployed to Heroku.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-create-a-walking-skeleton-summary/\" style=\"width: 50%;\">Walking Skeleton Summary</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-deploying-to-heroku-preparing-for-heroku\" style=\"float: right;width: 50%;text-align: right;\">Preparing for Heroku</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429064322549,"created_by":1,"updated_at":1429111918226,"updated_by":1,"published_at":1429064333993,"published_by":1},{"id":58,"uuid":"4170b58d-966e-4b08-8d43-8c59b74ebbf5","title":"Building Angular.js and Node.js with the MEAN stack - Deploying to Heroku: Preparing for Heroku","slug":"building-angular-js-and-node-js-with-the-mean-stack-deploying-to-heroku-preparing-for-heroku","markdown":"> Before we can deploy to Heroku, we have to do a few things for our application.\n\nThere are three things that you need to specify inside the files of your application so that **Heroku** can run correctly.\n\n---\n\n###### Specify Node & NPM Versions in package.json ######\n\n1. version of **Node** specified in the package.json file\n- version of **NPM** specified in the package.json file\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ node -v\n0.12.2\n$ npm -v\n2.7.4\n```\n\n<span class=\"filename\">package.json</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"9-12\"><code class=\"language-javascript\">{\n  \"name\": \"mean-monster\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"engines\": {\n    \"node\": \"0.10.x\",\n    \"npm\": \"1.4.x\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"body-parser\": \"^1.12.2\",\n    \"express\": \"^4.12.3\",\n    \"jade\": \"^1.9.2\",\n    \"mongoose\": \"^4.0.1\",\n    \"morgan\": \"^1.5.2\",\n    \"passport\": \"^0.2.1\",\n    \"passport-local\": \"^1.0.0\",\n    \"stylus\": \"^0.50.0\"\n  },\n  \"devDependencies\": {\n    \"gulp\": \"^3.8.11\",\n    \"gulp-jshint\": \"^1.10.0\",\n    \"gulp-util\": \"^3.0.4\",\n    \"jshint-stylish\": \"^1.0.1\"\n  }\n}</code></pre>\n\n---\n\n###### Create a Proc file ######\n\nNow we need to create a new file inside of our project, in the root of it, which is called **proc** file.\n\nThis file has no extension.\n\n<span class=\"filename\">Procfile</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">web: node server.js</code></pre>\n\nThis tells Heroku that when it runs, it should run the command **node server.js**.\n\nNow the next change I need to make is to the port that my server runs on.\n\n**Heroku web sites run off of port 80**, but in my file I'm specifying that it should be running off **port 3030**, so what I'm going to do is make a change that's very similar to the change that we made up above where we looked for the **node_env** variable.\n\n<span class=\"filename\">server.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">var  port = process.env.PORT || 3030;</code></pre>\n\nI'm gonna tell my application to look for a port specification that's found inside of **process.env.port** and if that's not set then I'll set it to **3030**.\n\nAnd that's all the changes that I needed to make to the general part of my applications in order for it to run on Heroku.\n\n---\n\n###### What's next ######\n\nIn the next section we'll make changes to our MongoDB configuration.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-deploying-to-heroku-introduction\" style=\"width: 50%;\">Introduction</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-deploying-to-heroku-heroku-and-mongodb\" style=\"float: right;width: 50%;text-align: right;\">Heroku and MongoDB</a>","html":"<blockquote>\n  <p>Before we can deploy to Heroku, we have to do a few things for our application.</p>\n</blockquote>\n\n<p>There are three things that you need to specify inside the files of your application so that <strong>Heroku</strong> can run correctly.</p>\n\n<hr />\n\n<h6 id=\"specifynodenpmversionsinpackagejson\">Specify Node &amp; NPM Versions in package.json</h6>\n\n<ol>\n<li>version of <strong>Node</strong> specified in the package.json file  </li>\n<li>version of <strong>NPM</strong> specified in the package.json file</li>\n</ol>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ node -v\n0.12.2  \n$ npm -v\n2.7.4  \n</code></pre>\n\n<p><span class=\"filename\">package.json</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"9-12\"><code class=\"language-javascript\">{  \n  \"name\": \"mean-monster\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"engines\": {\n    \"node\": \"0.10.x\",\n    \"npm\": \"1.4.x\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"body-parser\": \"^1.12.2\",\n    \"express\": \"^4.12.3\",\n    \"jade\": \"^1.9.2\",\n    \"mongoose\": \"^4.0.1\",\n    \"morgan\": \"^1.5.2\",\n    \"passport\": \"^0.2.1\",\n    \"passport-local\": \"^1.0.0\",\n    \"stylus\": \"^0.50.0\"\n  },\n  \"devDependencies\": {\n    \"gulp\": \"^3.8.11\",\n    \"gulp-jshint\": \"^1.10.0\",\n    \"gulp-util\": \"^3.0.4\",\n    \"jshint-stylish\": \"^1.0.1\"\n  }\n}</code></pre>\n\n<hr />\n\n<h6 id=\"createaprocfile\">Create a Proc file</h6>\n\n<p>Now we need to create a new file inside of our project, in the root of it, which is called <strong>proc</strong> file.</p>\n\n<p>This file has no extension.</p>\n\n<p><span class=\"filename\">Procfile</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">web: node server.js</code></pre>\n\n<p>This tells Heroku that when it runs, it should run the command <strong>node server.js</strong>.</p>\n\n<p>Now the next change I need to make is to the port that my server runs on.</p>\n\n<p><strong>Heroku web sites run off of port 80</strong>, but in my file I'm specifying that it should be running off <strong>port 3030</strong>, so what I'm going to do is make a change that's very similar to the change that we made up above where we looked for the <strong>node_env</strong> variable.</p>\n\n<p><span class=\"filename\">server.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">var  port = process.env.PORT || 3030;</code></pre>\n\n<p>I'm gonna tell my application to look for a port specification that's found inside of <strong>process.env.port</strong> and if that's not set then I'll set it to <strong>3030</strong>.</p>\n\n<p>And that's all the changes that I needed to make to the general part of my applications in order for it to run on Heroku.</p>\n\n<hr />\n\n<h6 id=\"whatsnext\">What's next</h6>\n\n<p>In the next section we'll make changes to our MongoDB configuration.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-deploying-to-heroku-introduction\" style=\"width: 50%;\">Introduction</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-deploying-to-heroku-heroku-and-mongodb\" style=\"float: right;width: 50%;text-align: right;\">Heroku and MongoDB</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429064465552,"created_by":1,"updated_at":1429113082643,"updated_by":1,"published_at":1429064482598,"published_by":1},{"id":59,"uuid":"57b71968-d9c9-46af-939d-a2f3b320938b","title":"Building Angular.js and Node.js with the MEAN stack - Deploying to Heroku: Heroku and MongoDB","slug":"building-angular-js-and-node-js-with-the-mean-stack-deploying-to-heroku-heroku-and-mongodb","markdown":"> In this section we're going to talk about configuring our application to work with MongoDB once it's been deployed to Heroku.\n\nAs it stands right now, my application is set to write against a **local instance of MongoDB**.\n\nYou can see that here in my **MongoDB connection string**.\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"2\"><code class=\"language-javascript\">development: {\n    db: 'mongodb://localhost/mydatabase',\n    rootPath: rootPath,\n    port: process.env.PORT || 3030\n  },</code></pre>\n\nUnfortunately, once I push to **Heroku**, **Heroku** is not gonna have access to the **MongoDB instance running on my development machine**.\n\nAlso, **Heroku** itself does not offer **MongoDB** hosting, but what **Heroku** does offer is **add-ons** that allow you to use **MongoDB** with their service, **MongoHQ** and **MongoLab**.\n\nBoth **MongoHQ** and **MongoLab** offer free levels of hosting, I can sign up directly with them and just use my **connection string** in order to connect from my **Heroku** application to my **MongoHQ** or **MongoLab** database.\n\nSo we'll start by connecting from our development box to one of these **Mongo** hosted solutions and then we'll be ready when our application gets pushed to **Heroku** for it to connect to the **Mongo** host.\n\nSo first we'll change our development box from connecting to a local **MongoDB** to connecting to one of these hosted solutions (**MongoLab**). At that point when we deploy to **Heroku**, we'll still be able to use the hosted solution.\n\n---\n\n###### Setup MongoLab ######\n\nNow I've chosen **MongoLab** for this demonstration, but there's no reason that **MongoHQ** wouldn't be just as good.\n\nI'm going to start by going to **MongoLab** and creating a new database. I've previously created an account with **MongoLab**. I'm not going to walk you through that process.\n\nAt this point I see a control panel that shows me what databases that I've got. Right now I have now databases so I'm gonna create a new one.\n\n![Create a new database](/content/images/2015/04/Pluralsight_Player.png)\n\nI can choose a bunch of different Cloud providers. I'll just leave it on **Amazon web services**.\n\nDown in the plan I'm going to click on **development**, then leave **sandbox** clicked. \n\nI'm fine with the default version of **MongoDB**. I'll get a half a gig of storage space, and now I get to name my database, which I'll call **Multivision**.\n\nAnd now my new database has been created.\n\nNow in order to connect to this database I'm going to need the connection information, which I'll get by clicking on the database itself, and the connection information is shown up here at the top.\n\n![db connection information](/content/images/2015/04/database_connection.png)\n\nHere is the information I would need in order to connect using the Mongo shell, and here is the information I would need in order to use a **MongoDB** connection string.\n\nSo far, I don't have any **users** in my **database** so I need to create one before I can connect to the **database**. For the database user name I'm going to type in **edwin** and for the password I'll just type in **12mm0n5t3r**, all lowercase. At this point my user's been created, so I'll scroll back up and copy the **MongoDB** connection string sample that it gives me.\n\nNow we'll go back to our code. I'm gonna duplicate this line and put in the new **connection string** and over here I'll fill in the DB user and the password.\n\n<span class=\"filename\">config.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"11\"><code class=\"language-javascript\">var path = require('path');\nvar rootPath = path.normalize(__dirname + '/../../');\n\nmodule.exports = {\n  development: {\n    db: 'mongodb://localhost/mydatabase',\n    rootPath: rootPath,\n    port: process.env.PORT || 3030\n  },\n  production: {\n    db: 'mongodb://edwin:12mm0n5t3r@ds061651.mongolab.com:61651/monster',\n    rootPath: rootPath,\n    port: process.env.PORT || 80\n  }\n}</code></pre>\n\nI'll comment out this first connection line and now our application will connect to our MongoLab **MongoDB** instance.\n\nRight now our application would fail because we don't have any documents in the messages collection. So let's go to our command line and create one, but I'll first bring back up that **MongoLab** page so that I can refer to that when I'm opening up the **Mongo shell**.\n\nSo I'm going to type in **Mongo** and then the connection information that MongoLab has given me, then my **username**, and my **password**. And now I've connected to my **MongoDB** instance over on MongoLab.\n\nSo if type in show collections, you can see that **MongoLab** has already created one system collections for me.\n\nSo let's create that document in the **messages** collection so that when our application requests it, it will receive a value from our MongoLab instance.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ mongo ds061651.mongolab.com:61651/monster -u edwin -p 12mm0n5t3r\n> show collections\nsystem.indexes\n> db.messages.insert({message: 'Hello from MongoLab'})\n> ^C\nbye\n$ nodemon server.js\n```\n\nOkay, now that our document has been created, we can go back and start up our application. \n\nAnd our application's telling us that it has indeed connected to that **database**.\n\nSo let's open up our application in the browser, and you can see that we're getting the message from **MongoLab**.\n\nNow let's go back to our code and discuss a problem that we've created. Right now I'm created to my database on **MongoLab**, which will be fine when I deploy to **Heroku**, but when I'm in development, I want to connect to my local **database**, but I don't want to have to come into this file and constantly be changing that connection string back and forth when I move between development and production.\n\nThankfully, we can easily solve this problem with **Node** environment variables.\n\nRemember, at the beginning, we created a variable up here called **env** that holds a string that represents which environment we're in. It defaults itself to **development**. \n\nSo let's back to our code that connects to the **Mongo** database, and let's write some code that will choose the connection string based on the environment we're in. (typing) Now our application is set to use the first connection string if we're in development and the second if we're in **production**.\n\n<span class=\"filename\">config.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">var path = require('path');\nvar rootPath = path.normalize(__dirname + '/../../');\n\nmodule.exports = {\n  development: {\n    db: 'mongodb://localhost/mydatabase',\n    rootPath: rootPath,\n    port: process.env.PORT || 3030\n  },\n  production: {\n    db: 'mongodb://edwin:12mm0n5t3r@ds061651.mongolab.com:61651/monster',\n    rootPath: rootPath,\n    port: process.env.PORT || 80\n  }\n}</code></pre>\n\nLater on in this course, we'll refactor this code, but for now, this is sufficient.\n\nNow we can test this out by setting our **node environment variable** when we launch our server.\n\nSo we'll go back to our command line and we'll stop our server and by default we should be in **development**, so let's start our server up again, and then we'll just go back to our application and refresh the page, and we simply get our **Hello Mongo** message.\n\nNow I'll go back to my command line, stop my server, and now I'll set my **Node environment variable** to be the value **production**. Setting this to any value but the string development will put my application into **production** mode.\n\nAnd now I can start up my server. If I was in a Bash shell or on OSX, I could actually shortcut this by simply setting the **node environment variable** on the same line like this:\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ NODE_ENV=production nodemone server.js\n```\n\nAnd now I've got my server started, but it's in **production** mode. I'll go back and refresh and now I'm back to **production** mode and talking to my **MongoDB** instance over on **MongoLab**.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ NODE_ENV=development nodemone server.js\n```\n\nSo let's set ourselves back into **development** mode, and our **development** environment is now set up correctly to run, but since we haven't set the **Node environment variable** on **Heroku**, when we deploy our application to **Heroku**, it's still going to be in **development** mode. We're going to need to change that.\n\n---\n\n###### What's Next ######\n\nIn the next section, I'll show you how to set that environment variable to production on **Heroku**.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-deploying-to-heroku-preparing-for-heroku\" style=\"width: 50%;\">Preparing for Heroku</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-deploying-to-heroku-pushing-to-heroku\" style=\"float: right;width: 50%;text-align: right;\">Pushing to Heroku</a>","html":"<blockquote>\n  <p>In this section we're going to talk about configuring our application to work with MongoDB once it's been deployed to Heroku.</p>\n</blockquote>\n\n<p>As it stands right now, my application is set to write against a <strong>local instance of MongoDB</strong>.</p>\n\n<p>You can see that here in my <strong>MongoDB connection string</strong>.</p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"2\"><code class=\"language-javascript\">development: {  \n    db: 'mongodb://localhost/mydatabase',\n    rootPath: rootPath,\n    port: process.env.PORT || 3030\n  },</code></pre>\n\n<p>Unfortunately, once I push to <strong>Heroku</strong>, <strong>Heroku</strong> is not gonna have access to the <strong>MongoDB instance running on my development machine</strong>.</p>\n\n<p>Also, <strong>Heroku</strong> itself does not offer <strong>MongoDB</strong> hosting, but what <strong>Heroku</strong> does offer is <strong>add-ons</strong> that allow you to use <strong>MongoDB</strong> with their service, <strong>MongoHQ</strong> and <strong>MongoLab</strong>.</p>\n\n<p>Both <strong>MongoHQ</strong> and <strong>MongoLab</strong> offer free levels of hosting, I can sign up directly with them and just use my <strong>connection string</strong> in order to connect from my <strong>Heroku</strong> application to my <strong>MongoHQ</strong> or <strong>MongoLab</strong> database.</p>\n\n<p>So we'll start by connecting from our development box to one of these <strong>Mongo</strong> hosted solutions and then we'll be ready when our application gets pushed to <strong>Heroku</strong> for it to connect to the <strong>Mongo</strong> host.</p>\n\n<p>So first we'll change our development box from connecting to a local <strong>MongoDB</strong> to connecting to one of these hosted solutions (<strong>MongoLab</strong>). At that point when we deploy to <strong>Heroku</strong>, we'll still be able to use the hosted solution.</p>\n\n<hr />\n\n<h6 id=\"setupmongolab\">Setup MongoLab</h6>\n\n<p>Now I've chosen <strong>MongoLab</strong> for this demonstration, but there's no reason that <strong>MongoHQ</strong> wouldn't be just as good.</p>\n\n<p>I'm going to start by going to <strong>MongoLab</strong> and creating a new database. I've previously created an account with <strong>MongoLab</strong>. I'm not going to walk you through that process.</p>\n\n<p>At this point I see a control panel that shows me what databases that I've got. Right now I have now databases so I'm gonna create a new one.</p>\n\n<p><img src=\"/content/images/2015/04/Pluralsight_Player.png\" alt=\"Create a new database\" /></p>\n\n<p>I can choose a bunch of different Cloud providers. I'll just leave it on <strong>Amazon web services</strong>.</p>\n\n<p>Down in the plan I'm going to click on <strong>development</strong>, then leave <strong>sandbox</strong> clicked. </p>\n\n<p>I'm fine with the default version of <strong>MongoDB</strong>. I'll get a half a gig of storage space, and now I get to name my database, which I'll call <strong>Multivision</strong>.</p>\n\n<p>And now my new database has been created.</p>\n\n<p>Now in order to connect to this database I'm going to need the connection information, which I'll get by clicking on the database itself, and the connection information is shown up here at the top.</p>\n\n<p><img src=\"/content/images/2015/04/database_connection.png\" alt=\"db connection information\" /></p>\n\n<p>Here is the information I would need in order to connect using the Mongo shell, and here is the information I would need in order to use a <strong>MongoDB</strong> connection string.</p>\n\n<p>So far, I don't have any <strong>users</strong> in my <strong>database</strong> so I need to create one before I can connect to the <strong>database</strong>. For the database user name I'm going to type in <strong>edwin</strong> and for the password I'll just type in <strong>12mm0n5t3r</strong>, all lowercase. At this point my user's been created, so I'll scroll back up and copy the <strong>MongoDB</strong> connection string sample that it gives me.</p>\n\n<p>Now we'll go back to our code. I'm gonna duplicate this line and put in the new <strong>connection string</strong> and over here I'll fill in the DB user and the password.</p>\n\n<p><span class=\"filename\">config.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"11\"><code class=\"language-javascript\">var path = require('path');  \nvar rootPath = path.normalize(__dirname + '/../../');\n\nmodule.exports = {  \n  development: {\n    db: 'mongodb://localhost/mydatabase',\n    rootPath: rootPath,\n    port: process.env.PORT || 3030\n  },\n  production: {\n    db: 'mongodb://edwin:12mm0n5t3r@ds061651.mongolab.com:61651/monster',\n    rootPath: rootPath,\n    port: process.env.PORT || 80\n  }\n}</code></pre>\n\n<p>I'll comment out this first connection line and now our application will connect to our MongoLab <strong>MongoDB</strong> instance.</p>\n\n<p>Right now our application would fail because we don't have any documents in the messages collection. So let's go to our command line and create one, but I'll first bring back up that <strong>MongoLab</strong> page so that I can refer to that when I'm opening up the <strong>Mongo shell</strong>.</p>\n\n<p>So I'm going to type in <strong>Mongo</strong> and then the connection information that MongoLab has given me, then my <strong>username</strong>, and my <strong>password</strong>. And now I've connected to my <strong>MongoDB</strong> instance over on MongoLab.</p>\n\n<p>So if type in show collections, you can see that <strong>MongoLab</strong> has already created one system collections for me.</p>\n\n<p>So let's create that document in the <strong>messages</strong> collection so that when our application requests it, it will receive a value from our MongoLab instance.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ mongo ds061651.mongolab.com:61651/monster -u edwin -p 12mm0n5t3r\n&gt; show collections\nsystem.indexes  \n&gt; db.messages.insert({message: 'Hello from MongoLab'})\n&gt; ^C\nbye  \n$ nodemon server.js\n</code></pre>\n\n<p>Okay, now that our document has been created, we can go back and start up our application. </p>\n\n<p>And our application's telling us that it has indeed connected to that <strong>database</strong>.</p>\n\n<p>So let's open up our application in the browser, and you can see that we're getting the message from <strong>MongoLab</strong>.</p>\n\n<p>Now let's go back to our code and discuss a problem that we've created. Right now I'm created to my database on <strong>MongoLab</strong>, which will be fine when I deploy to <strong>Heroku</strong>, but when I'm in development, I want to connect to my local <strong>database</strong>, but I don't want to have to come into this file and constantly be changing that connection string back and forth when I move between development and production.</p>\n\n<p>Thankfully, we can easily solve this problem with <strong>Node</strong> environment variables.</p>\n\n<p>Remember, at the beginning, we created a variable up here called <strong>env</strong> that holds a string that represents which environment we're in. It defaults itself to <strong>development</strong>. </p>\n\n<p>So let's back to our code that connects to the <strong>Mongo</strong> database, and let's write some code that will choose the connection string based on the environment we're in. (typing) Now our application is set to use the first connection string if we're in development and the second if we're in <strong>production</strong>.</p>\n\n<p><span class=\"filename\">config.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">var path = require('path');  \nvar rootPath = path.normalize(__dirname + '/../../');\n\nmodule.exports = {  \n  development: {\n    db: 'mongodb://localhost/mydatabase',\n    rootPath: rootPath,\n    port: process.env.PORT || 3030\n  },\n  production: {\n    db: 'mongodb://edwin:12mm0n5t3r@ds061651.mongolab.com:61651/monster',\n    rootPath: rootPath,\n    port: process.env.PORT || 80\n  }\n}</code></pre>\n\n<p>Later on in this course, we'll refactor this code, but for now, this is sufficient.</p>\n\n<p>Now we can test this out by setting our <strong>node environment variable</strong> when we launch our server.</p>\n\n<p>So we'll go back to our command line and we'll stop our server and by default we should be in <strong>development</strong>, so let's start our server up again, and then we'll just go back to our application and refresh the page, and we simply get our <strong>Hello Mongo</strong> message.</p>\n\n<p>Now I'll go back to my command line, stop my server, and now I'll set my <strong>Node environment variable</strong> to be the value <strong>production</strong>. Setting this to any value but the string development will put my application into <strong>production</strong> mode.</p>\n\n<p>And now I can start up my server. If I was in a Bash shell or on OSX, I could actually shortcut this by simply setting the <strong>node environment variable</strong> on the same line like this:</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ NODE_ENV=production nodemone server.js\n</code></pre>\n\n<p>And now I've got my server started, but it's in <strong>production</strong> mode. I'll go back and refresh and now I'm back to <strong>production</strong> mode and talking to my <strong>MongoDB</strong> instance over on <strong>MongoLab</strong>.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ NODE_ENV=development nodemone server.js\n</code></pre>\n\n<p>So let's set ourselves back into <strong>development</strong> mode, and our <strong>development</strong> environment is now set up correctly to run, but since we haven't set the <strong>Node environment variable</strong> on <strong>Heroku</strong>, when we deploy our application to <strong>Heroku</strong>, it's still going to be in <strong>development</strong> mode. We're going to need to change that.</p>\n\n<hr />\n\n<h6 id=\"whatsnext\">What's Next</h6>\n\n<p>In the next section, I'll show you how to set that environment variable to production on <strong>Heroku</strong>.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-deploying-to-heroku-preparing-for-heroku\" style=\"width: 50%;\">Preparing for Heroku</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-deploying-to-heroku-pushing-to-heroku\" style=\"float: right;width: 50%;text-align: right;\">Pushing to Heroku</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429064503542,"created_by":1,"updated_at":1429123027372,"updated_by":1,"published_at":1429064507391,"published_by":1},{"id":60,"uuid":"fb80c117-013b-4405-ab0c-f2a0eccedf53","title":"Building Angular.js and Node.js with the MEAN stack - Deploying to Heroku: Pushing to Heroku","slug":"building-angular-js-and-node-js-with-the-mean-stack-deploying-to-heroku-pushing-to-heroku","markdown":"> In this section we're actually going to deploy our code to Heroku\n\nNow at this point I'm going to want to log in to **Heroku**. I do that by typing in **Heroku** log in, which will invoke the **Heroku toolbelt CLI** and allow me to log in. \n\n<span class=\"filename\">Terminal</span>\n```bash\n$ heroku login\nEnter your Heroku credentials.\nEmail: edwin@thinkpixbit.com\nPassword (typing will be hidden):\nAuthentication successful.\n$ heroku create\nCreating ancient-bayou-9107... done, stack is cedar-14\nhttps://ancient-bayou-9107.herokuapp.com/ | https://git.heroku.com/ancient-bayou-9107.git\nGit remote heroku added\n```\n\nNow I've already logged in on my development box so I don't need to do this again, but the process is very simple. It just prompts you for the email address and password that you used to create your **Heroku** account.\n\nNext, I need to create a **Heroku** application and associate it with this Git repository. I do that by typing in **heroku create**.\n\nAt this point it's created a **Heroku** application and you can see that it's given me my own unique dns address.\n\nYou'll also note that it added the **Heroku** remote to my Git repository.\n\nNow if I type in Git remote and list them, you can see **Heroku** is now listed as a **remote**. \n\n<span class=\"filename\">Terminal</span>\n```bash\n$ git remote -v\nheroku\thttps://git.heroku.com/ancient-bayou-9107.git (fetch)\nheroku\thttps://git.heroku.com/ancient-bayou-9107.git (push)\norigin\tgit@bitbucket.org:edwinestrada/mean-monster.git (fetch)\norigin\tgit@bitbucket.org:edwinestrada/mean-monster.git (push)\n```\n\nThe next thing I'll do is set my **Node environment variable to production** on this **Heroku** application.\n\nI do that by typing in **heroku config set** then the **name of the environment variable**, and its **value**.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ heroku config:set NODE_ENV=production\nSetting config vars and restarting ancient-bayou-9107... done, v3\nNODE_ENV: production\n```\n\nYou can see that it configured the **variable** and **restarted** the application.\n\nAt this point I'm ready to deploy the code to **Heroku** and I'll do that by typing in **Git push** and **Heroku** and **master**. That push my code to **Heroku**.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ git add .\n$ git commit -m \"First push to heroku\"\n$ git push heroku master\nCounting objects: 522, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (443/443), done.\nWriting objects: 100% (522/522), 1.54 MiB | 143.00 KiB/s, done.\nTotal 522 (delta 52), reused 511 (delta 48)\nremote: Compressing source files... done.\nremote: Building source:\nremote:\nremote: -----> Node.js app detected\nremote:\nremote: -----> Reading application state\nremote:        package.json...\nremote:        build directory...\nremote:        cache directory...\nremote:        environment variables...\nremote:\nremote:        Node engine:         0.10.x\nremote:        Npm engine:          1.4.x\nremote:        Start mechanism:     Procfile\nremote:        node_modules source: package.json\nremote:        node_modules cached: false\nremote:\nremote:        NPM_CONFIG_PRODUCTION=true\nremote:        NODE_MODULES_CACHE=true\nremote:\nremote: -----> Installing binaries\nremote:        Resolving node version 0.10.x via semver.io...\nremote:        Downloading and installing node 0.10.38...\nremote:        Resolving npm version 1.4.x via semver.io...\nremote:        npm 1.4.28 already installed with node\nremote:\nremote: -----> Building dependencies\nremote:        No cache available\nremote:        Installing node modules\nremote:        npm WARN package.json mean-monster@1.0.0 No repository field.\nremote:\nremote:        > kerberos@0.0.10 install /tmp/build_6f021ae5c95eaa5e552da3b462cb113a/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos\nremote:        > (node-gyp rebuild 2> builderror.log) || (exit 0)\nremote:\nremote:        make: Entering directory `/tmp/build_6f021ae5c95eaa5e552da3b462cb113a/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build'\nremote:          CXX(target) Release/obj.target/kerberos/lib/kerberos.o\nremote:          CXX(target) Release/obj.target/kerberos/lib/worker.o\nremote:          CC(target) Release/obj.target/kerberos/lib/kerberosgss.o\nremote:          CC(target) Release/obj.target/kerberos/lib/base64.o\nremote:          CXX(target) Release/obj.target/kerberos/lib/kerberos_context.o\nremote:          SOLINK_MODULE(target) Release/obj.target/kerberos.node\nremote:          SOLINK_MODULE(target) Release/obj.target/kerberos.node: Finished\nremote:          COPY Release/kerberos.node\nremote:        make: Leaving directory `/tmp/build_6f021ae5c95eaa5e552da3b462cb113a/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build'\nremote:\nremote:        > bson@0.2.21 install /tmp/build_6f021ae5c95eaa5e552da3b462cb113a/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson\nremote:        > (node-gyp rebuild 2> builderror.log) || (exit 0)\nremote:\nremote:        make: Entering directory `/tmp/build_6f021ae5c95eaa5e552da3b462cb113a/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/build'\nremote:          CXX(target) Release/obj.target/bson/ext/bson.o\nremote:          SOLINK_MODULE(target) Release/obj.target/bson.node\nremote:          SOLINK_MODULE(target) Release/obj.target/bson.node: Finished\nremote:          COPY Release/bson.node\nremote:        make: Leaving directory `/tmp/build_6f021ae5c95eaa5e552da3b462cb113a/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/build'\nremote:        passport-local@1.0.0 node_modules/passport-local\nremote:        └── passport-strategy@1.0.0\nremote:\nremote:        passport@0.2.1 node_modules/passport\nremote:        ├── pause@0.0.1\nremote:        └── passport-strategy@1.0.0\nremote:\nremote:        morgan@1.5.2 node_modules/morgan\nremote:        ├── basic-auth@1.0.0\nremote:        ├── depd@1.0.1\nremote:        ├── on-finished@2.2.0 (ee-first@1.1.0)\nremote:        └── debug@2.1.3 (ms@0.7.0)\nremote:\nremote:        body-parser@1.12.2 node_modules/body-parser\nremote:        ├── content-type@1.0.1\nremote:        ├── bytes@1.0.0\nremote:        ├── raw-body@1.3.3\nremote:        ├── depd@1.0.1\nremote:        ├── qs@2.4.1\nremote:        ├── on-finished@2.2.0 (ee-first@1.1.0)\nremote:        ├── debug@2.1.3 (ms@0.7.0)\nremote:        ├── type-is@1.6.1 (media-typer@0.3.0, mime-types@2.0.10)\nremote:        └── iconv-lite@0.4.7\nremote:\nremote:        express@4.12.3 node_modules/express\nremote:        ├── utils-merge@1.0.0\nremote:        ├── cookie-signature@1.0.6\nremote:        ├── merge-descriptors@1.0.0\nremote:        ├── methods@1.1.1\nremote:        ├── cookie@0.1.2\nremote:        ├── fresh@0.2.4\nremote:        ├── range-parser@1.0.2\nremote:        ├── escape-html@1.0.1\nremote:        ├── content-type@1.0.1\nremote:        ├── finalhandler@0.3.4\nremote:        ├── vary@1.0.0\nremote:        ├── parseurl@1.3.0\nremote:        ├── serve-static@1.9.2\nremote:        ├── content-disposition@0.5.0\nremote:        ├── path-to-regexp@0.1.3\nremote:        ├── depd@1.0.1\nremote:        ├── on-finished@2.2.0 (ee-first@1.1.0)\nremote:        ├── qs@2.4.1\nremote:        ├── debug@2.1.3 (ms@0.7.0)\nremote:        ├── proxy-addr@1.0.7 (forwarded@0.1.0, ipaddr.js@0.1.9)\nremote:        ├── etag@1.5.1 (crc@3.2.1)\nremote:        ├── send@0.12.2 (destroy@1.0.3, ms@0.7.0, mime@1.3.4)\nremote:        ├── type-is@1.6.1 (media-typer@0.3.0, mime-types@2.0.10)\nremote:        └── accepts@1.2.5 (negotiator@0.5.1, mime-types@2.0.10)\nremote:\nremote:        stylus@0.50.0 node_modules/stylus\nremote:        ├── css-parse@1.7.0\nremote:        ├── mkdirp@0.3.5\nremote:        ├── debug@2.1.3 (ms@0.7.0)\nremote:        ├── source-map@0.1.43 (amdefine@0.1.0)\nremote:        ├── glob@3.2.11 (inherits@2.0.1, minimatch@0.3.0)\nremote:        └── sax@0.5.8\nremote:\nremote:        jade@1.9.2 node_modules/jade\nremote:        ├── character-parser@1.2.1\nremote:        ├── void-elements@2.0.1\nremote:        ├── commander@2.6.0\nremote:        ├── mkdirp@0.5.0 (minimist@0.0.8)\nremote:        ├── with@4.0.3 (acorn-globals@1.0.4, acorn@1.0.3)\nremote:        ├── transformers@2.1.0 (promise@2.0.0, css@1.0.8, uglify-js@2.2.5)\nremote:        └── constantinople@3.0.1 (acorn-globals@1.0.4)\nremote:\nremote:        mongoose@4.0.1 node_modules/mongoose\nremote:        ├── regexp-clone@0.0.1\nremote:        ├── sliced@0.0.5\nremote:        ├── muri@1.0.0\nremote:        ├── hooks-fixed@1.0.1\nremote:        ├── mpromise@0.5.4\nremote:        ├── kareem@1.0.0\nremote:        ├── mpath@0.1.1\nremote:        ├── async@0.9.0\nremote:        ├── ms@0.1.0\nremote:        ├── mquery@1.4.0 (debug@0.7.4, bluebird@2.3.2)\nremote:        └── mongodb@2.0.24 (readable-stream@1.0.31, mongodb-core@1.1.20)\nremote:\nremote: -----> Checking startup method\nremote:        Found Procfile\nremote:\nremote: -----> Finalizing build\nremote:        Creating runtime environment\nremote:        Exporting binary paths\nremote:        Cleaning npm artifacts\nremote:        Cleaning previous cache\nremote:        Caching results for future builds\nremote:\nremote: -----> Build succeeded!\nremote:\nremote:        mean-monster@1.0.0 /tmp/build_6f021ae5c95eaa5e552da3b462cb113a\nremote:        ├── body-parser@1.12.2\nremote:        ├── express@4.12.3\nremote:        ├── jade@1.9.2\nremote:        ├── mongoose@4.0.1\nremote:        ├── morgan@1.5.2\nremote:        ├── passport@0.2.1\nremote:        ├── passport-local@1.0.0\nremote:        └── stylus@0.50.0\nremote:\nremote:        WARNING: This version of npm (1.4.28) has several known issues - consider upgrading to the latest release (2.7.6)\nremote:        https://devcenter.heroku.com/articles/nodejs-support#specifying-an-npm-version\nremote:\nremote: -----> Discovering process types\nremote:        Procfile declares types -> web\nremote:\nremote: -----> Compressing... done, 9.5MB\nremote: -----> Launching... done, v4\nremote:        https://ancient-bayou-9107.herokuapp.com/ deployed to Heroku\nremote:\nremote: Verifying deploy... done.\nTo https://git.heroku.com/ancient-bayou-9107.git\n * [new branch]      master -> master\n```\n\nNow at this point you may get an error about permission denied because of your **public key**.\n\nIf that's the case, don't worry, we'll deal with that in the next section on **troubleshooting**, but because that process may be somewhat involved, we're not going to deal with that here, so just keep following along and then when we talk about **troubleshooting**, we'll fix that error.\n\nNow you can see that my **deployment** went successfully.\n\nOccasionally you may get some problems when pushing your code to **Heroku**.\n\nOften times the solution is just to **try pushing again**.\n\n---\n\n###### What's next ######\n\nIn the next section we'll discuss some **troubleshooting** tips in case you have any problems that aren't solved by simply trying to **redeploy** your code.\n\nNow that my application is up on **Heroku**, it's still not running because I haven't told **Heroku** to allocate any resources to it. **Heroku** does this through the **heroku** **ps:scale web=1** command, and basically this will get **Heroku** to allocate some resources to my application.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ heroku ps:scale web=1\n```\n\nAnd you can see that **Heroku** is now done with that operation so my next step is simply to type in **heroku open**. \n\n<span class=\"filename\">Terminal</span>\n```bash\n$ heroku open\n```\n\nThis will open my current **Heroku** app in my browser. And our application is now up and running on **Heroku**.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-deploying-to-heroku-heroku-and-mongodb\" style=\"width: 50%;\">Heroku and MongoDB</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-deploying-to-heroku-general-heroku-troubleshooting\" style=\"float: right;width: 50%;text-align: right;\">General Troubleshooting</a>","html":"<blockquote>\n  <p>In this section we're actually going to deploy our code to Heroku</p>\n</blockquote>\n\n<p>Now at this point I'm going to want to log in to <strong>Heroku</strong>. I do that by typing in <strong>Heroku</strong> log in, which will invoke the <strong>Heroku toolbelt CLI</strong> and allow me to log in. </p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ heroku login\nEnter your Heroku credentials.  \nEmail: edwin@thinkpixbit.com  \nPassword (typing will be hidden):  \nAuthentication successful.  \n$ heroku create\nCreating ancient-bayou-9107... done, stack is cedar-14  \nhttps://ancient-bayou-9107.herokuapp.com/ | https://git.heroku.com/ancient-bayou-9107.git  \nGit remote heroku added  \n</code></pre>\n\n<p>Now I've already logged in on my development box so I don't need to do this again, but the process is very simple. It just prompts you for the email address and password that you used to create your <strong>Heroku</strong> account.</p>\n\n<p>Next, I need to create a <strong>Heroku</strong> application and associate it with this Git repository. I do that by typing in <strong>heroku create</strong>.</p>\n\n<p>At this point it's created a <strong>Heroku</strong> application and you can see that it's given me my own unique dns address.</p>\n\n<p>You'll also note that it added the <strong>Heroku</strong> remote to my Git repository.</p>\n\n<p>Now if I type in Git remote and list them, you can see <strong>Heroku</strong> is now listed as a <strong>remote</strong>. </p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ git remote -v\nheroku    https://git.heroku.com/ancient-bayou-9107.git (fetch)  \nheroku    https://git.heroku.com/ancient-bayou-9107.git (push)  \norigin    git@bitbucket.org:edwinestrada/mean-monster.git (fetch)  \norigin    git@bitbucket.org:edwinestrada/mean-monster.git (push)  \n</code></pre>\n\n<p>The next thing I'll do is set my <strong>Node environment variable to production</strong> on this <strong>Heroku</strong> application.</p>\n\n<p>I do that by typing in <strong>heroku config set</strong> then the <strong>name of the environment variable</strong>, and its <strong>value</strong>.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ heroku config:set NODE_ENV=production\nSetting config vars and restarting ancient-bayou-9107... done, v3  \nNODE_ENV: production  \n</code></pre>\n\n<p>You can see that it configured the <strong>variable</strong> and <strong>restarted</strong> the application.</p>\n\n<p>At this point I'm ready to deploy the code to <strong>Heroku</strong> and I'll do that by typing in <strong>Git push</strong> and <strong>Heroku</strong> and <strong>master</strong>. That push my code to <strong>Heroku</strong>.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ git add .\n$ git commit -m \"First push to heroku\"\n$ git push heroku master\nCounting objects: 522, done.  \nDelta compression using up to 8 threads.  \nCompressing objects: 100% (443/443), done.  \nWriting objects: 100% (522/522), 1.54 MiB | 143.00 KiB/s, done.  \nTotal 522 (delta 52), reused 511 (delta 48)  \nremote: Compressing source files... done.  \nremote: Building source:  \nremote:  \nremote: -----&gt; Node.js app detected  \nremote:  \nremote: -----&gt; Reading application state  \nremote:        package.json...  \nremote:        build directory...  \nremote:        cache directory...  \nremote:        environment variables...  \nremote:  \nremote:        Node engine:         0.10.x  \nremote:        Npm engine:          1.4.x  \nremote:        Start mechanism:     Procfile  \nremote:        node_modules source: package.json  \nremote:        node_modules cached: false  \nremote:  \nremote:        NPM_CONFIG_PRODUCTION=true  \nremote:        NODE_MODULES_CACHE=true  \nremote:  \nremote: -----&gt; Installing binaries  \nremote:        Resolving node version 0.10.x via semver.io...  \nremote:        Downloading and installing node 0.10.38...  \nremote:        Resolving npm version 1.4.x via semver.io...  \nremote:        npm 1.4.28 already installed with node  \nremote:  \nremote: -----&gt; Building dependencies  \nremote:        No cache available  \nremote:        Installing node modules  \nremote:        npm WARN package.json mean-monster@1.0.0 No repository field.  \nremote:  \nremote:        &gt; kerberos@0.0.10 install /tmp/build_6f021ae5c95eaa5e552da3b462cb113a/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos  \nremote:        &gt; (node-gyp rebuild 2&gt; builderror.log) || (exit 0)  \nremote:  \nremote:        make: Entering directory `/tmp/build_6f021ae5c95eaa5e552da3b462cb113a/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build'  \nremote:          CXX(target) Release/obj.target/kerberos/lib/kerberos.o  \nremote:          CXX(target) Release/obj.target/kerberos/lib/worker.o  \nremote:          CC(target) Release/obj.target/kerberos/lib/kerberosgss.o  \nremote:          CC(target) Release/obj.target/kerberos/lib/base64.o  \nremote:          CXX(target) Release/obj.target/kerberos/lib/kerberos_context.o  \nremote:          SOLINK_MODULE(target) Release/obj.target/kerberos.node  \nremote:          SOLINK_MODULE(target) Release/obj.target/kerberos.node: Finished  \nremote:          COPY Release/kerberos.node  \nremote:        make: Leaving directory `/tmp/build_6f021ae5c95eaa5e552da3b462cb113a/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/kerberos/build'  \nremote:  \nremote:        &gt; bson@0.2.21 install /tmp/build_6f021ae5c95eaa5e552da3b462cb113a/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson  \nremote:        &gt; (node-gyp rebuild 2&gt; builderror.log) || (exit 0)  \nremote:  \nremote:        make: Entering directory `/tmp/build_6f021ae5c95eaa5e552da3b462cb113a/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/build'  \nremote:          CXX(target) Release/obj.target/bson/ext/bson.o  \nremote:          SOLINK_MODULE(target) Release/obj.target/bson.node  \nremote:          SOLINK_MODULE(target) Release/obj.target/bson.node: Finished  \nremote:          COPY Release/bson.node  \nremote:        make: Leaving directory `/tmp/build_6f021ae5c95eaa5e552da3b462cb113a/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/node_modules/bson/build'  \nremote:        passport-local@1.0.0 node_modules/passport-local  \nremote:        └── passport-strategy@1.0.0  \nremote:  \nremote:        passport@0.2.1 node_modules/passport  \nremote:        ├── pause@0.0.1  \nremote:        └── passport-strategy@1.0.0  \nremote:  \nremote:        morgan@1.5.2 node_modules/morgan  \nremote:        ├── basic-auth@1.0.0  \nremote:        ├── depd@1.0.1  \nremote:        ├── on-finished@2.2.0 (ee-first@1.1.0)  \nremote:        └── debug@2.1.3 (ms@0.7.0)  \nremote:  \nremote:        body-parser@1.12.2 node_modules/body-parser  \nremote:        ├── content-type@1.0.1  \nremote:        ├── bytes@1.0.0  \nremote:        ├── raw-body@1.3.3  \nremote:        ├── depd@1.0.1  \nremote:        ├── qs@2.4.1  \nremote:        ├── on-finished@2.2.0 (ee-first@1.1.0)  \nremote:        ├── debug@2.1.3 (ms@0.7.0)  \nremote:        ├── type-is@1.6.1 (media-typer@0.3.0, mime-types@2.0.10)  \nremote:        └── iconv-lite@0.4.7  \nremote:  \nremote:        express@4.12.3 node_modules/express  \nremote:        ├── utils-merge@1.0.0  \nremote:        ├── cookie-signature@1.0.6  \nremote:        ├── merge-descriptors@1.0.0  \nremote:        ├── methods@1.1.1  \nremote:        ├── cookie@0.1.2  \nremote:        ├── fresh@0.2.4  \nremote:        ├── range-parser@1.0.2  \nremote:        ├── escape-html@1.0.1  \nremote:        ├── content-type@1.0.1  \nremote:        ├── finalhandler@0.3.4  \nremote:        ├── vary@1.0.0  \nremote:        ├── parseurl@1.3.0  \nremote:        ├── serve-static@1.9.2  \nremote:        ├── content-disposition@0.5.0  \nremote:        ├── path-to-regexp@0.1.3  \nremote:        ├── depd@1.0.1  \nremote:        ├── on-finished@2.2.0 (ee-first@1.1.0)  \nremote:        ├── qs@2.4.1  \nremote:        ├── debug@2.1.3 (ms@0.7.0)  \nremote:        ├── proxy-addr@1.0.7 (forwarded@0.1.0, ipaddr.js@0.1.9)  \nremote:        ├── etag@1.5.1 (crc@3.2.1)  \nremote:        ├── send@0.12.2 (destroy@1.0.3, ms@0.7.0, mime@1.3.4)  \nremote:        ├── type-is@1.6.1 (media-typer@0.3.0, mime-types@2.0.10)  \nremote:        └── accepts@1.2.5 (negotiator@0.5.1, mime-types@2.0.10)  \nremote:  \nremote:        stylus@0.50.0 node_modules/stylus  \nremote:        ├── css-parse@1.7.0  \nremote:        ├── mkdirp@0.3.5  \nremote:        ├── debug@2.1.3 (ms@0.7.0)  \nremote:        ├── source-map@0.1.43 (amdefine@0.1.0)  \nremote:        ├── glob@3.2.11 (inherits@2.0.1, minimatch@0.3.0)  \nremote:        └── sax@0.5.8  \nremote:  \nremote:        jade@1.9.2 node_modules/jade  \nremote:        ├── character-parser@1.2.1  \nremote:        ├── void-elements@2.0.1  \nremote:        ├── commander@2.6.0  \nremote:        ├── mkdirp@0.5.0 (minimist@0.0.8)  \nremote:        ├── with@4.0.3 (acorn-globals@1.0.4, acorn@1.0.3)  \nremote:        ├── transformers@2.1.0 (promise@2.0.0, css@1.0.8, uglify-js@2.2.5)  \nremote:        └── constantinople@3.0.1 (acorn-globals@1.0.4)  \nremote:  \nremote:        mongoose@4.0.1 node_modules/mongoose  \nremote:        ├── regexp-clone@0.0.1  \nremote:        ├── sliced@0.0.5  \nremote:        ├── muri@1.0.0  \nremote:        ├── hooks-fixed@1.0.1  \nremote:        ├── mpromise@0.5.4  \nremote:        ├── kareem@1.0.0  \nremote:        ├── mpath@0.1.1  \nremote:        ├── async@0.9.0  \nremote:        ├── ms@0.1.0  \nremote:        ├── mquery@1.4.0 (debug@0.7.4, bluebird@2.3.2)  \nremote:        └── mongodb@2.0.24 (readable-stream@1.0.31, mongodb-core@1.1.20)  \nremote:  \nremote: -----&gt; Checking startup method  \nremote:        Found Procfile  \nremote:  \nremote: -----&gt; Finalizing build  \nremote:        Creating runtime environment  \nremote:        Exporting binary paths  \nremote:        Cleaning npm artifacts  \nremote:        Cleaning previous cache  \nremote:        Caching results for future builds  \nremote:  \nremote: -----&gt; Build succeeded!  \nremote:  \nremote:        mean-monster@1.0.0 /tmp/build_6f021ae5c95eaa5e552da3b462cb113a  \nremote:        ├── body-parser@1.12.2  \nremote:        ├── express@4.12.3  \nremote:        ├── jade@1.9.2  \nremote:        ├── mongoose@4.0.1  \nremote:        ├── morgan@1.5.2  \nremote:        ├── passport@0.2.1  \nremote:        ├── passport-local@1.0.0  \nremote:        └── stylus@0.50.0  \nremote:  \nremote:        WARNING: This version of npm (1.4.28) has several known issues - consider upgrading to the latest release (2.7.6)  \nremote:        https://devcenter.heroku.com/articles/nodejs-support#specifying-an-npm-version  \nremote:  \nremote: -----&gt; Discovering process types  \nremote:        Procfile declares types -&gt; web  \nremote:  \nremote: -----&gt; Compressing... done, 9.5MB  \nremote: -----&gt; Launching... done, v4  \nremote:        https://ancient-bayou-9107.herokuapp.com/ deployed to Heroku  \nremote:  \nremote: Verifying deploy... done.  \nTo https://git.heroku.com/ancient-bayou-9107.git  \n * [new branch]      master -&gt; master\n</code></pre>\n\n<p>Now at this point you may get an error about permission denied because of your <strong>public key</strong>.</p>\n\n<p>If that's the case, don't worry, we'll deal with that in the next section on <strong>troubleshooting</strong>, but because that process may be somewhat involved, we're not going to deal with that here, so just keep following along and then when we talk about <strong>troubleshooting</strong>, we'll fix that error.</p>\n\n<p>Now you can see that my <strong>deployment</strong> went successfully.</p>\n\n<p>Occasionally you may get some problems when pushing your code to <strong>Heroku</strong>.</p>\n\n<p>Often times the solution is just to <strong>try pushing again</strong>.</p>\n\n<hr />\n\n<h6 id=\"whatsnext\">What's next</h6>\n\n<p>In the next section we'll discuss some <strong>troubleshooting</strong> tips in case you have any problems that aren't solved by simply trying to <strong>redeploy</strong> your code.</p>\n\n<p>Now that my application is up on <strong>Heroku</strong>, it's still not running because I haven't told <strong>Heroku</strong> to allocate any resources to it. <strong>Heroku</strong> does this through the <strong>heroku</strong> <strong>ps:scale web=1</strong> command, and basically this will get <strong>Heroku</strong> to allocate some resources to my application.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ heroku ps:scale web=1\n</code></pre>\n\n<p>And you can see that <strong>Heroku</strong> is now done with that operation so my next step is simply to type in <strong>heroku open</strong>. </p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ heroku open\n</code></pre>\n\n<p>This will open my current <strong>Heroku</strong> app in my browser. And our application is now up and running on <strong>Heroku</strong>.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-deploying-to-heroku-heroku-and-mongodb\" style=\"width: 50%;\">Heroku and MongoDB</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-deploying-to-heroku-general-heroku-troubleshooting\" style=\"float: right;width: 50%;text-align: right;\">General Troubleshooting</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429064565908,"created_by":1,"updated_at":1429127329528,"updated_by":1,"published_at":1429064581156,"published_by":1},{"id":61,"uuid":"2530dd2f-4994-4b76-993d-5593e6f29878","title":"Building Angular.js and Node.js with the MEAN stack - Deploying to Heroku: General Heroku Troubleshooting","slug":"building-angular-js-and-node-js-with-the-mean-stack-deploying-to-heroku-general-heroku-troubleshooting","markdown":"> In this section, we're going to talk about general **Heroku** troubleshooting.\n\nWhenever you deploy your application and you have some kinds of problems with it, troubleshooting your **Heroku** deployment can be difficult.\n\nThere are a few tools that **Heroku** gives you to make **troubleshooting** a little bit easier. We're just going to go over a couple of them.\n\n---\n\n###### $ heroku logs ######\n\nThe first tool that we'll cover is **Heroko logs**, so from my command line I'm going to use the **Heroku toolbelt CLI**, and type in **Heroku** logs. This will show me the logs from my **Heroku** installation that's tied to this **Git repository**.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ heroku logs\n2015-04-15T19:38:42.718197+00:00 heroku[api]: Enable Logplex by edwin@thinkpixbit.com\n2015-04-15T19:38:42.718197+00:00 heroku[api]: Release v2 created by edwin@thinkpixbit.com\n2015-04-15T19:41:51.959231+00:00 heroku[api]: Release v3 created by edwin@thinkpixbit.com\n2015-04-15T19:41:51.959231+00:00 heroku[api]: Set NODE_ENV config vars by edwin@thinkpixbit.com\n2015-04-15T19:44:21.724842+00:00 heroku[api]: Scale to web=1 by edwin@thinkpixbit.com\n2015-04-15T19:44:21.784047+00:00 heroku[api]: Deploy 54fe734 by edwin@thinkpixbit.com\n2015-04-15T19:44:21.784047+00:00 heroku[api]: Release v4 created by edwin@thinkpixbit.com\n2015-04-15T19:44:24.533641+00:00 heroku[web.1]: Starting process with command `node server.js`\n2015-04-15T19:44:26.316598+00:00 app[web.1]: Recommending WEB_CONCURRENCY=1\n2015-04-15T19:44:26.316571+00:00 app[web.1]: Detected 512 MB available memory, 512 MB limit per process (WEB_MEMORY)\n2015-04-15T19:44:28.544776+00:00 app[web.1]: Wed, 15 Apr 2015 19:44:28 GMT body-parser deprecated bodyParser: use individual json/urlencoded middlewares at server/config/express.js:10:11\n2015-04-15T19:44:28.755972+00:00 app[web.1]: Listening on port 20691...\n2015-04-15T19:44:28.670798+00:00 app[web.1]: Wed, 15 Apr 2015 19:44:28 GMT body-parser deprecated undefined extended: provide extended option at node_modules/body-parser/index.js:85:29\n2015-04-15T19:44:28.945802+00:00 app[web.1]: mydatabase db opened\n2015-04-15T19:44:29.302025+00:00 heroku[web.1]: State changed from starting to up\n2015-04-15T19:46:24.158506+00:00 app[web.1]: GET / 200 460.268 ms - 1168\n2015-04-15T19:46:24.158896+00:00 heroku[router]: at=info method=GET path=\"/\" host=ancient-bayou-9107.herokuapp.com request_id=180d3c58-5616-4ca0-9f19-e9d1c3ab314c fwd=\"174.109.101.151\" dyno=web.1 connect=4ms service=467ms status=200 bytes=1364\n2015-04-15T19:46:24.474710+00:00 heroku[router]: at=info method=GET path=\"/vendor/foundation/css/foundation.css\" host=ancient-bayou-9107.herokuapp.com request_id=1f66a80a-30a1-4af3-8324-a16adc8a9594 fwd=\"174.109.101.151\" dyno=web.1 connect=1ms service=15ms status=200 bytes=195285\n2015-04-15T19:46:24.620423+00:00 heroku[router]: at=info method=GET path=\"/vendor/angular-resource/angular-resource.js\" host=ancient-bayou-9107.herokuapp.com request_id=fec88ac2-aa38-4ea5-823d-bce6e40070cd fwd=\"174.109.101.151\" dyno=web.1 connect=2ms service=5ms status=200 bytes=27065\n2015-04-15T19:46:24.472664+00:00 app[web.1]: GET /vendor/foundation/css/foundation.css 200 10.391 ms - 194994\n2015-04-15T19:46:24.600826+00:00 app[web.1]: GET /css/site.css 200 1.299 ms - 29\n2015-04-15T19:46:24.648195+00:00 app[web.1]: GET /vendor/angular/angular.js 200 27.488 ms - 960560\n2015-04-15T19:46:24.635721+00:00 app[web.1]: GET /vendor/jquery/dist/jquery.js 200 15.713 ms - 247387\n```\n\nYou can see that there's information here about requests that are made and about other information about **Heroku**.\n\nWhenever you have a problem with your **Heroku** server, the first thing you should do is check the logs to see what might be going wrong.\n\n---\n\n###### $ heroku restart ######\n\nThe other troubleshooting tool that's good to have at your fingertips is the command **heroku restart**.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ heroku restart\n```\n\nThis will simply restart your **Heroku** application. Now that's not to say that **Heroku** is like Windows and just frequently needs to be restarted, but occasionally there is a need to restart your **Heroku** application and if so, this is the command that will let you do that.\n\nThese two troubleshooting tools should help you figure out the majority of your problems with **Heroku**.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-deploying-to-heroku-pushing-to-heroku\" style=\"width: 50%;\">Pushing to Heroku</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-designing-the-ui-introduction\" style=\"float: right;width: 50%;text-align: right;\">Designing the UI</a>","html":"<blockquote>\n  <p>In this section, we're going to talk about general <strong>Heroku</strong> troubleshooting.</p>\n</blockquote>\n\n<p>Whenever you deploy your application and you have some kinds of problems with it, troubleshooting your <strong>Heroku</strong> deployment can be difficult.</p>\n\n<p>There are a few tools that <strong>Heroku</strong> gives you to make <strong>troubleshooting</strong> a little bit easier. We're just going to go over a couple of them.</p>\n\n<hr />\n\n<h6 id=\"dherokulogs\">$ heroku logs</h6>\n\n<p>The first tool that we'll cover is <strong>Heroko logs</strong>, so from my command line I'm going to use the <strong>Heroku toolbelt CLI</strong>, and type in <strong>Heroku</strong> logs. This will show me the logs from my <strong>Heroku</strong> installation that's tied to this <strong>Git repository</strong>.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ heroku logs\n2015-04-15T19:38:42.718197+00:00 heroku[api]: Enable Logplex by edwin@thinkpixbit.com  \n2015-04-15T19:38:42.718197+00:00 heroku[api]: Release v2 created by edwin@thinkpixbit.com  \n2015-04-15T19:41:51.959231+00:00 heroku[api]: Release v3 created by edwin@thinkpixbit.com  \n2015-04-15T19:41:51.959231+00:00 heroku[api]: Set NODE_ENV config vars by edwin@thinkpixbit.com  \n2015-04-15T19:44:21.724842+00:00 heroku[api]: Scale to web=1 by edwin@thinkpixbit.com  \n2015-04-15T19:44:21.784047+00:00 heroku[api]: Deploy 54fe734 by edwin@thinkpixbit.com  \n2015-04-15T19:44:21.784047+00:00 heroku[api]: Release v4 created by edwin@thinkpixbit.com  \n2015-04-15T19:44:24.533641+00:00 heroku[web.1]: Starting process with command `node server.js`  \n2015-04-15T19:44:26.316598+00:00 app[web.1]: Recommending WEB_CONCURRENCY=1  \n2015-04-15T19:44:26.316571+00:00 app[web.1]: Detected 512 MB available memory, 512 MB limit per process (WEB_MEMORY)  \n2015-04-15T19:44:28.544776+00:00 app[web.1]: Wed, 15 Apr 2015 19:44:28 GMT body-parser deprecated bodyParser: use individual json/urlencoded middlewares at server/config/express.js:10:11  \n2015-04-15T19:44:28.755972+00:00 app[web.1]: Listening on port 20691...  \n2015-04-15T19:44:28.670798+00:00 app[web.1]: Wed, 15 Apr 2015 19:44:28 GMT body-parser deprecated undefined extended: provide extended option at node_modules/body-parser/index.js:85:29  \n2015-04-15T19:44:28.945802+00:00 app[web.1]: mydatabase db opened  \n2015-04-15T19:44:29.302025+00:00 heroku[web.1]: State changed from starting to up  \n2015-04-15T19:46:24.158506+00:00 app[web.1]: GET / 200 460.268 ms - 1168  \n2015-04-15T19:46:24.158896+00:00 heroku[router]: at=info method=GET path=\"/\" host=ancient-bayou-9107.herokuapp.com request_id=180d3c58-5616-4ca0-9f19-e9d1c3ab314c fwd=\"174.109.101.151\" dyno=web.1 connect=4ms service=467ms status=200 bytes=1364  \n2015-04-15T19:46:24.474710+00:00 heroku[router]: at=info method=GET path=\"/vendor/foundation/css/foundation.css\" host=ancient-bayou-9107.herokuapp.com request_id=1f66a80a-30a1-4af3-8324-a16adc8a9594 fwd=\"174.109.101.151\" dyno=web.1 connect=1ms service=15ms status=200 bytes=195285  \n2015-04-15T19:46:24.620423+00:00 heroku[router]: at=info method=GET path=\"/vendor/angular-resource/angular-resource.js\" host=ancient-bayou-9107.herokuapp.com request_id=fec88ac2-aa38-4ea5-823d-bce6e40070cd fwd=\"174.109.101.151\" dyno=web.1 connect=2ms service=5ms status=200 bytes=27065  \n2015-04-15T19:46:24.472664+00:00 app[web.1]: GET /vendor/foundation/css/foundation.css 200 10.391 ms - 194994  \n2015-04-15T19:46:24.600826+00:00 app[web.1]: GET /css/site.css 200 1.299 ms - 29  \n2015-04-15T19:46:24.648195+00:00 app[web.1]: GET /vendor/angular/angular.js 200 27.488 ms - 960560  \n2015-04-15T19:46:24.635721+00:00 app[web.1]: GET /vendor/jquery/dist/jquery.js 200 15.713 ms - 247387  \n</code></pre>\n\n<p>You can see that there's information here about requests that are made and about other information about <strong>Heroku</strong>.</p>\n\n<p>Whenever you have a problem with your <strong>Heroku</strong> server, the first thing you should do is check the logs to see what might be going wrong.</p>\n\n<hr />\n\n<h6 id=\"dherokurestart\">$ heroku restart</h6>\n\n<p>The other troubleshooting tool that's good to have at your fingertips is the command <strong>heroku restart</strong>.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ heroku restart\n</code></pre>\n\n<p>This will simply restart your <strong>Heroku</strong> application. Now that's not to say that <strong>Heroku</strong> is like Windows and just frequently needs to be restarted, but occasionally there is a need to restart your <strong>Heroku</strong> application and if so, this is the command that will let you do that.</p>\n\n<p>These two troubleshooting tools should help you figure out the majority of your problems with <strong>Heroku</strong>.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-deploying-to-heroku-pushing-to-heroku\" style=\"width: 50%;\">Pushing to Heroku</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-designing-the-ui-introduction\" style=\"float: right;width: 50%;text-align: right;\">Designing the UI</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429064612692,"created_by":1,"updated_at":1429128581756,"updated_by":1,"published_at":1429064626465,"published_by":1},{"id":62,"uuid":"9eb6f204-33d3-43c4-ae76-e435c11eabc0","title":"Building Angular.js and Node.js with the MEAN stack - Designing the UI: Introduction","slug":"building-angular-js-and-node-js-with-the-mean-stack-designing-the-ui-introduction","markdown":"> In this module we're going to design our UI.\n\nThis may not seem like the most critical piece in a course on writing applications with the **MEAN** Stack, but there will be plenty to learn about placing HTML in the various files in use and organizing our **Angular** code.\n\nI will be showing the **CSS** changes that I need to make to get the design that I want. If you are very comfortable with the CSS, you may want to skip ahead a little during these parts.\n\nWe will start by creating a common header and footer for our site.\n\nThis will be just a little bit of **HTML** and **CSS** work.\n\nThen we'll design the content on the main page, giving us a more typical look for the main page of our site.\n\nAnd, finally, we'll hook up some sample data on the main page.\n\nThis will give us a good start and template for the look and feel of the rest of our site.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-deploying-to-heroku-general-heroku-troubleshooting\" style=\"width: 50%;\">Troubleshooting Heroku</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-designing-the-ui-creating-the-header-and-footer\" style=\"float: right;width: 50%;text-align: right;\">Header and Footer</a>","html":"<blockquote>\n  <p>In this module we're going to design our UI.</p>\n</blockquote>\n\n<p>This may not seem like the most critical piece in a course on writing applications with the <strong>MEAN</strong> Stack, but there will be plenty to learn about placing HTML in the various files in use and organizing our <strong>Angular</strong> code.</p>\n\n<p>I will be showing the <strong>CSS</strong> changes that I need to make to get the design that I want. If you are very comfortable with the CSS, you may want to skip ahead a little during these parts.</p>\n\n<p>We will start by creating a common header and footer for our site.</p>\n\n<p>This will be just a little bit of <strong>HTML</strong> and <strong>CSS</strong> work.</p>\n\n<p>Then we'll design the content on the main page, giving us a more typical look for the main page of our site.</p>\n\n<p>And, finally, we'll hook up some sample data on the main page.</p>\n\n<p>This will give us a good start and template for the look and feel of the rest of our site.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-deploying-to-heroku-general-heroku-troubleshooting\" style=\"width: 50%;\">Troubleshooting Heroku</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-designing-the-ui-creating-the-header-and-footer\" style=\"float: right;width: 50%;text-align: right;\">Header and Footer</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429066634120,"created_by":1,"updated_at":1429129462396,"updated_by":1,"published_at":1429066639699,"published_by":1},{"id":63,"uuid":"2d9a1358-770d-45ec-ad68-09dac24e6633","title":"Building Angular.js and Node.js with the MEAN stack - Designing the UI: Creating the Header and Footer","slug":"building-angular-js-and-node-js-with-the-mean-stack-designing-the-ui-creating-the-header-and-footer","markdown":"> In this section, we're going to start designing our UI by adding a header and a footer to our page.\n\nThe very first thing we'll do is add a title to our application.\n\nSo, I'm going to go into the head of my layout and add a title of \"Monster\".\n\nNext, I want to add the header to my application. Now, in a server-side rendered application, you would probably do this inside of your layout file.\n\nBut since this is a **client-side, single-page application**, I'm actually going to do this in the **index** file.\n\nSo, go into my **index** file and inside the **main content block**, I'm going to start by adding my **header**.\n\n<span class=\"filename\">index.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-jade\">extends common/layout\n\nblock main-content\n  nav.top-bar(data-topbar='', role='navigation')\n    ul.title-area\n      li.name\n        h1\n          a(href=\"/\") Monster\n      li.toggle-topbar.menu-icon\n        a(href='#')\n          span Menu\n    section.top-bar-section\n      ul.left\n        li.has-form\n          div(ng-include=\"'/partials/navbar-login'\")\n      ul.right\n        li.divider\n        li\n          a(href=\"/\") Home\n\n  section.content\n    div(ng-view)\n\n  footer.row\n    p.small-3.small-centered.columns &copy; 2015 Evil Corporation Ltd.</code></pre>\n\nMy first piece of contents of my header is going to be a link to the homepage.\n\nNext, I want to add the first to a set of navigation links. And the first link in here will also be the homepage.\n\n<span class=\"filename\">navbar-login.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-jade\">.row.collapse\n  .large-4.small-4.columns\n    input.form-control(placeholder=\"Email\", ng-model=\"username\")\n  .large-4.small-4.columns\n    input.form-control(type=\"password\", placeholder=\"password\", ng-model=\"password\")\n  .large-4.small-4.columns\n    a.alert.button.expand(ng-click=\"signin(username,password)\") Sign in</code></pre>\n\nNow let's go in and add our footer.\n\nI'll go back to the index page and after my content, I'm going to add a footer.\n\nAnd, I want to center that text on it. And, I'll give myself a copyright and put in the name of our fictitious Evil Corporation.\n\nOkay, that header and footer are looking pretty decent.\n\nThe body content's a bit off to the left of our header and footer, but we'll fix that in the next section.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-designing-the-ui-introduction\" style=\"width: 50%;\">Introduction</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-designing-the-ui-creating-the-main-page-content\" style=\"float: right;width: 50%;text-align: right;\">Main Page Content</a>","html":"<blockquote>\n  <p>In this section, we're going to start designing our UI by adding a header and a footer to our page.</p>\n</blockquote>\n\n<p>The very first thing we'll do is add a title to our application.</p>\n\n<p>So, I'm going to go into the head of my layout and add a title of \"Monster\".</p>\n\n<p>Next, I want to add the header to my application. Now, in a server-side rendered application, you would probably do this inside of your layout file.</p>\n\n<p>But since this is a <strong>client-side, single-page application</strong>, I'm actually going to do this in the <strong>index</strong> file.</p>\n\n<p>So, go into my <strong>index</strong> file and inside the <strong>main content block</strong>, I'm going to start by adding my <strong>header</strong>.</p>\n\n<p><span class=\"filename\">index.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-jade\">extends common/layout\n\nblock main-content  \n  nav.top-bar(data-topbar='', role='navigation')\n    ul.title-area\n      li.name\n        h1\n          a(href=\"/\") Monster\n      li.toggle-topbar.menu-icon\n        a(href='#')\n          span Menu\n    section.top-bar-section\n      ul.left\n        li.has-form\n          div(ng-include=\"'/partials/navbar-login'\")\n      ul.right\n        li.divider\n        li\n          a(href=\"/\") Home\n\n  section.content\n    div(ng-view)\n\n  footer.row\n    p.small-3.small-centered.columns &copy; 2015 Evil Corporation Ltd.</code></pre>\n\n<p>My first piece of contents of my header is going to be a link to the homepage.</p>\n\n<p>Next, I want to add the first to a set of navigation links. And the first link in here will also be the homepage.</p>\n\n<p><span class=\"filename\">navbar-login.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-jade\">.row.collapse  \n  .large-4.small-4.columns\n    input.form-control(placeholder=\"Email\", ng-model=\"username\")\n  .large-4.small-4.columns\n    input.form-control(type=\"password\", placeholder=\"password\", ng-model=\"password\")\n  .large-4.small-4.columns\n    a.alert.button.expand(ng-click=\"signin(username,password)\") Sign in</code></pre>\n\n<p>Now let's go in and add our footer.</p>\n\n<p>I'll go back to the index page and after my content, I'm going to add a footer.</p>\n\n<p>And, I want to center that text on it. And, I'll give myself a copyright and put in the name of our fictitious Evil Corporation.</p>\n\n<p>Okay, that header and footer are looking pretty decent.</p>\n\n<p>The body content's a bit off to the left of our header and footer, but we'll fix that in the next section.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-designing-the-ui-introduction\" style=\"width: 50%;\">Introduction</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-designing-the-ui-creating-the-main-page-content\" style=\"float: right;width: 50%;text-align: right;\">Main Page Content</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429066665525,"created_by":1,"updated_at":1429130532349,"updated_by":1,"published_at":1429067010113,"published_by":1},{"id":64,"uuid":"7c4f5e5b-f508-4720-aecd-98e62be75789","title":"Building Angular.js and Node.js with the MEAN stack - Designing the UI: Creating the Main Page Content","slug":"building-angular-js-and-node-js-with-the-mean-stack-designing-the-ui-creating-the-main-page-content","markdown":"> In this section, we're going to add the content to our main page.\n\nI'm going to put everything inside of a container.\n\nThis will have a couple of things: The title of our application as an H1 and some subtext in a paragraph tag.\n\nI'll just paste in some text that I wrote earlier.\n\n<span class=\"filename\">main.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-jade\">.row\n  .large-12.columns\n    .panel\n      h1 {{ myVar }}\n      p It has an easy to override visual style, and is appropriately subdued.</code></pre>\n\nNow that I've got some nice content in the main portion of my page, I need to go back to my **index** file and take out this **mongo message** right here.\n\nWhile I'm at it, I can also go back to my server file and I can pull out where that mongo message is set.\n\nI'll delete everything about the message collection because we're not going to need it anymore.\n\nAnd also in the index rendering, I'll delete the data that passed to the page.\n\n<span class=\"filename\">routes.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"6-8\"><code class=\"language-javascript\">module.exports = function(app){\n  app.get('/partials/:partialPath', function(req, res){\n    res.render('common/partials/' + req.params.partialPath);\n  });\n\n  app.get('*', function(req, res){\n    res.render('index');\n  });\n}</code></pre>\n\nNow, let's go and refresh our site and see how it looks. All right, that's looking the way I want it.\n\n![How it looks](/content/images/2015/04/localhost_3030.png)\n\n---\n\n###### Adding more content to main page ######\n\nNow, let's go back to our code and let's put a little bit more content on our main page. \n\nI want to show a list to the **new courses** and a **list of featured courses**.\n\n<span class=\"filename\">main.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-jade\">.row\n  .large-12.columns\n    .panel\n      h1 {{ myVar }}\n      p It has an easy to override visual style, and is appropriately subdued.\n\n.row\n  .large-6.columns\n    div(ng-include=\"'/partials/featured-courses'\")\n  .large-6.columns\n    div(ng-include=\"'/partials/new-courses'\")</code></pre>\n\n**[7]** So, I'll make space for those by creating a row\n\n**[8,10]** within that I'll create two columns of equal width\n\n**[9,11]** in each one I'll have a div that uses the **ng-include** directive to bring in a **partial** file.\n\n**[9]** The first one will be my featured courses.\n\n**[11]** And, I'll add that second column. And I'll do the same thing in this one, except this one will be for new courses.\n\n---\n\n###### Partials for Featured and New Courses ######\n\nNow that I'm calling out to these partials, I need to go and create them. I'll do that by creating new files inside the partials directory.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ touch partials/featured-courses.jade\n$ touch partials/new-courses.jade\n```\n\nAnd, inside of these I'll use a panel. And, for this one, I'll create a heading that says \"featured courses\". And, I'll also create a body that just has some placeholder text.\n\nNow, we need to create the new courses partial, which will be identical to the last partial, except for the text to the heading.\n\n<span class=\"filename\">featured-courses.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-jade\">.panel\n  h1 Featured Courses\n  p Courses go here.</code></pre>\n\n<span class=\"filename\">new-courses.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-jade\">.panel\n  h1 New Courses\n  p Courses go here.</code></pre>\n\nNow, let's go refresh our app and see the changes that we've made.\n\n![Courses lists](/content/images/2015/04/localhost_3030-1.png)\n\nOkay, that's looking pretty good.\n\n---\n\n###### What's Next ######\n\nIn the next sections, we'll add some sample data and make this look even better.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-designing-the-ui-creating-the-header-and-footer\" style=\"width: 50%;\">Header and Footer</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-designing-the-ui-adding-data-to-the-main-page\" style=\"float: right;width: 50%;text-align: right;\">Adding Data to Main Page</a>","html":"<blockquote>\n  <p>In this section, we're going to add the content to our main page.</p>\n</blockquote>\n\n<p>I'm going to put everything inside of a container.</p>\n\n<p>This will have a couple of things: The title of our application as an H1 and some subtext in a paragraph tag.</p>\n\n<p>I'll just paste in some text that I wrote earlier.</p>\n\n<p><span class=\"filename\">main.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-jade\">.row  \n  .large-12.columns\n    .panel\n      h1 {{ myVar }}\n      p It has an easy to override visual style, and is appropriately subdued.</code></pre>\n\n<p>Now that I've got some nice content in the main portion of my page, I need to go back to my <strong>index</strong> file and take out this <strong>mongo message</strong> right here.</p>\n\n<p>While I'm at it, I can also go back to my server file and I can pull out where that mongo message is set.</p>\n\n<p>I'll delete everything about the message collection because we're not going to need it anymore.</p>\n\n<p>And also in the index rendering, I'll delete the data that passed to the page.</p>\n\n<p><span class=\"filename\">routes.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"6-8\"><code class=\"language-javascript\">module.exports = function(app){  \n  app.get('/partials/:partialPath', function(req, res){\n    res.render('common/partials/' + req.params.partialPath);\n  });\n\n  app.get('*', function(req, res){\n    res.render('index');\n  });\n}</code></pre>\n\n<p>Now, let's go and refresh our site and see how it looks. All right, that's looking the way I want it.</p>\n\n<p><img src=\"/content/images/2015/04/localhost_3030.png\" alt=\"How it looks\" /></p>\n\n<hr />\n\n<h6 id=\"addingmorecontenttomainpage\">Adding more content to main page</h6>\n\n<p>Now, let's go back to our code and let's put a little bit more content on our main page. </p>\n\n<p>I want to show a list to the <strong>new courses</strong> and a <strong>list of featured courses</strong>.</p>\n\n<p><span class=\"filename\">main.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-jade\">.row  \n  .large-12.columns\n    .panel\n      h1 {{ myVar }}\n      p It has an easy to override visual style, and is appropriately subdued.\n\n.row\n  .large-6.columns\n    div(ng-include=\"'/partials/featured-courses'\")\n  .large-6.columns\n    div(ng-include=\"'/partials/new-courses'\")</code></pre>\n\n<p><strong>[7]</strong> So, I'll make space for those by creating a row</p>\n\n<p><strong>[8,10]</strong> within that I'll create two columns of equal width</p>\n\n<p><strong>[9,11]</strong> in each one I'll have a div that uses the <strong>ng-include</strong> directive to bring in a <strong>partial</strong> file.</p>\n\n<p><strong>[9]</strong> The first one will be my featured courses.</p>\n\n<p><strong>[11]</strong> And, I'll add that second column. And I'll do the same thing in this one, except this one will be for new courses.</p>\n\n<hr />\n\n<h6 id=\"partialsforfeaturedandnewcourses\">Partials for Featured and New Courses</h6>\n\n<p>Now that I'm calling out to these partials, I need to go and create them. I'll do that by creating new files inside the partials directory.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ touch partials/featured-courses.jade\n$ touch partials/new-courses.jade\n</code></pre>\n\n<p>And, inside of these I'll use a panel. And, for this one, I'll create a heading that says \"featured courses\". And, I'll also create a body that just has some placeholder text.</p>\n\n<p>Now, we need to create the new courses partial, which will be identical to the last partial, except for the text to the heading.</p>\n\n<p><span class=\"filename\">featured-courses.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-jade\">.panel  \n  h1 Featured Courses\n  p Courses go here.</code></pre>\n\n<p><span class=\"filename\">new-courses.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-jade\">.panel  \n  h1 New Courses\n  p Courses go here.</code></pre>\n\n<p>Now, let's go refresh our app and see the changes that we've made.</p>\n\n<p><img src=\"/content/images/2015/04/localhost_3030-1.png\" alt=\"Courses lists\" /></p>\n\n<p>Okay, that's looking pretty good.</p>\n\n<hr />\n\n<h6 id=\"whatsnext\">What's Next</h6>\n\n<p>In the next sections, we'll add some sample data and make this look even better.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-designing-the-ui-creating-the-header-and-footer\" style=\"width: 50%;\">Header and Footer</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-designing-the-ui-adding-data-to-the-main-page\" style=\"float: right;width: 50%;text-align: right;\">Adding Data to Main Page</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429066766553,"created_by":1,"updated_at":1429132475712,"updated_by":1,"published_at":1429129507529,"published_by":1},{"id":65,"uuid":"33e06b2c-6daa-462b-9e48-00d14b07ef23","title":"Building Angular.js and Node.js with the MEAN stack - Designing the UI: Adding Data to the Main Page","slug":"building-angular-js-and-node-js-with-the-mean-stack-designing-the-ui-adding-data-to-the-main-page","markdown":"> In this section, we're going to add some sample data to those two panels that we created on our index page: **featured courses** and **new courses**.\n\nBut before we can begin adding that sample data, we need to do a little bit of reorganization to our **Angular** code.\n\nHere in our **app** file, we've got the **configuration for our module and the main controller**.\n\n> It's time to move that controller into its own file.\n\nSince this is the controller for the main page, I'm going to create a new folder in my client-side application called \"**Main**\", and that folder will hold **all the files that have to do with the main page of my application**.\n\nSo, I'll create the main controller file.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ mkdir public/app/main\n$ touch public/app/main/mainController.js\n```\n\nCut out off **app.js** and paste into **mainController.js**.\n\n<span class=\"filename\">app.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"17-19\"><code class=\"language-javascript\">angular.module('app', ['ngResource', 'ngRoute']);\n\nangular.module('app').config(function($routeProvider, $locationProvider){\n  $locationProvider.html5Mode({\n    enabled: true,\n    requireBase: false\n  });\n  $routeProvider\n    .when('/', {\n      templateUrl: '/partials/main',\n      controller: 'mainController'\n    })\n  ;\n\n});\n\nangular.module('app').controller('mainController', function($scope){\n  $scope.myVar = \"Snaaaakkkke!\";\n});</code></pre>\n\n<span class=\"filename\">mainController.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">angular.module('app').controller('mainController', function($scope){\n  $scope.myVar = \"Snaaaakkkke!\";\n});</code></pre>\n\nAnd, I've also got to add a reference to that file inside of my \"scripts include\" file.\n\n<span class=\"filename\">scripts.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"6\"><code class=\"language-jade\">script(type=\"text/javascript\", src=\"/vendor/jquery/dist/jquery.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular/angular.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular-resource/angular-resource.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular-route/angular-route.js\")\nscript(type=\"text/javascript\", src=\"/app/app.js\")\nscript(type=\"text/javascript\", src=\"/app/main/mainController.js\")</code></pre>\n\nAnd now the file should be getting delivered to the page.\n\nLet's just check that our application is still working correctly with these changes.\n\nOkay, everything looks fine.\n\n---\n\n###### Add sample data ######\n\nNow that I've got my Angular code organized the way that I want it, I can add some sample data to my **main controller**, and that sample data will be available for binding in the featured courses and new courses partial files.\n\n<span class=\"filename\">mainController.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">angular.module('app').controller('mainController', function($scope){\n  $scope.courses = [\n    {\n      \"date\": \"Mon Feb 20 1995 05:42:21 GMT+0000 (UTC)\",\n      \"featured\": false,\n      \"name\": \"Eiusmod ipsum aliquip culpa consectetur magna incididunt nulla enim occaecat.\"\n    },\n    {\n      \"date\": \"Mon Apr 29 2013 05:22:32 GMT+0000 (UTC)\",\n      \"featured\": false,\n      \"name\": \"Lorem tempor excepteur nulla proident velit magna et ea laboris id.\"\n    },\n    {\n      \"date\": \"Thu Jul 16 1992 12:41:43 GMT+0000 (UTC)\",\n      \"featured\": true,\n      \"name\": \"Fugiat nulla adipisicing quis ullamco sint incididunt aliqua magna veniam enim in anim commodo.\"\n    },\n    {\n      \"date\": \"Fri May 04 2001 18:32:57 GMT+0000 (UTC)\",\n      \"featured\": false,\n      \"name\": \"Enim deserunt consectetur id magna id pariatur velit ad laboris.\"\n    },\n    {\n      \"date\": \"Wed Jun 06 1979 17:32:03 GMT+0000 (UTC)\",\n      \"featured\": true,\n      \"name\": \"Aute non nostrud excepteur magna consequat exercitation ut magna quis nisi.\"\n    },\n    {\n      \"date\": \"Thu Nov 11 2004 17:11:36 GMT+0000 (UTC)\",\n      \"featured\": false,\n      \"name\": \"Nostrud dolore magna exercitation dolor aute mollit esse.\"\n    },\n    {\n      \"date\": \"Tue Feb 12 1974 19:38:07 GMT+0000 (UTC)\",\n      \"featured\": false,\n      \"name\": \"Ea ea fugiat enim duis amet qui proident culpa velit culpa culpa.\"\n    },\n    {\n      \"date\": \"Thu Jun 14 1990 15:50:44 GMT+0000 (UTC)\",\n      \"featured\": false,\n      \"name\": \"Voluptate irure consequat laboris minim incididunt qui sunt deserunt exercitation veniam veniam nisi nisi culpa.\"\n    },\n    {\n      \"date\": \"Thu Mar 13 2003 19:13:54 GMT+0000 (UTC)\",\n      \"featured\": false,\n      \"name\": \"Voluptate irure ipsum Lorem esse minim irure culpa consectetur ad.\"\n    },\n    {\n      \"date\": \"Fri Mar 22 2002 03:44:26 GMT+0000 (UTC)\",\n      \"featured\": false,\n      \"name\": \"Id reprehenderit consectetur consequat quis do reprehenderit qui aliquip reprehenderit.\"\n    },\n    {\n      \"date\": \"Wed Sep 29 1982 01:25:53 GMT+0000 (UTC)\",\n      \"featured\": false,\n      \"name\": \"Dolore aliquip ad enim aliquip et ex dolore.\"\n    },\n    {\n      \"date\": \"Mon Jan 28 2013 04:28:49 GMT+0000 (UTC)\",\n      \"featured\": false,\n      \"name\": \"Cillum exercitation dolore officia consectetur id nulla excepteur qui consectetur mollit est aliqua.\"\n    },\n    {\n      \"date\": \"Wed Mar 26 1975 18:15:13 GMT+0000 (UTC)\",\n      \"featured\": false,\n      \"name\": \"Duis amet nostrud tempor ad ex ipsum amet incididunt voluptate enim irure.\"\n    },\n    {\n      \"date\": \"Sat May 09 1981 19:41:28 GMT+0000 (UTC)\",\n      \"featured\": true,\n      \"name\": \"Cupidatat mollit amet tempor eiusmod amet do.\"\n    }\n  ];\n});</code></pre>\n\nEach of the items in this sample data has a name, whether or not the course is featured, and when the course is published.\n\nThis is the data that I'll need in order to display it in those two areas.\n\n---\n\n###### Featured courses partial ######\n\nNow, let's go into our \"featured courses\" partial and add some HTML and bind to this data. \n\nSo, I'll take out the placeholder text, and inside of the panel body, I'll add a row and use the **ng-repeat** directive so it'll create a row for every item in the data set that I want to display.\n\nAnd, I want to do a little bit of filtering on that data.\n\nI want to set up a filter so that only the courses that have the featured properties set to true will show up.\n\nAnd for that, I'll use the \"filter\" filter. And I'll set that the featured property has to be set to true.\n\nAnd then for each row inside of here, I'll create a column that's full width and just add the course name. And, that'll be good enough for now.\n\n<span class=\"filename\">featured-courses.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-jade\">.panel\n  h1 Featured Courses\n  .row(ng-repeat=\"course in courses | filter:{featured:true}\")\n    .large-12.columns - {{course.name}}</code></pre>\n\n---\n\n###### New courses partial ######\n\nNow, let's go to our \"new courses\" partial. And, again, we'll take out the placeholder text.\n\nWe'll do the same thing and add a row with the **ng-repeat** directive. And, I'll have to do some filtering again.\n\nNow, I only want to show 10 courses in both the \"featured\" and \"new featured\" sections of the page.\n\nBut since a user is going to select the featured courses, I can trust the user to only select 10, whereas new courses, I need to limit it to 10.\n\nBut, I also need to order by the publish date, so I can't just limit to 10 first and then order by the publish date, otherwise, the ordering will be wrong.\n\nSo, I need to set up two filters. First, the \"order by\" and then a filter that will limit it to only 10 rows.\n\n<span class=\"filename\">new-courses.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-jade\">.panel\n  h1 New Courses\n  .row(ng-repeat=\"course in courses | orderBy:'published':true | limitTo:10\")\n    .large-3.small-3.columns {{course.published | date:'MMM d'}}\n    .large-9.small-9.columns {{course.name}}</code></pre>\n\nNow to display this data, I'm actually going to have two columns.\n\nThe first column is going to show the publish date, and that's only going to be one-quarter of the space.\n\nAnd, I'll filter that so that it's formatted like a date. And, I want to show the format with a three-letter month and then a one-digit day.\n\nAnd then, my second column will be the other 75%.\n\nAnd that will have the name of the course in it.\n\n---\n\n###### Displaying the data ######\n\nNow, let's go see our changes in the browser. I'll refresh the page.\n\n![courses being displayed](/content/images/2015/04/localhost_3030-2.png)\n\nAnd now we can see our sample data showing up just the way we want it.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-designing-the-ui-creating-the-main-page-content\" style=\"width: 50%;\">Creating the Main Page Content</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-introduction\" style=\"float: right;width: 50%;text-align: right;\">Authentication Introduction</a>","html":"<blockquote>\n  <p>In this section, we're going to add some sample data to those two panels that we created on our index page: <strong>featured courses</strong> and <strong>new courses</strong>.</p>\n</blockquote>\n\n<p>But before we can begin adding that sample data, we need to do a little bit of reorganization to our <strong>Angular</strong> code.</p>\n\n<p>Here in our <strong>app</strong> file, we've got the <strong>configuration for our module and the main controller</strong>.</p>\n\n<blockquote>\n  <p>It's time to move that controller into its own file.</p>\n</blockquote>\n\n<p>Since this is the controller for the main page, I'm going to create a new folder in my client-side application called \"<strong>Main</strong>\", and that folder will hold <strong>all the files that have to do with the main page of my application</strong>.</p>\n\n<p>So, I'll create the main controller file.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ mkdir public/app/main\n$ touch public/app/main/mainController.js\n</code></pre>\n\n<p>Cut out off <strong>app.js</strong> and paste into <strong>mainController.js</strong>.</p>\n\n<p><span class=\"filename\">app.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"17-19\"><code class=\"language-javascript\">angular.module('app', ['ngResource', 'ngRoute']);\n\nangular.module('app').config(function($routeProvider, $locationProvider){  \n  $locationProvider.html5Mode({\n    enabled: true,\n    requireBase: false\n  });\n  $routeProvider\n    .when('/', {\n      templateUrl: '/partials/main',\n      controller: 'mainController'\n    })\n  ;\n\n});\n\nangular.module('app').controller('mainController', function($scope){  \n  $scope.myVar = \"Snaaaakkkke!\";\n});</code></pre>\n\n<p><span class=\"filename\">mainController.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">angular.module('app').controller('mainController', function($scope){  \n  $scope.myVar = \"Snaaaakkkke!\";\n});</code></pre>\n\n<p>And, I've also got to add a reference to that file inside of my \"scripts include\" file.</p>\n\n<p><span class=\"filename\">scripts.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"6\"><code class=\"language-jade\">script(type=\"text/javascript\", src=\"/vendor/jquery/dist/jquery.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular/angular.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular-resource/angular-resource.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular-route/angular-route.js\")  \nscript(type=\"text/javascript\", src=\"/app/app.js\")  \nscript(type=\"text/javascript\", src=\"/app/main/mainController.js\")</code></pre>\n\n<p>And now the file should be getting delivered to the page.</p>\n\n<p>Let's just check that our application is still working correctly with these changes.</p>\n\n<p>Okay, everything looks fine.</p>\n\n<hr />\n\n<h6 id=\"addsampledata\">Add sample data</h6>\n\n<p>Now that I've got my Angular code organized the way that I want it, I can add some sample data to my <strong>main controller</strong>, and that sample data will be available for binding in the featured courses and new courses partial files.</p>\n\n<p><span class=\"filename\">mainController.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">angular.module('app').controller('mainController', function($scope){  \n  $scope.courses = [\n    {\n      \"date\": \"Mon Feb 20 1995 05:42:21 GMT+0000 (UTC)\",\n      \"featured\": false,\n      \"name\": \"Eiusmod ipsum aliquip culpa consectetur magna incididunt nulla enim occaecat.\"\n    },\n    {\n      \"date\": \"Mon Apr 29 2013 05:22:32 GMT+0000 (UTC)\",\n      \"featured\": false,\n      \"name\": \"Lorem tempor excepteur nulla proident velit magna et ea laboris id.\"\n    },\n    {\n      \"date\": \"Thu Jul 16 1992 12:41:43 GMT+0000 (UTC)\",\n      \"featured\": true,\n      \"name\": \"Fugiat nulla adipisicing quis ullamco sint incididunt aliqua magna veniam enim in anim commodo.\"\n    },\n    {\n      \"date\": \"Fri May 04 2001 18:32:57 GMT+0000 (UTC)\",\n      \"featured\": false,\n      \"name\": \"Enim deserunt consectetur id magna id pariatur velit ad laboris.\"\n    },\n    {\n      \"date\": \"Wed Jun 06 1979 17:32:03 GMT+0000 (UTC)\",\n      \"featured\": true,\n      \"name\": \"Aute non nostrud excepteur magna consequat exercitation ut magna quis nisi.\"\n    },\n    {\n      \"date\": \"Thu Nov 11 2004 17:11:36 GMT+0000 (UTC)\",\n      \"featured\": false,\n      \"name\": \"Nostrud dolore magna exercitation dolor aute mollit esse.\"\n    },\n    {\n      \"date\": \"Tue Feb 12 1974 19:38:07 GMT+0000 (UTC)\",\n      \"featured\": false,\n      \"name\": \"Ea ea fugiat enim duis amet qui proident culpa velit culpa culpa.\"\n    },\n    {\n      \"date\": \"Thu Jun 14 1990 15:50:44 GMT+0000 (UTC)\",\n      \"featured\": false,\n      \"name\": \"Voluptate irure consequat laboris minim incididunt qui sunt deserunt exercitation veniam veniam nisi nisi culpa.\"\n    },\n    {\n      \"date\": \"Thu Mar 13 2003 19:13:54 GMT+0000 (UTC)\",\n      \"featured\": false,\n      \"name\": \"Voluptate irure ipsum Lorem esse minim irure culpa consectetur ad.\"\n    },\n    {\n      \"date\": \"Fri Mar 22 2002 03:44:26 GMT+0000 (UTC)\",\n      \"featured\": false,\n      \"name\": \"Id reprehenderit consectetur consequat quis do reprehenderit qui aliquip reprehenderit.\"\n    },\n    {\n      \"date\": \"Wed Sep 29 1982 01:25:53 GMT+0000 (UTC)\",\n      \"featured\": false,\n      \"name\": \"Dolore aliquip ad enim aliquip et ex dolore.\"\n    },\n    {\n      \"date\": \"Mon Jan 28 2013 04:28:49 GMT+0000 (UTC)\",\n      \"featured\": false,\n      \"name\": \"Cillum exercitation dolore officia consectetur id nulla excepteur qui consectetur mollit est aliqua.\"\n    },\n    {\n      \"date\": \"Wed Mar 26 1975 18:15:13 GMT+0000 (UTC)\",\n      \"featured\": false,\n      \"name\": \"Duis amet nostrud tempor ad ex ipsum amet incididunt voluptate enim irure.\"\n    },\n    {\n      \"date\": \"Sat May 09 1981 19:41:28 GMT+0000 (UTC)\",\n      \"featured\": true,\n      \"name\": \"Cupidatat mollit amet tempor eiusmod amet do.\"\n    }\n  ];\n});</code></pre>\n\n<p>Each of the items in this sample data has a name, whether or not the course is featured, and when the course is published.</p>\n\n<p>This is the data that I'll need in order to display it in those two areas.</p>\n\n<hr />\n\n<h6 id=\"featuredcoursespartial\">Featured courses partial</h6>\n\n<p>Now, let's go into our \"featured courses\" partial and add some HTML and bind to this data. </p>\n\n<p>So, I'll take out the placeholder text, and inside of the panel body, I'll add a row and use the <strong>ng-repeat</strong> directive so it'll create a row for every item in the data set that I want to display.</p>\n\n<p>And, I want to do a little bit of filtering on that data.</p>\n\n<p>I want to set up a filter so that only the courses that have the featured properties set to true will show up.</p>\n\n<p>And for that, I'll use the \"filter\" filter. And I'll set that the featured property has to be set to true.</p>\n\n<p>And then for each row inside of here, I'll create a column that's full width and just add the course name. And, that'll be good enough for now.</p>\n\n<p><span class=\"filename\">featured-courses.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-jade\">.panel  \n  h1 Featured Courses\n  .row(ng-repeat=\"course in courses | filter:{featured:true}\")\n    .large-12.columns - {{course.name}}</code></pre>\n\n<hr />\n\n<h6 id=\"newcoursespartial\">New courses partial</h6>\n\n<p>Now, let's go to our \"new courses\" partial. And, again, we'll take out the placeholder text.</p>\n\n<p>We'll do the same thing and add a row with the <strong>ng-repeat</strong> directive. And, I'll have to do some filtering again.</p>\n\n<p>Now, I only want to show 10 courses in both the \"featured\" and \"new featured\" sections of the page.</p>\n\n<p>But since a user is going to select the featured courses, I can trust the user to only select 10, whereas new courses, I need to limit it to 10.</p>\n\n<p>But, I also need to order by the publish date, so I can't just limit to 10 first and then order by the publish date, otherwise, the ordering will be wrong.</p>\n\n<p>So, I need to set up two filters. First, the \"order by\" and then a filter that will limit it to only 10 rows.</p>\n\n<p><span class=\"filename\">new-courses.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-jade\">.panel  \n  h1 New Courses\n  .row(ng-repeat=\"course in courses | orderBy:'published':true | limitTo:10\")\n    .large-3.small-3.columns {{course.published | date:'MMM d'}}\n    .large-9.small-9.columns {{course.name}}</code></pre>\n\n<p>Now to display this data, I'm actually going to have two columns.</p>\n\n<p>The first column is going to show the publish date, and that's only going to be one-quarter of the space.</p>\n\n<p>And, I'll filter that so that it's formatted like a date. And, I want to show the format with a three-letter month and then a one-digit day.</p>\n\n<p>And then, my second column will be the other 75%.</p>\n\n<p>And that will have the name of the course in it.</p>\n\n<hr />\n\n<h6 id=\"displayingthedata\">Displaying the data</h6>\n\n<p>Now, let's go see our changes in the browser. I'll refresh the page.</p>\n\n<p><img src=\"/content/images/2015/04/localhost_3030-2.png\" alt=\"courses being displayed\" /></p>\n\n<p>And now we can see our sample data showing up just the way we want it.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-designing-the-ui-creating-the-main-page-content\" style=\"width: 50%;\">Creating the Main Page Content</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-introduction\" style=\"float: right;width: 50%;text-align: right;\">Authentication Introduction</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429066841964,"created_by":1,"updated_at":1429136637528,"updated_by":1,"published_at":1429066879476,"published_by":1},{"id":66,"uuid":"a8d7e8ba-6987-4263-b853-5ecca69af22a","title":"Building Angular.js and Node.js with the MEAN stack - Authentication: Introduction","slug":"building-angular-js-and-node-js-with-the-mean-stack-authentication-introduction","markdown":"> In this module and the next one we are going to implement **authentication** and **authorization** for our **MEAN** application.\n\nLet's look at the agenda for the next two modules.\n\n> **Authentication** is the means we use to make sure that a user is who they say they are. \n\n> **Authorization** is the process of restricting data and functionality to only those users who are allowed to access them.\n\n![Module Agenda](/content/images/2015/04/Pluralsight_Player-1.png)\n\nWe'll begin our foray into the world of **authentication** and **authorization** by implementing login using **Passport**.\n\n> **Passport** is a very common **Node module for implementing authentication**.\n\n**Passport** uses various different **strategies for authentication** and these involve anything from using a **local username and password** to using your **Facebook account to log in**.\n\nWe will be implementing the **local strategy**, which uses a **local username and password**.\n\nThen, we'll make sure that our **passwords** are secure by **encrypting** them using a **hashing algorithm**.\n\nAnd finally, we'll implement **authorization**.\n\n**Passport** won't give us much help here, but **implementing authorization** on top of **Passport** is pretty straightforward.\n\n> By the time we're done with this module, we'll be comfortable with typical **authentication and authorization in a Node application**.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-designing-the-ui-adding-data-to-the-main-page\" style=\"width: 50%;\">Adding Data to the Main Page</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-adding-the-login-display\" style=\"float: right;width: 50%;text-align: right;\">Adding Login Display</a>","html":"<blockquote>\n  <p>In this module and the next one we are going to implement <strong>authentication</strong> and <strong>authorization</strong> for our <strong>MEAN</strong> application.</p>\n</blockquote>\n\n<p>Let's look at the agenda for the next two modules.</p>\n\n<blockquote>\n  <p><strong>Authentication</strong> is the means we use to make sure that a user is who they say they are. </p>\n  \n  <p><strong>Authorization</strong> is the process of restricting data and functionality to only those users who are allowed to access them.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/04/Pluralsight_Player-1.png\" alt=\"Module Agenda\" /></p>\n\n<p>We'll begin our foray into the world of <strong>authentication</strong> and <strong>authorization</strong> by implementing login using <strong>Passport</strong>.</p>\n\n<blockquote>\n  <p><strong>Passport</strong> is a very common <strong>Node module for implementing authentication</strong>.</p>\n</blockquote>\n\n<p><strong>Passport</strong> uses various different <strong>strategies for authentication</strong> and these involve anything from using a <strong>local username and password</strong> to using your <strong>Facebook account to log in</strong>.</p>\n\n<p>We will be implementing the <strong>local strategy</strong>, which uses a <strong>local username and password</strong>.</p>\n\n<p>Then, we'll make sure that our <strong>passwords</strong> are secure by <strong>encrypting</strong> them using a <strong>hashing algorithm</strong>.</p>\n\n<p>And finally, we'll implement <strong>authorization</strong>.</p>\n\n<p><strong>Passport</strong> won't give us much help here, but <strong>implementing authorization</strong> on top of <strong>Passport</strong> is pretty straightforward.</p>\n\n<blockquote>\n  <p>By the time we're done with this module, we'll be comfortable with typical <strong>authentication and authorization in a Node application</strong>.</p>\n</blockquote>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-designing-the-ui-adding-data-to-the-main-page\" style=\"width: 50%;\">Adding Data to the Main Page</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-adding-the-login-display\" style=\"float: right;width: 50%;text-align: right;\">Adding Login Display</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429136553011,"created_by":1,"updated_at":1430326474886,"updated_by":1,"published_at":1429136590685,"published_by":1},{"id":67,"uuid":"c2ff62d4-2917-4222-9720-29249a4a1f34","title":"Building Angular.js and Node.js with the MEAN stack - Authentication: Adding the Login Display","slug":"building-angular-js-and-node-js-with-the-mean-stack-authentication-adding-the-login-display","markdown":"> In this section we're going to start building our **authentication and authorization systems** by just **adding the display portion for our login to our home page**.\n\nSo we'll go into our **index template (index.jade)** and we're going to **add a section to the navbar**.\n\nRight after this **unordered list**, I'm going to **add another div** and I'm going to use the **ng-include directive** and **include a new partial**.\n\n<span class=\"filename\">index.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"15\"><code class=\"language-jade\">extends common/layout\n\nblock main-content\n  nav.top-bar(data-topbar='', role='navigation')\n    ul.title-area\n      li.name\n        h1\n          a(href=\"/\") Monster\n      li.toggle-topbar.menu-icon\n        a(href='#')\n          span Menu\n    section.top-bar-section\n      ul.left\n        li.has-form\n          div(ng-include=\"'/partials/navbar-login'\")\n      ul.right\n        li.divider\n        li\n          a(href=\"/\") Home\n\n  section.content\n    div(ng-view)\n\n  footer.row\n    p.small-3.small-centered.columns &copy; 2015 Evil Corporation Ltd</code></pre>\n\nSo I've told **Angular** to **go out and gather the navbar login partial**.\n\nNow we have to **create that partial**, so I'll **go to my partials directory and create the Jade file**.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ touch public/app/common/partials/navbar-login.jade\n```\n\nSo the display in this **partial** will start out with a **navbar**. Inside of here I'll **create a form** that'll contain the **login boxes and the login button** and that'll be a **navbar form**.\n\n<span class=\"filename\">navbar-login.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-jade\">.row.collapse\n  .large-4.small-4.columns\n    input.form-control(placeholder=\"Email\", ng-model=\"username\")\n  .large-4.small-4.columns\n    input.form-control(type=\"password\", placeholder=\"password\", ng-model=\"password\")\n  .large-4.small-4.columns\n    a.alert.button.expand(ng-click=\"signin(username,password)\") Sign in</code></pre>\n\n**[3]** I'll use the **ng-model directive** and **set the model** to a **property called username**.\n\n**[5]** Then I'll **create another form group** and inside of there I'll **put another input box**, just like the first one, but in this one the **placeholder text will be the password**. I also need to make this **type=password**, and the **ng-model=password**.\n\n**[7]** And lastly we'll **create the button** that they'll **click in order to log in**. And we'll go ahead and **create an click event handler** and we'll call a **method name signin()**, passing in the **username and password**, and that **button will have the text of \"Sign In\"**.\n\nNow I've already got my **server** running so let's just go and **refresh our page** and see how these new controls look.\n\n![Sign In](/content/images/2015/04/localhost_3030-3.png)\n\n---\n\n###### Partials Directory Refactoring ######\n\nOne of the things that is beginning to bother me is that our **partials directory** is starting to get a little bit crowded.\n\nThe problem is that these files do a lot of different things and don't really have any association other than the fact that they're **partials**, yet they're all in the same directory.\n\n> What would be nice is if the **partial files themselves were actually associated with the client code that they belonged to**.\n\nSo for example, here in my **public directory**, inside of **app**, **any partial files that have to do with the main section**, it'd be nice if they were in a **main subfolder here underneath partials**.\n\nSo I might put **main.jade**, **new courses**, and **featured courses** inside of a **main subdirectory**, then the **navbar login** could probably go in either a **common subdirectory** or maybe an **account subdirectory**.\n\nSo let's go ahead and do that.\n\nLet's create a **main subdirectory underneath partials** and **put our three files inside that** and let's **create an account subdirectory and put our navbar login partial inside of that one**.\n\nSo first I'll create that **main directory**, and then I'll move **featured courses** inside of that, and the **main file**, and the **new courses**, and I'll **create another directory called account**, and I'll put the **navbar login inside of that**.\n\n![Main and Account Directories](/content/images/2015/04/main_jade_-__Users_edwin_Documents_github_pluralsight_building-angularjs-and-nodejs-apps-with-the-mean-stack_mean-monster_-_Atom.png)\n\nNow I've got to go through and **change some paths in order to reference these new locations**.\n\n---\n\nSo I'll go back to my **index.jade**.\n\n<span class=\"filename\">index.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"15\"><code class=\"language-jade\">extends common/layout\n\nblock main-content\n  nav.top-bar(data-topbar='', role='navigation')\n    ul.title-area\n      li.name\n        h1\n          a(href=\"/\") Monster\n      li.toggle-topbar.menu-icon\n        a(href='#')\n          span Menu\n    section.top-bar-section\n      ul.left\n        li.has-form\n          div(ng-include=\"'/partials/account/navbar-login'\")\n      ul.right\n        li.divider\n        li\n          a(href=\"/\") Home\n\n  section.content\n    div(ng-view)\n\n  footer.row\n    p.small-3.small-centered.columns &copy; 2015 Evil Corporation Ltd.</code></pre>\n    \n**[15]** inside of there I'm **pointing at partials navbar login and that needs to be account** \n\n---\n\nThen also inside of my **main.jade** file.\n\n<span class=\"filename\">main.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"9,11\"><code class=\"language-jade\">.row\n  .large-12.columns\n    .panel\n      h1 {{ myVar }}\n      p It has an easy to override visual style, and is appropriately subdued.\n\n.row\n  .large-6.small-6.columns\n    div(ng-include=\"'/partials/main/featured-courses'\")\n  .large-6.small-6.columns\n    div(ng-include=\"'/partials/main/new-courses'\")</code></pre>\n\n**[9,11]** Where I'm referencing **featured and new courses**, I'll **put main in here**.\n\n---\n\nThen finally in my **app.js** file.\n\n<span class=\"filename\">app.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"10\"><code class=\"language-javascript\">angular.module('app', ['ngResource', 'ngRoute']);\n\nangular.module('app').config(function($routeProvider, $locationProvider){\n  $locationProvider.html5Mode({\n    enabled: true,\n    requireBase: false\n  });\n  $routeProvider\n    .when('/', {\n      templateUrl: '/partials/main/main',\n      controller: 'mainController'\n    })\n  ;\n\n});</code></pre>\n\n**[10]** This is where I'm **pointing at the main partial** and that changes to **/partials/main/main**.\n\n---\n\nAnd now that I've got those changes made, if I **refresh the page**, we're actually going to **get an error**.\n\n> This is one of the dangers of using complex routing with your partials especially when paired with a catch all route that just returns the **index.html**.\n\nLet's go **refresh our page** and see what happens. I'm going to **open up the console** and make it just a little bit bigger before I refresh the page so you can **see the errors** that we're getting.\n\nWe've actually crashed the page and it's not responding any more. Even if I click stop, the page is still working.\n\nThe problem is that **my route is no longer correct**. Over here in my **server.js**, the **route to the partials only includes one subdirectory** so now that I've got **two subdirectories**, this **route isn't matching anymore**, so **all requests for partials are now getting satisfied by the star route**, which is actually just **returning the index**.\n\nThat **index has a reference to a partial again**, so **Angular is getting a partial back**, which **has a reference to another ng-include**, **trying to request that partial again**, **getting another index page back** that's **got a reference to an ng-include**, and **getting into essentially an infinite loop**.\n\nNow we'll be able to fix this problem by **fixing our partial route**.\n\nSo all I need to do to **fix this problem is go up to this route**.\n\n<span class=\"filename\">routes.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"2-4\"><code class=\"language-javascript\">module.exports = function(app){\n  app.get('/partials/*', function(req, res){\n    res.render('common/partials/' + req.params[0]);\n  });\n\n  app.get('*', function(req, res){\n    res.render('index');\n  });\n}</code></pre>\n\n**[2]** **Change this partial path to an asterisk**\n\n**[3]** and now here in the **render column**, instead of asking for **request.params.partial path**, I want **request.params and then an indexer for the 0th element**.\n\n> **Request.params** is an array and the first element will be what matches up with the asterisk in the path.\n\n---\n\n###### Check in browser ######\n\nSo we'll go back to the browser.\n\nI've opened up a new tab and I've actually got to close this tab in order to get it to stop. And now we can **browse to our website**.\n\n**And if we look at the console we'll see that we're not getting any errors.**\n\n---\n\n###### Moving partials into app directory ######\n\nNow that's well and good, but there's another improvement we can make.\n\nWe've created this **parallel set of directories to what's up here in our app directory that contains our client-side application**, but since we're creating parallel directories, **why don't we just move these partial files up here into this directory so that they're actually alongside the files that they belong with**. \n\nI'm gonna **drag this entire account folder up here and then inside of this main folder I'm gonna grab all three of these partials and drag them up here to main, and now I can delete this partials directory**.\n\nAnd now **we can just change this route right here so instead of looking at partials, we'll specify a different path relative to the views directory**.\n\nWe'll **go from the views directory established in express.js then into public, and then into app**.\n\n![partials routes](/content/images/2015/04/partials_routes.png)\n\nNow any request we make **that starts with the directory partials**, we'll still **look inside of the public app directory**, but **we'll process the files as if they were Jade templates**.\n\n---\n\n###### Login Partial Controller ######\n\nOur **navbar login partial is up at the top of the page**, but **it's not a child of any element that has a controller on it right now**.\n\nIf we go back to our **index.jade**, we can see that here the **ng-view** is what links the **ng-controller** to this section, but our **navbar login partial** is in a different section of the page, so the **controller for the current view** won't be the **controller for the navbar login**.\n\n<span class=\"filename\">index.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"15,22\"><code class=\"language-jade\">extends common/layout\n\nblock main-content\n  nav.top-bar(data-topbar='', role='navigation')\n    ul.title-area\n      li.name\n        h1\n          a(href=\"/\") Monster\n      li.toggle-topbar.menu-icon\n        a(href='#')\n          span Menu\n    section.top-bar-section\n      ul.left\n        li.has-form\n          div(ng-include=\"'/partials/account/navbar-login'\")\n      ul.right\n        li.divider\n        li\n          a(href=\"/\") Home\n\n  section.content\n    div(ng-view)\n\n  footer.row\n    p.small-3.small-centered.columns &copy; 2015 Evil Corporation Ltd.</code></pre>\n\n---\n\n###### Giving navbar login partial it's own controller ######\n\nI'd like it to **have its own controller** anyway so I'm going to **create a controller for this section of the page**.\n\n<span class=\"filename\">navbar-login.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"1\"><code class=\"language-jade\">.row.collapse(ng-controller=\"navbarLoginController\")\n  .large-4.small-4.columns\n    input.form-control(placeholder=\"Email\", ng-model=\"username\")\n  .large-4.small-4.columns\n    input.form-control(type=\"password\", placeholder=\"password\", ng-model=\"password\")\n  .large-4.small-4.columns\n    a.alert.button.expand(ng-click=\"signin(username,password)\") Sign in</code></pre>\n    \n**[1]** So I'll go back to my **navbar login partial** and **at the top of the page I'll specify an ng-controller** and **specify a controller for this area of the page**.\n\n---\n\n###### Create the controller for the navbar login partial ######\n\nNow I need to **create that controller** and since this controller **doesn't really belong to the main area**, I'm going to **put it inside of an account subdirectory**.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ touch public/app/account/navbarLoginController.js\n```\n\n<span class=\"filename\">navbarLoginController.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">angular.module('app').controller('navbarLoginController', function ($scope){\n  $scope.signin = function(username, password){\n    console.log(\"I, \" + username + \" am not done yet \" + password);\n  }\n});</code></pre>\n\n**[2]** Now I know that I've got a **call to a signin function** so I'll go ahead and **define that right now**.\n\n**[3]** And for now I'll just **log out a message to the console**.\n\n---\n\n###### Add controller to scripts tags ######\n\nAnd my last step is I need to **include a script tag for this file** so I'll go to my scripts template.\n\n<span class=\"filename\">scripts.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"7\"><code class=\"language-jade\">script(type=\"text/javascript\", src=\"/vendor/jquery/dist/jquery.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular/angular.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular-resource/angular-resource.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular-route/angular-route.js\")\nscript(type=\"text/javascript\", src=\"/app/app.js\")\nscript(type=\"text/javascript\", src=\"/app/main/mainController.js\")\nscript(type=\"text/javascript\", src=\"/app/account/navbarLoginController.js\")</code></pre>\n\n---\n\n###### Verify in browser ######\n\nNow let's go test our functionality in a browser.\n\n![login controller](/content/images/2015/04/login_controller.png)\n\nOkay, I'll **open up a console** and I'll **click sign in**, and we **get the message**.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-introduction\" style=\"width: 50%;\">Introduction</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-refactoring-server-js\" style=\"float: right;width: 50%;text-align: right;\">Refactoring server.js</a>","html":"<blockquote>\n  <p>In this section we're going to start building our <strong>authentication and authorization systems</strong> by just <strong>adding the display portion for our login to our home page</strong>.</p>\n</blockquote>\n\n<p>So we'll go into our <strong>index template (index.jade)</strong> and we're going to <strong>add a section to the navbar</strong>.</p>\n\n<p>Right after this <strong>unordered list</strong>, I'm going to <strong>add another div</strong> and I'm going to use the <strong>ng-include directive</strong> and <strong>include a new partial</strong>.</p>\n\n<p><span class=\"filename\">index.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"15\"><code class=\"language-jade\">extends common/layout\n\nblock main-content  \n  nav.top-bar(data-topbar='', role='navigation')\n    ul.title-area\n      li.name\n        h1\n          a(href=\"/\") Monster\n      li.toggle-topbar.menu-icon\n        a(href='#')\n          span Menu\n    section.top-bar-section\n      ul.left\n        li.has-form\n          div(ng-include=\"'/partials/navbar-login'\")\n      ul.right\n        li.divider\n        li\n          a(href=\"/\") Home\n\n  section.content\n    div(ng-view)\n\n  footer.row\n    p.small-3.small-centered.columns &copy; 2015 Evil Corporation Ltd</code></pre>\n\n<p>So I've told <strong>Angular</strong> to <strong>go out and gather the navbar login partial</strong>.</p>\n\n<p>Now we have to <strong>create that partial</strong>, so I'll <strong>go to my partials directory and create the Jade file</strong>.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ touch public/app/common/partials/navbar-login.jade\n</code></pre>\n\n<p>So the display in this <strong>partial</strong> will start out with a <strong>navbar</strong>. Inside of here I'll <strong>create a form</strong> that'll contain the <strong>login boxes and the login button</strong> and that'll be a <strong>navbar form</strong>.</p>\n\n<p><span class=\"filename\">navbar-login.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-jade\">.row.collapse  \n  .large-4.small-4.columns\n    input.form-control(placeholder=\"Email\", ng-model=\"username\")\n  .large-4.small-4.columns\n    input.form-control(type=\"password\", placeholder=\"password\", ng-model=\"password\")\n  .large-4.small-4.columns\n    a.alert.button.expand(ng-click=\"signin(username,password)\") Sign in</code></pre>\n\n<p><strong>[3]</strong> I'll use the <strong>ng-model directive</strong> and <strong>set the model</strong> to a <strong>property called username</strong>.</p>\n\n<p><strong>[5]</strong> Then I'll <strong>create another form group</strong> and inside of there I'll <strong>put another input box</strong>, just like the first one, but in this one the <strong>placeholder text will be the password</strong>. I also need to make this <strong>type=password</strong>, and the <strong>ng-model=password</strong>.</p>\n\n<p><strong>[7]</strong> And lastly we'll <strong>create the button</strong> that they'll <strong>click in order to log in</strong>. And we'll go ahead and <strong>create an click event handler</strong> and we'll call a <strong>method name signin()</strong>, passing in the <strong>username and password</strong>, and that <strong>button will have the text of \"Sign In\"</strong>.</p>\n\n<p>Now I've already got my <strong>server</strong> running so let's just go and <strong>refresh our page</strong> and see how these new controls look.</p>\n\n<p><img src=\"/content/images/2015/04/localhost_3030-3.png\" alt=\"Sign In\" /></p>\n\n<hr />\n\n<h6 id=\"partialsdirectoryrefactoring\">Partials Directory Refactoring</h6>\n\n<p>One of the things that is beginning to bother me is that our <strong>partials directory</strong> is starting to get a little bit crowded.</p>\n\n<p>The problem is that these files do a lot of different things and don't really have any association other than the fact that they're <strong>partials</strong>, yet they're all in the same directory.</p>\n\n<blockquote>\n  <p>What would be nice is if the <strong>partial files themselves were actually associated with the client code that they belonged to</strong>.</p>\n</blockquote>\n\n<p>So for example, here in my <strong>public directory</strong>, inside of <strong>app</strong>, <strong>any partial files that have to do with the main section</strong>, it'd be nice if they were in a <strong>main subfolder here underneath partials</strong>.</p>\n\n<p>So I might put <strong>main.jade</strong>, <strong>new courses</strong>, and <strong>featured courses</strong> inside of a <strong>main subdirectory</strong>, then the <strong>navbar login</strong> could probably go in either a <strong>common subdirectory</strong> or maybe an <strong>account subdirectory</strong>.</p>\n\n<p>So let's go ahead and do that.</p>\n\n<p>Let's create a <strong>main subdirectory underneath partials</strong> and <strong>put our three files inside that</strong> and let's <strong>create an account subdirectory and put our navbar login partial inside of that one</strong>.</p>\n\n<p>So first I'll create that <strong>main directory</strong>, and then I'll move <strong>featured courses</strong> inside of that, and the <strong>main file</strong>, and the <strong>new courses</strong>, and I'll <strong>create another directory called account</strong>, and I'll put the <strong>navbar login inside of that</strong>.</p>\n\n<p><img src=\"/content/images/2015/04/main_jade_-__Users_edwin_Documents_github_pluralsight_building-angularjs-and-nodejs-apps-with-the-mean-stack_mean-monster_-_Atom.png\" alt=\"Main and Account Directories\" /></p>\n\n<p>Now I've got to go through and <strong>change some paths in order to reference these new locations</strong>.</p>\n\n<hr />\n\n<p>So I'll go back to my <strong>index.jade</strong>.</p>\n\n<p><span class=\"filename\">index.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"15\"><code class=\"language-jade\">extends common/layout\n\nblock main-content  \n  nav.top-bar(data-topbar='', role='navigation')\n    ul.title-area\n      li.name\n        h1\n          a(href=\"/\") Monster\n      li.toggle-topbar.menu-icon\n        a(href='#')\n          span Menu\n    section.top-bar-section\n      ul.left\n        li.has-form\n          div(ng-include=\"'/partials/account/navbar-login'\")\n      ul.right\n        li.divider\n        li\n          a(href=\"/\") Home\n\n  section.content\n    div(ng-view)\n\n  footer.row\n    p.small-3.small-centered.columns &copy; 2015 Evil Corporation Ltd.</code></pre>\n\n<p><strong>[15]</strong> inside of there I'm <strong>pointing at partials navbar login and that needs to be account</strong> </p>\n\n<hr />\n\n<p>Then also inside of my <strong>main.jade</strong> file.</p>\n\n<p><span class=\"filename\">main.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"9,11\"><code class=\"language-jade\">.row  \n  .large-12.columns\n    .panel\n      h1 {{ myVar }}\n      p It has an easy to override visual style, and is appropriately subdued.\n\n.row\n  .large-6.small-6.columns\n    div(ng-include=\"'/partials/main/featured-courses'\")\n  .large-6.small-6.columns\n    div(ng-include=\"'/partials/main/new-courses'\")</code></pre>\n\n<p><strong>[9,11]</strong> Where I'm referencing <strong>featured and new courses</strong>, I'll <strong>put main in here</strong>.</p>\n\n<hr />\n\n<p>Then finally in my <strong>app.js</strong> file.</p>\n\n<p><span class=\"filename\">app.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"10\"><code class=\"language-javascript\">angular.module('app', ['ngResource', 'ngRoute']);\n\nangular.module('app').config(function($routeProvider, $locationProvider){  \n  $locationProvider.html5Mode({\n    enabled: true,\n    requireBase: false\n  });\n  $routeProvider\n    .when('/', {\n      templateUrl: '/partials/main/main',\n      controller: 'mainController'\n    })\n  ;\n\n});</code></pre>\n\n<p><strong>[10]</strong> This is where I'm <strong>pointing at the main partial</strong> and that changes to <strong>/partials/main/main</strong>.</p>\n\n<hr />\n\n<p>And now that I've got those changes made, if I <strong>refresh the page</strong>, we're actually going to <strong>get an error</strong>.</p>\n\n<blockquote>\n  <p>This is one of the dangers of using complex routing with your partials especially when paired with a catch all route that just returns the <strong>index.html</strong>.</p>\n</blockquote>\n\n<p>Let's go <strong>refresh our page</strong> and see what happens. I'm going to <strong>open up the console</strong> and make it just a little bit bigger before I refresh the page so you can <strong>see the errors</strong> that we're getting.</p>\n\n<p>We've actually crashed the page and it's not responding any more. Even if I click stop, the page is still working.</p>\n\n<p>The problem is that <strong>my route is no longer correct</strong>. Over here in my <strong>server.js</strong>, the <strong>route to the partials only includes one subdirectory</strong> so now that I've got <strong>two subdirectories</strong>, this <strong>route isn't matching anymore</strong>, so <strong>all requests for partials are now getting satisfied by the star route</strong>, which is actually just <strong>returning the index</strong>.</p>\n\n<p>That <strong>index has a reference to a partial again</strong>, so <strong>Angular is getting a partial back</strong>, which <strong>has a reference to another ng-include</strong>, <strong>trying to request that partial again</strong>, <strong>getting another index page back</strong> that's <strong>got a reference to an ng-include</strong>, and <strong>getting into essentially an infinite loop</strong>.</p>\n\n<p>Now we'll be able to fix this problem by <strong>fixing our partial route</strong>.</p>\n\n<p>So all I need to do to <strong>fix this problem is go up to this route</strong>.</p>\n\n<p><span class=\"filename\">routes.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"2-4\"><code class=\"language-javascript\">module.exports = function(app){  \n  app.get('/partials/*', function(req, res){\n    res.render('common/partials/' + req.params[0]);\n  });\n\n  app.get('*', function(req, res){\n    res.render('index');\n  });\n}</code></pre>\n\n<p><strong>[2]</strong> <strong>Change this partial path to an asterisk</strong></p>\n\n<p><strong>[3]</strong> and now here in the <strong>render column</strong>, instead of asking for <strong>request.params.partial path</strong>, I want <strong>request.params and then an indexer for the 0th element</strong>.</p>\n\n<blockquote>\n  <p><strong>Request.params</strong> is an array and the first element will be what matches up with the asterisk in the path.</p>\n</blockquote>\n\n<hr />\n\n<h6 id=\"checkinbrowser\">Check in browser</h6>\n\n<p>So we'll go back to the browser.</p>\n\n<p>I've opened up a new tab and I've actually got to close this tab in order to get it to stop. And now we can <strong>browse to our website</strong>.</p>\n\n<p><strong>And if we look at the console we'll see that we're not getting any errors.</strong></p>\n\n<hr />\n\n<h6 id=\"movingpartialsintoappdirectory\">Moving partials into app directory</h6>\n\n<p>Now that's well and good, but there's another improvement we can make.</p>\n\n<p>We've created this <strong>parallel set of directories to what's up here in our app directory that contains our client-side application</strong>, but since we're creating parallel directories, <strong>why don't we just move these partial files up here into this directory so that they're actually alongside the files that they belong with</strong>. </p>\n\n<p>I'm gonna <strong>drag this entire account folder up here and then inside of this main folder I'm gonna grab all three of these partials and drag them up here to main, and now I can delete this partials directory</strong>.</p>\n\n<p>And now <strong>we can just change this route right here so instead of looking at partials, we'll specify a different path relative to the views directory</strong>.</p>\n\n<p>We'll <strong>go from the views directory established in express.js then into public, and then into app</strong>.</p>\n\n<p><img src=\"/content/images/2015/04/partials_routes.png\" alt=\"partials routes\" /></p>\n\n<p>Now any request we make <strong>that starts with the directory partials</strong>, we'll still <strong>look inside of the public app directory</strong>, but <strong>we'll process the files as if they were Jade templates</strong>.</p>\n\n<hr />\n\n<h6 id=\"loginpartialcontroller\">Login Partial Controller</h6>\n\n<p>Our <strong>navbar login partial is up at the top of the page</strong>, but <strong>it's not a child of any element that has a controller on it right now</strong>.</p>\n\n<p>If we go back to our <strong>index.jade</strong>, we can see that here the <strong>ng-view</strong> is what links the <strong>ng-controller</strong> to this section, but our <strong>navbar login partial</strong> is in a different section of the page, so the <strong>controller for the current view</strong> won't be the <strong>controller for the navbar login</strong>.</p>\n\n<p><span class=\"filename\">index.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"15,22\"><code class=\"language-jade\">extends common/layout\n\nblock main-content  \n  nav.top-bar(data-topbar='', role='navigation')\n    ul.title-area\n      li.name\n        h1\n          a(href=\"/\") Monster\n      li.toggle-topbar.menu-icon\n        a(href='#')\n          span Menu\n    section.top-bar-section\n      ul.left\n        li.has-form\n          div(ng-include=\"'/partials/account/navbar-login'\")\n      ul.right\n        li.divider\n        li\n          a(href=\"/\") Home\n\n  section.content\n    div(ng-view)\n\n  footer.row\n    p.small-3.small-centered.columns &copy; 2015 Evil Corporation Ltd.</code></pre>\n\n<hr />\n\n<h6 id=\"givingnavbarloginpartialitsowncontroller\">Giving navbar login partial it's own controller</h6>\n\n<p>I'd like it to <strong>have its own controller</strong> anyway so I'm going to <strong>create a controller for this section of the page</strong>.</p>\n\n<p><span class=\"filename\">navbar-login.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"1\"><code class=\"language-jade\">.row.collapse(ng-controller=\"navbarLoginController\")  \n  .large-4.small-4.columns\n    input.form-control(placeholder=\"Email\", ng-model=\"username\")\n  .large-4.small-4.columns\n    input.form-control(type=\"password\", placeholder=\"password\", ng-model=\"password\")\n  .large-4.small-4.columns\n    a.alert.button.expand(ng-click=\"signin(username,password)\") Sign in</code></pre>\n\n<p><strong>[1]</strong> So I'll go back to my <strong>navbar login partial</strong> and <strong>at the top of the page I'll specify an ng-controller</strong> and <strong>specify a controller for this area of the page</strong>.</p>\n\n<hr />\n\n<h6 id=\"createthecontrollerforthenavbarloginpartial\">Create the controller for the navbar login partial</h6>\n\n<p>Now I need to <strong>create that controller</strong> and since this controller <strong>doesn't really belong to the main area</strong>, I'm going to <strong>put it inside of an account subdirectory</strong>.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ touch public/app/account/navbarLoginController.js\n</code></pre>\n\n<p><span class=\"filename\">navbarLoginController.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">angular.module('app').controller('navbarLoginController', function ($scope){  \n  $scope.signin = function(username, password){\n    console.log(\"I, \" + username + \" am not done yet \" + password);\n  }\n});</code></pre>\n\n<p><strong>[2]</strong> Now I know that I've got a <strong>call to a signin function</strong> so I'll go ahead and <strong>define that right now</strong>.</p>\n\n<p><strong>[3]</strong> And for now I'll just <strong>log out a message to the console</strong>.</p>\n\n<hr />\n\n<h6 id=\"addcontrollertoscriptstags\">Add controller to scripts tags</h6>\n\n<p>And my last step is I need to <strong>include a script tag for this file</strong> so I'll go to my scripts template.</p>\n\n<p><span class=\"filename\">scripts.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"7\"><code class=\"language-jade\">script(type=\"text/javascript\", src=\"/vendor/jquery/dist/jquery.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular/angular.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular-resource/angular-resource.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular-route/angular-route.js\")  \nscript(type=\"text/javascript\", src=\"/app/app.js\")  \nscript(type=\"text/javascript\", src=\"/app/main/mainController.js\")  \nscript(type=\"text/javascript\", src=\"/app/account/navbarLoginController.js\")</code></pre>\n\n<hr />\n\n<h6 id=\"verifyinbrowser\">Verify in browser</h6>\n\n<p>Now let's go test our functionality in a browser.</p>\n\n<p><img src=\"/content/images/2015/04/login_controller.png\" alt=\"login controller\" /></p>\n\n<p>Okay, I'll <strong>open up a console</strong> and I'll <strong>click sign in</strong>, and we <strong>get the message</strong>.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-introduction\" style=\"width: 50%;\">Introduction</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-refactoring-server-js\" style=\"float: right;width: 50%;text-align: right;\">Refactoring server.js</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429136698295,"created_by":1,"updated_at":1430427431469,"updated_by":1,"published_at":1429136791179,"published_by":1},{"id":68,"uuid":"a56a62a9-cb28-4943-858b-99d7df4c02f6","title":"Building Angular.js and Node.js with the MEAN stack - Authentication: Refactoring server.js","slug":"building-angular-js-and-node-js-with-the-mean-stack-authentication-refactoring-server-js","markdown":"Now that our **visual elements are in place**, we can **start writing the code that'll actually handle the login on our server**, but that code's got to go here in our **server.js** file and this is already becoming a bit of a hodge-podge of different pieces of functionality.\n\nSo **before we start adding code for login**, I'd like to **clean up this file and refactor it** so that it's easier to maintain and easier to read.\n\n---\n\n###### Express Configuration File - express.js ######\n\nSo my first step to that end will be to go back to the top and I want to **move the code that configures my Express application off to its own file**.\n\nSo I'll **create a new directory underneath server** called **config**, and inside there I'm going to **create a new file called express.js**. \n\n<span class=\"filename\">Terminal</span>\n```bash\n$ mkdir server/config\n$ touch server/config/express.js\n```\n\nAnd I'm going to **move my configuration code from my server.js file into this file**.\n\n---\n\nAfter **moving my configuration code into server.js**:\n\n<span class=\"filename\">express.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"1-3,5,6\"><code class=\"language-javascript\">var express  = require('express'),\n  logger     = require('morgan'),\n  bodyParser = require('body-parser');\n\nmodule.exports = function(app, config){\n  app.set('views', config.rootPath + '/public/app');\n  app.set('view engine', 'jade');\n\n  app.use(logger('dev'));\n  app.use(bodyParser());\n\n  app.use(express.static(config.rootPath + '/public'));\n}</code></pre>\n\n**[1-3]** Now I've got to **bring in a couple of modules**. I need to **bring in Express**, and I also need to **bring in Morgan, and Body Parser**.\n\n**[5]** Now we need to **wrap this in an exports function**, so I'll say **module.exports = function**.\n\n**[5]** Now my **code is using this app variable** and that's **created previously inside of server.js** so I wanna **pass that into my function**.\n\n**[6]** One more thing that's **changed by moving this code here into this file** is the **underscore underscore dirname (__dirname)** is **now a different directory than it was before**, so this **path is no longer going to be correct**.\n\nI **could change this so that it would be correct and still use '__dirname'**, but what I'd prefer to do is **actually bring in the root path as a parameter to my function**.\n\nNow I could just **bring in the root path itself**, but I might as well **bring in a config object that contains the root path**.\n\nSo let's **operate as if we already had one** and **down here where we have dirname** we're going to **replace this with config.rootpath**.\n\n---\n\n###### Requiring the express configuration file ######\n\n<span class=\"filename\">server.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"10\"><code class=\"language-javascript\">var express  = require('express'),\n  mongoose   = require('mongoose');\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nvar config = require('./server/config/config')[env];\n\nrequire('./server/config/express')(app, config);\nrequire('./server/config/mongoose')(config);\nrequire('./server/config/routes')(app);\n\napp.listen(config.port);\nconsole.log('Listening on port ' + config.port + '...');</code></pre>\n\n**[10]** Now I'll **go back to my server.js file** and I'll **invoke that code here by requiring it**, which **brings in that function**, and then I'll **invoke that function, passing into it app and a config object**.\n\n---\n\n###### Creating the config object ######\n\nNow I just need to **create that config object**, which **has a root path variable** and for now I'll just **set that to __dirname**\n\n<span class=\"filename\">server.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">var config = {\n  rootPath: __dirname\n}</code></pre>\n\nAt this point I can **remove the extra modules** and now I've **got all my Express configuration out in its own file**.\n\nI've also noticed that we've **now got three different pieces of configuration information that we're dealing with**.\n\nWe'll **dealing with our root path our Mongo connection string and the port**, so it'd be nice to **encapsulate all those in the config object** and also **pull that code out into its own file as well**.\n\n---\n\n###### Creating a config file ######\n\nSo I'll **go to my config directory** and **create a new config.js file**.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ touch server/config/config.js\n```\n\n<span class=\"filename\">config.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"1-2,5-14\"><code class=\"language-javascript\">var path = require('path');\nvar rootPath = path.normalize(__dirname + '/../../');\n\nmodule.exports = {\n  development: {\n    db: 'mongodb://localhost/mydatabase',\n    rootPath: rootPath,\n    port: process.env.PORT || 3030\n  },\n  production: {\n    db: 'mongodb://edwin:12mm0n5t3r@ds061651.mongolab.com:61651/monster',\n    rootPath: rootPath,\n    port: process.env.PORT || 80\n  }\n}</code></pre>\n\n**[5,10]** I'm going to **export an object** and that **object will have two different keys on it**, **one for each of the environments that I'm dealing with**.\n\n**[2,7,12]** And **for each of these I'll need to set the rootPath** and that's **going to be the same value regardless of which environment I'm in**. And I want to **normalize that path** so I'll **bring in the path module** and that **will start from the current directory**, but since we're now in **server config**, I **need go up two directories** and I'll **set that as the root path in both environments**.\n\n**[6]** I also need to specify the **MongoDB connection string**. Let's go back here and **grab that connection string for the development environment**.\n\n**[11]** Same thing for **production**.\n\n**[8,13]** And the last thing I need is to **set the port to process.env.port** and **in production we'll default that to 80** and **in development we'll default that to 3030**.\n\n---\n\n###### Getting a config object based on environment ######\n\nNow we can **go back to our server.js** and we can **create that config object**.\n\n<span class=\"filename\"></span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"8,14,15\"><code class=\"language-javascript\">var express  = require('express'),\n  mongoose   = require('mongoose');\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nvar config = require('./server/config/config')[env];\n\nrequire('./server/config/express')(app, config);\nrequire('./server/config/mongoose')(config);\nrequire('./server/config/routes')(app);\n\napp.listen(config.port);\nconsole.log('Listening on port ' + config.port + '...');</code></pre>\n\n**[8]** Right here **instead of creating a config object by hand**, we will **require in that config file** and then we'll **grab the key that matches our environment**.\n\n**[14,15]** Now we can **change this code here to just connect to the config.db** and then down **where the port is specified, we can just pass config.port into app.listen()**.\n\n---\n\n###### Mongoose Configuration File - mongoose.js ######\n\nNext I want to **extract out all of this Mongoose related code**, so to do that I'll **remove this block of code** and I'll **create a config file named mongoose.js**.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ touch server/config/mongoose.js\n```\n\n<span class=\"filename\">mongoose.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"1,3\"><code class=\"language-javascript\">var mongoose = require('mongoose');\n\nmodule.exports = function(config){\n  mongoose.connect(config.db);\n  var db = mongoose.connection;\n  db.on('error', console.error.bind(console, 'connection error...'));\n  db.once('open', function callback(){\n    console.log('mydatabase db opened');\n  });\n}</code></pre>\n\n**[1]**  We do need to **bring in the Mongoose module**\n\n**[3]** I'll **add in the export statement** and **pass in the config object into the function**.\n\n---\n\n###### Calling in the mongoose configuration file to server ######\n\nWe'll go back to our **server.js** file\n\n<span class=\"filename\">server.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"11\"><code class=\"language-javascript\">var express  = require('express'),\n  mongoose   = require('mongoose');\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nvar config = require('./server/config/config')[env];\n\nrequire('./server/config/express')(app, config);\nrequire('./server/config/mongoose')(config);\nrequire('./server/config/routes')(app);\n\napp.listen(config.port);\nconsole.log('Listening on port ' + config.port + '...');</code></pre>\n\n**[11]** We will **call that file** as well.\n\n---\n\n###### Routes Configuration File - routes.js ######\n\nAnd the **last section that we can move out is our routes**.\n\nSo let's **create another file called routes.js**.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ touch server/config/routes.js\n```\n\n<span class=\"filename\">routes.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"1,2\"><code class=\"language-javascript\">module.exports = function(app){\n  app.get('/partials/*', function(req, res){\n    res.render('./' + req.params[0]);\n  });\n\n  app.get('*', function(req, res){\n    res.render('index');\n  });\n}</code></pre>\n\n**[1]** we'll **add a module.exports function**\n\n**[2]** **Pass the app parameter into the function**\n\n---\n\n###### Calling in the routes configuration file to server ######\n\nThen **back in server.js**:\n\n<span class=\"filename\">server.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"12\"><code class=\"language-javascript\">var express  = require('express'),\n  mongoose   = require('mongoose');\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nvar config = require('./server/config/config')[env];\n\nrequire('./server/config/express')(app, config);\nrequire('./server/config/mongoose')(config);\nrequire('./server/config/routes')(app);\n\napp.listen(config.port);\nconsole.log('Listening on port ' + config.port + '...');</code></pre>\n\n**[12]** We can **invoke that file, passing in just app**\n\nAnd now our **server.js** file is looking very neat and organized.\n\n---\n\n###### Verify Website ######\n\nSo let's just **check that our website is still working**. Going back and **refreshing the page**, and **everything seems okay**.\n\nSo there's some **brief refactoring of our server.js file** to make it a lot more readable and maintainable and give us some nice places to put different kinds of code.\n\nWe'll be **adjusting the contents of each of these files in this module** and **creating of each of these files will help us to know where to go to add code when adding functionality to our program**, which really could be helpful with **Express** and **Node** because **Express** can be **very dependent on executing code in the correct order**.\n\n> **Keeping our main file organized will be really helpful in the long run**.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-adding-the-login-display\" style=\"width: 50%;\">Adding the Login Display</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-preparing-for-login\" style=\"float: right;width: 50%;text-align: right;\">Preparing for Login</a>","html":"<p>Now that our <strong>visual elements are in place</strong>, we can <strong>start writing the code that'll actually handle the login on our server</strong>, but that code's got to go here in our <strong>server.js</strong> file and this is already becoming a bit of a hodge-podge of different pieces of functionality.</p>\n\n<p>So <strong>before we start adding code for login</strong>, I'd like to <strong>clean up this file and refactor it</strong> so that it's easier to maintain and easier to read.</p>\n\n<hr />\n\n<h6 id=\"expressconfigurationfileexpressjs\">Express Configuration File - express.js</h6>\n\n<p>So my first step to that end will be to go back to the top and I want to <strong>move the code that configures my Express application off to its own file</strong>.</p>\n\n<p>So I'll <strong>create a new directory underneath server</strong> called <strong>config</strong>, and inside there I'm going to <strong>create a new file called express.js</strong>. </p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ mkdir server/config\n$ touch server/config/express.js\n</code></pre>\n\n<p>And I'm going to <strong>move my configuration code from my server.js file into this file</strong>.</p>\n\n<hr />\n\n<p>After <strong>moving my configuration code into server.js</strong>:</p>\n\n<p><span class=\"filename\">express.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"1-3,5,6\"><code class=\"language-javascript\">var express  = require('express'),  \n  logger     = require('morgan'),\n  bodyParser = require('body-parser');\n\nmodule.exports = function(app, config){  \n  app.set('views', config.rootPath + '/public/app');\n  app.set('view engine', 'jade');\n\n  app.use(logger('dev'));\n  app.use(bodyParser());\n\n  app.use(express.static(config.rootPath + '/public'));\n}</code></pre>\n\n<p><strong>[1-3]</strong> Now I've got to <strong>bring in a couple of modules</strong>. I need to <strong>bring in Express</strong>, and I also need to <strong>bring in Morgan, and Body Parser</strong>.</p>\n\n<p><strong>[5]</strong> Now we need to <strong>wrap this in an exports function</strong>, so I'll say <strong>module.exports = function</strong>.</p>\n\n<p><strong>[5]</strong> Now my <strong>code is using this app variable</strong> and that's <strong>created previously inside of server.js</strong> so I wanna <strong>pass that into my function</strong>.</p>\n\n<p><strong>[6]</strong> One more thing that's <strong>changed by moving this code here into this file</strong> is the <strong>underscore underscore dirname (__dirname)</strong> is <strong>now a different directory than it was before</strong>, so this <strong>path is no longer going to be correct</strong>.</p>\n\n<p>I <strong>could change this so that it would be correct and still use '__dirname'</strong>, but what I'd prefer to do is <strong>actually bring in the root path as a parameter to my function</strong>.</p>\n\n<p>Now I could just <strong>bring in the root path itself</strong>, but I might as well <strong>bring in a config object that contains the root path</strong>.</p>\n\n<p>So let's <strong>operate as if we already had one</strong> and <strong>down here where we have dirname</strong> we're going to <strong>replace this with config.rootpath</strong>.</p>\n\n<hr />\n\n<h6 id=\"requiringtheexpressconfigurationfile\">Requiring the express configuration file</h6>\n\n<p><span class=\"filename\">server.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"10\"><code class=\"language-javascript\">var express  = require('express'),  \n  mongoose   = require('mongoose');\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nvar config = require('./server/config/config')[env];\n\nrequire('./server/config/express')(app, config);  \nrequire('./server/config/mongoose')(config);  \nrequire('./server/config/routes')(app);\n\napp.listen(config.port);  \nconsole.log('Listening on port ' + config.port + '...');</code></pre>\n\n<p><strong>[10]</strong> Now I'll <strong>go back to my server.js file</strong> and I'll <strong>invoke that code here by requiring it</strong>, which <strong>brings in that function</strong>, and then I'll <strong>invoke that function, passing into it app and a config object</strong>.</p>\n\n<hr />\n\n<h6 id=\"creatingtheconfigobject\">Creating the config object</h6>\n\n<p>Now I just need to <strong>create that config object</strong>, which <strong>has a root path variable</strong> and for now I'll just <strong>set that to __dirname</strong></p>\n\n<p><span class=\"filename\">server.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">var config = {  \n  rootPath: __dirname\n}</code></pre>\n\n<p>At this point I can <strong>remove the extra modules</strong> and now I've <strong>got all my Express configuration out in its own file</strong>.</p>\n\n<p>I've also noticed that we've <strong>now got three different pieces of configuration information that we're dealing with</strong>.</p>\n\n<p>We'll <strong>dealing with our root path our Mongo connection string and the port</strong>, so it'd be nice to <strong>encapsulate all those in the config object</strong> and also <strong>pull that code out into its own file as well</strong>.</p>\n\n<hr />\n\n<h6 id=\"creatingaconfigfile\">Creating a config file</h6>\n\n<p>So I'll <strong>go to my config directory</strong> and <strong>create a new config.js file</strong>.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ touch server/config/config.js\n</code></pre>\n\n<p><span class=\"filename\">config.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"1-2,5-14\"><code class=\"language-javascript\">var path = require('path');  \nvar rootPath = path.normalize(__dirname + '/../../');\n\nmodule.exports = {  \n  development: {\n    db: 'mongodb://localhost/mydatabase',\n    rootPath: rootPath,\n    port: process.env.PORT || 3030\n  },\n  production: {\n    db: 'mongodb://edwin:12mm0n5t3r@ds061651.mongolab.com:61651/monster',\n    rootPath: rootPath,\n    port: process.env.PORT || 80\n  }\n}</code></pre>\n\n<p><strong>[5,10]</strong> I'm going to <strong>export an object</strong> and that <strong>object will have two different keys on it</strong>, <strong>one for each of the environments that I'm dealing with</strong>.</p>\n\n<p><strong>[2,7,12]</strong> And <strong>for each of these I'll need to set the rootPath</strong> and that's <strong>going to be the same value regardless of which environment I'm in</strong>. And I want to <strong>normalize that path</strong> so I'll <strong>bring in the path module</strong> and that <strong>will start from the current directory</strong>, but since we're now in <strong>server config</strong>, I <strong>need go up two directories</strong> and I'll <strong>set that as the root path in both environments</strong>.</p>\n\n<p><strong>[6]</strong> I also need to specify the <strong>MongoDB connection string</strong>. Let's go back here and <strong>grab that connection string for the development environment</strong>.</p>\n\n<p><strong>[11]</strong> Same thing for <strong>production</strong>.</p>\n\n<p><strong>[8,13]</strong> And the last thing I need is to <strong>set the port to process.env.port</strong> and <strong>in production we'll default that to 80</strong> and <strong>in development we'll default that to 3030</strong>.</p>\n\n<hr />\n\n<h6 id=\"gettingaconfigobjectbasedonenvironment\">Getting a config object based on environment</h6>\n\n<p>Now we can <strong>go back to our server.js</strong> and we can <strong>create that config object</strong>.</p>\n\n<p><span class=\"filename\"></span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"8,14,15\"><code class=\"language-javascript\">var express  = require('express'),  \n  mongoose   = require('mongoose');\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nvar config = require('./server/config/config')[env];\n\nrequire('./server/config/express')(app, config);  \nrequire('./server/config/mongoose')(config);  \nrequire('./server/config/routes')(app);\n\napp.listen(config.port);  \nconsole.log('Listening on port ' + config.port + '...');</code></pre>\n\n<p><strong>[8]</strong> Right here <strong>instead of creating a config object by hand</strong>, we will <strong>require in that config file</strong> and then we'll <strong>grab the key that matches our environment</strong>.</p>\n\n<p><strong>[14,15]</strong> Now we can <strong>change this code here to just connect to the config.db</strong> and then down <strong>where the port is specified, we can just pass config.port into app.listen()</strong>.</p>\n\n<hr />\n\n<h6 id=\"mongooseconfigurationfilemongoosejs\">Mongoose Configuration File - mongoose.js</h6>\n\n<p>Next I want to <strong>extract out all of this Mongoose related code</strong>, so to do that I'll <strong>remove this block of code</strong> and I'll <strong>create a config file named mongoose.js</strong>.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ touch server/config/mongoose.js\n</code></pre>\n\n<p><span class=\"filename\">mongoose.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"1,3\"><code class=\"language-javascript\">var mongoose = require('mongoose');\n\nmodule.exports = function(config){  \n  mongoose.connect(config.db);\n  var db = mongoose.connection;\n  db.on('error', console.error.bind(console, 'connection error...'));\n  db.once('open', function callback(){\n    console.log('mydatabase db opened');\n  });\n}</code></pre>\n\n<p><strong>[1]</strong>  We do need to <strong>bring in the Mongoose module</strong></p>\n\n<p><strong>[3]</strong> I'll <strong>add in the export statement</strong> and <strong>pass in the config object into the function</strong>.</p>\n\n<hr />\n\n<h6 id=\"callinginthemongooseconfigurationfiletoserver\">Calling in the mongoose configuration file to server</h6>\n\n<p>We'll go back to our <strong>server.js</strong> file</p>\n\n<p><span class=\"filename\">server.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"11\"><code class=\"language-javascript\">var express  = require('express'),  \n  mongoose   = require('mongoose');\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nvar config = require('./server/config/config')[env];\n\nrequire('./server/config/express')(app, config);  \nrequire('./server/config/mongoose')(config);  \nrequire('./server/config/routes')(app);\n\napp.listen(config.port);  \nconsole.log('Listening on port ' + config.port + '...');</code></pre>\n\n<p><strong>[11]</strong> We will <strong>call that file</strong> as well.</p>\n\n<hr />\n\n<h6 id=\"routesconfigurationfileroutesjs\">Routes Configuration File - routes.js</h6>\n\n<p>And the <strong>last section that we can move out is our routes</strong>.</p>\n\n<p>So let's <strong>create another file called routes.js</strong>.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ touch server/config/routes.js\n</code></pre>\n\n<p><span class=\"filename\">routes.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"1,2\"><code class=\"language-javascript\">module.exports = function(app){  \n  app.get('/partials/*', function(req, res){\n    res.render('./' + req.params[0]);\n  });\n\n  app.get('*', function(req, res){\n    res.render('index');\n  });\n}</code></pre>\n\n<p><strong>[1]</strong> we'll <strong>add a module.exports function</strong></p>\n\n<p><strong>[2]</strong> <strong>Pass the app parameter into the function</strong></p>\n\n<hr />\n\n<h6 id=\"callingintheroutesconfigurationfiletoserver\">Calling in the routes configuration file to server</h6>\n\n<p>Then <strong>back in server.js</strong>:</p>\n\n<p><span class=\"filename\">server.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"12\"><code class=\"language-javascript\">var express  = require('express'),  \n  mongoose   = require('mongoose');\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nvar config = require('./server/config/config')[env];\n\nrequire('./server/config/express')(app, config);  \nrequire('./server/config/mongoose')(config);  \nrequire('./server/config/routes')(app);\n\napp.listen(config.port);  \nconsole.log('Listening on port ' + config.port + '...');</code></pre>\n\n<p><strong>[12]</strong> We can <strong>invoke that file, passing in just app</strong></p>\n\n<p>And now our <strong>server.js</strong> file is looking very neat and organized.</p>\n\n<hr />\n\n<h6 id=\"verifywebsite\">Verify Website</h6>\n\n<p>So let's just <strong>check that our website is still working</strong>. Going back and <strong>refreshing the page</strong>, and <strong>everything seems okay</strong>.</p>\n\n<p>So there's some <strong>brief refactoring of our server.js file</strong> to make it a lot more readable and maintainable and give us some nice places to put different kinds of code.</p>\n\n<p>We'll be <strong>adjusting the contents of each of these files in this module</strong> and <strong>creating of each of these files will help us to know where to go to add code when adding functionality to our program</strong>, which really could be helpful with <strong>Express</strong> and <strong>Node</strong> because <strong>Express</strong> can be <strong>very dependent on executing code in the correct order</strong>.</p>\n\n<blockquote>\n  <p><strong>Keeping our main file organized will be really helpful in the long run</strong>.</p>\n</blockquote>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-adding-the-login-display\" style=\"width: 50%;\">Adding the Login Display</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-preparing-for-login\" style=\"float: right;width: 50%;text-align: right;\">Preparing for Login</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429136809564,"created_by":1,"updated_at":1430362180284,"updated_by":1,"published_at":1429136864184,"published_by":1},{"id":69,"uuid":"51b66dcb-6f85-4517-856d-238f926c8a30","title":"Building Angular.js and Node.js with the MEAN stack - Authentication: Preparing for Login","slug":"building-angular-js-and-node-js-with-the-mean-stack-authentication-preparing-for-login","markdown":"> Now that we've **got our display put together** and we've **got our code refactored**, we're **ready to actually implement our login**.\n\nIn this section **we're going to implement a very naïve login** and in further sections **we'll flesh it out and make it more complete**.\n\nNow **for our login we're going to use Passport**.\n\n> **Passport is an extremely popular Node module for handling authentication**. \n\n> We're **going to use Passport Local**, which **implements authentication using a user's username and password stored locally in our own database**.\n\n> As opposed to something like **OAuth**, **which authenticates through a third party**.\n\nNow, **npm install passport and passport-local**.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ npm install passport passport-local --save\n```\n\n---\n\n###### User Schema and Model ######\n\nOkay, now that those are installed, I'm going to **go back to my server's mongoose configuration file code**.\n\nIn here I'm going to **create a schema and a model for our user type**.\n\n**This user type will contain not only the user's basic information** like **name**, but also their **authentication and authorization information**.\n\n<span class=\"filename\">mongoose.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"11-15,19-37\"><code class=\"language-javascript\">var mongoose = require('mongoose');\n\nmodule.exports = function(config){\n  mongoose.connect(config.db);\n  var db = mongoose.connection;\n  db.on('error', console.error.bind(console, 'connection error...'));\n  db.once('open', function callback(){\n    console.log('mydatabase db opened');\n  });\n\n  var userSchema = mongoose.Schema({\n    firstName: String,\n    lastName : String,\n    username : String\n  });\n\n  var User = mongoose.model('User', userSchema);\n\n  User.find([]).exec(function(err, collection){\n    if(collection.length === 0){\n      User.create({\n        firstName: 'Joe',\n        lastName : 'Eames',\n        username : 'jimjim'\n      });\n      User.create({\n        firstName: 'Bob',\n        lastName : 'Wes',\n        username : 'bobby'\n      });\n      User.create({\n        firstName: 'Moe',\n        lastName : 'James',\n        username : 'jamesmoe'\n      });\n    }\n  });\n}</code></pre>\n\n**[11-15]** **Create the schema wit the user having a firstname, lastname, and a username**. All **the three of those will be strings**.\n\nWe'll **add on some more properties later on**.\n\n**[17]** And now we'll **create our user model based on the user schema**.\n\n**[19-37]** **Create some default users**.\n\nSo I'm going to **do a find on that collection**.\n\n**Pass in an empty object** so it will **select all the documents from the collection**.\n\nOnce that returns I want to **check that it has any documents in the collection** and **if not, create a few users**.\n\n**[21-25]** So I'm just going to **use user.create** and we'll **create one user with the firstname of Joe** and last name of Eames and a username** of Joe** and we'll **create a couple more**.\n\n---\n\n###### Nodemon detects and generates records ######\n\nAnd now once I save this, \n\n1. **Nodemon is going to recognize that I've changed my files**.\n- It will execute this code, **find that there's no documents in that collection**\n- and then **create these three records**.\n\n---\n\n###### Verify in the Mongo shell ######\n\nAnd we can see that by **going to our command line** and **going into the Mongo shell**.\n\nAnd we'll **switch the database** and we will **look at the users collection**.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ mongo\nMongoDB shell version: 3.0.0\nconnecting to: test\n> use mydatabase\nswitched to db mydatabase\n> show collections\nsystem.indexes\nusers\n> db.getCollection('users').find({})\n{ \"_id\" : ObjectId(\"552fd0addfb7184c25ec2b5c\"), \"firstName\" : \"Joe\", \"lastName\" : \"Eames\", \"username\" : \"jimjim\", \"__v\" : 0 }\n{ \"_id\" : ObjectId(\"552fd0addfb7184c25ec2b5d\"), \"firstName\" : \"Bob\", \"lastName\" : \"Wes\", \"username\" : \"bobby\", \"__v\" : 0 }\n{ \"_id\" : ObjectId(\"552fd0addfb7184c25ec2b5e\"), \"firstName\" : \"Moe\", \"lastName\" : \"James\", \"username\" : \"jamesmoe\", \"__v\" : 0 }\n>\n```\n\nSo now we can **go back and actually implement our login code on the server**.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-refactoring-server-js\" style=\"width: 50%;\">Refactoring server.js</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-creating-the-server-login-code\" style=\"float: right;width: 50%;text-align: right;\">Server Login Code</a>","html":"<blockquote>\n  <p>Now that we've <strong>got our display put together</strong> and we've <strong>got our code refactored</strong>, we're <strong>ready to actually implement our login</strong>.</p>\n</blockquote>\n\n<p>In this section <strong>we're going to implement a very naïve login</strong> and in further sections <strong>we'll flesh it out and make it more complete</strong>.</p>\n\n<p>Now <strong>for our login we're going to use Passport</strong>.</p>\n\n<blockquote>\n  <p><strong>Passport is an extremely popular Node module for handling authentication</strong>. </p>\n  \n  <p>We're <strong>going to use Passport Local</strong>, which <strong>implements authentication using a user's username and password stored locally in our own database</strong>.</p>\n  \n  <p>As opposed to something like <strong>OAuth</strong>, <strong>which authenticates through a third party</strong>.</p>\n</blockquote>\n\n<p>Now, <strong>npm install passport and passport-local</strong>.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ npm install passport passport-local --save\n</code></pre>\n\n<hr />\n\n<h6 id=\"userschemaandmodel\">User Schema and Model</h6>\n\n<p>Okay, now that those are installed, I'm going to <strong>go back to my server's mongoose configuration file code</strong>.</p>\n\n<p>In here I'm going to <strong>create a schema and a model for our user type</strong>.</p>\n\n<p><strong>This user type will contain not only the user's basic information</strong> like <strong>name</strong>, but also their <strong>authentication and authorization information</strong>.</p>\n\n<p><span class=\"filename\">mongoose.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"11-15,19-37\"><code class=\"language-javascript\">var mongoose = require('mongoose');\n\nmodule.exports = function(config){  \n  mongoose.connect(config.db);\n  var db = mongoose.connection;\n  db.on('error', console.error.bind(console, 'connection error...'));\n  db.once('open', function callback(){\n    console.log('mydatabase db opened');\n  });\n\n  var userSchema = mongoose.Schema({\n    firstName: String,\n    lastName : String,\n    username : String\n  });\n\n  var User = mongoose.model('User', userSchema);\n\n  User.find([]).exec(function(err, collection){\n    if(collection.length === 0){\n      User.create({\n        firstName: 'Joe',\n        lastName : 'Eames',\n        username : 'jimjim'\n      });\n      User.create({\n        firstName: 'Bob',\n        lastName : 'Wes',\n        username : 'bobby'\n      });\n      User.create({\n        firstName: 'Moe',\n        lastName : 'James',\n        username : 'jamesmoe'\n      });\n    }\n  });\n}</code></pre>\n\n<p><strong>[11-15]</strong> <strong>Create the schema wit the user having a firstname, lastname, and a username</strong>. All <strong>the three of those will be strings</strong>.</p>\n\n<p>We'll <strong>add on some more properties later on</strong>.</p>\n\n<p><strong>[17]</strong> And now we'll <strong>create our user model based on the user schema</strong>.</p>\n\n<p><strong>[19-37]</strong> <strong>Create some default users</strong>.</p>\n\n<p>So I'm going to <strong>do a find on that collection</strong>.</p>\n\n<p><strong>Pass in an empty object</strong> so it will <strong>select all the documents from the collection</strong>.</p>\n\n<p>Once that returns I want to <strong>check that it has any documents in the collection</strong> and <strong>if not, create a few users</strong>.</p>\n\n<p><strong>[21-25]</strong> So I'm just going to <strong>use user.create</strong> and we'll <strong>create one user with the firstname of Joe</strong> and last name of Eames and a username<em>* of Joe</em>* and we'll <strong>create a couple more</strong>.</p>\n\n<hr />\n\n<h6 id=\"nodemondetectsandgeneratesrecords\">Nodemon detects and generates records</h6>\n\n<p>And now once I save this, </p>\n\n<ol>\n<li><strong>Nodemon is going to recognize that I've changed my files</strong>.  </li>\n<li>It will execute this code, <strong>find that there's no documents in that collection</strong></li>\n<li>and then <strong>create these three records</strong>.</li>\n</ol>\n\n<hr />\n\n<h6 id=\"verifyinthemongoshell\">Verify in the Mongo shell</h6>\n\n<p>And we can see that by <strong>going to our command line</strong> and <strong>going into the Mongo shell</strong>.</p>\n\n<p>And we'll <strong>switch the database</strong> and we will <strong>look at the users collection</strong>.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ mongo\nMongoDB shell version: 3.0.0  \nconnecting to: test  \n&gt; use mydatabase\nswitched to db mydatabase  \n&gt; show collections\nsystem.indexes  \nusers  \n&gt; db.getCollection('users').find({})\n{ \"_id\" : ObjectId(\"552fd0addfb7184c25ec2b5c\"), \"firstName\" : \"Joe\", \"lastName\" : \"Eames\", \"username\" : \"jimjim\", \"__v\" : 0 }\n{ \"_id\" : ObjectId(\"552fd0addfb7184c25ec2b5d\"), \"firstName\" : \"Bob\", \"lastName\" : \"Wes\", \"username\" : \"bobby\", \"__v\" : 0 }\n{ \"_id\" : ObjectId(\"552fd0addfb7184c25ec2b5e\"), \"firstName\" : \"Moe\", \"lastName\" : \"James\", \"username\" : \"jamesmoe\", \"__v\" : 0 }\n&gt;\n</code></pre>\n\n<p>So now we can <strong>go back and actually implement our login code on the server</strong>.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-refactoring-server-js\" style=\"width: 50%;\">Refactoring server.js</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-creating-the-server-login-code\" style=\"float: right;width: 50%;text-align: right;\">Server Login Code</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429136901699,"created_by":1,"updated_at":1430363022429,"updated_by":1,"published_at":1429136947443,"published_by":1},{"id":70,"uuid":"0f6f6bc2-3739-41a2-b526-f4391dc08975","title":"Building Angular.js and Node.js with the MEAN stack - Authentication: Creating the Server Login Code","slug":"building-angular-js-and-node-js-with-the-mean-stack-authentication-creating-the-server-login-code","markdown":"> And **now we're going to implement the server-side portion of our login**\n\n<span class=\"filename\">server.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"3,4\"><code class=\"language-javascript\">var express     = require('express'),\n  mongoose      = require('mongoose'),\n  passport      = require('passport'),\n  LocalStrategy = require('passport-local').Strategy;\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nvar config = require('./server/config/config')[env];\n\nrequire('./server/config/express')(app, config);\nrequire('./server/config/mongoose')(config);\nrequire('./server/config/routes')(app);\n\napp.listen(config.port);\nconsole.log('Listening on port ' + config.port + '...');</code></pre>\n\n**[3]** So to do that we'll **bring in the Passport module**\n\n**[4]** And I also need to **reference to the local strategy** and I get that by **creating a variable called local strategy requiring Passport Local** and then **asking for its strategy property**.\n\n> **Strategies are how Passport actually implements the authentication**.\n\nAs I said before, we're using a **local strategy**, which **means that we can log in using a username and password** that we **keep in our own database**.\n\nThere are also strategies for Twitter, Facebook, Google, and a bunch of others.\n\n---\n\nNow that we begin to **add our passport code to implement the local strategy**.\n\n<span class=\"filename\">server.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"15-26\"><code class=\"language-javascript\">var express     = require('express'),\n  mongoose      = require('mongoose'),\n  passport      = require('passport'),\n  LocalStrategy = require('passport-local').Strategy;\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nvar config = require('./server/config/config')[env];\n\nrequire('./server/config/express')(app, config);\nrequire('./server/config/mongoose')(config);\n\nvar User = mongoose.model('User');\npassport.use(new LocalStrategy(\n  function(username, password, done){\n    User.findOne({username:username}).exec(function(err, user) {\n      if(user){\n        return done(null, user);\n      } else {\n        return done(null, false);\n      }\n    });\n  }\n));\n\npassport.serializeUser(function(user, done){\n  if(user) {\n    done(null, user._id);\n  }\n});\n\npassport.deserializeUser(function(id, done){\n  User.findOne({_id:id}).exec(function(err, user){\n    if(user){\n      return done(null, user);\n    } else {\n      return done(null, false);\n    }\n  });\n});\n\nrequire('./server/config/routes')(app);\n\napp.listen(config.port);\nconsole.log('Listening on port ' + config.port + '...');</code></pre>\n\n**[16]** We're going to **tell Passport to use a local strategy that we configure**.\n\n**[17]** And the **local strategy is implemented as a function, which takes in a username password and a done callback**.\n\n**[18-24]** Within here we simply implement our own code to:\n\n1. **verify that the username and password that we're given are correct**\n- **find the correct user**\n- and **pass it to the done function**.\n\n**[15]** We'll **implement Mongoose to look up a user**, and **in order to look up a user we've got to grab a User model**.\n\n**[18]** I'm going to **tell the user model to find a single user** so I'll **call user.findOne**, and it must **match the username**, and then **when that returns it should return a single user if one is found**.\n\nSo we'll **make sure that the user was found** and **because this is a naïve implementation, we won't check the password yet**\n\n**[19-20]** **If the user was found**, then I'm going to **call done with a null for the error and the user** as follows: **done(null, user)**\n\n**[21-22]** **If the user was not found**, then I'll **call done with a null and a false** as follows: **done(null, false)**.\n\n---\n\n###### Serializing and deserializing the users ######\n\nNow there's a couple more things we have to implement to get **Passport** to work. We have to **tell Passport how to serialize and deserialize a user**.\n\n<span class=\"filename\">server.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"28-32,34-42\"><code class=\"language-javascript\">var express     = require('express'),\n  mongoose      = require('mongoose'),\n  passport      = require('passport'),\n  LocalStrategy = require('passport-local').Strategy;\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nvar config = require('./server/config/config')[env];\n\nrequire('./server/config/express')(app, config);\nrequire('./server/config/mongoose')(config);\n\nvar User = mongoose.model('User');\npassport.use(new LocalStrategy(\n  function(username, password, done){\n    User.findOne({username:username}).exec(function(err, user) {\n      if(user){\n        return done(null, user);\n      } else {\n        return done(null, false);\n      }\n    });\n  }\n));\n\npassport.serializeUser(function(user, done){\n  if(user) {\n    done(null, user._id);\n  }\n});\n\npassport.deserializeUser(function(id, done){\n  User.findOne({_id:id}).exec(function(err, user){\n    if(user){\n      return done(null, user);\n    } else {\n      return done(null, false);\n    }\n  });\n});\n\nrequire('./server/config/routes')(app);\n\napp.listen(config.port);\nconsole.log('Listening on port ' + config.port + '...');</code></pre>\n\n**[28]** So to do that we will **call passport.serializeUser** and **pass in a function that takes in a user and a done callback**.\n\n**[29-31]** We **check that if there's actually a user** and **if so, we call done with null and we just wanna give it the user's ID** as follows: **return(null, user._id)**\n\n**[34]** **When we import Passport's deserializeUser we'll receive in that same ID and a done function**\n\n**[35]** Iin there we'll **look up the user matching on the ID**\n\n**[37]** and **when that returns, we'll check that there's a user** and **if so return done, passing in the user** as follows: **done(null, user)**\n\n**[39]** **otherwise return done, passing in false** as follows: **done(null, false)**\n\n---\n\n###### Login code using XHR POST ######\n\nSo I **go to my routes file** and I want to **add a new route here**.\n\n<span class=\"filename\">routes.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"1,8-21\"><code class=\"language-javascript\">var passport = require('passport');\n\nmodule.exports = function(app){\n  app.get('/partials/*', function(req, res){\n    res.render('./' + req.params[0]);\n  });\n\n  app.post('/login', function(req, res, next){\n    var auth = passport.authenticate('local', function(err, user){\n      if(err) { return next(err); }\n      if(!user) { return res.send({success:false}) }\n      req.logIn(user, function(err){\n        if(err) { return next(err); }\n        res.send({\n          success:true,\n          user:user\n        });\n      });\n    });\n    auth(req, res, next);\n  });\n\n  app.get('*', function(req, res){\n    res.render('index');\n  });\n}</code></pre>\n\n**[1]** Now I'm gonna to have to **bring in the Passport module**\n\n**[8]** And **in this route will be for a post to the URL of login** and **this will be a little piece of middleware that will authenticate the user by grabbing the return value of calling to passport.authenticate**.\n\n**[9]** I **tell authenticate the strategy I'm using**. I can **give it a callback, which takes an error and the user**\n\n**[10]** and **check the error** and **just pass it along if there was one**\n\n**[11]** and **check if there's a user**, and **if there's not a user** then I will **send to the client a JSON object that says that we failed to authenticate the user**.\n\n**[9-19]** This **function should receive the user if the user was found using the other method via local strategy we implemented in the server.js**, that **calls user.findOne to look up the user by username**, and **if one was found**, then it **returns that user**. It should be either the **user or a false**, and **that's what comes through here is that user if it was found**.\n\n**[12]** So **if neither of those two conditions were met**, then **we did find the user so we can actually log in the user**.\n\nWe need to **tell Passport to log them in and create a session for them** and we do that by **calling req.logIn**. **Login is a function that Passport adds to the request object** and **login takes in the user itself and a callback**\n\n**[13]** and then **callback will also again check for errors and we'll just pass it on**.\n\n**[14]** Otherwise **if the login was successful** then we will **send to the client a JSON object that specifies that we were able to successfully log in the user**\n\n**[15]** and also **send the success property set equal to true**,\n\n**[16]** we'll also **send the user** as well.\n\n**[20]** Now what's a little bit funny about **Passport** is **calling this authenticate actually creates a function**, which I've **captured here in this auth variable, so now in order to make this work I actually have to call that function and pass in the request, the response, and the next**\n\n---\n\n###### Login with a POST ######\n\n> Now **whenever somebody hits login with a POST**, it will actually **execute this code**.\n\nNow we're doing things a little bit differently than are typically done with **Passport** because **we're not logging in using a server side route, which is a submitted form**.\n\n> **We're actually trying to log in using an XHR POST**, and **normally you don't have to tell Passport to log in the user itself**.\n\n**It just does that for you automatically, but since we're using XHR for our login, we actually have to tell Passport to log in the user**.\n\n---\n\n###### Passport Middleware ######\n\nNow we've **got in our login code all implemented correctly for Passport**, but  **we haven't executed the Passport middleware**, so we actually need to **go into our Express file** for that and we need to do a couple of things in here.\n\n<span class=\"filename\">express.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"4,5,6,13,15-17,18,19\"><code class=\"language-javascript\">var express    = require('express'),\n  logger       = require('morgan'),\n  bodyParser   = require('body-parser')\n  cookieParser = require('cookie-parser'),\n  session      = require('express-session'),\n  passport     = require('passport');\n\nmodule.exports = function(app, config){\n  app.set('views', config.rootPath + '/public/app');\n  app.set('view engine', 'jade');\n\n  app.use(logger('dev'));\n  app.use(cookieParser());\n  app.use(bodyParser());\n  app.use(session({\n    secret: 'there are monsters under my bed'\n  }));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  app.use(express.static(config.rootPath + '/public'));\n}</code></pre>\n\n**[4-5]** The **cookie parser and session are modules that I need to import** so I'll **add the import statements at the top**.\n\n**[6]** I need to **add the Passport module to this file**.\n\n**[13]** We need to **add in the cookie parser before the body parser since cookies are required for sessions**\n\n**[15]** and we also need to **add in the session middleware**.\n\n**[16]** And **for our secret I'm going to specify a string**.\n\n**[18]** And at this point we can **tell Passport to initialize itself by calling app.use(passport.initialize())**, which **will initialize the Passport middleware**\n\n**[19]** and then **we're using sessions in our implementation so I also need to tell Passport to use sessions calling app.use(passport.session())**\n\n---\n\n###### NPM install Cookie-parser and Express-session ######\n\nThen I'll **go to the command line and install those two modules**.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ npm install cookie-parser express-session --save\n```\n\n---\n\n###### What's next ######\n\nAnd **now our server side coding is done** and we can **move on to the clientside**.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-preparing-for-login\" style=\"width: 50%;\">Preparing for Login</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-creating-the-client-login-code\" style=\"float: right;width: 50%;text-align: right;\">Client Login Code</a>","html":"<blockquote>\n  <p>And <strong>now we're going to implement the server-side portion of our login</strong></p>\n</blockquote>\n\n<p><span class=\"filename\">server.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"3,4\"><code class=\"language-javascript\">var express     = require('express'),  \n  mongoose      = require('mongoose'),\n  passport      = require('passport'),\n  LocalStrategy = require('passport-local').Strategy;\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nvar config = require('./server/config/config')[env];\n\nrequire('./server/config/express')(app, config);  \nrequire('./server/config/mongoose')(config);  \nrequire('./server/config/routes')(app);\n\napp.listen(config.port);  \nconsole.log('Listening on port ' + config.port + '...');</code></pre>\n\n<p><strong>[3]</strong> So to do that we'll <strong>bring in the Passport module</strong></p>\n\n<p><strong>[4]</strong> And I also need to <strong>reference to the local strategy</strong> and I get that by <strong>creating a variable called local strategy requiring Passport Local</strong> and then <strong>asking for its strategy property</strong>.</p>\n\n<blockquote>\n  <p><strong>Strategies are how Passport actually implements the authentication</strong>.</p>\n</blockquote>\n\n<p>As I said before, we're using a <strong>local strategy</strong>, which <strong>means that we can log in using a username and password</strong> that we <strong>keep in our own database</strong>.</p>\n\n<p>There are also strategies for Twitter, Facebook, Google, and a bunch of others.</p>\n\n<hr />\n\n<p>Now that we begin to <strong>add our passport code to implement the local strategy</strong>.</p>\n\n<p><span class=\"filename\">server.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"15-26\"><code class=\"language-javascript\">var express     = require('express'),  \n  mongoose      = require('mongoose'),\n  passport      = require('passport'),\n  LocalStrategy = require('passport-local').Strategy;\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nvar config = require('./server/config/config')[env];\n\nrequire('./server/config/express')(app, config);  \nrequire('./server/config/mongoose')(config);\n\nvar User = mongoose.model('User');  \npassport.use(new LocalStrategy(  \n  function(username, password, done){\n    User.findOne({username:username}).exec(function(err, user) {\n      if(user){\n        return done(null, user);\n      } else {\n        return done(null, false);\n      }\n    });\n  }\n));\n\npassport.serializeUser(function(user, done){  \n  if(user) {\n    done(null, user._id);\n  }\n});\n\npassport.deserializeUser(function(id, done){  \n  User.findOne({_id:id}).exec(function(err, user){\n    if(user){\n      return done(null, user);\n    } else {\n      return done(null, false);\n    }\n  });\n});\n\nrequire('./server/config/routes')(app);\n\napp.listen(config.port);  \nconsole.log('Listening on port ' + config.port + '...');</code></pre>\n\n<p><strong>[16]</strong> We're going to <strong>tell Passport to use a local strategy that we configure</strong>.</p>\n\n<p><strong>[17]</strong> And the <strong>local strategy is implemented as a function, which takes in a username password and a done callback</strong>.</p>\n\n<p><strong>[18-24]</strong> Within here we simply implement our own code to:</p>\n\n<ol>\n<li><strong>verify that the username and password that we're given are correct</strong>  </li>\n<li><strong>find the correct user</strong></li>\n<li>and <strong>pass it to the done function</strong>.</li>\n</ol>\n\n<p><strong>[15]</strong> We'll <strong>implement Mongoose to look up a user</strong>, and <strong>in order to look up a user we've got to grab a User model</strong>.</p>\n\n<p><strong>[18]</strong> I'm going to <strong>tell the user model to find a single user</strong> so I'll <strong>call user.findOne</strong>, and it must <strong>match the username</strong>, and then <strong>when that returns it should return a single user if one is found</strong>.</p>\n\n<p>So we'll <strong>make sure that the user was found</strong> and <strong>because this is a naïve implementation, we won't check the password yet</strong></p>\n\n<p><strong>[19-20]</strong> <strong>If the user was found</strong>, then I'm going to <strong>call done with a null for the error and the user</strong> as follows: <strong>done(null, user)</strong></p>\n\n<p><strong>[21-22]</strong> <strong>If the user was not found</strong>, then I'll <strong>call done with a null and a false</strong> as follows: <strong>done(null, false)</strong>.</p>\n\n<hr />\n\n<h6 id=\"serializinganddeserializingtheusers\">Serializing and deserializing the users</h6>\n\n<p>Now there's a couple more things we have to implement to get <strong>Passport</strong> to work. We have to <strong>tell Passport how to serialize and deserialize a user</strong>.</p>\n\n<p><span class=\"filename\">server.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"28-32,34-42\"><code class=\"language-javascript\">var express     = require('express'),  \n  mongoose      = require('mongoose'),\n  passport      = require('passport'),\n  LocalStrategy = require('passport-local').Strategy;\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nvar config = require('./server/config/config')[env];\n\nrequire('./server/config/express')(app, config);  \nrequire('./server/config/mongoose')(config);\n\nvar User = mongoose.model('User');  \npassport.use(new LocalStrategy(  \n  function(username, password, done){\n    User.findOne({username:username}).exec(function(err, user) {\n      if(user){\n        return done(null, user);\n      } else {\n        return done(null, false);\n      }\n    });\n  }\n));\n\npassport.serializeUser(function(user, done){  \n  if(user) {\n    done(null, user._id);\n  }\n});\n\npassport.deserializeUser(function(id, done){  \n  User.findOne({_id:id}).exec(function(err, user){\n    if(user){\n      return done(null, user);\n    } else {\n      return done(null, false);\n    }\n  });\n});\n\nrequire('./server/config/routes')(app);\n\napp.listen(config.port);  \nconsole.log('Listening on port ' + config.port + '...');</code></pre>\n\n<p><strong>[28]</strong> So to do that we will <strong>call passport.serializeUser</strong> and <strong>pass in a function that takes in a user and a done callback</strong>.</p>\n\n<p><strong>[29-31]</strong> We <strong>check that if there's actually a user</strong> and <strong>if so, we call done with null and we just wanna give it the user's ID</strong> as follows: <strong>return(null, user._id)</strong></p>\n\n<p><strong>[34]</strong> <strong>When we import Passport's deserializeUser we'll receive in that same ID and a done function</strong></p>\n\n<p><strong>[35]</strong> Iin there we'll <strong>look up the user matching on the ID</strong></p>\n\n<p><strong>[37]</strong> and <strong>when that returns, we'll check that there's a user</strong> and <strong>if so return done, passing in the user</strong> as follows: <strong>done(null, user)</strong></p>\n\n<p><strong>[39]</strong> <strong>otherwise return done, passing in false</strong> as follows: <strong>done(null, false)</strong></p>\n\n<hr />\n\n<h6 id=\"logincodeusingxhrpost\">Login code using XHR POST</h6>\n\n<p>So I <strong>go to my routes file</strong> and I want to <strong>add a new route here</strong>.</p>\n\n<p><span class=\"filename\">routes.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"1,8-21\"><code class=\"language-javascript\">var passport = require('passport');\n\nmodule.exports = function(app){  \n  app.get('/partials/*', function(req, res){\n    res.render('./' + req.params[0]);\n  });\n\n  app.post('/login', function(req, res, next){\n    var auth = passport.authenticate('local', function(err, user){\n      if(err) { return next(err); }\n      if(!user) { return res.send({success:false}) }\n      req.logIn(user, function(err){\n        if(err) { return next(err); }\n        res.send({\n          success:true,\n          user:user\n        });\n      });\n    });\n    auth(req, res, next);\n  });\n\n  app.get('*', function(req, res){\n    res.render('index');\n  });\n}</code></pre>\n\n<p><strong>[1]</strong> Now I'm gonna to have to <strong>bring in the Passport module</strong></p>\n\n<p><strong>[8]</strong> And <strong>in this route will be for a post to the URL of login</strong> and <strong>this will be a little piece of middleware that will authenticate the user by grabbing the return value of calling to passport.authenticate</strong>.</p>\n\n<p><strong>[9]</strong> I <strong>tell authenticate the strategy I'm using</strong>. I can <strong>give it a callback, which takes an error and the user</strong></p>\n\n<p><strong>[10]</strong> and <strong>check the error</strong> and <strong>just pass it along if there was one</strong></p>\n\n<p><strong>[11]</strong> and <strong>check if there's a user</strong>, and <strong>if there's not a user</strong> then I will <strong>send to the client a JSON object that says that we failed to authenticate the user</strong>.</p>\n\n<p><strong>[9-19]</strong> This <strong>function should receive the user if the user was found using the other method via local strategy we implemented in the server.js</strong>, that <strong>calls user.findOne to look up the user by username</strong>, and <strong>if one was found</strong>, then it <strong>returns that user</strong>. It should be either the <strong>user or a false</strong>, and <strong>that's what comes through here is that user if it was found</strong>.</p>\n\n<p><strong>[12]</strong> So <strong>if neither of those two conditions were met</strong>, then <strong>we did find the user so we can actually log in the user</strong>.</p>\n\n<p>We need to <strong>tell Passport to log them in and create a session for them</strong> and we do that by <strong>calling req.logIn</strong>. <strong>Login is a function that Passport adds to the request object</strong> and <strong>login takes in the user itself and a callback</strong></p>\n\n<p><strong>[13]</strong> and then <strong>callback will also again check for errors and we'll just pass it on</strong>.</p>\n\n<p><strong>[14]</strong> Otherwise <strong>if the login was successful</strong> then we will <strong>send to the client a JSON object that specifies that we were able to successfully log in the user</strong></p>\n\n<p><strong>[15]</strong> and also <strong>send the success property set equal to true</strong>,</p>\n\n<p><strong>[16]</strong> we'll also <strong>send the user</strong> as well.</p>\n\n<p><strong>[20]</strong> Now what's a little bit funny about <strong>Passport</strong> is <strong>calling this authenticate actually creates a function</strong>, which I've <strong>captured here in this auth variable, so now in order to make this work I actually have to call that function and pass in the request, the response, and the next</strong></p>\n\n<hr />\n\n<h6 id=\"loginwithapost\">Login with a POST</h6>\n\n<blockquote>\n  <p>Now <strong>whenever somebody hits login with a POST</strong>, it will actually <strong>execute this code</strong>.</p>\n</blockquote>\n\n<p>Now we're doing things a little bit differently than are typically done with <strong>Passport</strong> because <strong>we're not logging in using a server side route, which is a submitted form</strong>.</p>\n\n<blockquote>\n  <p><strong>We're actually trying to log in using an XHR POST</strong>, and <strong>normally you don't have to tell Passport to log in the user itself</strong>.</p>\n</blockquote>\n\n<p><strong>It just does that for you automatically, but since we're using XHR for our login, we actually have to tell Passport to log in the user</strong>.</p>\n\n<hr />\n\n<h6 id=\"passportmiddleware\">Passport Middleware</h6>\n\n<p>Now we've <strong>got in our login code all implemented correctly for Passport</strong>, but  <strong>we haven't executed the Passport middleware</strong>, so we actually need to <strong>go into our Express file</strong> for that and we need to do a couple of things in here.</p>\n\n<p><span class=\"filename\">express.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"4,5,6,13,15-17,18,19\"><code class=\"language-javascript\">var express    = require('express'),  \n  logger       = require('morgan'),\n  bodyParser   = require('body-parser')\n  cookieParser = require('cookie-parser'),\n  session      = require('express-session'),\n  passport     = require('passport');\n\nmodule.exports = function(app, config){  \n  app.set('views', config.rootPath + '/public/app');\n  app.set('view engine', 'jade');\n\n  app.use(logger('dev'));\n  app.use(cookieParser());\n  app.use(bodyParser());\n  app.use(session({\n    secret: 'there are monsters under my bed'\n  }));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  app.use(express.static(config.rootPath + '/public'));\n}</code></pre>\n\n<p><strong>[4-5]</strong> The <strong>cookie parser and session are modules that I need to import</strong> so I'll <strong>add the import statements at the top</strong>.</p>\n\n<p><strong>[6]</strong> I need to <strong>add the Passport module to this file</strong>.</p>\n\n<p><strong>[13]</strong> We need to <strong>add in the cookie parser before the body parser since cookies are required for sessions</strong></p>\n\n<p><strong>[15]</strong> and we also need to <strong>add in the session middleware</strong>.</p>\n\n<p><strong>[16]</strong> And <strong>for our secret I'm going to specify a string</strong>.</p>\n\n<p><strong>[18]</strong> And at this point we can <strong>tell Passport to initialize itself by calling app.use(passport.initialize())</strong>, which <strong>will initialize the Passport middleware</strong></p>\n\n<p><strong>[19]</strong> and then <strong>we're using sessions in our implementation so I also need to tell Passport to use sessions calling app.use(passport.session())</strong></p>\n\n<hr />\n\n<h6 id=\"npminstallcookieparserandexpresssession\">NPM install Cookie-parser and Express-session</h6>\n\n<p>Then I'll <strong>go to the command line and install those two modules</strong>.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ npm install cookie-parser express-session --save\n</code></pre>\n\n<hr />\n\n<h6 id=\"whatsnext\">What's next</h6>\n\n<p>And <strong>now our server side coding is done</strong> and we can <strong>move on to the clientside</strong>.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-preparing-for-login\" style=\"width: 50%;\">Preparing for Login</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-creating-the-client-login-code\" style=\"float: right;width: 50%;text-align: right;\">Client Login Code</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429136999009,"created_by":1,"updated_at":1430368866220,"updated_by":1,"published_at":1429137043364,"published_by":1},{"id":71,"uuid":"14ba3dbb-a266-46d8-a961-589f2b063cd2","title":"Building Angular.js and Node.js with the MEAN stack - Authentication: Creating the Client Login Code","slug":"building-angular-js-and-node-js-with-the-mean-stack-authentication-creating-the-client-login-code","markdown":"So let's **go into the navbar login controller**, which is **where we've implemented the signin function** and in here we're **going to HTTP POST the credentials to that route**.\n\n<span class=\"filename\">navbarLoginController.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"1,3-9\"><code class=\"language-javascript\">angular.module('app').controller('navbarLoginController', function ($scope, $http){\n  $scope.signin = function(username, password){\n    $http.post('/login', {username:username, password:password}).then(function(response){\n      if(response.data.success){\n        console.log('logged in!');\n      }else{\n        console.log('failed to log in!');\n      }\n    });\n  }\n});</code></pre>\n\n**[1]** so I'll **bring in the $http dependency**.\n\n**[3]** And right here I will **call $http.post to the login route** and **pass in an object that has the username, the password**, which of course isn't being used right now, but we'll use it later on.\n\n**[4]** And **when that returns we'll get the response back** and **if the response.data has a success property set to true then we're going to consider ourselves logged in**.\n\n**[5,7]** So for now let's **just log out to the console**.\n\n---\n\n###### Test naive login in the browser ######\n\nAnd now **our naïve login should be working end to end** and **we can verify that by going to the browser**, **refreshing** the page, and let's open up a console, and I'll **log in first with an invalid username**.\n\nAnd it **says it failed to log in**.\n\n![failed to log in](/content/images/2015/04/failed_to_log_in.png)\n\nAnd I'll **change it to a valid one, and we logged in correctly**.\n\n![logged in](/content/images/2015/04/logged_in.png)\n\n---\n\n###### What's next ######\n\nSo there's a very **naïve login implementation** using **Passport** and **Passport Local**.\n\nObviously this isn't an implementation that we'd want to leave as is, so **we'll be improving upon our code over the rest of the module**.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-creating-the-server-login-code\" style=\"width: 50%;\">Server Login Code</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-improving-the-client-login-code\" style=\"float: right;width: 50%;text-align: right;\">Improve Client Login</a>","html":"<p>So let's <strong>go into the navbar login controller</strong>, which is <strong>where we've implemented the signin function</strong> and in here we're <strong>going to HTTP POST the credentials to that route</strong>.</p>\n\n<p><span class=\"filename\">navbarLoginController.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"1,3-9\"><code class=\"language-javascript\">angular.module('app').controller('navbarLoginController', function ($scope, $http){  \n  $scope.signin = function(username, password){\n    $http.post('/login', {username:username, password:password}).then(function(response){\n      if(response.data.success){\n        console.log('logged in!');\n      }else{\n        console.log('failed to log in!');\n      }\n    });\n  }\n});</code></pre>\n\n<p><strong>[1]</strong> so I'll <strong>bring in the $http dependency</strong>.</p>\n\n<p><strong>[3]</strong> And right here I will <strong>call $http.post to the login route</strong> and <strong>pass in an object that has the username, the password</strong>, which of course isn't being used right now, but we'll use it later on.</p>\n\n<p><strong>[4]</strong> And <strong>when that returns we'll get the response back</strong> and <strong>if the response.data has a success property set to true then we're going to consider ourselves logged in</strong>.</p>\n\n<p><strong>[5,7]</strong> So for now let's <strong>just log out to the console</strong>.</p>\n\n<hr />\n\n<h6 id=\"testnaivelogininthebrowser\">Test naive login in the browser</h6>\n\n<p>And now <strong>our naïve login should be working end to end</strong> and <strong>we can verify that by going to the browser</strong>, <strong>refreshing</strong> the page, and let's open up a console, and I'll <strong>log in first with an invalid username</strong>.</p>\n\n<p>And it <strong>says it failed to log in</strong>.</p>\n\n<p><img src=\"/content/images/2015/04/failed_to_log_in.png\" alt=\"failed to log in\" /></p>\n\n<p>And I'll <strong>change it to a valid one, and we logged in correctly</strong>.</p>\n\n<p><img src=\"/content/images/2015/04/logged_in.png\" alt=\"logged in\" /></p>\n\n<hr />\n\n<h6 id=\"whatsnext\">What's next</h6>\n\n<p>So there's a very <strong>naïve login implementation</strong> using <strong>Passport</strong> and <strong>Passport Local</strong>.</p>\n\n<p>Obviously this isn't an implementation that we'd want to leave as is, so <strong>we'll be improving upon our code over the rest of the module</strong>.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-creating-the-server-login-code\" style=\"width: 50%;\">Server Login Code</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-improving-the-client-login-code\" style=\"float: right;width: 50%;text-align: right;\">Improve Client Login</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429137089057,"created_by":1,"updated_at":1430429380242,"updated_by":1,"published_at":1429137234142,"published_by":1},{"id":72,"uuid":"85c04b33-3d33-4f7d-9094-e2e6d1d58633","title":"Building Angular.js and Node.js with the MEAN stack - Authentication: Improving the Client Login Code","slug":"building-angular-js-and-node-js-with-the-mean-stack-authentication-improving-the-client-login-code","markdown":"Right now **our login is successfully communicating with the server** and **logging us in on the server**, but it's **not really taking much effect on the client other than printing out a console message**.\n\nThere's a couple of things we should do on the **client**:\n\n- **We should hide the login box, so the user can't log in again as a different user without actually logging out**\n- **We should also store the current user and the fact that somebody's now logged in**.\n\n---\n\n###### Notify service ######\n\nSo let's **start out by just changing our notification**.\n\nLet's **notify the user that they logged in successfully by using the Toaster library** that we included previously.\n\nSo first we need to **make a service that wraps around that Toaster library**.\n\nSo I'm gonna **go to my public folder and into my app directory**, and I'm gonna **create a new folder called common** and inside of there I'll **create a new file and I'll call it notifier.js**.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ mkdir public/app/common\n$ touch public/app/common/notifier.js\n```\n\n<span class=\"filename\">notifier.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">angular.module('app').value('toastr', toastr);\n\nangular.module('app').factory('notifier', function(toastr){\n  return {\n    notify: function(msg){\n      toastr.success(msg);\n      console.log(msg);\n    }\n  }\n});</code></pre>\n\n**[1]** The first thing we need to do is **wrap Toaster itself inside of a service**.\n\nThat'll **put the Toaster global variable into a service so that we can use it in our dependency injection**\n\n**[3]** and then let's **create a notifier service based on that**.\n\n**[4-5]** And **my notifier is going to be an object that has a notify function that takes in a message**\n\n**[6]** and we'll **use Toaster to show the message** as follows: **toaster.success(msg)**\n\n**[7]** and then let's also **log it out to the console**. \n\n---\n\n###### Use Notifier service in Navbar Login Controller ######\n\nAlright now that **we got that notifier created**, we can **go to our navbar login controller**.\n\n<span class=\"filename\">navbarLoginController.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"5,7\"><code class=\"language-javascript\">angular.module('app').controller('navbarLoginController', function ($scope, $http, notifier){\n  $scope.signin = function(username, password){\n    $http.post('/login', {username:username, password:password}).then(function(response){\n      if(response.data.success){\n        notifier.notify('You have successfully signed in!');\n      }else{\n        notifier.notify('Username/Password combination incorrect');\n      }\n    });\n  }\n});</code></pre>\n\n**[1]** **Inject notifer service as a dependency**\n\n**[5,7]** We can **replace our console.log with notifier** and we'll **put in a nice message**.\n\n---\n\n###### Capture the login with the Identity Service ######\n\nNow let's also **capture the fact that we've logged the user in**.\n\nLet's **create a new service that we'll call the identity service**.\n\nSo **in my account folder I'll create a new file named identity.js** and this **service** is going to:\n\n- **store the fact that we are logged in**\n- **store the current user**\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ touch public/app/account/identity.js\n```\n\n<span class=\"filename\">identity.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">angular.module('app').factory('identity', function(){\n  return {\n    currentUser: undefined,\n    isAuthenticated: function(){\n      return !!this.currentUser;\n    }\n  }\n});</code></pre>\n\n**[2]** This will just be an object that right now.\n\n**[3]** That **has a current user that we'll just default to undefined**.\n\nNow **we could just return a blank object because when I check for current user it's going to be undefined either way, but I like the fact that we're explicitly defining that there is a current user property on this object**.\n\n**[4-6]** Now I'd also like to **add a method to this object called isAuthenticated** and this'll be an easy **way for me to ask at any point, do we actually have a logged in user**?\n\n---\n\n###### Use Identity service in Navbar Login controller ######\n\nOkay, now let's go back to our **login controller**\n\n<span class=\"filename\">navbarLoginController.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"1,5\"><code class=\"language-javascript\">angular.module('app').controller('navbarLoginController', function ($scope, $http, notifier, identity){\n  $scope.signin = function(username, password){\n    $http.post('/login', {username:username, password:password}).then(function(response){\n      if(response.data.success){\n        identity.currentUser = response.data.user;\n        notifier.notify('You have successfully signed in!');\n      }else{\n        notifier.notify('Username/Password combination incorrect');\n      }\n    });\n  }\n});</code></pre>\n\n**[1]** Now I need to go and the **identity service** as a **dependency**\n\n**[5]** when the **user** successfully **logs in**, let's take that **identity service**  and set the current **user** = **response.data.user**\n\n---\n\n###### Include scripts to app ######\n\nOf course we're going to have to add **script tags** for those files, so we'll go to our scripts and add **identity** and we'll add the **notifier**. We also need **Toaster** in here.\n\n<span class=\"filename\">scripts.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"2,9,10\"><code class=\"language-jade\">script(type=\"text/javascript\", src=\"/vendor/jquery/dist/jquery.js\")\nscript(type=\"text/javascript\", src=\"/vendor/toastr/toastr.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular/angular.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular-resource/angular-resource.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular-route/angular-route.js\")\nscript(type=\"text/javascript\", src=\"/app/app.js\")\nscript(type=\"text/javascript\", src=\"/app/main/mainController.js\")\nscript(type=\"text/javascript\", src=\"/app/account/navbarLoginController.js\")\nscript(type=\"text/javascript\", src=\"/app/account/identity.js\")\nscript(type=\"text/javascript\", src=\"/app/common/notifier.js\")</code></pre>\n\n---\n\n###### Test in the browser ######\n\nSo let's go back to our browser and refresh and give it a try.\n\nPut in an **invalid username** and we do get our **popup**.\n\nI'm not really crazy about the positioning of the **popup** or the color, so let's go back to our code and let's fix the positioning and color of that popup by going into our style file.\n\n<span class=\"filename\">site.css</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-css\">.toast-top-right{\n  top: 70px;\n}\n\n.toast-success{\n  background-color: #13987e;\n}</code></pre>\n\nAnd go back and refresh.\n\n![toastr login](/content/images/2015/04/toastr_login.png)\n\nOkay, the positioning is good and the color now matches, so I like that.\n\n---\n\n###### Hide form after logging in ######\n\nNow let's also make the **login form disappear** once a **user** logs in.\n\nWe'll just go to this **Jade** file and we'll just take this whole entire form \n\n<span class=\"filename\">navbar-login.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"2\"><code class=\"language-jade\">div(ng-controller=\"navbarLoginController\")\n  .row.collapse(ng-hide=\"identity.isAuthenticated()\")\n    .large-4.small-4.columns\n      input.form-control(placeholder=\"Email\", ng-model=\"username\")\n    .large-4.small-4.columns\n      input.form-control(type=\"password\", placeholder=\"password\", ng-model=\"password\")\n    .large-4.small-4.columns\n      a.alert.button.expand(ng-click=\"signin(username,password)\") Sign in</code></pre>\n\n**[2]** add an **ng-hide** attribute and this will set to **identity.isAuthenticated**, taking advantage of that method that we just wrote\n\n<span class=\"filename\">navbarLoginController.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"2\"><code class=\"language-javascript\">angular.module('app').controller('navbarLoginController', function ($scope, $http, notifier, identity){\n  $scope.identity = identity;\n  $scope.signin = function(username, password){\n    $http.post('/login', {username:username, password:password}).then(function(response){\n      if(response.data.success){\n        identity.currentUser = response.data.user;\n        notifier.notify('You have successfully signed in!');\n      }else{\n        notifier.notify('Username/Password combination incorrect');\n      }\n    });\n  }\n});</code></pre>\n\n**[2]** and now we'll have to add that **identity** onto the **scope** so go back to the **controller** and the first thing we'll do here is say **scope.identity = identity**.\n\n---\n\n###### Test in the browser ######\n\nAnd so let's go test and see how this new functionality works for us.\n\nRefresh the page, and now the login box disappears.\n\n![hides login form](/content/images/2015/04/hides_login_form.png)\n\n---\n\n###### Refactoring the Navbar Login controller ######\n\nSo let's go back to the code and I'm really not happy with what this code's doing right now because the code in the **controller's** really doing a couple of things.\n\n> It's **handling the binding of data and the display** that happens whenever a **user logs in**, which is what a **controller should do**, but\n\n> it's also actually **handling the login business logic**, which a **controller shouldn't so**.\n\nSo we're gonna refactor this and make a new **service** out of it by going to our **account** and creating a new **service**.\n\nWe'll call **auth** and name it **auth.js**.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ touch public/app/account/auth.js\n```\n\n<span class=\"filename\">auth.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">angular.module('app').factory('auth', function($http, identity, $q){\n  return {\n    authenticateUser: function(username, password){\n      var deferred = $q.defer();\n      $http.post('/login', {username:username, password:password}).then(function(response){\n        if(response.data.success){\n          identity.currentUser = response.data.user;\n          deferred.resolve(true);\n        }else{\n          deferred.resolve(false);\n        }\n      });\n      return deferred.promise;\n    }\n  }\n});</code></pre>\n\n**[1]** This will need the **http service**, also the **identity service**, and since it's going to be communicating back with the **controller**, I'm gonna add in as well the **q service**, so I can use a **promise back in the controller**.\n\n**[3]** Now this object that I return, I'm gonna give it one function, called **authenticate.user**, and that will be a function that takes in a **username** and **password**.\n\n**[7]** Set the **identity** to the correct value\n\n**[4]** so the only other thing I need to do is actually communicate back to the **controller** by using a **promise** so I'm gonna create a new **deferred** here\n\n**[8]** and when we're successful, after we set the **user**, I'm going to resolve that **deferred with simply a true** to indicate that we were **successful logging in**\n\n**[19]** and I'll put a **false in this resolution if we were unsuccessful**\n\n**[13]** and then I'll return the promise for that **deferred**.\n\nAnd now I'll go back to the **navbar login controller**\n\n<span class=\"filename\">navbarLoginController.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">angular.module('app').controller('navbarLoginController', function ($scope, $http, notifier, identity, auth){\n  $scope.identity = identity;\n  $scope.signin = function(username, password){\n    auth.authenticateUser(username, password).then(function(success){\n      if(success){\n        notifier.notify('You have successfully signed in!');\n      }else{\n        notifier.notify('Username/password combination incorrect');\n      }\n    });\n  }\n});</code></pre>\n\n**[1]** We'll inject a reference to the **auth service**. We still need to bring in the **identity** because we still have to set it onto the **scope** here, but **no longer will we be calling post**.\n\n**[4]** Instead we'll call **auth.authenticate.user** and pass in the **username** and **password**.\n\n**[5-6]** And then we'll receive our **success messag**e and if we were **successful** then we'll call the **notifier**, telling them that that worked.\n\n**[7-8]** Otherwise we'll call **notifier** saying that we didn't log in successfully and now we can take this code out of here\n\n---\n\n###### Add Auth service to scripts ######\n\nThen we just need to go to **scripts** file and add in that **auth service**.\n\n<span class=\"filename\">scripts.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"10\"><code class=\"language-jade\">script(type=\"text/javascript\", src=\"/vendor/jquery/dist/jquery.js\")\nscript(type=\"text/javascript\", src=\"/vendor/toastr/toastr.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular/angular.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular-resource/angular-resource.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular-route/angular-route.js\")\nscript(type=\"text/javascript\", src=\"/app/app.js\")\nscript(type=\"text/javascript\", src=\"/app/main/mainController.js\")\nscript(type=\"text/javascript\", src=\"/app/account/navbarLoginController.js\")\nscript(type=\"text/javascript\", src=\"/app/account/identity.js\")\nscript(type=\"text/javascript\", src=\"/app/account/auth.js\")\nscript(type=\"text/javascript\", src=\"/app/common/notifier.js\")</code></pre>\n\n---\n\n###### Test in browser ######\n\nAnd now we can go back to our website and check that our functionality still works. \n\nRefresh the page, and sign in.\n\n![test refactored controller](/content/images/2015/04/hides_login_form.png)\n\nEverything is still working.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-creating-the-client-login-code\" style=\"width: 50%;\">Creating Client Login Code</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-improving-the-server-login-code\" style=\"float: right;width: 50%;text-align: right;\">Improve Server Login</a>","html":"<p>Right now <strong>our login is successfully communicating with the server</strong> and <strong>logging us in on the server</strong>, but it's <strong>not really taking much effect on the client other than printing out a console message</strong>.</p>\n\n<p>There's a couple of things we should do on the <strong>client</strong>:</p>\n\n<ul>\n<li><strong>We should hide the login box, so the user can't log in again as a different user without actually logging out</strong></li>\n<li><strong>We should also store the current user and the fact that somebody's now logged in</strong>.</li>\n</ul>\n\n<hr />\n\n<h6 id=\"notifyservice\">Notify service</h6>\n\n<p>So let's <strong>start out by just changing our notification</strong>.</p>\n\n<p>Let's <strong>notify the user that they logged in successfully by using the Toaster library</strong> that we included previously.</p>\n\n<p>So first we need to <strong>make a service that wraps around that Toaster library</strong>.</p>\n\n<p>So I'm gonna <strong>go to my public folder and into my app directory</strong>, and I'm gonna <strong>create a new folder called common</strong> and inside of there I'll <strong>create a new file and I'll call it notifier.js</strong>.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ mkdir public/app/common\n$ touch public/app/common/notifier.js\n</code></pre>\n\n<p><span class=\"filename\">notifier.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">angular.module('app').value('toastr', toastr);\n\nangular.module('app').factory('notifier', function(toastr){  \n  return {\n    notify: function(msg){\n      toastr.success(msg);\n      console.log(msg);\n    }\n  }\n});</code></pre>\n\n<p><strong>[1]</strong> The first thing we need to do is <strong>wrap Toaster itself inside of a service</strong>.</p>\n\n<p>That'll <strong>put the Toaster global variable into a service so that we can use it in our dependency injection</strong></p>\n\n<p><strong>[3]</strong> and then let's <strong>create a notifier service based on that</strong>.</p>\n\n<p><strong>[4-5]</strong> And <strong>my notifier is going to be an object that has a notify function that takes in a message</strong></p>\n\n<p><strong>[6]</strong> and we'll <strong>use Toaster to show the message</strong> as follows: <strong>toaster.success(msg)</strong></p>\n\n<p><strong>[7]</strong> and then let's also <strong>log it out to the console</strong>. </p>\n\n<hr />\n\n<h6 id=\"usenotifierserviceinnavbarlogincontroller\">Use Notifier service in Navbar Login Controller</h6>\n\n<p>Alright now that <strong>we got that notifier created</strong>, we can <strong>go to our navbar login controller</strong>.</p>\n\n<p><span class=\"filename\">navbarLoginController.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"5,7\"><code class=\"language-javascript\">angular.module('app').controller('navbarLoginController', function ($scope, $http, notifier){  \n  $scope.signin = function(username, password){\n    $http.post('/login', {username:username, password:password}).then(function(response){\n      if(response.data.success){\n        notifier.notify('You have successfully signed in!');\n      }else{\n        notifier.notify('Username/Password combination incorrect');\n      }\n    });\n  }\n});</code></pre>\n\n<p><strong>[1]</strong> <strong>Inject notifer service as a dependency</strong></p>\n\n<p><strong>[5,7]</strong> We can <strong>replace our console.log with notifier</strong> and we'll <strong>put in a nice message</strong>.</p>\n\n<hr />\n\n<h6 id=\"capturetheloginwiththeidentityservice\">Capture the login with the Identity Service</h6>\n\n<p>Now let's also <strong>capture the fact that we've logged the user in</strong>.</p>\n\n<p>Let's <strong>create a new service that we'll call the identity service</strong>.</p>\n\n<p>So <strong>in my account folder I'll create a new file named identity.js</strong> and this <strong>service</strong> is going to:</p>\n\n<ul>\n<li><strong>store the fact that we are logged in</strong></li>\n<li><strong>store the current user</strong></li>\n</ul>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ touch public/app/account/identity.js\n</code></pre>\n\n<p><span class=\"filename\">identity.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">angular.module('app').factory('identity', function(){  \n  return {\n    currentUser: undefined,\n    isAuthenticated: function(){\n      return !!this.currentUser;\n    }\n  }\n});</code></pre>\n\n<p><strong>[2]</strong> This will just be an object that right now.</p>\n\n<p><strong>[3]</strong> That <strong>has a current user that we'll just default to undefined</strong>.</p>\n\n<p>Now <strong>we could just return a blank object because when I check for current user it's going to be undefined either way, but I like the fact that we're explicitly defining that there is a current user property on this object</strong>.</p>\n\n<p><strong>[4-6]</strong> Now I'd also like to <strong>add a method to this object called isAuthenticated</strong> and this'll be an easy <strong>way for me to ask at any point, do we actually have a logged in user</strong>?</p>\n\n<hr />\n\n<h6 id=\"useidentityserviceinnavbarlogincontroller\">Use Identity service in Navbar Login controller</h6>\n\n<p>Okay, now let's go back to our <strong>login controller</strong></p>\n\n<p><span class=\"filename\">navbarLoginController.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"1,5\"><code class=\"language-javascript\">angular.module('app').controller('navbarLoginController', function ($scope, $http, notifier, identity){  \n  $scope.signin = function(username, password){\n    $http.post('/login', {username:username, password:password}).then(function(response){\n      if(response.data.success){\n        identity.currentUser = response.data.user;\n        notifier.notify('You have successfully signed in!');\n      }else{\n        notifier.notify('Username/Password combination incorrect');\n      }\n    });\n  }\n});</code></pre>\n\n<p><strong>[1]</strong> Now I need to go and the <strong>identity service</strong> as a <strong>dependency</strong></p>\n\n<p><strong>[5]</strong> when the <strong>user</strong> successfully <strong>logs in</strong>, let's take that <strong>identity service</strong>  and set the current <strong>user</strong> = <strong>response.data.user</strong></p>\n\n<hr />\n\n<h6 id=\"includescriptstoapp\">Include scripts to app</h6>\n\n<p>Of course we're going to have to add <strong>script tags</strong> for those files, so we'll go to our scripts and add <strong>identity</strong> and we'll add the <strong>notifier</strong>. We also need <strong>Toaster</strong> in here.</p>\n\n<p><span class=\"filename\">scripts.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"2,9,10\"><code class=\"language-jade\">script(type=\"text/javascript\", src=\"/vendor/jquery/dist/jquery.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/toastr/toastr.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular/angular.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular-resource/angular-resource.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular-route/angular-route.js\")  \nscript(type=\"text/javascript\", src=\"/app/app.js\")  \nscript(type=\"text/javascript\", src=\"/app/main/mainController.js\")  \nscript(type=\"text/javascript\", src=\"/app/account/navbarLoginController.js\")  \nscript(type=\"text/javascript\", src=\"/app/account/identity.js\")  \nscript(type=\"text/javascript\", src=\"/app/common/notifier.js\")</code></pre>\n\n<hr />\n\n<h6 id=\"testinthebrowser\">Test in the browser</h6>\n\n<p>So let's go back to our browser and refresh and give it a try.</p>\n\n<p>Put in an <strong>invalid username</strong> and we do get our <strong>popup</strong>.</p>\n\n<p>I'm not really crazy about the positioning of the <strong>popup</strong> or the color, so let's go back to our code and let's fix the positioning and color of that popup by going into our style file.</p>\n\n<p><span class=\"filename\">site.css</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-css\">.toast-top-right{  \n  top: 70px;\n}\n\n.toast-success{\n  background-color: #13987e;\n}</code></pre>\n\n<p>And go back and refresh.</p>\n\n<p><img src=\"/content/images/2015/04/toastr_login.png\" alt=\"toastr login\" /></p>\n\n<p>Okay, the positioning is good and the color now matches, so I like that.</p>\n\n<hr />\n\n<h6 id=\"hideformafterloggingin\">Hide form after logging in</h6>\n\n<p>Now let's also make the <strong>login form disappear</strong> once a <strong>user</strong> logs in.</p>\n\n<p>We'll just go to this <strong>Jade</strong> file and we'll just take this whole entire form </p>\n\n<p><span class=\"filename\">navbar-login.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"2\"><code class=\"language-jade\">div(ng-controller=\"navbarLoginController\")  \n  .row.collapse(ng-hide=\"identity.isAuthenticated()\")\n    .large-4.small-4.columns\n      input.form-control(placeholder=\"Email\", ng-model=\"username\")\n    .large-4.small-4.columns\n      input.form-control(type=\"password\", placeholder=\"password\", ng-model=\"password\")\n    .large-4.small-4.columns\n      a.alert.button.expand(ng-click=\"signin(username,password)\") Sign in</code></pre>\n\n<p><strong>[2]</strong> add an <strong>ng-hide</strong> attribute and this will set to <strong>identity.isAuthenticated</strong>, taking advantage of that method that we just wrote</p>\n\n<p><span class=\"filename\">navbarLoginController.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"2\"><code class=\"language-javascript\">angular.module('app').controller('navbarLoginController', function ($scope, $http, notifier, identity){  \n  $scope.identity = identity;\n  $scope.signin = function(username, password){\n    $http.post('/login', {username:username, password:password}).then(function(response){\n      if(response.data.success){\n        identity.currentUser = response.data.user;\n        notifier.notify('You have successfully signed in!');\n      }else{\n        notifier.notify('Username/Password combination incorrect');\n      }\n    });\n  }\n});</code></pre>\n\n<p><strong>[2]</strong> and now we'll have to add that <strong>identity</strong> onto the <strong>scope</strong> so go back to the <strong>controller</strong> and the first thing we'll do here is say <strong>scope.identity = identity</strong>.</p>\n\n<hr />\n\n<h6 id=\"testinthebrowser\">Test in the browser</h6>\n\n<p>And so let's go test and see how this new functionality works for us.</p>\n\n<p>Refresh the page, and now the login box disappears.</p>\n\n<p><img src=\"/content/images/2015/04/hides_login_form.png\" alt=\"hides login form\" /></p>\n\n<hr />\n\n<h6 id=\"refactoringthenavbarlogincontroller\">Refactoring the Navbar Login controller</h6>\n\n<p>So let's go back to the code and I'm really not happy with what this code's doing right now because the code in the <strong>controller's</strong> really doing a couple of things.</p>\n\n<blockquote>\n  <p>It's <strong>handling the binding of data and the display</strong> that happens whenever a <strong>user logs in</strong>, which is what a <strong>controller should do</strong>, but</p>\n  \n  <p>it's also actually <strong>handling the login business logic</strong>, which a <strong>controller shouldn't so</strong>.</p>\n</blockquote>\n\n<p>So we're gonna refactor this and make a new <strong>service</strong> out of it by going to our <strong>account</strong> and creating a new <strong>service</strong>.</p>\n\n<p>We'll call <strong>auth</strong> and name it <strong>auth.js</strong>.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ touch public/app/account/auth.js\n</code></pre>\n\n<p><span class=\"filename\">auth.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">angular.module('app').factory('auth', function($http, identity, $q){  \n  return {\n    authenticateUser: function(username, password){\n      var deferred = $q.defer();\n      $http.post('/login', {username:username, password:password}).then(function(response){\n        if(response.data.success){\n          identity.currentUser = response.data.user;\n          deferred.resolve(true);\n        }else{\n          deferred.resolve(false);\n        }\n      });\n      return deferred.promise;\n    }\n  }\n});</code></pre>\n\n<p><strong>[1]</strong> This will need the <strong>http service</strong>, also the <strong>identity service</strong>, and since it's going to be communicating back with the <strong>controller</strong>, I'm gonna add in as well the <strong>q service</strong>, so I can use a <strong>promise back in the controller</strong>.</p>\n\n<p><strong>[3]</strong> Now this object that I return, I'm gonna give it one function, called <strong>authenticate.user</strong>, and that will be a function that takes in a <strong>username</strong> and <strong>password</strong>.</p>\n\n<p><strong>[7]</strong> Set the <strong>identity</strong> to the correct value</p>\n\n<p><strong>[4]</strong> so the only other thing I need to do is actually communicate back to the <strong>controller</strong> by using a <strong>promise</strong> so I'm gonna create a new <strong>deferred</strong> here</p>\n\n<p><strong>[8]</strong> and when we're successful, after we set the <strong>user</strong>, I'm going to resolve that <strong>deferred with simply a true</strong> to indicate that we were <strong>successful logging in</strong></p>\n\n<p><strong>[19]</strong> and I'll put a <strong>false in this resolution if we were unsuccessful</strong></p>\n\n<p><strong>[13]</strong> and then I'll return the promise for that <strong>deferred</strong>.</p>\n\n<p>And now I'll go back to the <strong>navbar login controller</strong></p>\n\n<p><span class=\"filename\">navbarLoginController.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">angular.module('app').controller('navbarLoginController', function ($scope, $http, notifier, identity, auth){  \n  $scope.identity = identity;\n  $scope.signin = function(username, password){\n    auth.authenticateUser(username, password).then(function(success){\n      if(success){\n        notifier.notify('You have successfully signed in!');\n      }else{\n        notifier.notify('Username/password combination incorrect');\n      }\n    });\n  }\n});</code></pre>\n\n<p><strong>[1]</strong> We'll inject a reference to the <strong>auth service</strong>. We still need to bring in the <strong>identity</strong> because we still have to set it onto the <strong>scope</strong> here, but <strong>no longer will we be calling post</strong>.</p>\n\n<p><strong>[4]</strong> Instead we'll call <strong>auth.authenticate.user</strong> and pass in the <strong>username</strong> and <strong>password</strong>.</p>\n\n<p><strong>[5-6]</strong> And then we'll receive our <strong>success messag</strong>e and if we were <strong>successful</strong> then we'll call the <strong>notifier</strong>, telling them that that worked.</p>\n\n<p><strong>[7-8]</strong> Otherwise we'll call <strong>notifier</strong> saying that we didn't log in successfully and now we can take this code out of here</p>\n\n<hr />\n\n<h6 id=\"addauthservicetoscripts\">Add Auth service to scripts</h6>\n\n<p>Then we just need to go to <strong>scripts</strong> file and add in that <strong>auth service</strong>.</p>\n\n<p><span class=\"filename\">scripts.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"10\"><code class=\"language-jade\">script(type=\"text/javascript\", src=\"/vendor/jquery/dist/jquery.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/toastr/toastr.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular/angular.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular-resource/angular-resource.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular-route/angular-route.js\")  \nscript(type=\"text/javascript\", src=\"/app/app.js\")  \nscript(type=\"text/javascript\", src=\"/app/main/mainController.js\")  \nscript(type=\"text/javascript\", src=\"/app/account/navbarLoginController.js\")  \nscript(type=\"text/javascript\", src=\"/app/account/identity.js\")  \nscript(type=\"text/javascript\", src=\"/app/account/auth.js\")  \nscript(type=\"text/javascript\", src=\"/app/common/notifier.js\")</code></pre>\n\n<hr />\n\n<h6 id=\"testinbrowser\">Test in browser</h6>\n\n<p>And now we can go back to our website and check that our functionality still works. </p>\n\n<p>Refresh the page, and sign in.</p>\n\n<p><img src=\"/content/images/2015/04/hides_login_form.png\" alt=\"test refactored controller\" /></p>\n\n<p>Everything is still working.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-creating-the-client-login-code\" style=\"width: 50%;\">Creating Client Login Code</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-improving-the-server-login-code\" style=\"float: right;width: 50%;text-align: right;\">Improve Server Login</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429137169142,"created_by":1,"updated_at":1430427397231,"updated_by":1,"published_at":1429137241706,"published_by":1},{"id":73,"uuid":"0d007604-1d7d-453f-bb0d-4b3eacbf18fc","title":"Building Angular.js and Node.js with the MEAN stack - Authentication: Improving the Server Login Code","slug":"building-angular-js-and-node-js-with-the-mean-stack-authentication-improving-the-server-login-code","markdown":"Over here in my **routes file**, this particular route, the **login route**,\n\n<span class=\"filename\">routes.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"9-20\"><code class=\"language-javascript\">var passport = require('passport');\n\nmodule.exports = function(app){\n  app.get('/partials/*', function(req, res){\n    res.render('./' + req.params[0]);\n  });\n\n  app.post('/login', function(req, res, next){\n    var auth = passport.authenticate('local', function(err, user){\n      if(err) { return next(err); }\n      if(!user) { return res.send({success:false}) }\n      req.logIn(user, function(err){\n        if(err) { return next(err); }\n        res.send({\n          success: true,\n          user   : user\n        });\n      });\n    });\n    auth(req, res, next);\n  });\n\n  app.get('*', function(req, res){\n    res.render('index');\n  });\n}</code></pre>\n\nis actually doing a whole bunch of logic and that's not really logic that belongs inside of a **routes file**.\n\n> The route itself should simply be **the route and then maybe a couple of lines to handle the route**, but doing a whole bunch of logic like this inside of the route just isn't very maintainable.\n\nSo I'd like to refactor this out into its own file.\n\nSo what I'm gonna do is go in to my **server** directory and into **config** and create a new file and I'll call this **auth.js**\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ touch server/config/auth.js\n```\n\n<span class=\"filename\">auth.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">var passport = require('passport');\n\nexports.authenticate = function(req, res, next){\n  var auth = passport.authenticate('local', function(err, user){\n    if(err) { return next(err); }\n    if(!user) { return res.send({success:false}) }\n    req.logIn(user, function(err){\n      if(err) { return next(err); }\n      res.send({\n        success: true,\n        user   : user\n      });\n    });\n  });\n  auth(req, res, next);\n};</code></pre>\n\n**[3]** I'll have this **exports** a function called **authenticate**, and I'm just going to come back into here and grab this entire function from **routes.js**.\n\n**[1]** Now I've got to bring in the **Passport** module\n\n<span class=\"filename\">routes.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"1,8\"><code class=\"language-javascript\">var auth = require('./auth');\n\nmodule.exports = function(app){\n  app.get('/partials/*', function(req, res){\n    res.render('./' + req.params[0]);\n  });\n\n  app.post('/login', auth.authenticate);\n\n  app.get('*', function(req, res){\n    res.render('index');\n  });\n}</code></pre>\n\n**[1]** then I've got to go back here and I've got to bring in that new **auth** module, but I can remove **Passport** now\n\n**[8]** and here I'll pass in the function **auth.authenticate**.\n\nAnd now it makes this **routes file** a lot more readable.\n\n---\n\n###### Test in browser ######\n\nSo let's check our functionality by going back to the browser, refreshing, and checking that we can still **log in**\n\n![refactored routes authentication](/content/images/2015/04/hides_login_form.png)\n\nAnd our functionality's still working.\n\nSo there we've gone through and:\n\n- improved our **authentication** code\n- we've made the **client track that somebody's logged in**\n- and **hidden the login box** upon logging in.\n\nOne of the things that's really beautiful about **Angular**, if we go back to the code, is the fact that here in our partial, we're able to do things just based on whether or not somebody's **authenticated**.\n\n<span class=\"filename\">navbar-login.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"2\"><code class=\"language-jade\">div(ng-controller=\"navbarLoginController\")\n  .row.collapse(ng-hide=\"identity.isAuthenticated()\")\n    .large-4.small-4.columns\n      input.form-control(placeholder=\"Email\", ng-model=\"username\")\n    .large-4.small-4.columns\n      input.form-control(type=\"password\", placeholder=\"password\", ng-model=\"password\")\n    .large-4.small-4.columns\n      a.alert.button.expand(ng-click=\"signin(username,password)\") Sign in</code></pre>\n\nSo we don't have to go into the code that does the login here in the **auth service** and once somebody's actually logged in we don't have to call a whole bunch of code that sets up state on the page, changes things, makes things enabled that weren't enabled.\n\nWe simply say now we have a **current user** and then **Angular** will go through and reevaluate everything and make any changes based on the fact that the state has now changed.\n\nSo if the login box should be hidden when the **user** is logged in, all I have to do is log in a **user** and I don't have to worry about communicating with some distant part of the application and saying, hey, now turn off the login box, turn on the **user**'s profile link.\n\nI don't have to do all that because that's automatically done for me, so long as we just use **data binding to detect when state has changed**.\n\nAnd we don't have to refresh the page when somebody's logged in.\n\nWe can just trust that the page will be in the correct state because the state has changed somewhere else.\n\n> And this is one of the things that really makes **Angular** stand out among its competitors is this **ability to simply change states somewhere in a common service** and have that **change in state cascade out everywhere without having to declare the dependencies in relationships between pieces of state**.\n\nWe can simply just declare like we did in our partial, hey, if a **user**'s logged in then they should be invisible, this other piece should be visible, etc., etc., and **Angular** takes care of making all those updates for us.\n\n---\n\n###### Module Summary ######\n\nIn this module we've implemented a lot of the code to make **authentication** work using **Passport** with its **local strategy**, but we still have more code to write before our **security** features are complete so in the next module we'll continue on with this effort and implement some **security and authorization**.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-improving-the-client-login-code\" style=\"width: 50%;\">Improve Client Login Code</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-implementing-secure-passwords\" style=\"float: right;width: 50%;text-align: right;\">Security and Authentication</a>","html":"<p>Over here in my <strong>routes file</strong>, this particular route, the <strong>login route</strong>,</p>\n\n<p><span class=\"filename\">routes.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"9-20\"><code class=\"language-javascript\">var passport = require('passport');\n\nmodule.exports = function(app){  \n  app.get('/partials/*', function(req, res){\n    res.render('./' + req.params[0]);\n  });\n\n  app.post('/login', function(req, res, next){\n    var auth = passport.authenticate('local', function(err, user){\n      if(err) { return next(err); }\n      if(!user) { return res.send({success:false}) }\n      req.logIn(user, function(err){\n        if(err) { return next(err); }\n        res.send({\n          success: true,\n          user   : user\n        });\n      });\n    });\n    auth(req, res, next);\n  });\n\n  app.get('*', function(req, res){\n    res.render('index');\n  });\n}</code></pre>\n\n<p>is actually doing a whole bunch of logic and that's not really logic that belongs inside of a <strong>routes file</strong>.</p>\n\n<blockquote>\n  <p>The route itself should simply be <strong>the route and then maybe a couple of lines to handle the route</strong>, but doing a whole bunch of logic like this inside of the route just isn't very maintainable.</p>\n</blockquote>\n\n<p>So I'd like to refactor this out into its own file.</p>\n\n<p>So what I'm gonna do is go in to my <strong>server</strong> directory and into <strong>config</strong> and create a new file and I'll call this <strong>auth.js</strong></p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ touch server/config/auth.js\n</code></pre>\n\n<p><span class=\"filename\">auth.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">var passport = require('passport');\n\nexports.authenticate = function(req, res, next){  \n  var auth = passport.authenticate('local', function(err, user){\n    if(err) { return next(err); }\n    if(!user) { return res.send({success:false}) }\n    req.logIn(user, function(err){\n      if(err) { return next(err); }\n      res.send({\n        success: true,\n        user   : user\n      });\n    });\n  });\n  auth(req, res, next);\n};</code></pre>\n\n<p><strong>[3]</strong> I'll have this <strong>exports</strong> a function called <strong>authenticate</strong>, and I'm just going to come back into here and grab this entire function from <strong>routes.js</strong>.</p>\n\n<p><strong>[1]</strong> Now I've got to bring in the <strong>Passport</strong> module</p>\n\n<p><span class=\"filename\">routes.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"1,8\"><code class=\"language-javascript\">var auth = require('./auth');\n\nmodule.exports = function(app){  \n  app.get('/partials/*', function(req, res){\n    res.render('./' + req.params[0]);\n  });\n\n  app.post('/login', auth.authenticate);\n\n  app.get('*', function(req, res){\n    res.render('index');\n  });\n}</code></pre>\n\n<p><strong>[1]</strong> then I've got to go back here and I've got to bring in that new <strong>auth</strong> module, but I can remove <strong>Passport</strong> now</p>\n\n<p><strong>[8]</strong> and here I'll pass in the function <strong>auth.authenticate</strong>.</p>\n\n<p>And now it makes this <strong>routes file</strong> a lot more readable.</p>\n\n<hr />\n\n<h6 id=\"testinbrowser\">Test in browser</h6>\n\n<p>So let's check our functionality by going back to the browser, refreshing, and checking that we can still <strong>log in</strong></p>\n\n<p><img src=\"/content/images/2015/04/hides_login_form.png\" alt=\"refactored routes authentication\" /></p>\n\n<p>And our functionality's still working.</p>\n\n<p>So there we've gone through and:</p>\n\n<ul>\n<li>improved our <strong>authentication</strong> code</li>\n<li>we've made the <strong>client track that somebody's logged in</strong></li>\n<li>and <strong>hidden the login box</strong> upon logging in.</li>\n</ul>\n\n<p>One of the things that's really beautiful about <strong>Angular</strong>, if we go back to the code, is the fact that here in our partial, we're able to do things just based on whether or not somebody's <strong>authenticated</strong>.</p>\n\n<p><span class=\"filename\">navbar-login.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"2\"><code class=\"language-jade\">div(ng-controller=\"navbarLoginController\")  \n  .row.collapse(ng-hide=\"identity.isAuthenticated()\")\n    .large-4.small-4.columns\n      input.form-control(placeholder=\"Email\", ng-model=\"username\")\n    .large-4.small-4.columns\n      input.form-control(type=\"password\", placeholder=\"password\", ng-model=\"password\")\n    .large-4.small-4.columns\n      a.alert.button.expand(ng-click=\"signin(username,password)\") Sign in</code></pre>\n\n<p>So we don't have to go into the code that does the login here in the <strong>auth service</strong> and once somebody's actually logged in we don't have to call a whole bunch of code that sets up state on the page, changes things, makes things enabled that weren't enabled.</p>\n\n<p>We simply say now we have a <strong>current user</strong> and then <strong>Angular</strong> will go through and reevaluate everything and make any changes based on the fact that the state has now changed.</p>\n\n<p>So if the login box should be hidden when the <strong>user</strong> is logged in, all I have to do is log in a <strong>user</strong> and I don't have to worry about communicating with some distant part of the application and saying, hey, now turn off the login box, turn on the <strong>user</strong>'s profile link.</p>\n\n<p>I don't have to do all that because that's automatically done for me, so long as we just use <strong>data binding to detect when state has changed</strong>.</p>\n\n<p>And we don't have to refresh the page when somebody's logged in.</p>\n\n<p>We can just trust that the page will be in the correct state because the state has changed somewhere else.</p>\n\n<blockquote>\n  <p>And this is one of the things that really makes <strong>Angular</strong> stand out among its competitors is this <strong>ability to simply change states somewhere in a common service</strong> and have that <strong>change in state cascade out everywhere without having to declare the dependencies in relationships between pieces of state</strong>.</p>\n</blockquote>\n\n<p>We can simply just declare like we did in our partial, hey, if a <strong>user</strong>'s logged in then they should be invisible, this other piece should be visible, etc., etc., and <strong>Angular</strong> takes care of making all those updates for us.</p>\n\n<hr />\n\n<h6 id=\"modulesummary\">Module Summary</h6>\n\n<p>In this module we've implemented a lot of the code to make <strong>authentication</strong> work using <strong>Passport</strong> with its <strong>local strategy</strong>, but we still have more code to write before our <strong>security</strong> features are complete so in the next module we'll continue on with this effort and implement some <strong>security and authorization</strong>.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-improving-the-client-login-code\" style=\"width: 50%;\">Improve Client Login Code</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-implementing-secure-passwords\" style=\"float: right;width: 50%;text-align: right;\">Security and Authentication</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429137309334,"created_by":1,"updated_at":1429265841023,"updated_by":1,"published_at":1429137331327,"published_by":1},{"id":74,"uuid":"492ac311-48a3-45f5-bc74-a1091107e7f0","title":"Building Angular.js and Node.js with the MEAN stack - Security and Authorization: Implementing Secure Passwords","slug":"building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-implementing-secure-passwords","markdown":"###### Module Introduction ######\n\nIn this module, we are going to continue what we started in the last module by implementing some more **security measures for our authentication** and then **implementing an authorization scheme**.\n\n---\n\n###### Implementing Secure Passwords ######\n\n> In this section, we're going to **implement passwords for our login**, but we're going to **implement them in a secure manner**, so we're going to **store our passwords in an encrypted manner, not in clear text**.\n\n> **Storing passwords in clear text should never be done.**\n\nEven if your website isn't important, and there's nothing anybody can steal by getting unauthorized access to your system, the **usernames** and **passwords** of your **users** are still very valuable.\n\nSince your **users** are likely to use the same **passwords** on other sites, they could be used to gain access to other, more important sites.\n\nTherefore, you should always store your **users' passwords in an encrypted manner**.\n\nNow, there are two types of **encryption**:\n\n- **One-way**\n- **two-way**\n\nWhen storing **passwords**, it's always best to store them in a **one-way manner** so that they can never be **decrypted** back into their original, clear text form.\n\nThis one-way encryption is called **hashing**.\n\nVery basically, you start out with a **clear text password and a salt**.\n\n> A **salt** is just a **randomly generated number**.\n\n> You take those two pieces of data, put them into a **hashing algorithm**, and then what comes out is a **hashed password**.\n\n![implementing secure passwords](/content/images/2015/04/implementing_secure_passwords.png)\n\nThis cannot be reversed back into its original form.\n\nIt's also always best to use a **unique salt** with each **password**. Using the same **salt** for all **passwords** can be a **security vulnerability**.\n\nTherefore, for each **user**, we're going to want to store both their **salt** and their **hashed password**.\n\nNow, there are a lot of different **hashing algorithms** out there. Some of them are more secure than others. The **hashing** that we're going to use is pretty secure, but if you're going to be doing any **high-security applications, like medical or financial**, then you should do more research and choose an appropriately secure **encryption** method.\n\n---\n\n###### Adding salt and hashed password to User Schema ######\n\nSo, we're going to begin our implementation by going to our code and adding two new fields to our **user schema**.\n\n<span class=\"filename\">mongoose.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"2,16-17,25,27-28,33-34,37-38,43-44,47-48,53-54,60-62,64-67\"><code class=\"language-javascript\">var mongoose = require('mongoose'),\n    crypto   = require('crypto');\n\nmodule.exports = function(config){\n  mongoose.connect(config.db);\n  var db = mongoose.connection;\n  db.on('error', console.error.bind(console, 'connection error...'));\n  db.once('open', function callback(){\n    console.log('mydatabase db opened');\n  });\n\n  var userSchema = mongoose.Schema({\n    firstName : String,\n    lastName  : String,\n    username  : String,\n    salt      : String,\n    hashed_pwd: String\n  });\n\n  var User = mongoose.model('User', userSchema);\n\n  User.find([]).exec(function(err, collection){\n    if(collection.length === 0){\n\n      var salt, hash;\n\n      salt = createSalt();\n      hash = hashPwd(salt, 'jimjim');\n      User.create({\n        firstName : 'Joe',\n        lastName  : 'Eames',\n        username  : 'jimjim',\n        salt      : salt,\n        hashed_pwd: hash\n      });\n\n      salt = createSalt();\n      hash = hashPwd(salt, 'bobbywes');\n      User.create({\n        firstName : 'Bob',\n        lastName  : 'Wes',\n        username  : 'bobbywes',\n        salt      : salt,\n        hashed_pwd: hash\n      });\n\n      salt = createSalt();\n      hash = hashPwd(salt, 'jamesmoe');\n      User.create({\n        firstName : 'Moe',\n        lastName  : 'James',\n        username  : 'jamesmoe',\n        salt      : salt,\n        hashed_pwd: hash\n      });\n    }\n  });\n}\n\nfunction createSalt(){\n  return crypto.randomBytes(128).toString('base64');\n}\n\nfunction hashPwd(salt, pwd){\n  var hmac = crypto.createHmac('sha1', salt);\n  return hmac.udpate(pwd).digest('hex');\n}</code></pre>\n\n**[16]** We're going to add a **salt** field, which will also be a **string**\n\n**[17]** and a **hashed password** field, again, a **string**.\n\n> Now that we've got these two fields inside of our **schema**, we need to add them to our initial **users** that we add to the **database**. But, before we can do that, we actually need to have **methods** that will **create a salt** and **create a hashed password from a clear text password and a salt**.\n\n**[2]**  So, I'm going to go up to the top and bring in the **Crypto** module. **Crypto** is the built-in **cryptography** module that's included with **Node**.\n\n> Now, I'm going to go down to the bottom of my file and create two new functions.\n\n**[60-62]** The first one will be \"**create salt**\". And for this, I'm going to use the **Crypto** module and ask it to give me some random **bytes**. I want **128** of them, which makes this a pretty long **salt** and, therefore, increases the security of my **algorithm**. And, I want those in **Base64** format.\n\n**[64-67]** Now, I also need a **function** to **create a hashed password**. And it takes in a **salt** and a **password**.\n\n**[65]** And, the first thing I do here is create an **HMAC**, or a **hash message authentication code**. It's really not important to understand what this is. This **function** takes two **parameters**. The first is the **algorithm** itself, which I'll choose the **SHA-1 algorithm**, and then the **salt**.\n\n**[66]** Now that I've got an **HMAC**, I'm going to return out the **HMAC** after I **update it with the password** and then I want to call **digest** on that result and tell it to return out in **hex** form. This will give me back a **hex-based representation of the result of hashing that password with that salt using the SHA-1 algorithm**.\n\n> Now that I've got my functions to create a salt and hash my passwords, I'm going to go up to the sample users and I'm going to create variables for the salt and the hash.\n\n**[27,37,47]** And I'll set the **salt** equal to a **new salt**\n\n**[28,38,48]** and then I'll **hash the password by setting hash equal to the hash password**, **passing in the salt** that I just created and **the password for the user**. So for each **user**, I'm just going to use a **password** that's the same as their **username**, for simplicity.\n\n**[33-34,43-44,53-54]** And, now I need to update the **user schemas** to also update the **salt** and the **hashed password**. \n\n---\n\n###### Regenerate Users with new Schema ######\n\n> And now that I got that implemented, I need to regenerate my default users so that they have the hash and the password.\n\nSo, first I need to go back to my **command line**, into my **Mongo** shell and, looking at the **users**, we can see they don't have their **hash** or their **password**, so I need to remove them.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ mongo\nMongoDB shell version: 3.0.0\nconnecting to: test\n> db.users.find()\n> use mydatabase\nswitched to db mydatabase\n> db.users.find()\n{ \"_id\" : ObjectId(\"552fd0addfb7184c25ec2b5c\"), \"firstName\" : \"Joe\", \"lastName\" : \"Eames\", \"username\" : \"jimjim\", \"__v\" : 0 }\n{ \"_id\" : ObjectId(\"552fd0addfb7184c25ec2b5d\"), \"firstName\" : \"Bob\", \"lastName\" : \"Wes\", \"username\" : \"bobby\", \"__v\" : 0 }\n{ \"_id\" : ObjectId(\"552fd0addfb7184c25ec2b5e\"), \"firstName\" : \"Moe\", \"lastName\" : \"James\", \"username\" : \"jamesmoe\", \"__v\" : 0 }\n> db.users.remove({})\nWriteResult({ \"nRemoved\" : 3 })\n```\n\nGo back in here and make a change and save, and that will cause **nodemon** to rerun the **Node server**, which will regenerate these **users**.\n\nGo back to the command line and look at the **users**. And, we can see that now they actually have a **salt** and a **hashed password** stored in their document.\n\n<span class=\"filename\">Terminal</span>\n```bash\n> db.users.find()\n{ \"_id\" : ObjectId(\"5531096ee63803c00ba22281\"), \"firstName\" : \"Joe\", \"lastName\" : \"Eames\", \"username\" : \"jimjim\", \"salt\" : \"aWJ9hvduuxesy7hNdiRHmLFiyrhycHvRRj7ISdSY5AJmFtD56GMHCKXRFbtuIS7w/liSfOEXbWQdB0Ckv3LI6tV96l4gR6BwNweRIhX+FO+EtxSnFAGQYWS8+RjGs94bKIClltL+YiQokwtJw8neryllqpvJcwkvtZ3NtnZId/8=\", \"hashed_pwd\" : \"0eadb57fab4c3250ce86833131381751c61b7b2d\", \"__v\" : 0 }\n{ \"_id\" : ObjectId(\"5531096ee63803c00ba22282\"), \"firstName\" : \"Bob\", \"lastName\" : \"Wes\", \"username\" : \"bobbywes\", \"salt\" : \"fD1N6JVVzxlUvpoOgayPlONQhi+9Q5M4kPV3mTMYNEnOaKmHJD3IQYiRqzKzrKOlJt0G//H8bDZovKQbAYVYwxyEa3ymET720uwqzHjmY4RJF4ACqImlYxySohMM1N495eorbMc0sv3guP8kQBaSIHpKKtWVZkvWGy2BDJgl2U4=\", \"hashed_pwd\" : \"c55ef452077febea958878520b580a536f38e370\", \"__v\" : 0 }\n{ \"_id\" : ObjectId(\"5531096ee63803c00ba22283\"), \"firstName\" : \"Moe\", \"lastName\" : \"James\", \"username\" : \"jamesmoe\", \"salt\" : \"yvtjqf+mjGxaJnluUuYYEmHx4kKjMzxbgQZXzTEw2D6n4QypJLAbnZHnaGPqsPDu6+1kIRY39JQvAg9MD5JJ59TE2hi+PpVbOtI7yef1m6zNg3IundJDvf/k6Tm2q+cRE/51zTt+VbKAvHGDCb+tUezzJyTj0wEzNijuoXyCG/A=\", \"hashed_pwd\" : \"46d1153445ae32e47271b27ced7e6b04776aa413\", \"__v\" : 0 }\n```\n\nNow, another small **security flaw** that you should be aware of is the fact that we're **sending the entire user object down to the client** whenever somebody **logs in**.\n\n> Again, these **hashed passwords** are really quite secure, but **there's no need to be sending the salt and the hashed password down to the client**.\n\n> We're not going to fix this in our implementation for this course, but it is something you should be aware of and, in a **production implementation**, you **should remove these fields from the data that you send down to the client**.\n\nAnd now that we got our **data** ready, let's change our **authentication algorithm**. Back in my **server.js** code\n\n<span class=\"filename\">server.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"19\"><code class=\"language-javascript\">var express     = require('express'),\n  mongoose      = require('mongoose'),\n  passport      = require('passport'),\n  LocalStrategy = require('passport-local').Strategy;\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nvar config = require('./server/config/config')[env];\n\nrequire('./server/config/express')(app, config);\nrequire('./server/config/mongoose')(config);\n\nvar User = mongoose.model('User');\npassport.use(new LocalStrategy(\n  function(username, password, done){\n    User.findOne({username:username}).exec(function(err, user) {\n      if(user && user.authenticate(password)){\n        return done(null, user);\n      } else {\n        return done(null, false);\n      }\n    });\n  }\n));\n\npassport.serializeUser(function(user, done){\n  if(user) {\n    done(null, user._id);\n  }\n});\n\npassport.deserializeUser(function(id, done){\n  User.findOne({_id:id}).exec(function(err, user){\n    if(user){\n      return done(null, user);\n    } else {\n      return done(null, false);\n    }\n  });\n});\n\nrequire('./server/config/routes')(app);\n\napp.listen(config.port);\nconsole.log('Listening on port ' + config.port + '...');</code></pre>\n\n**[19]** I'm going to go down into my **local strategy** and I'm going to change those methods so it not only checks to see if the **user** actually exists, but it also checks to make sure the **user** is **authenticated**. And, by calling **user.authenticate**, that's going to be a **method** that I'll create on my **user schema**. And, I'll pass in the **password**. And, this checks to make sure that the **password** is **authentic** for that **user**.\n\nSo, let's go back to our **Mongoose** code\n\n<span class=\"filename\">mongoose.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"20-24\"><code class=\"language-javascript\">var mongoose = require('mongoose'),\n    crypto   = require('crypto');\n\nmodule.exports = function(config){\n  mongoose.connect(config.db);\n  var db = mongoose.connection;\n  db.on('error', console.error.bind(console, 'connection error...'));\n  db.once('open', function callback(){\n    console.log('mydatabase db opened');\n  });\n\n  var userSchema = mongoose.Schema({\n    firstName : String,\n    lastName  : String,\n    username  : String,\n    salt      : String,\n    hashed_pwd: String\n  });\n\n  userSchema.methods = {\n    authenticate: function(passwordToMatch){\n      return hashPwd(this.salt, passwordToMatch) = = = this.hashed_pwd;\n    }\n  }\n\n  var User = mongoose.model('User', userSchema);\n\n  User.find([]).exec(function(err, collection){\n    if(collection.length === 0){\n\n      var salt, hash;\n\n      salt = createSalt();\n      hash = hashPwd(salt, 'jimjim');\n      User.create({\n        firstName : 'Joe',\n        lastName  : 'Eames',\n        username  : 'jimjim',\n        salt      : salt,\n        hashed_pwd: hash\n      });\n\n      salt = createSalt();\n      hash = hashPwd(salt, 'bobbywes');\n      User.create({\n        firstName : 'Bob',\n        lastName  : 'Wes',\n        username  : 'bobbywes',\n        salt      : salt,\n        hashed_pwd: hash\n      });\n\n      salt = createSalt();\n      hash = hashPwd(salt, 'jamesmoe');\n      User.create({\n        firstName : 'Moe',\n        lastName  : 'James',\n        username  : 'jamesmoe',\n        salt      : salt,\n        hashed_pwd: hash\n      });\n    }\n  });\n}\n\nfunction createSalt(){\n  return crypto.randomBytes(128).toString('base64');\n}\n\nfunction hashPwd(salt, pwd){\n  var hmac = crypto.createHmac('sha1', salt);\n  hmac.setEncoding('hex');\n  hmac.write(pwd);\n  hmac.end();\n  return hmac.read();\n}</code></pre>\n\n**[20-24]** let's go over to our **schema** and let's add a new **method** to it. We'll do that by setting the **methods property equal to an object that has the methods** in there that I want. \n\n**[21]** And, I want to add that **authenticate** method. And, I want to take the **password** that they're trying to **match, hash it, and compare it to the current user's hashed password**. So, I'll pass it into the **hashed password function**, passing in the **current user's salt and the password to match**, and **check that that is equal to the current user's hashed password**.\n\n> And now, we should be able to **authenticate** a **user**'s attempt to sign-in based on not just their **username**, but also their **password**.\n\nSo, we'll go back to our website and refresh it. And, let's try to login with an invalid **password**, but a **valid username**.\n\nBut, let's give it the **valid password**.\n\nAnd it successfully signs us in.\n\n![Sign in with password](/content/images/2015/04/hides_login_form.png)\n\n> And, that is how to **implement secure passwords using hashing**.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-improving-the-server-login-code\" style=\"width: 50%;\">Improving Server Login Code</a><a class=\"next-article\" href=\"/%10building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-adding-signout-functionality\" style=\"float: right;width: 50%;text-align: right;\">Adding Signout Functionality</a>","html":"<h6 id=\"moduleintroduction\">Module Introduction</h6>\n\n<p>In this module, we are going to continue what we started in the last module by implementing some more <strong>security measures for our authentication</strong> and then <strong>implementing an authorization scheme</strong>.</p>\n\n<hr />\n\n<h6 id=\"implementingsecurepasswords\">Implementing Secure Passwords</h6>\n\n<blockquote>\n  <p>In this section, we're going to <strong>implement passwords for our login</strong>, but we're going to <strong>implement them in a secure manner</strong>, so we're going to <strong>store our passwords in an encrypted manner, not in clear text</strong>.</p>\n  \n  <p><strong>Storing passwords in clear text should never be done.</strong></p>\n</blockquote>\n\n<p>Even if your website isn't important, and there's nothing anybody can steal by getting unauthorized access to your system, the <strong>usernames</strong> and <strong>passwords</strong> of your <strong>users</strong> are still very valuable.</p>\n\n<p>Since your <strong>users</strong> are likely to use the same <strong>passwords</strong> on other sites, they could be used to gain access to other, more important sites.</p>\n\n<p>Therefore, you should always store your <strong>users' passwords in an encrypted manner</strong>.</p>\n\n<p>Now, there are two types of <strong>encryption</strong>:</p>\n\n<ul>\n<li><strong>One-way</strong></li>\n<li><strong>two-way</strong></li>\n</ul>\n\n<p>When storing <strong>passwords</strong>, it's always best to store them in a <strong>one-way manner</strong> so that they can never be <strong>decrypted</strong> back into their original, clear text form.</p>\n\n<p>This one-way encryption is called <strong>hashing</strong>.</p>\n\n<p>Very basically, you start out with a <strong>clear text password and a salt</strong>.</p>\n\n<blockquote>\n  <p>A <strong>salt</strong> is just a <strong>randomly generated number</strong>.</p>\n  \n  <p>You take those two pieces of data, put them into a <strong>hashing algorithm</strong>, and then what comes out is a <strong>hashed password</strong>.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2015/04/implementing_secure_passwords.png\" alt=\"implementing secure passwords\" /></p>\n\n<p>This cannot be reversed back into its original form.</p>\n\n<p>It's also always best to use a <strong>unique salt</strong> with each <strong>password</strong>. Using the same <strong>salt</strong> for all <strong>passwords</strong> can be a <strong>security vulnerability</strong>.</p>\n\n<p>Therefore, for each <strong>user</strong>, we're going to want to store both their <strong>salt</strong> and their <strong>hashed password</strong>.</p>\n\n<p>Now, there are a lot of different <strong>hashing algorithms</strong> out there. Some of them are more secure than others. The <strong>hashing</strong> that we're going to use is pretty secure, but if you're going to be doing any <strong>high-security applications, like medical or financial</strong>, then you should do more research and choose an appropriately secure <strong>encryption</strong> method.</p>\n\n<hr />\n\n<h6 id=\"addingsaltandhashedpasswordtouserschema\">Adding salt and hashed password to User Schema</h6>\n\n<p>So, we're going to begin our implementation by going to our code and adding two new fields to our <strong>user schema</strong>.</p>\n\n<p><span class=\"filename\">mongoose.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"2,16-17,25,27-28,33-34,37-38,43-44,47-48,53-54,60-62,64-67\"><code class=\"language-javascript\">var mongoose = require('mongoose'),  \n    crypto   = require('crypto');\n\nmodule.exports = function(config){  \n  mongoose.connect(config.db);\n  var db = mongoose.connection;\n  db.on('error', console.error.bind(console, 'connection error...'));\n  db.once('open', function callback(){\n    console.log('mydatabase db opened');\n  });\n\n  var userSchema = mongoose.Schema({\n    firstName : String,\n    lastName  : String,\n    username  : String,\n    salt      : String,\n    hashed_pwd: String\n  });\n\n  var User = mongoose.model('User', userSchema);\n\n  User.find([]).exec(function(err, collection){\n    if(collection.length <mark>= 0){\n\n      var salt, hash;\n\n      salt = createSalt();\n      hash = hashPwd(salt, 'jimjim');\n      User.create({\n        firstName : 'Joe',\n        lastName  : 'Eames',\n        username  : 'jimjim',\n        salt      : salt,\n        hashed_pwd: hash\n      });\n\n      salt = createSalt();\n      hash = hashPwd(salt, 'bobbywes');\n      User.create({\n        firstName : 'Bob',\n        lastName  : 'Wes',\n        username  : 'bobbywes',\n        salt      : salt,\n        hashed_pwd: hash\n      });\n\n      salt = createSalt();\n      hash = hashPwd(salt, 'jamesmoe');\n      User.create({\n        firstName : 'Moe',\n        lastName  : 'James',\n        username  : 'jamesmoe',\n        salt      : salt,\n        hashed_pwd: hash\n      });\n    }\n  });\n}\n\nfunction createSalt(){  \n  return crypto.randomBytes(128).toString('base64');\n}\n\nfunction hashPwd(salt, pwd){  \n  var hmac = crypto.createHmac('sha1', salt);\n  return hmac.udpate(pwd).digest('hex');\n}</code></pre>\n\n<p><strong>[16]</strong> We're going to add a <strong>salt</strong> field, which will also be a <strong>string</strong></p>\n\n<p><strong>[17]</strong> and a <strong>hashed password</strong> field, again, a <strong>string</strong>.</p>\n\n<blockquote>\n  <p>Now that we've got these two fields inside of our <strong>schema</strong>, we need to add them to our initial <strong>users</strong> that we add to the <strong>database</strong>. But, before we can do that, we actually need to have <strong>methods</strong> that will <strong>create a salt</strong> and <strong>create a hashed password from a clear text password and a salt</strong>.</p>\n</blockquote>\n\n<p><strong>[2]</strong>  So, I'm going to go up to the top and bring in the <strong>Crypto</strong> module. <strong>Crypto</strong> is the built-in <strong>cryptography</strong> module that's included with <strong>Node</strong>.</p>\n\n<blockquote>\n  <p>Now, I'm going to go down to the bottom of my file and create two new functions.</p>\n</blockquote>\n\n<p><strong>[60-62]</strong> The first one will be \"<strong>create salt</strong>\". And for this, I'm going to use the <strong>Crypto</strong> module and ask it to give me some random <strong>bytes</strong>. I want <strong>128</strong> of them, which makes this a pretty long <strong>salt</strong> and, therefore, increases the security of my <strong>algorithm</strong>. And, I want those in <strong>Base64</strong> format.</p>\n\n<p><strong>[64-67]</strong> Now, I also need a <strong>function</strong> to <strong>create a hashed password</strong>. And it takes in a <strong>salt</strong> and a <strong>password</strong>.</p>\n\n<p><strong>[65]</strong> And, the first thing I do here is create an <strong>HMAC</strong>, or a <strong>hash message authentication code</strong>. It's really not important to understand what this is. This <strong>function</strong> takes two <strong>parameters</strong>. The first is the <strong>algorithm</strong> itself, which I'll choose the <strong>SHA-1 algorithm</strong>, and then the <strong>salt</strong>.</p>\n\n<p><strong>[66]</strong> Now that I've got an <strong>HMAC</strong>, I'm going to return out the <strong>HMAC</strong> after I <strong>update it with the password</strong> and then I want to call <strong>digest</strong> on that result and tell it to return out in <strong>hex</strong> form. This will give me back a <strong>hex-based representation of the result of hashing that password with that salt using the SHA-1 algorithm</strong>.</p>\n\n<blockquote>\n  <p>Now that I've got my functions to create a salt and hash my passwords, I'm going to go up to the sample users and I'm going to create variables for the salt and the hash.</p>\n</blockquote>\n\n<p><strong>[27,37,47]</strong> And I'll set the <strong>salt</strong> equal to a <strong>new salt</strong></p>\n\n<p><strong>[28,38,48]</strong> and then I'll <strong>hash the password by setting hash equal to the hash password</strong>, <strong>passing in the salt</strong> that I just created and <strong>the password for the user</strong>. So for each <strong>user</strong>, I'm just going to use a <strong>password</strong> that's the same as their <strong>username</strong>, for simplicity.</p>\n\n<p><strong>[33-34,43-44,53-54]</strong> And, now I need to update the <strong>user schemas</strong> to also update the <strong>salt</strong> and the <strong>hashed password</strong>. </p>\n\n<hr />\n\n<h6 id=\"regenerateuserswithnewschema\">Regenerate Users with new Schema</h6>\n\n<blockquote>\n  <p>And now that I got that implemented, I need to regenerate my default users so that they have the hash and the password.</p>\n</blockquote>\n\n<p>So, first I need to go back to my <strong>command line</strong>, into my <strong>Mongo</strong> shell and, looking at the <strong>users</strong>, we can see they don't have their <strong>hash</strong> or their <strong>password</strong>, so I need to remove them.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ mongo\nMongoDB shell version: 3.0.0  \nconnecting to: test  \n&gt; db.users.find()\n&gt; use mydatabase\nswitched to db mydatabase  \n&gt; db.users.find()\n{ \"_id\" : ObjectId(\"552fd0addfb7184c25ec2b5c\"), \"firstName\" : \"Joe\", \"lastName\" : \"Eames\", \"username\" : \"jimjim\", \"__v\" : 0 }\n{ \"_id\" : ObjectId(\"552fd0addfb7184c25ec2b5d\"), \"firstName\" : \"Bob\", \"lastName\" : \"Wes\", \"username\" : \"bobby\", \"__v\" : 0 }\n{ \"_id\" : ObjectId(\"552fd0addfb7184c25ec2b5e\"), \"firstName\" : \"Moe\", \"lastName\" : \"James\", \"username\" : \"jamesmoe\", \"__v\" : 0 }\n&gt; db.users.remove({})\nWriteResult({ \"nRemoved\" : 3 })  \n</code></pre>\n\n<p>Go back in here and make a change and save, and that will cause <strong>nodemon</strong> to rerun the <strong>Node server</strong>, which will regenerate these <strong>users</strong>.</p>\n\n<p>Go back to the command line and look at the <strong>users</strong>. And, we can see that now they actually have a <strong>salt</strong> and a <strong>hashed password</strong> stored in their document.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">&gt; db.users.find()\n{ \"_id\" : ObjectId(\"5531096ee63803c00ba22281\"), \"firstName\" : \"Joe\", \"lastName\" : \"Eames\", \"username\" : \"jimjim\", \"salt\" : \"aWJ9hvduuxesy7hNdiRHmLFiyrhycHvRRj7ISdSY5AJmFtD56GMHCKXRFbtuIS7w/liSfOEXbWQdB0Ckv3LI6tV96l4gR6BwNweRIhX+FO+EtxSnFAGQYWS8+RjGs94bKIClltL+YiQokwtJw8neryllqpvJcwkvtZ3NtnZId/8=\", \"hashed_pwd\" : \"0eadb57fab4c3250ce86833131381751c61b7b2d\", \"__v\" : 0 }\n{ \"_id\" : ObjectId(\"5531096ee63803c00ba22282\"), \"firstName\" : \"Bob\", \"lastName\" : \"Wes\", \"username\" : \"bobbywes\", \"salt\" : \"fD1N6JVVzxlUvpoOgayPlONQhi+9Q5M4kPV3mTMYNEnOaKmHJD3IQYiRqzKzrKOlJt0G//H8bDZovKQbAYVYwxyEa3ymET720uwqzHjmY4RJF4ACqImlYxySohMM1N495eorbMc0sv3guP8kQBaSIHpKKtWVZkvWGy2BDJgl2U4=\", \"hashed_pwd\" : \"c55ef452077febea958878520b580a536f38e370\", \"__v\" : 0 }\n{ \"_id\" : ObjectId(\"5531096ee63803c00ba22283\"), \"firstName\" : \"Moe\", \"lastName\" : \"James\", \"username\" : \"jamesmoe\", \"salt\" : \"yvtjqf+mjGxaJnluUuYYEmHx4kKjMzxbgQZXzTEw2D6n4QypJLAbnZHnaGPqsPDu6+1kIRY39JQvAg9MD5JJ59TE2hi+PpVbOtI7yef1m6zNg3IundJDvf/k6Tm2q+cRE/51zTt+VbKAvHGDCb+tUezzJyTj0wEzNijuoXyCG/A=\", \"hashed_pwd\" : \"46d1153445ae32e47271b27ced7e6b04776aa413\", \"__v\" : 0 }\n</code></pre>\n\n<p>Now, another small <strong>security flaw</strong> that you should be aware of is the fact that we're <strong>sending the entire user object down to the client</strong> whenever somebody <strong>logs in</strong>.</p>\n\n<blockquote>\n  <p>Again, these <strong>hashed passwords</strong> are really quite secure, but <strong>there's no need to be sending the salt and the hashed password down to the client</strong>.</p>\n  \n  <p>We're not going to fix this in our implementation for this course, but it is something you should be aware of and, in a <strong>production implementation</strong>, you <strong>should remove these fields from the data that you send down to the client</strong>.</p>\n</blockquote>\n\n<p>And now that we got our <strong>data</strong> ready, let's change our <strong>authentication algorithm</strong>. Back in my <strong>server.js</strong> code</p>\n\n<p><span class=\"filename\">server.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"19\"><code class=\"language-javascript\">var express     = require('express'),  \n  mongoose      = require('mongoose'),\n  passport      = require('passport'),\n  LocalStrategy = require('passport-local').Strategy;\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nvar config = require('./server/config/config')[env];\n\nrequire('./server/config/express')(app, config);  \nrequire('./server/config/mongoose')(config);\n\nvar User = mongoose.model('User');  \npassport.use(new LocalStrategy(  \n  function(username, password, done){\n    User.findOne({username:username}).exec(function(err, user) {\n      if(user && user.authenticate(password)){\n        return done(null, user);\n      } else {\n        return done(null, false);\n      }\n    });\n  }\n));\n\npassport.serializeUser(function(user, done){  \n  if(user) {\n    done(null, user._id);\n  }\n});\n\npassport.deserializeUser(function(id, done){  \n  User.findOne({_id:id}).exec(function(err, user){\n    if(user){\n      return done(null, user);\n    } else {\n      return done(null, false);\n    }\n  });\n});\n\nrequire('./server/config/routes')(app);\n\napp.listen(config.port);  \nconsole.log('Listening on port ' + config.port + '...');</code></pre>\n\n<p><strong>[19]</strong> I'm going to go down into my <strong>local strategy</strong> and I'm going to change those methods so it not only checks to see if the <strong>user</strong> actually exists, but it also checks to make sure the <strong>user</strong> is <strong>authenticated</strong>. And, by calling <strong>user.authenticate</strong>, that's going to be a <strong>method</strong> that I'll create on my <strong>user schema</strong>. And, I'll pass in the <strong>password</strong>. And, this checks to make sure that the <strong>password</strong> is <strong>authentic</strong> for that <strong>user</strong>.</p>\n\n<p>So, let's go back to our <strong>Mongoose</strong> code</p>\n\n<p><span class=\"filename\">mongoose.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"20-24\"><code class=\"language-javascript\">var mongoose = require('mongoose'),  \n    crypto   = require('crypto');\n\nmodule.exports = function(config){  \n  mongoose.connect(config.db);\n  var db = mongoose.connection;\n  db.on('error', console.error.bind(console, 'connection error...'));\n  db.once('open', function callback(){\n    console.log('mydatabase db opened');\n  });\n\n  var userSchema = mongoose.Schema({\n    firstName : String,\n    lastName  : String,\n    username  : String,\n    salt      : String,\n    hashed_pwd: String\n  });\n\n  userSchema.methods = {\n    authenticate: function(passwordToMatch){\n      return hashPwd(this.salt, passwordToMatch) = = = this.hashed_pwd;\n    }\n  }\n\n  var User = mongoose.model('User', userSchema);\n\n  User.find([]).exec(function(err, collection){\n    if(collection.length </mark>= 0){\n\n      var salt, hash;\n\n      salt = createSalt();\n      hash = hashPwd(salt, 'jimjim');\n      User.create({\n        firstName : 'Joe',\n        lastName  : 'Eames',\n        username  : 'jimjim',\n        salt      : salt,\n        hashed_pwd: hash\n      });\n\n      salt = createSalt();\n      hash = hashPwd(salt, 'bobbywes');\n      User.create({\n        firstName : 'Bob',\n        lastName  : 'Wes',\n        username  : 'bobbywes',\n        salt      : salt,\n        hashed_pwd: hash\n      });\n\n      salt = createSalt();\n      hash = hashPwd(salt, 'jamesmoe');\n      User.create({\n        firstName : 'Moe',\n        lastName  : 'James',\n        username  : 'jamesmoe',\n        salt      : salt,\n        hashed_pwd: hash\n      });\n    }\n  });\n}\n\nfunction createSalt(){  \n  return crypto.randomBytes(128).toString('base64');\n}\n\nfunction hashPwd(salt, pwd){  \n  var hmac = crypto.createHmac('sha1', salt);\n  hmac.setEncoding('hex');\n  hmac.write(pwd);\n  hmac.end();\n  return hmac.read();\n}</code></pre>\n\n<p><strong>[20-24]</strong> let's go over to our <strong>schema</strong> and let's add a new <strong>method</strong> to it. We'll do that by setting the <strong>methods property equal to an object that has the methods</strong> in there that I want. </p>\n\n<p><strong>[21]</strong> And, I want to add that <strong>authenticate</strong> method. And, I want to take the <strong>password</strong> that they're trying to <strong>match, hash it, and compare it to the current user's hashed password</strong>. So, I'll pass it into the <strong>hashed password function</strong>, passing in the <strong>current user's salt and the password to match</strong>, and <strong>check that that is equal to the current user's hashed password</strong>.</p>\n\n<blockquote>\n  <p>And now, we should be able to <strong>authenticate</strong> a <strong>user</strong>'s attempt to sign-in based on not just their <strong>username</strong>, but also their <strong>password</strong>.</p>\n</blockquote>\n\n<p>So, we'll go back to our website and refresh it. And, let's try to login with an invalid <strong>password</strong>, but a <strong>valid username</strong>.</p>\n\n<p>But, let's give it the <strong>valid password</strong>.</p>\n\n<p>And it successfully signs us in.</p>\n\n<p><img src=\"/content/images/2015/04/hides_login_form.png\" alt=\"Sign in with password\" /></p>\n\n<blockquote>\n  <p>And, that is how to <strong>implement secure passwords using hashing</strong>.</p>\n</blockquote>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-authentication-improving-the-server-login-code\" style=\"width: 50%;\">Improving Server Login Code</a><a class=\"next-article\" href=\"/%10building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-adding-signout-functionality\" style=\"float: right;width: 50%;text-align: right;\">Adding Signout Functionality</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429264644291,"created_by":1,"updated_at":1429817282393,"updated_by":1,"published_at":1429265053295,"published_by":1},{"id":75,"uuid":"d94cfb15-41b2-45d3-b7e0-e51de802cda6","title":"\u0010Building Angular.js and Node.js with the MEAN stack - Security and Authorization: Adding Signout Functionality","slug":"building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-adding-signout-functionality","markdown":"> Now that a user can login, we want them to be able to logout.\n\nSo, the first step to doing that is **implementing the UI for logging out**.\n\nSo, on our page:\n\n- when a **user logs in**,\n- in place of the **sign-in form**, we'll **place a sign-out link**. \n\nWe'll implement this as an area that shows the **user's name** and allows them to **select sign-out from a drop-down**.\n\n<span class=\"filename\">navbar-login.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"10-14\"><code class=\"language-jade\">div(ng-controller=\"navbarLoginController\")\n  .row.collapse(ng-hide=\"identity.isAuthenticated()\")\n    .large-4.small-4.columns\n      input.form-control(placeholder=\"Email\", ng-model=\"username\")\n    .large-4.small-4.columns\n      input.form-control(type=\"password\", placeholder=\"password\", ng-model=\"password\")\n    .large-4.small-4.columns\n      a.alert.button.expand(ng-click=\"signin(username,password)\") Sign in\n\n  li.has-dropdown(ng-show=\"identity.isAuthenticated()\")\n    a(href=\"#\") {{ identity.currentUser.firstName + \" \" + identity.currentUser.lastName }}\n    ul.dropdown\n      li\n        a(href=\"\", ng-click=\"signout()\") Sign Out</code></pre>\n\n**[10]** And, we'll do the exact opposite that we did with the form, so instead of an \"**ng-hide**\", we'll put an \"**ng-show**\" and put in the same thing, a call to \"**isAuthenticated**\".\n\n**[12]** And then within this **ul**, we'll have **one list item**. We'll give that the class **drop-down**.\n\n**[11]** And we'll create a **trigger**, which will be an **anchor tag**. And, within that **anchor tag**, we're going to display the **user's name**. And then, we'll also show a little carrot to indicate that this is a drop-down.\n\n**[14]** Then **on-click**, we'll call the **sign-out** method and we'll have the text that says \"**Sign-Out**\".\n\nSo, now that we've specified the drop-down, it's not going to work because we're not including the JavaScript file, which actually makes the drop-downs work.\n\nSo, let's go to the scripts file and add a reference to that.\n\n<span class=\"filename\">scripts.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"3,4\"><code class=\"language-jade\">script(type=\"text/javascript\", src=\"/vendor/jquery/dist/jquery.js\")\nscript(type=\"text/javascript\", src=\"/vendor/toastr/toastr.js\")\nscript(type=\"text/javascript\", src=\"/vendor/foundation/js/foundation.js\")\nscript(type=\"text/javascript\", src=\"/vendor/foundation/js/foundation/foundation.dropdown.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular/angular.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular-resource/angular-resource.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular-route/angular-route.js\")\nscript(type=\"text/javascript\", src=\"/app/app.js\")\nscript(type=\"text/javascript\", src=\"/app/main/mainController.js\")\nscript(type=\"text/javascript\", src=\"/app/account/navbarLoginController.js\")\nscript(type=\"text/javascript\", src=\"/app/account/identity.js\")\nscript(type=\"text/javascript\", src=\"/app/account/auth.js\")\nscript(type=\"text/javascript\", src=\"/app/common/notifier.js\")</code></pre>\n\n**[3,4]** We'll put it here right underneath Toastr.\n\n---\n\n###### Test in the browser ######\n\nNow, let's take a quick second and see if our new functionality is working.\n\nI'll sign in.\n\n![Dropdown sign-out appearing](/content/images/2015/04/Dropdown_sign-out_appearing.png)\n\nAnd now there's this **drop-down that shows me the sign-out link**.\n\n---\n\n###### Implement sign-out on the client ######\n\nThe next thing we need to do now that we're **displaying the sign-out link** is to actually make it do something on the **client**, which would be to **call back to the server** and **tell the server to sign-out**.\n\nSo, let's go back to our code and we're going to open up our **navbar login controller**.\n\n<span class=\"filename\">navbarLoginController.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"1,14-21\"><code class=\"language-javascript\">angular.module('app').controller('navbarLoginController', function ($scope, $http, notifier, identity, auth, $location){\n  $scope.identity = identity;\n\n  $scope.signin = function(username, password){\n    auth.authenticateUser(username, password).then(function(success){\n      if(success){\n        notifier.notify('You have successfully signed in!');\n      }else{\n        notifier.notify('Username/password combination incorrect');\n      }\n    });\n  };\n\n  $scope.signout = function(){\n    auth.logoutUser().then(function(){\n      $scope.username = \"\";\n      $scope.password = \"\";\n      notifier.notify('You have successfully signed out!');\n      $location.path('/');\n    });\n  };\n});</code></pre>\n\n**[14]** And, we're going to add a new method called \"**Sign-Out**\"\n\n**[15]** and we're going to implement the **communication with the server** inside of our **auth** service. So, here we'll tell the **auth** service to **logout the user**.\n\n**[16,17]** And then, we need to allow for you just to **log back in under a different identity**, so let's **clear out** the **username** and **password** box.\n\n**[18]** And, let's **notify the user that they successfully logged out**.\n\n**[19]** And then, just **in case the user has navigated to something that they no longer have access to**, let's **redirect them back to the Home page**.\n\n**[1]** Now, I'll need to also include the **$location service as a dependency**.\n\n---\n\n###### Implement logout in Auth service ######\n\nAnd, we need to go into our **auth** service and implement the **logout user function**.\n\n<span class=\"filename\">auth.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"16-19,21\"><code class=\"language-javascript\">angular.module('app').factory('auth', function($http, identity, $q){\n  return {\n    authenticateUser: function(username, password){\n      var deferred = $q.defer();\n      $http.post('/login', {username:username, password:password}).then(function(response){\n        if(response.data.success){\n          identity.currentUser = response.data.user;\n          deferred.resolve(true);\n        }else{\n          deferred.resolve(false);\n        }\n      });\n      return deferred.promise;\n    },\n    logoutUser: function(){\n      var deferred = $q.defer();\n      $http.post('/logout', {logout:true}).then(function(){\n        identity.currentUser = undefined;\n        deferred.resolve();\n      });\n      return deferred.promise;\n    }\n  }\n});</code></pre>\n\n**[16]** And inside here, we'll do the same thing we did with **authenticate** and **create a deferred**.\n\n**[17]** And then, we'll **POST to the server**. And, we have to give **Angular** a **body**, otherwise, it will turn this **POST** into a **GET**. So, I'm just going to send up an **object** that has a **logout property set to \"true\"**, even though I don't need to really check that on the **server**.\n\n**[18]** And then when that returns, I can set the **identity** to an **undefined** value\n\n**[19]** and then we'll **resolve the deferred**.\n\n**[21]** And, lastly, we'll return that **deferred's promise**.\n\n---\n\n###### Implement route on the server side ######\n\nBut, we also need to implement the route on the server side. So, we'll go into our routes file\n\n<span class=\"filename\">routes.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"9-12\"><code class=\"language-javascript\">var auth = require('./auth');\n\nmodule.exports = function(app){\n  app.get('/partials/*', function(req, res){\n    res.render('./' + req.params[0]);\n  });\n\n  app.post('/login', auth.authenticate);\n  app.post('/logout', function(req, res){\n    req.logout(); // function added by Passport module\n    res.end();\n  });\n\n  app.get('*', function(req, res){\n    res.render('index');\n  });\n}</code></pre>\n\n**[9]** we've got our **login route**, so right after that, we'll put our **logout route**. \n\n**[10]** And inside here, we'll call the **logout function on the request**. That function was added by the **Passport module**.\n\n**[11]** And then, we'll just **end the response**.\n\n> Normally, you would also redirect on the server, but since our client is handling all views, there's no reason to redirect at this point.\n\n---\n\n###### Test in the browser ######\n\nAnd after saving those changes, we can go and see the new functionality in our application.\n\nWe'll login again. And, this time I'll click the Sign-Out link.\n\n![Successfully signed out](/content/images/2015/04/signed_out.png)\n\nAnd, I got the message that we've successfully signed out, and our login box is back and it's blank. And so, there, we've implemented the sign-out functionality for our application.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-implementing-secure-passwords\" style=\"width: 50%;\">Implementing Secure Passwords</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-persisting-login-between-page-refreshes\" style=\"float: right;width: 50%;text-align: right;\">Persistent Login</a>","html":"<blockquote>\n  <p>Now that a user can login, we want them to be able to logout.</p>\n</blockquote>\n\n<p>So, the first step to doing that is <strong>implementing the UI for logging out</strong>.</p>\n\n<p>So, on our page:</p>\n\n<ul>\n<li>when a <strong>user logs in</strong>,</li>\n<li>in place of the <strong>sign-in form</strong>, we'll <strong>place a sign-out link</strong>. </li>\n</ul>\n\n<p>We'll implement this as an area that shows the <strong>user's name</strong> and allows them to <strong>select sign-out from a drop-down</strong>.</p>\n\n<p><span class=\"filename\">navbar-login.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"10-14\"><code class=\"language-jade\">div(ng-controller=\"navbarLoginController\")  \n  .row.collapse(ng-hide=\"identity.isAuthenticated()\")\n    .large-4.small-4.columns\n      input.form-control(placeholder=\"Email\", ng-model=\"username\")\n    .large-4.small-4.columns\n      input.form-control(type=\"password\", placeholder=\"password\", ng-model=\"password\")\n    .large-4.small-4.columns\n      a.alert.button.expand(ng-click=\"signin(username,password)\") Sign in\n\n  li.has-dropdown(ng-show=\"identity.isAuthenticated()\")\n    a(href=\"#\") {{ identity.currentUser.firstName + \" \" + identity.currentUser.lastName }}\n    ul.dropdown\n      li\n        a(href=\"\", ng-click=\"signout()\") Sign Out</code></pre>\n\n<p><strong>[10]</strong> And, we'll do the exact opposite that we did with the form, so instead of an \"<strong>ng-hide</strong>\", we'll put an \"<strong>ng-show</strong>\" and put in the same thing, a call to \"<strong>isAuthenticated</strong>\".</p>\n\n<p><strong>[12]</strong> And then within this <strong>ul</strong>, we'll have <strong>one list item</strong>. We'll give that the class <strong>drop-down</strong>.</p>\n\n<p><strong>[11]</strong> And we'll create a <strong>trigger</strong>, which will be an <strong>anchor tag</strong>. And, within that <strong>anchor tag</strong>, we're going to display the <strong>user's name</strong>. And then, we'll also show a little carrot to indicate that this is a drop-down.</p>\n\n<p><strong>[14]</strong> Then <strong>on-click</strong>, we'll call the <strong>sign-out</strong> method and we'll have the text that says \"<strong>Sign-Out</strong>\".</p>\n\n<p>So, now that we've specified the drop-down, it's not going to work because we're not including the JavaScript file, which actually makes the drop-downs work.</p>\n\n<p>So, let's go to the scripts file and add a reference to that.</p>\n\n<p><span class=\"filename\">scripts.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"3,4\"><code class=\"language-jade\">script(type=\"text/javascript\", src=\"/vendor/jquery/dist/jquery.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/toastr/toastr.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/foundation/js/foundation.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/foundation/js/foundation/foundation.dropdown.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular/angular.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular-resource/angular-resource.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular-route/angular-route.js\")  \nscript(type=\"text/javascript\", src=\"/app/app.js\")  \nscript(type=\"text/javascript\", src=\"/app/main/mainController.js\")  \nscript(type=\"text/javascript\", src=\"/app/account/navbarLoginController.js\")  \nscript(type=\"text/javascript\", src=\"/app/account/identity.js\")  \nscript(type=\"text/javascript\", src=\"/app/account/auth.js\")  \nscript(type=\"text/javascript\", src=\"/app/common/notifier.js\")</code></pre>\n\n<p><strong>[3,4]</strong> We'll put it here right underneath Toastr.</p>\n\n<hr />\n\n<h6 id=\"testinthebrowser\">Test in the browser</h6>\n\n<p>Now, let's take a quick second and see if our new functionality is working.</p>\n\n<p>I'll sign in.</p>\n\n<p><img src=\"/content/images/2015/04/Dropdown_sign-out_appearing.png\" alt=\"Dropdown sign-out appearing\" /></p>\n\n<p>And now there's this <strong>drop-down that shows me the sign-out link</strong>.</p>\n\n<hr />\n\n<h6 id=\"implementsignoutontheclient\">Implement sign-out on the client</h6>\n\n<p>The next thing we need to do now that we're <strong>displaying the sign-out link</strong> is to actually make it do something on the <strong>client</strong>, which would be to <strong>call back to the server</strong> and <strong>tell the server to sign-out</strong>.</p>\n\n<p>So, let's go back to our code and we're going to open up our <strong>navbar login controller</strong>.</p>\n\n<p><span class=\"filename\">navbarLoginController.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"1,14-21\"><code class=\"language-javascript\">angular.module('app').controller('navbarLoginController', function ($scope, $http, notifier, identity, auth, $location){  \n  $scope.identity = identity;\n\n  $scope.signin = function(username, password){\n    auth.authenticateUser(username, password).then(function(success){\n      if(success){\n        notifier.notify('You have successfully signed in!');\n      }else{\n        notifier.notify('Username/password combination incorrect');\n      }\n    });\n  };\n\n  $scope.signout = function(){\n    auth.logoutUser().then(function(){\n      $scope.username = \"\";\n      $scope.password = \"\";\n      notifier.notify('You have successfully signed out!');\n      $location.path('/');\n    });\n  };\n});</code></pre>\n\n<p><strong>[14]</strong> And, we're going to add a new method called \"<strong>Sign-Out</strong>\"</p>\n\n<p><strong>[15]</strong> and we're going to implement the <strong>communication with the server</strong> inside of our <strong>auth</strong> service. So, here we'll tell the <strong>auth</strong> service to <strong>logout the user</strong>.</p>\n\n<p><strong>[16,17]</strong> And then, we need to allow for you just to <strong>log back in under a different identity</strong>, so let's <strong>clear out</strong> the <strong>username</strong> and <strong>password</strong> box.</p>\n\n<p><strong>[18]</strong> And, let's <strong>notify the user that they successfully logged out</strong>.</p>\n\n<p><strong>[19]</strong> And then, just <strong>in case the user has navigated to something that they no longer have access to</strong>, let's <strong>redirect them back to the Home page</strong>.</p>\n\n<p><strong>[1]</strong> Now, I'll need to also include the <strong>$location service as a dependency</strong>.</p>\n\n<hr />\n\n<h6 id=\"implementlogoutinauthservice\">Implement logout in Auth service</h6>\n\n<p>And, we need to go into our <strong>auth</strong> service and implement the <strong>logout user function</strong>.</p>\n\n<p><span class=\"filename\">auth.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"16-19,21\"><code class=\"language-javascript\">angular.module('app').factory('auth', function($http, identity, $q){  \n  return {\n    authenticateUser: function(username, password){\n      var deferred = $q.defer();\n      $http.post('/login', {username:username, password:password}).then(function(response){\n        if(response.data.success){\n          identity.currentUser = response.data.user;\n          deferred.resolve(true);\n        }else{\n          deferred.resolve(false);\n        }\n      });\n      return deferred.promise;\n    },\n    logoutUser: function(){\n      var deferred = $q.defer();\n      $http.post('/logout', {logout:true}).then(function(){\n        identity.currentUser = undefined;\n        deferred.resolve();\n      });\n      return deferred.promise;\n    }\n  }\n});</code></pre>\n\n<p><strong>[16]</strong> And inside here, we'll do the same thing we did with <strong>authenticate</strong> and <strong>create a deferred</strong>.</p>\n\n<p><strong>[17]</strong> And then, we'll <strong>POST to the server</strong>. And, we have to give <strong>Angular</strong> a <strong>body</strong>, otherwise, it will turn this <strong>POST</strong> into a <strong>GET</strong>. So, I'm just going to send up an <strong>object</strong> that has a <strong>logout property set to \"true\"</strong>, even though I don't need to really check that on the <strong>server</strong>.</p>\n\n<p><strong>[18]</strong> And then when that returns, I can set the <strong>identity</strong> to an <strong>undefined</strong> value</p>\n\n<p><strong>[19]</strong> and then we'll <strong>resolve the deferred</strong>.</p>\n\n<p><strong>[21]</strong> And, lastly, we'll return that <strong>deferred's promise</strong>.</p>\n\n<hr />\n\n<h6 id=\"implementrouteontheserverside\">Implement route on the server side</h6>\n\n<p>But, we also need to implement the route on the server side. So, we'll go into our routes file</p>\n\n<p><span class=\"filename\">routes.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"9-12\"><code class=\"language-javascript\">var auth = require('./auth');\n\nmodule.exports = function(app){  \n  app.get('/partials/*', function(req, res){\n    res.render('./' + req.params[0]);\n  });\n\n  app.post('/login', auth.authenticate);\n  app.post('/logout', function(req, res){\n    req.logout(); // function added by Passport module\n    res.end();\n  });\n\n  app.get('*', function(req, res){\n    res.render('index');\n  });\n}</code></pre>\n\n<p><strong>[9]</strong> we've got our <strong>login route</strong>, so right after that, we'll put our <strong>logout route</strong>. </p>\n\n<p><strong>[10]</strong> And inside here, we'll call the <strong>logout function on the request</strong>. That function was added by the <strong>Passport module</strong>.</p>\n\n<p><strong>[11]</strong> And then, we'll just <strong>end the response</strong>.</p>\n\n<blockquote>\n  <p>Normally, you would also redirect on the server, but since our client is handling all views, there's no reason to redirect at this point.</p>\n</blockquote>\n\n<hr />\n\n<h6 id=\"testinthebrowser\">Test in the browser</h6>\n\n<p>And after saving those changes, we can go and see the new functionality in our application.</p>\n\n<p>We'll login again. And, this time I'll click the Sign-Out link.</p>\n\n<p><img src=\"/content/images/2015/04/signed_out.png\" alt=\"Successfully signed out\" /></p>\n\n<p>And, I got the message that we've successfully signed out, and our login box is back and it's blank. And so, there, we've implemented the sign-out functionality for our application.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-implementing-secure-passwords\" style=\"width: 50%;\">Implementing Secure Passwords</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-persisting-login-between-page-refreshes\" style=\"float: right;width: 50%;text-align: right;\">Persistent Login</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429264784920,"created_by":1,"updated_at":1429820981003,"updated_by":1,"published_at":1429265047341,"published_by":1},{"id":76,"uuid":"42c64a44-3ce0-40c6-bea0-5bb29d2bcfa0","title":"\u0010Building Angular.js and Node.js with the MEAN stack - Security and Authorization: Persisting Login between Page Refreshes","slug":"building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-persisting-login-between-page-refreshes","markdown":"> Our application's login is working pretty well now. We can both sign-in and sign-out. But, we have a problem with our login. Once we sign-in, if we refresh our page, the page no longer remembers that we're signed in again.\n\nThe **client-side** code is asking us to **sign-in** because it doesn't know who the current **user** is, but the **server** does.\n\nWe can prove that by adding in some **middleware** into **server.js**.\n\n<span class=\"filename\">server.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"28-31\"><code class=\"language-javascript\">var express     = require('express'),\n  mongoose      = require('mongoose'),\n  passport      = require('passport'),\n  LocalStrategy = require('passport-local').Strategy;\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nvar config = require('./server/config/config')[env];\n\nrequire('./server/config/express')(app, config);\nrequire('./server/config/mongoose')(config);\n\nvar User = mongoose.model('User');\npassport.use(new LocalStrategy(\n  function(username, password, done){\n    User.findOne({username:username}).exec(function(err, user) {\n      if(user && user.authenticate(password)){\n        return done(null, user);\n      } else {\n        return done(null, false);\n      }\n    });\n  }\n));\n\napp.use(function(req, res, next){\n  console.log(req.user);\n  next();\n});\n\npassport.serializeUser(function(user, done){\n  if(user) {\n    done(null, user._id);\n  }\n});\n\npassport.deserializeUser(function(id, done){\n  User.findOne({_id:id}).exec(function(err, user){\n    if(user){\n      return done(null, user);\n    } else {\n      return done(null, false);\n    }\n  });\n});\n\nrequire('./server/config/routes')(app);\n\napp.listen(config.port);\nconsole.log('Listening on port ' + config.port + '...');</code></pre>\n\n**[28]** Let's go down after we declare the local **strategy** and add in some **middleware**.\n\n**[29]** We're going to print out **request.user**\n\n**[30]** and then just continue on our merry way with the **next()** function. \n\n---\n\n###### Proving that the server knows ######\n\nNow, let's go to the browser and we'll refresh the page. And then, we'll **login**. And, going back and looking at the console, we can see that it's printed out \"**undefined**\" several times for the current **user**, then it handles the **login POST**.\n\nNow, let's go back and refresh the page.\n\nLooking back, we can see that it's printed out the current **user** several times, and the current **user** it printed out is actually a real object, and that's the Joe Eames **user**.\n\nSo, our **server** knows who the current **user** is, yet the **client** has no idea.\n\nSo, it's time to adjust that problem and let the **client** know who the **current user** is whenever the page is requested.\n\nNow, I have a couple of ways that we can solve this problem.\n\nThe first one is:\n\n1. After the page has been run\n- we can have **Angular** call back to the **server**\n- and ask if there is a currently **authenticated user**.\n- If so, it would bring it back\n- and then set it into the current **user** property\n- and then our display would update.\n\nBut, there's a couple of **drawbacks** with this approach.\n\nThe first one is there'll be a little bit of a **delay since that call is asynchronous**, but the page is going to be rendered, but we're **going to be waiting for the server** to tell us whether or not there's a **current user**. Therefore, we could also have some **flicker in our display**.\n\nThe second drawback is that **it adds one more call**. Therefore, the **performance on our page is going to be degraded** a little bit, and this is unnecessary.\n\nThe other approach that we could take is simply to have the **server**, as it sends the **index page** down to us, also **send down the current user if there is one**.\n\n> This is known as **bootstrapping data** and, thankfully, with **Node** and **JADE** this is very simple.\n\nSo, let's go back to our code and we're going to go into our **layout file**\n\n<span class=\"filename\">layout.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"9\"><code class=\"language-javascript\">doctype\nhtml\n  head\n    link(href=\"/favicon.ico\", rel=\"shortcut icon\", type=\"image/x-icon\")\n    link(rel=\"stylesheet\", href=\"/vendor/foundation/css/foundation.css\")\n    link(rel=\"stylesheet\", href=\"/vendor/toastr/toastr.css\")\n    link(rel=\"stylesheet\", href=\"/css/site.css\")\n  body(ng-app='app')\n    include currentUser\n    block main-content\n    include scripts</code></pre>\n\n**[9]** I'm going to add another **include** in here. The very first thing in the **body** is going to be another **include** called \"**current user**\".\n\nNow, I've got to go into my **server** code, into my **includes**, and create that file.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ touch public/app/common/currentUser.jade\n```\n\nAnd inside this file, we'll create a **script tag** that will create a **global variable** that will have the **current user**, which we received from that **request.user** property that we looked at earlier.\n\nUnfortunately, the **JADE** template doesn't have access to the **request object**, so we can't just grab **request.user** off of it.\n\nWe've actually got to pass it into the page.\n\nSo, let's first go back to our **server**.js and let's **delete** the **middleware** that we created.\n\n<span class=\"filename\">server.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">var express     = require('express'),\n  mongoose      = require('mongoose'),\n  passport      = require('passport'),\n  LocalStrategy = require('passport-local').Strategy;\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nvar config = require('./server/config/config')[env];\n\nrequire('./server/config/express')(app, config);\nrequire('./server/config/mongoose')(config);\n\nvar User = mongoose.model('User');\npassport.use(new LocalStrategy(\n  function(username, password, done){\n    User.findOne({username:username}).exec(function(err, user) {\n      if(user && user.authenticate(password)){\n        return done(null, user);\n      } else {\n        return done(null, false);\n      }\n    });\n  }\n));\n\npassport.serializeUser(function(user, done){\n  if(user) {\n    done(null, user._id);\n  }\n});\n\npassport.deserializeUser(function(id, done){\n  User.findOne({_id:id}).exec(function(err, user){\n    if(user){\n      return done(null, user);\n    } else {\n      return done(null, false);\n    }\n  });\n});\n\nrequire('./server/config/routes')(app);\n\napp.listen(config.port);\nconsole.log('Listening on port ' + config.port + '...');</code></pre>\n\nThen, we'll go to our **routes** file.\n\n<span class=\"filename\">routes.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"15-17\"><code class=\"language-javascript\">var auth = require('./auth');\n\nmodule.exports = function(app){\n  app.get('/partials/*', function(req, res){\n    res.render('./' + req.params[0]);\n  });\n\n  app.post('/login', auth.authenticate);\n  app.post('/logout', function(req, res){\n    req.logout(); // function added by Passport module\n    res.end();\n  });\n\n  app.get('*', function(req, res){\n    res.render('index', {\n      bootstrappedUser: req.user\n    });\n  });\n}</code></pre>\n\n**[16]** We'll add the **request.user** as a piece of **data** that's **passed to the index page**. So, down where I rendered the **index page**, I'll add a second parameter, which is an **object**, and I'm going to call this object \"**bootstrapped user**\", and that's going to be set to the value of the **request.user**.\n\n---\n\n###### Current User template ######\n\nNow that that **data**'s available to the **template**, we can go back into our **current user** template and we can check and see if that **data** exists.\n\nAnd that way, we won't write out any extra **HTML** if there's no **authenticated user**.\n\n<span class=\"filename\">currentUser.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-jade\">if !!bootstrappedUser\n  script.\n    window.bootstrappedUserObject = !(JSON.stringify(bootstrappedUser))</code></pre>\n\n**[2]** We'll create a **script** tag and we'll use **JADE's line continuation** '.'.\n\n**[3]** And here, we'll set the **global variable** to contain that **bootstrapped user object**. Now, I want to make sure this is a fairly unique name, so I'm going to stick it in a **variable** called \"**bootstrapped user object**\". And then, I'll use **JADE string interpolation**. And, I want to put that **bootstrapped user** here, but I want it in **JSON** form, so I'm going to call \"**JSON.stringify**\" and pass in the **bootstrapped user**.\n\n- So, again, this is the **name of the variable** that has been created by our **template**.\n- **Bootstrapped user** is an object that's only available on the **server** \n- and only available at the time that it interprets the **JADE** file\n- and turns the template into actual **HTML**.\n- The script that's going to get written out is going to have a **variable** called \"**bootstrapped user object**\"\n- that's going to be set to the **JSON** form of the **bootstrapped user**.\n\nAnd, at this point, for any page requests that already have an **authenticated user**, we're going to have a **script tag that contains our bootstrapped user object**.\n\n---\n\n###### Verify in browser ######\n\nNow, since we've made some changes to our **server-side JS files**, our **server is restarted**, so the **server** no longer has a currently **authenticated user**.\n\nSo if we go back to the browser, and **refresh the page**, now we have the correct **client-side code** and the **login** boxes are showing because there's no currently **authenticated user**.\n\nSo, let's **login** and then we'll **refresh the page**.\n\nAnd, the **login** boxes are showing back up because **Angular** doesn't know about a **current user**, but if we look at the **source of the page**, we can see our **authenticated** user has been stuck here into the **bootstrapped user object** variable, with all the **data** that a **user** has on the **server**.\n\n![user object](/content/images/2015/04/user_object.png)\n\n---\n\n###### Putting User data into identity service ######\n\nSo, our next step is to take all this **data** and put it into the **current user** on the **identity service** that we created so that **Angular** will know about the **user**.\n\nSo, let's close this down and we'll go back to our code and we'll open up our **identity service**. And, inside here we'll add a little bit of code to check for that **bootstrapped user object**.\n\n<span class=\"filename\">identity.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"2-5,7\"><code class=\"language-javascript\">angular.module('app').factory('identity', function($window){\n  var currentUser;\n  if(!!$window.bootstrappedUserObject){\n    currentUser = $window.bootstrappedUserObject;\n  }\n  return {\n    currentUser: currentUser,\n    isAuthenticated: function(){\n      return !!this.currentUser;\n    }\n  }\n});</code></pre>\n\n**[1]** Now, the **bootstrapped user object** is a **global variable** that's available on the **window**, so the first thing I want to do is bring in a** window dependency**.\n\nNow, I can always just use the **global variable window**, but at test time, that means I've got to set up a **global variable** on my **window object**. It's much better to use **Angular**'s **dollar sign window service**, which allows me to mock it when it comes time to test this **object**.\n\n**[2]** So, I'm going to create the **current user** variable and I'll just leave its default value as **undefined**.\n\n**[3]** And, then I'll check to see if the **bootstrapped user object** is available on the **window**.\n\n**[4]** If that object does exist, I'm going to assign it to the current **user**.\n\n**[7]** And now, down here we'll recreate the **current user property**. I simply set that to that **current user variable**. So, it will still be **undefined** if the **bootstrapped user object** doesn't exist, but if it does exist, then it will be the value of the **bootstrapped user object**.\n\n---\n\n###### Test in the browser ######\n\nSo, let's save that change and let's go back to the browser and refresh the page.\n\nAnd, then we'll **login**.\n\nNow at this point, our **server** has restarted itself because Node Mon has noticed the change to the **Angular JavaScript file** that we changed.\n\nUnfortunately, it didn't need to restart the **server** because we just changed **client-side code**, but that is one of the drawbacks of **Nodemon** is, because it's a **JavaScript file**, it doesn't know whether it's a **server-side** or **client-side** file, so it goes ahead and restarts the **server** anyway.\n\nSo, we'll have to **login**.\n\nAnd now that we're logged in, we can refresh the page.\n\nAnd you can see that our **login** boxes are still hidden and we show who the currently logged in **user** is and their drop-down that lets us **sign-out**.\n\nAnd, no matter how many times we refresh the page, since the **server** knows about the **current authenticated user**, the **client** now knows about it. So, there we have successfully **bootstrapped the data for the current user** to the page and brought it into **Angular** so that **Angular** now knows who the currently **authenticated user** is.\n\n![#win](/content/images/2015/04/win.gif)\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-adding-signout-functionality\" style=\"width: 50%;\">Adding Signout Functionality</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-refactoring-server-authentication-code\" style=\"float: right;width: 50%;text-align: right;\">Refactoring Server Authenication Code</a>","html":"<blockquote>\n  <p>Our application's login is working pretty well now. We can both sign-in and sign-out. But, we have a problem with our login. Once we sign-in, if we refresh our page, the page no longer remembers that we're signed in again.</p>\n</blockquote>\n\n<p>The <strong>client-side</strong> code is asking us to <strong>sign-in</strong> because it doesn't know who the current <strong>user</strong> is, but the <strong>server</strong> does.</p>\n\n<p>We can prove that by adding in some <strong>middleware</strong> into <strong>server.js</strong>.</p>\n\n<p><span class=\"filename\">server.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"28-31\"><code class=\"language-javascript\">var express     = require('express'),  \n  mongoose      = require('mongoose'),\n  passport      = require('passport'),\n  LocalStrategy = require('passport-local').Strategy;\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nvar config = require('./server/config/config')[env];\n\nrequire('./server/config/express')(app, config);  \nrequire('./server/config/mongoose')(config);\n\nvar User = mongoose.model('User');  \npassport.use(new LocalStrategy(  \n  function(username, password, done){\n    User.findOne({username:username}).exec(function(err, user) {\n      if(user && user.authenticate(password)){\n        return done(null, user);\n      } else {\n        return done(null, false);\n      }\n    });\n  }\n));\n\napp.use(function(req, res, next){  \n  console.log(req.user);\n  next();\n});\n\npassport.serializeUser(function(user, done){  \n  if(user) {\n    done(null, user._id);\n  }\n});\n\npassport.deserializeUser(function(id, done){  \n  User.findOne({_id:id}).exec(function(err, user){\n    if(user){\n      return done(null, user);\n    } else {\n      return done(null, false);\n    }\n  });\n});\n\nrequire('./server/config/routes')(app);\n\napp.listen(config.port);  \nconsole.log('Listening on port ' + config.port + '...');</code></pre>\n\n<p><strong>[28]</strong> Let's go down after we declare the local <strong>strategy</strong> and add in some <strong>middleware</strong>.</p>\n\n<p><strong>[29]</strong> We're going to print out <strong>request.user</strong></p>\n\n<p><strong>[30]</strong> and then just continue on our merry way with the <strong>next()</strong> function. </p>\n\n<hr />\n\n<h6 id=\"provingthattheserverknows\">Proving that the server knows</h6>\n\n<p>Now, let's go to the browser and we'll refresh the page. And then, we'll <strong>login</strong>. And, going back and looking at the console, we can see that it's printed out \"<strong>undefined</strong>\" several times for the current <strong>user</strong>, then it handles the <strong>login POST</strong>.</p>\n\n<p>Now, let's go back and refresh the page.</p>\n\n<p>Looking back, we can see that it's printed out the current <strong>user</strong> several times, and the current <strong>user</strong> it printed out is actually a real object, and that's the Joe Eames <strong>user</strong>.</p>\n\n<p>So, our <strong>server</strong> knows who the current <strong>user</strong> is, yet the <strong>client</strong> has no idea.</p>\n\n<p>So, it's time to adjust that problem and let the <strong>client</strong> know who the <strong>current user</strong> is whenever the page is requested.</p>\n\n<p>Now, I have a couple of ways that we can solve this problem.</p>\n\n<p>The first one is:</p>\n\n<ol>\n<li>After the page has been run  </li>\n<li>we can have <strong>Angular</strong> call back to the <strong>server</strong></li>\n<li>and ask if there is a currently <strong>authenticated user</strong>.</li>\n<li>If so, it would bring it back</li>\n<li>and then set it into the current <strong>user</strong> property</li>\n<li>and then our display would update.</li>\n</ol>\n\n<p>But, there's a couple of <strong>drawbacks</strong> with this approach.</p>\n\n<p>The first one is there'll be a little bit of a <strong>delay since that call is asynchronous</strong>, but the page is going to be rendered, but we're <strong>going to be waiting for the server</strong> to tell us whether or not there's a <strong>current user</strong>. Therefore, we could also have some <strong>flicker in our display</strong>.</p>\n\n<p>The second drawback is that <strong>it adds one more call</strong>. Therefore, the <strong>performance on our page is going to be degraded</strong> a little bit, and this is unnecessary.</p>\n\n<p>The other approach that we could take is simply to have the <strong>server</strong>, as it sends the <strong>index page</strong> down to us, also <strong>send down the current user if there is one</strong>.</p>\n\n<blockquote>\n  <p>This is known as <strong>bootstrapping data</strong> and, thankfully, with <strong>Node</strong> and <strong>JADE</strong> this is very simple.</p>\n</blockquote>\n\n<p>So, let's go back to our code and we're going to go into our <strong>layout file</strong></p>\n\n<p><span class=\"filename\">layout.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"9\"><code class=\"language-javascript\">doctype  \nhtml  \n  head\n    link(href=\"/favicon.ico\", rel=\"shortcut icon\", type=\"image/x-icon\")\n    link(rel=\"stylesheet\", href=\"/vendor/foundation/css/foundation.css\")\n    link(rel=\"stylesheet\", href=\"/vendor/toastr/toastr.css\")\n    link(rel=\"stylesheet\", href=\"/css/site.css\")\n  body(ng-app='app')\n    include currentUser\n    block main-content\n    include scripts</code></pre>\n\n<p><strong>[9]</strong> I'm going to add another <strong>include</strong> in here. The very first thing in the <strong>body</strong> is going to be another <strong>include</strong> called \"<strong>current user</strong>\".</p>\n\n<p>Now, I've got to go into my <strong>server</strong> code, into my <strong>includes</strong>, and create that file.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ touch public/app/common/currentUser.jade\n</code></pre>\n\n<p>And inside this file, we'll create a <strong>script tag</strong> that will create a <strong>global variable</strong> that will have the <strong>current user</strong>, which we received from that <strong>request.user</strong> property that we looked at earlier.</p>\n\n<p>Unfortunately, the <strong>JADE</strong> template doesn't have access to the <strong>request object</strong>, so we can't just grab <strong>request.user</strong> off of it.</p>\n\n<p>We've actually got to pass it into the page.</p>\n\n<p>So, let's first go back to our <strong>server</strong>.js and let's <strong>delete</strong> the <strong>middleware</strong> that we created.</p>\n\n<p><span class=\"filename\">server.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">var express     = require('express'),  \n  mongoose      = require('mongoose'),\n  passport      = require('passport'),\n  LocalStrategy = require('passport-local').Strategy;\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nvar config = require('./server/config/config')[env];\n\nrequire('./server/config/express')(app, config);  \nrequire('./server/config/mongoose')(config);\n\nvar User = mongoose.model('User');  \npassport.use(new LocalStrategy(  \n  function(username, password, done){\n    User.findOne({username:username}).exec(function(err, user) {\n      if(user && user.authenticate(password)){\n        return done(null, user);\n      } else {\n        return done(null, false);\n      }\n    });\n  }\n));\n\npassport.serializeUser(function(user, done){  \n  if(user) {\n    done(null, user._id);\n  }\n});\n\npassport.deserializeUser(function(id, done){  \n  User.findOne({_id:id}).exec(function(err, user){\n    if(user){\n      return done(null, user);\n    } else {\n      return done(null, false);\n    }\n  });\n});\n\nrequire('./server/config/routes')(app);\n\napp.listen(config.port);  \nconsole.log('Listening on port ' + config.port + '...');</code></pre>\n\n<p>Then, we'll go to our <strong>routes</strong> file.</p>\n\n<p><span class=\"filename\">routes.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"15-17\"><code class=\"language-javascript\">var auth = require('./auth');\n\nmodule.exports = function(app){  \n  app.get('/partials/*', function(req, res){\n    res.render('./' + req.params[0]);\n  });\n\n  app.post('/login', auth.authenticate);\n  app.post('/logout', function(req, res){\n    req.logout(); // function added by Passport module\n    res.end();\n  });\n\n  app.get('*', function(req, res){\n    res.render('index', {\n      bootstrappedUser: req.user\n    });\n  });\n}</code></pre>\n\n<p><strong>[16]</strong> We'll add the <strong>request.user</strong> as a piece of <strong>data</strong> that's <strong>passed to the index page</strong>. So, down where I rendered the <strong>index page</strong>, I'll add a second parameter, which is an <strong>object</strong>, and I'm going to call this object \"<strong>bootstrapped user</strong>\", and that's going to be set to the value of the <strong>request.user</strong>.</p>\n\n<hr />\n\n<h6 id=\"currentusertemplate\">Current User template</h6>\n\n<p>Now that that <strong>data</strong>'s available to the <strong>template</strong>, we can go back into our <strong>current user</strong> template and we can check and see if that <strong>data</strong> exists.</p>\n\n<p>And that way, we won't write out any extra <strong>HTML</strong> if there's no <strong>authenticated user</strong>.</p>\n\n<p><span class=\"filename\">currentUser.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-jade\">if !!bootstrappedUser  \n  script.\n    window.bootstrappedUserObject = !(JSON.stringify(bootstrappedUser))</code></pre>\n\n<p><strong>[2]</strong> We'll create a <strong>script</strong> tag and we'll use <strong>JADE's line continuation</strong> '.'.</p>\n\n<p><strong>[3]</strong> And here, we'll set the <strong>global variable</strong> to contain that <strong>bootstrapped user object</strong>. Now, I want to make sure this is a fairly unique name, so I'm going to stick it in a <strong>variable</strong> called \"<strong>bootstrapped user object</strong>\". And then, I'll use <strong>JADE string interpolation</strong>. And, I want to put that <strong>bootstrapped user</strong> here, but I want it in <strong>JSON</strong> form, so I'm going to call \"<strong>JSON.stringify</strong>\" and pass in the <strong>bootstrapped user</strong>.</p>\n\n<ul>\n<li>So, again, this is the <strong>name of the variable</strong> that has been created by our <strong>template</strong>.</li>\n<li><strong>Bootstrapped user</strong> is an object that's only available on the <strong>server</strong> </li>\n<li>and only available at the time that it interprets the <strong>JADE</strong> file</li>\n<li>and turns the template into actual <strong>HTML</strong>.</li>\n<li>The script that's going to get written out is going to have a <strong>variable</strong> called \"<strong>bootstrapped user object</strong>\"</li>\n<li>that's going to be set to the <strong>JSON</strong> form of the <strong>bootstrapped user</strong>.</li>\n</ul>\n\n<p>And, at this point, for any page requests that already have an <strong>authenticated user</strong>, we're going to have a <strong>script tag that contains our bootstrapped user object</strong>.</p>\n\n<hr />\n\n<h6 id=\"verifyinbrowser\">Verify in browser</h6>\n\n<p>Now, since we've made some changes to our <strong>server-side JS files</strong>, our <strong>server is restarted</strong>, so the <strong>server</strong> no longer has a currently <strong>authenticated user</strong>.</p>\n\n<p>So if we go back to the browser, and <strong>refresh the page</strong>, now we have the correct <strong>client-side code</strong> and the <strong>login</strong> boxes are showing because there's no currently <strong>authenticated user</strong>.</p>\n\n<p>So, let's <strong>login</strong> and then we'll <strong>refresh the page</strong>.</p>\n\n<p>And, the <strong>login</strong> boxes are showing back up because <strong>Angular</strong> doesn't know about a <strong>current user</strong>, but if we look at the <strong>source of the page</strong>, we can see our <strong>authenticated</strong> user has been stuck here into the <strong>bootstrapped user object</strong> variable, with all the <strong>data</strong> that a <strong>user</strong> has on the <strong>server</strong>.</p>\n\n<p><img src=\"/content/images/2015/04/user_object.png\" alt=\"user object\" /></p>\n\n<hr />\n\n<h6 id=\"puttinguserdataintoidentityservice\">Putting User data into identity service</h6>\n\n<p>So, our next step is to take all this <strong>data</strong> and put it into the <strong>current user</strong> on the <strong>identity service</strong> that we created so that <strong>Angular</strong> will know about the <strong>user</strong>.</p>\n\n<p>So, let's close this down and we'll go back to our code and we'll open up our <strong>identity service</strong>. And, inside here we'll add a little bit of code to check for that <strong>bootstrapped user object</strong>.</p>\n\n<p><span class=\"filename\">identity.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"2-5,7\"><code class=\"language-javascript\">angular.module('app').factory('identity', function($window){  \n  var currentUser;\n  if(!!$window.bootstrappedUserObject){\n    currentUser = $window.bootstrappedUserObject;\n  }\n  return {\n    currentUser: currentUser,\n    isAuthenticated: function(){\n      return !!this.currentUser;\n    }\n  }\n});</code></pre>\n\n<p><strong>[1]</strong> Now, the <strong>bootstrapped user object</strong> is a <strong>global variable</strong> that's available on the <strong>window</strong>, so the first thing I want to do is bring in a<em>* window dependency</em>*.</p>\n\n<p>Now, I can always just use the <strong>global variable window</strong>, but at test time, that means I've got to set up a <strong>global variable</strong> on my <strong>window object</strong>. It's much better to use <strong>Angular</strong>'s <strong>dollar sign window service</strong>, which allows me to mock it when it comes time to test this <strong>object</strong>.</p>\n\n<p><strong>[2]</strong> So, I'm going to create the <strong>current user</strong> variable and I'll just leave its default value as <strong>undefined</strong>.</p>\n\n<p><strong>[3]</strong> And, then I'll check to see if the <strong>bootstrapped user object</strong> is available on the <strong>window</strong>.</p>\n\n<p><strong>[4]</strong> If that object does exist, I'm going to assign it to the current <strong>user</strong>.</p>\n\n<p><strong>[7]</strong> And now, down here we'll recreate the <strong>current user property</strong>. I simply set that to that <strong>current user variable</strong>. So, it will still be <strong>undefined</strong> if the <strong>bootstrapped user object</strong> doesn't exist, but if it does exist, then it will be the value of the <strong>bootstrapped user object</strong>.</p>\n\n<hr />\n\n<h6 id=\"testinthebrowser\">Test in the browser</h6>\n\n<p>So, let's save that change and let's go back to the browser and refresh the page.</p>\n\n<p>And, then we'll <strong>login</strong>.</p>\n\n<p>Now at this point, our <strong>server</strong> has restarted itself because Node Mon has noticed the change to the <strong>Angular JavaScript file</strong> that we changed.</p>\n\n<p>Unfortunately, it didn't need to restart the <strong>server</strong> because we just changed <strong>client-side code</strong>, but that is one of the drawbacks of <strong>Nodemon</strong> is, because it's a <strong>JavaScript file</strong>, it doesn't know whether it's a <strong>server-side</strong> or <strong>client-side</strong> file, so it goes ahead and restarts the <strong>server</strong> anyway.</p>\n\n<p>So, we'll have to <strong>login</strong>.</p>\n\n<p>And now that we're logged in, we can refresh the page.</p>\n\n<p>And you can see that our <strong>login</strong> boxes are still hidden and we show who the currently logged in <strong>user</strong> is and their drop-down that lets us <strong>sign-out</strong>.</p>\n\n<p>And, no matter how many times we refresh the page, since the <strong>server</strong> knows about the <strong>current authenticated user</strong>, the <strong>client</strong> now knows about it. So, there we have successfully <strong>bootstrapped the data for the current user</strong> to the page and brought it into <strong>Angular</strong> so that <strong>Angular</strong> now knows who the currently <strong>authenticated user</strong> is.</p>\n\n<p><img src=\"/content/images/2015/04/win.gif\" alt=\"#win\" /></p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-adding-signout-functionality\" style=\"width: 50%;\">Adding Signout Functionality</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-refactoring-server-authentication-code\" style=\"float: right;width: 50%;text-align: right;\">Refactoring Server Authenication Code</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429264931069,"created_by":1,"updated_at":1429821092576,"updated_by":1,"published_at":1429264989438,"published_by":1},{"id":77,"uuid":"a23ac0b3-011f-4917-bc68-14c48db4f3b2","title":"\u0010Building Angular.js and Node.js with the MEAN stack - Security and Authorization: Refactoring Server Authentication Code","slug":"building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-refactoring-server-authentication-code","markdown":"In the **server.js file**, my code has become cluttered up again as we've added an **authentication**.\n\n<span class=\"filename\">server.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"12-13,15-42,44\"><code class=\"language-javascript\">var express     = require('express'),\n  mongoose      = require('mongoose'),\n  passport      = require('passport'),\n  LocalStrategy = require('passport-local').Strategy;\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nvar config = require('./server/config/config')[env];\n\nrequire('./server/config/express')(app, config);\nrequire('./server/config/mongoose')(config);\n\nvar User = mongoose.model('User');\npassport.use(new LocalStrategy(\n  function(username, password, done){\n    User.findOne({username:username}).exec(function(err, user) {\n      if(user && user.authenticate(password)){\n        return done(null, user);\n      } else {\n        return done(null, false);\n      }\n    });\n  }\n));\n\npassport.serializeUser(function(user, done){\n  if(user) {\n    done(null, user._id);\n  }\n});\n\npassport.deserializeUser(function(id, done){\n  User.findOne({_id:id}).exec(function(err, user){\n    if(user){\n      return done(null, user);\n    } else {\n      return done(null, false);\n    }\n  });\n});\n\nrequire('./server/config/routes')(app);\n\napp.listen(config.port);\nconsole.log('Listening on port ' + config.port + '...');</code></pre>\n\nAnother way of identifying this problem is seeing that there's two different levels of **abstraction** going on.\n\n**[12,13]** The higher level is these lines here where we simply call out to **config, Express, Mongoose**.\n\nAt this level, we're simply telling our code \"**configure Express, configure Mongoose, etc**\".\n\n**[15-42]** Then we drop down a level into more details where we **configure Passport**.\n\n**[44]** Then we come back up a level as we run our **route configuration**.\n\n---\n\n###### Creating passport.js ######\n\nSo, I'd like to fix that and have the **server.js** code run from the same level of **abstraction** throughout the entire file.\n\nIn order to do that, I'm going to do the same thing we did before by **extracting the Passport code out into its own config file**, which I'll call \"**Passport**\".\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ touch server/config/passport.js\n```\n\n<span class=\"filename\">passport.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">var passport      = require('passport'),\n    mongoose      = require('mongoose'),\n    LocalStrategy = require('passport-local').Strategy,\n    User          = mongoose.model('User');\n\nmodule.exports = function(){\n  passport.use(new LocalStrategy(\n    function(username, password, done){\n      User.findOne({username:username}).exec(function(err, user) {\n        if(user && user.authenticate(password)){\n          return done(null, user);\n        } else {\n          return done(null, false);\n        }\n      });\n    }\n  ));\n\n  passport.serializeUser(function(user, done){\n    if(user) {\n      done(null, user._id);\n    }\n  });\n\n  passport.deserializeUser(function(id, done){\n    User.findOne({_id:id}).exec(function(err, user){\n      if(user){\n        return done(null, user);\n      } else {\n        return done(null, false);\n      }\n    });\n  });\n\n}</code></pre>\n\n**[7-33]** I'm going to go back into my **server code** and I'll grab the **deserialize and serialize and the local strategy code**, cut that out, go over into **Passport**, set my **module.exports**, and paste in that code.\n\n**[1-2]** Now, I need to go through and figure out what this code needs in order to work. So, I can see it needs **Mongoose** and **Passport**, so let's bring in those modules.\n\n**[3]** We also need the **local strategy object**, which comes out of the **passport-local** model.\n\n**[4]** And, lastly, we need this **user object**. I want to pull it outside of the **exports** and put it right up here.\n\nAnd now, this file has everything it needs to run.\n\n---\n\n###### Update server.js ######\n\nSo, let's go back to our server file\n\n<span class=\"filename\">server.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"1,9\"><code class=\"language-javascript\">var express = require('express');\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\nvar app = express();\nvar config = require('./server/config/config')[env];\n\nrequire('./server/config/express')(app, config);\nrequire('./server/config/mongoose')(config);\nrequire('./server/config/passport')();\nrequire('./server/config/routes')(app);\n\napp.listen(config.port);\nconsole.log('Listening on port ' + config.port + '...');</code></pre>\n\n**[9]** let's add in another line that will run Passport. And we don't need to pass it any parameters.\n\n**[1]** And at this point, we can go up and clean up the modules that we no longer need inside of this file, which include **Mongoose**, **Passport**, and the **local strategy**.\n\n---\n\n###### Verify in the browser ######\n\nAnd, now our refactoring is complete and we can verify it in the browser. Refresh the page, sign-in, and then refresh the page again. And, I'm still signed in.\n\nAll right, and now our **server.js** file looks a lot cleaner and much easier to read and understand.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-persisting-login-between-page-refreshes\" style=\"width: 50%;\">Persisting Login</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-implementing-clientside-authorization\" style=\"float: right;width: 50%;text-align: right;\">Implementing Clientside Authorization</a>","html":"<p>In the <strong>server.js file</strong>, my code has become cluttered up again as we've added an <strong>authentication</strong>.</p>\n\n<p><span class=\"filename\">server.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"12-13,15-42,44\"><code class=\"language-javascript\">var express     = require('express'),  \n  mongoose      = require('mongoose'),\n  passport      = require('passport'),\n  LocalStrategy = require('passport-local').Strategy;\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar app = express();\n\nvar config = require('./server/config/config')[env];\n\nrequire('./server/config/express')(app, config);  \nrequire('./server/config/mongoose')(config);\n\nvar User = mongoose.model('User');  \npassport.use(new LocalStrategy(  \n  function(username, password, done){\n    User.findOne({username:username}).exec(function(err, user) {\n      if(user && user.authenticate(password)){\n        return done(null, user);\n      } else {\n        return done(null, false);\n      }\n    });\n  }\n));\n\npassport.serializeUser(function(user, done){  \n  if(user) {\n    done(null, user._id);\n  }\n});\n\npassport.deserializeUser(function(id, done){  \n  User.findOne({_id:id}).exec(function(err, user){\n    if(user){\n      return done(null, user);\n    } else {\n      return done(null, false);\n    }\n  });\n});\n\nrequire('./server/config/routes')(app);\n\napp.listen(config.port);  \nconsole.log('Listening on port ' + config.port + '...');</code></pre>\n\n<p>Another way of identifying this problem is seeing that there's two different levels of <strong>abstraction</strong> going on.</p>\n\n<p><strong>[12,13]</strong> The higher level is these lines here where we simply call out to <strong>config, Express, Mongoose</strong>.</p>\n\n<p>At this level, we're simply telling our code \"<strong>configure Express, configure Mongoose, etc</strong>\".</p>\n\n<p><strong>[15-42]</strong> Then we drop down a level into more details where we <strong>configure Passport</strong>.</p>\n\n<p><strong>[44]</strong> Then we come back up a level as we run our <strong>route configuration</strong>.</p>\n\n<hr />\n\n<h6 id=\"creatingpassportjs\">Creating passport.js</h6>\n\n<p>So, I'd like to fix that and have the <strong>server.js</strong> code run from the same level of <strong>abstraction</strong> throughout the entire file.</p>\n\n<p>In order to do that, I'm going to do the same thing we did before by <strong>extracting the Passport code out into its own config file</strong>, which I'll call \"<strong>Passport</strong>\".</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ touch server/config/passport.js\n</code></pre>\n\n<p><span class=\"filename\">passport.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">var passport      = require('passport'),  \n    mongoose      = require('mongoose'),\n    LocalStrategy = require('passport-local').Strategy,\n    User          = mongoose.model('User');\n\nmodule.exports = function(){  \n  passport.use(new LocalStrategy(\n    function(username, password, done){\n      User.findOne({username:username}).exec(function(err, user) {\n        if(user && user.authenticate(password)){\n          return done(null, user);\n        } else {\n          return done(null, false);\n        }\n      });\n    }\n  ));\n\n  passport.serializeUser(function(user, done){\n    if(user) {\n      done(null, user._id);\n    }\n  });\n\n  passport.deserializeUser(function(id, done){\n    User.findOne({_id:id}).exec(function(err, user){\n      if(user){\n        return done(null, user);\n      } else {\n        return done(null, false);\n      }\n    });\n  });\n\n}</code></pre>\n\n<p><strong>[7-33]</strong> I'm going to go back into my <strong>server code</strong> and I'll grab the <strong>deserialize and serialize and the local strategy code</strong>, cut that out, go over into <strong>Passport</strong>, set my <strong>module.exports</strong>, and paste in that code.</p>\n\n<p><strong>[1-2]</strong> Now, I need to go through and figure out what this code needs in order to work. So, I can see it needs <strong>Mongoose</strong> and <strong>Passport</strong>, so let's bring in those modules.</p>\n\n<p><strong>[3]</strong> We also need the <strong>local strategy object</strong>, which comes out of the <strong>passport-local</strong> model.</p>\n\n<p><strong>[4]</strong> And, lastly, we need this <strong>user object</strong>. I want to pull it outside of the <strong>exports</strong> and put it right up here.</p>\n\n<p>And now, this file has everything it needs to run.</p>\n\n<hr />\n\n<h6 id=\"updateserverjs\">Update server.js</h6>\n\n<p>So, let's go back to our server file</p>\n\n<p><span class=\"filename\">server.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"1,9\"><code class=\"language-javascript\">var express = require('express');\n\nvar env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';  \nvar app = express();  \nvar config = require('./server/config/config')[env];\n\nrequire('./server/config/express')(app, config);  \nrequire('./server/config/mongoose')(config);  \nrequire('./server/config/passport')();  \nrequire('./server/config/routes')(app);\n\napp.listen(config.port);  \nconsole.log('Listening on port ' + config.port + '...');</code></pre>\n\n<p><strong>[9]</strong> let's add in another line that will run Passport. And we don't need to pass it any parameters.</p>\n\n<p><strong>[1]</strong> And at this point, we can go up and clean up the modules that we no longer need inside of this file, which include <strong>Mongoose</strong>, <strong>Passport</strong>, and the <strong>local strategy</strong>.</p>\n\n<hr />\n\n<h6 id=\"verifyinthebrowser\">Verify in the browser</h6>\n\n<p>And, now our refactoring is complete and we can verify it in the browser. Refresh the page, sign-in, and then refresh the page again. And, I'm still signed in.</p>\n\n<p>All right, and now our <strong>server.js</strong> file looks a lot cleaner and much easier to read and understand.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-persisting-login-between-page-refreshes\" style=\"width: 50%;\">Persisting Login</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-implementing-clientside-authorization\" style=\"float: right;width: 50%;text-align: right;\">Implementing Clientside Authorization</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429265080518,"created_by":1,"updated_at":1429821259212,"updated_by":1,"published_at":1429265084774,"published_by":1},{"id":78,"uuid":"352669c7-bb70-4430-8fee-674e3ec8833d","title":"\u0010Building Angular.js and Node.js with the MEAN stack - Security and Authorization: Implementing Clientside Authorization","slug":"building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-implementing-clientside-authorization","markdown":"> Now that we have our **authentication** working, we're going to add **authorization**.\n\n**Authentication tells us whether or not a user has been logged in successfully**, but **authorization tells us whether or not a user can access certain areas or perform certain functions**.\n\n**Passport only implements authentication and not authorization, so we'll have to do our authorization by hand**.\n\nOur **authorization** implementation is going to follow the standard method of using **roles**. So, we're going to give our **users roles**.\n\n> By default, the **user** will be a **standard user** unless they have the **role** of **admin**, in which case, they'll be an **admin**.\n\nWe'll do that by going over to our **Mongoose** file \n\n<span class=\"filename\">mongoose.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"18,42,53\"><code class=\"language-javascript\">var mongoose = require('mongoose'),\n    crypto   = require('crypto');\n\nmodule.exports = function(config){\n  mongoose.connect(config.db);\n  var db = mongoose.connection;\n  db.on('error', console.error.bind(console, 'connection error...'));\n  db.once('open', function callback(){\n    console.log('mydatabase db opened');\n  });\n\n  var userSchema = mongoose.Schema({\n    firstName : String,\n    lastName  : String,\n    username  : String,\n    salt      : String,\n    hashed_pwd: String,\n    roles     : [String]\n  });\n\n  userSchema.methods = {\n    authenticate: function(passwordToMatch){\n      return hashPwd(this.salt, passwordToMatch) === this.hashed_pwd;\n    }\n  }\n\n  var User = mongoose.model('User', userSchema);\n\n  User.find([]).exec(function(err, collection){\n    if(collection.length === 0){\n\n      var salt, hash;\n\n      salt = createSalt();\n      hash = hashPwd(salt, 'jimjim');\n      User.create({\n        firstName : 'Joe',\n        lastName  : 'Eames',\n        username  : 'jimjim',\n        salt      : salt,\n        hashed_pwd: hash,\n        roles: ['admin']\n      });\n\n      salt = createSalt();\n      hash = hashPwd(salt, 'bobbywes');\n      User.create({\n        firstName : 'Bob',\n        lastName  : 'Wes',\n        username  : 'bobbywes',\n        salt      : salt,\n        hashed_pwd: hash,\n        roles: []\n      });\n\n      salt = createSalt();\n      hash = hashPwd(salt, 'jamesmoe');\n      User.create({\n        firstName : 'Moe',\n        lastName  : 'James',\n        username  : 'jamesmoe',\n        salt      : salt,\n        hashed_pwd: hash\n      });\n    }\n  });\n}\n\nfunction createSalt(){\n  return crypto.randomBytes(128).toString('base64');\n}\n\nfunction hashPwd(salt, pwd){\n  var hmac = crypto.createHmac('sha1', salt);\n  hmac.setEncoding('hex');\n  hmac.write(pwd);\n  hmac.end();\n  return hmac.read();\n}</code></pre>\n\n**[18]** Inside of the **schema**, we're going to add another property to our **users**. This is going to be their roles.\n\nWe're going to keep our implementation simple.\n\nWe're just going to give our **users** an **array of strings** that indicates which **roles** that they have.\n\nAnd this syntax is how we indicate that to **Mongoose**.\n\n**[42]** Now that we have our **roles property** set up, let's go down to our initial **user**s and add the role **data** to them.\n\nOur first **user**, Joe, we'll make an **admin**.\n\nSo, we'll add the **roles property** and give him the string of **admin**.\n\n**[53]** Our next **user**, John Papa, will be a typical **user**, so we'll give him the **roles property**, but we'll just give him an **empty array**.\n\n**[58]** And, our last **user**, Dan, will also be a typical **user**. And this time, we won't modify his record and we won't add the **roles property**.\n\nNow John and Dan have the same access, except John has an **empty array** and Dan has no **property** at all.\n\nSo, now that we've added that information onto our initial **user**s, we've got to regenerate them in the **database**.\n\nSo, let's go back to our command line and we'll go into our **Mongo** shell.\n\nWe'll switch to our **database**.\n\nAnd, if we look at the **user**s, we can see that they don't have **role information**.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ mongo\nMongoDB shell version: 3.0.2\nconnecting to: test\n> use mydatabase\nswitched to db mydatabase\n> show collections\nsalons\nsystem.indexes\nusers\n> db.users.find()\n{ \"_id\" : ObjectId(\"5533f6ca2524de491f65888b\"), \"firstName\" : \"Joe\", \"lastName\" : \"Eames\", \"username\" : \"jimjim\", \"salt\" : \"6otUMAhOtD6GWXFp/6/eAh3hDu3/aIX1kQVoEHymv5fM9sss9TI1E9b/g5jn0LtJhxvXVkb0nDyx8XyDlc9gK8ZbHiGwapmrqZSNfsqAUXB6paTPSBUSMaRMHmoT3lufhhjvQCjERHR4zK8Pqp8J6RoxoreAoAofFNqiH+0ITQI=\", \"hashed_pwd\" : \"c76b372800af1f56007d2a939a16b9fe1ba24047\", \"__v\" : 0 }\n{ \"_id\" : ObjectId(\"5533f6ca2524de491f65888c\"), \"firstName\" : \"Bob\", \"lastName\" : \"Wes\", \"username\" : \"bobbywes\", \"salt\" : \"SDTJnaE+oi4iMb6k1LTdKGrpX1rhQbvhq4DmkEN1V9aw+urzFE9mo0b7bbMthJpDDioSkpCfB8DR12qPu1eBb/0T94qb30ocPqqj8QVgB0X0H/TKtVJM2zogJKyfaY8eC4J61eKQ8OuiD1aXi1e3UCOtL+sR1+RN6Gk1Q+9309k=\", \"hashed_pwd\" : \"d1de85b12d6fe7ce8a5153514726cd2dc83bd888\", \"__v\" : 0 }\n{ \"_id\" : ObjectId(\"5533f6ca2524de491f65888d\"), \"firstName\" : \"Moe\", \"lastName\" : \"James\", \"username\" : \"jamesmoe\", \"salt\" : \"GEAtuMQ+0bWKJM/80lmAm3bTP6gyMve06osup1+RLPNRZgqCJH/ew7G0DTEk6r81CUxpOlwg+naNmHOk/20mfSQXzgSZe+M5enJppicGlCRCguWACQgQN6rgBOTfxicgOJLYbSXdXyU+txo3vL3ydRp9YTP0TNc6hZ8HU3uQ7sA=\", \"hashed_pwd\" : \"6351831814383570dafb13117bbb588174eeae74\", \"__v\" : 0 }\n> db.users.remove({})\nWriteResult({ \"nRemoved\" : 3 })\n> db.users.find()\n>\n```\n\nSo, now get **Nodemon** to **restart**, which will regenerate our **user**s.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ nodemon server\n19 Apr 21:06:46 - [nodemon] v1.3.7\n19 Apr 21:06:46 - [nodemon] to restart at any time, enter `rs`\n19 Apr 21:06:46 - [nodemon] watching: *.*\n19 Apr 21:06:46 - [nodemon] starting `node server`\nListening on port 3030...\nmydatabase db opened\n```\n\nAnd if we look at our **user**s again, we can see that they now have **roles information** inside of each **user**.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ mongo\nMongoDB shell version: 3.0.2\nconnecting to: test\n> use mydatabase\nswitched to db mydatabase\n> show collections\nsalons\nsystem.indexes\nusers\n> db.users.find()\n{ \"_id\" : ObjectId(\"55345126becfe8198bb9b130\"), \"firstName\" : \"Joe\", \"lastName\" : \"Eames\", \"username\" : \"jimjim\", \"salt\" : \"Y0zYVTXVrRa53S/TOcUmyt5O7KREYO6yFN4BmP+GihsUFbLslmukWPVGhbEB/Gx8L7C2GqCzZdN9Dk4vrlP5iySdyTLO7iDDpZZ2W7EC2BySOolyL83h8mTYhOv2W67RYQJKSlm4eiURL+C8ABjCcNkKtdoUTCuW1qdxq/+Z1qQ=\", \"hashed_pwd\" : \"6ef78eff3e92a54b5b3700a2c91a5b4bf411953b\", \"roles\" : [ \"admin\" ], \"__v\" : 0 }\n{ \"_id\" : ObjectId(\"55345126becfe8198bb9b131\"), \"firstName\" : \"Bob\", \"lastName\" : \"Wes\", \"username\" : \"bobbywes\", \"salt\" : \"yx71tp3PL7SjHYr4ObvJE3T5UEVqKzbLLJ211nVOy+sP4SaJNC8ikuDvEBz97J10Eec25zgw9XYRmemXnyAD2d7rZ7+Xq0CIrPrkqdCLpHAiiEVxhrsEU+xRh2v6+31Ltv4v/BK0GJ8SVp8BLmrodrADMVc3I4lO6CH7IHUIsK8=\", \"hashed_pwd\" : \"59fc8ee2779bdbec89bd29a0d822aca5bc6776e9\", \"roles\" : [ ], \"__v\" : 0 }\n{ \"_id\" : ObjectId(\"55345126becfe8198bb9b132\"), \"firstName\" : \"Moe\", \"lastName\" : \"James\", \"username\" : \"jamesmoe\", \"salt\" : \"MFs3KF3DRcq0+AsATfnLjOnWmhEeBdOqTXTNVSDxq6Im8SGI9b+w/0F7hE83q7YzUkPi+aYxwXzvA0lIL1QicCgSVrh8FREyb8Hz+dUxbhD04huIcCxxlwXwMA7ZElR4vfu+weDvCmMcbU5+ZyJHhmUfwwJUiNk8pr3PpqkdZkk=\", \"hashed_pwd\" : \"8a726e8c930823e95126ef23ebe91f98c7d4e6ec\", \"roles\" : [ ], \"__v\" : 0 }\n>\n```\n\nOne thing that's interesting is to notice that even though with the last **user** we did not add in a **roles property**, **Mongoose** itself **added the roles property and initialized it to an empty array**.\n\n---\n\n###### Getting client-side code to determine roles ######\n\nAnd, now that we have the **authorization information** inside of our **user** **schema**, we need to go and add the ability for our **client-side** code to determine whether or not a **user** is an **admin**.\n\nNow, there's a couple of ways that we could do this.\n\nWe could just add in a **function** that checks the **user's roles property** and looks for an **array** called \"**admin**\" and just call that everywhere we need to determine whether or not a **user** is an **admin**.\n\nBut, it would be much better if we actually added in a bit of **modeling**.\n\nThe easiest way to do that in **Angular** is to **implement resources**.\n\nSo, let's go into our **public directory**, into our **app**, and into our **account**, and let's create a **user resource object**.\n\nI'm going to name this \"**user.js**\".\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ touch public/app/account/myUser.js\n```\n\n<span class=\"filename\">myUser.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">angular.module('app').factory('myUser', function($resource){\n  var UserResource = $resource('/api/users/:id', {_id: \"@id\"});\n\n  UserResource.prototype.isAdmin = function(){\n    return this.roles && this.roles.indexOf('admin') > -1;\n  }\n\n  return UserResource;\n});</code></pre>\n\n**[1]** This is going to be a **service**(factory).\n\n**[1]** And, I'm going to bring in the **$resource** dependency.\n\n**[2]** And, I'll create a **variable** called \"**User Resource**\", which will be created by calling the **resource** function, passing in the **URL** to our **user**s.\n\nNow at this point, we don't have any **routes** established in order to **RESTfully** access **user**s, but we're going to go ahead and set our **URL** to the **route** that we'll create sometime in the future when we need to access our **user**s in a **RESTful manner**.\n\nAnd, that will be **api/users** and then the **ID**. And then, we'll tell **Angular** what the **ID** is.\n\nAnd now, we've got our resource created.\n\n**[4]** Let's add a new **method** to that **resource** that will tell whether or not that **user** is an **admin**. This will add the \"**isAdmin**\" method onto every instance of a **user resource**.\n\n**[8]** And then, finally, we just **return that resource object**.\n\nNow, you may be wondering why we created a **user resource** when we're not accessing our **users** in a **RESTful** way.\n\nThe reason is, we can still create instances of this **class** on the **client** whenever we need a **user**, and there are two places where we do that. \n\nOne, where we **log the user in**, which is an \"**auth**\".\n\n<span class=\"filename\">auth.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"1,7-9\"><code class=\"language-javascript\">angular.module('app').factory('auth', function($http, identity, $q, myUser){\n  return {\n    authenticateUser: function(username, password){\n      var deferred = $q.defer();\n      $http.post('/login', {username:username, password:password}).then(function(response){\n        if(response.data.success){\n          var user = new myUser();\n          angular.extend(user, response.data.user);\n          identity.currentUser = user;\n          deferred.resolve(true);\n        }else{\n          deferred.resolve(false);\n        }\n      });\n      return deferred.promise;\n    },\n    logoutUser: function(){\n      var deferred = $q.defer();\n      $http.post('/logout', {logout:true}).then(function(){\n        identity.currentUser = undefined;\n        deferred.resolve();\n      });\n      return deferred.promise;\n    }\n  }\n});</code></pre>\n\n**[1]** We'll need to bring in the \"**user**\" dependency.\n\n**[7]** So, let's switch this so that it takes the **data** from the **response** and creates a **user resource class** out of it. We'll do that by creating a new instance of the **user resource**.\n\n**[8]** And then, we call **angular.extend**, passing in the **user**, and then the **user data from the response**, and that will take the **data** that comes back from the **HTTP POST** and add it into the **user object** that we created.\n\n**[9]** And then, here, we just set the current **user** equal to that **user** object.\n\n> And now, the current **user** object will have an \"**isAdmin**\" function.\n\nThe other place where we create a **user** object by hand is in the **identity class** when we checked for **bootstrap**ped **user** data. And here, we'll do essentially the same thing.\n\n<span class=\"filename\">identity.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"4-5\"><code class=\"language-javascript\">angular.module('app').factory('identity', function($window, myUser){\n  var currentUser;\n  if(!!$window.bootstrappedUserObject){\n    currentUser = new myUser();\n    angular.extend(currentUser, $window.bootstrappedUserObject);\n  }\n  return {\n    currentUser: currentUser,\n    isAuthenticated: function(){\n      return !!this.currentUser;\n    }\n  }\n});</code></pre>\n\n**[1]** We'll bring in that \"**user**\" service\n\n**[4]** here we'll set **current user** equal to a **new instance of that resource**.\n\n**[5]** And then, here, we'll just extend that **object** with the **bootstrap data**.\n\n---\n\n###### Recognizing an admin ######\n\nAnd, now that our **client-side** knows whether or not a **user** is an **admin**, what are we going to do with that knowledge?\n\nWell, let's create a menu item on the **drop-down** box for a **logged-in user** that will take them to an **admin page** for **user**s if they're an **admin**, and doesn't display if they're not.\n\nSo, let's open up our **navbar-login** partial\n\n<span class=\"filename\">navbar-login.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"13-14\"><code class=\"language-jade\">div(ng-controller=\"navbarLoginController\")\n  .row.collapse(ng-hide=\"identity.isAuthenticated()\")\n    .large-4.small-4.columns\n      input.form-control(placeholder=\"Email\", ng-model=\"username\")\n    .large-4.small-4.columns\n      input.form-control(type=\"password\", placeholder=\"password\", ng-model=\"password\")\n    .large-4.small-4.columns\n      a.alert.button.expand(ng-click=\"signin(username,password)\") Sign in\n\n  li.has-dropdown(ng-show=\"identity.isAuthenticated()\")\n    a(href=\"#\") {{ identity.currentUser.firstName + \" \" + identity.currentUser.lastName }}\n    ul.dropdown\n      li(ng-show=\"identity.currentUser.isAdmin()\")\n        a(href=\"/admin/user\") User Admin\n      li\n        a(href=\"\", ng-click=\"signout()\") Sign Out</code></pre>\n\n**[13]** let's add another **item** to this **drop-down menu**\n\n**[14]** and this **user admin page** will be at the **URL /admin/user**, and we'll name it \"**user admin**\".\n\n**[13]** And, we only want this item to **show** if the **user** is an **admin**.\n\nNow, one more piece that we need to do is to add that **user** resource to our **scripts** file.\n\n<span class=\"filename\">scripts.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"13\"><code class=\"language-jade\">script(type=\"text/javascript\", src=\"/vendor/jquery/dist/jquery.js\")\nscript(type=\"text/javascript\", src=\"/vendor/toastr/toastr.js\")\nscript(type=\"text/javascript\", src=\"/vendor/foundation/js/foundation.js\")\nscript(type=\"text/javascript\", src=\"/vendor/foundation/js/foundation/foundation.dropdown.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular/angular.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular-resource/angular-resource.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular-route/angular-route.js\")\nscript(type=\"text/javascript\", src=\"/app/app.js\")\nscript(type=\"text/javascript\", src=\"/app/main/mainController.js\")\nscript(type=\"text/javascript\", src=\"/app/account/navbarLoginController.js\")\nscript(type=\"text/javascript\", src=\"/app/account/identity.js\")\nscript(type=\"text/javascript\", src=\"/app/account/auth.js\")\nscript(type=\"text/javascript\", src=\"/app/account/myUser.js\")\nscript(type=\"text/javascript\", src=\"/app/common/notifier.js\")</code></pre>\n\nAnd, at this point, our code is complete and we can demonstrate it. So, refresh the page. And, let's **login** first as Dan.\n\nAnd if we click the drop-down box, you can see that there's no link there. So, let's sign-out and **login** as Joe, and click the drop-down box.\n\nAnd now, you can see that there is a link to the **user admin**.\n\nAnd, if you look down in the bottom left corner, you'll notice that it's putting to the route **/admin/user**.\n\nNow at this point, that doesn't go anywhere, but in the next section, we'll create that page.\n\nSo, that's a simple way to add **authorization** to your application.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-refactoring-server-authentication-code\" style=\"width: 50%;\">Refactoring Server Authentication Code</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-implementing-serverside-authorization\" style=\"float: right;width: 50%;text-align: right;\">Implementing Serverside Authorization</a>","html":"<blockquote>\n  <p>Now that we have our <strong>authentication</strong> working, we're going to add <strong>authorization</strong>.</p>\n</blockquote>\n\n<p><strong>Authentication tells us whether or not a user has been logged in successfully</strong>, but <strong>authorization tells us whether or not a user can access certain areas or perform certain functions</strong>.</p>\n\n<p><strong>Passport only implements authentication and not authorization, so we'll have to do our authorization by hand</strong>.</p>\n\n<p>Our <strong>authorization</strong> implementation is going to follow the standard method of using <strong>roles</strong>. So, we're going to give our <strong>users roles</strong>.</p>\n\n<blockquote>\n  <p>By default, the <strong>user</strong> will be a <strong>standard user</strong> unless they have the <strong>role</strong> of <strong>admin</strong>, in which case, they'll be an <strong>admin</strong>.</p>\n</blockquote>\n\n<p>We'll do that by going over to our <strong>Mongoose</strong> file </p>\n\n<p><span class=\"filename\">mongoose.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"18,42,53\"><code class=\"language-javascript\">var mongoose = require('mongoose'),  \n    crypto   = require('crypto');\n\nmodule.exports = function(config){  \n  mongoose.connect(config.db);\n  var db = mongoose.connection;\n  db.on('error', console.error.bind(console, 'connection error...'));\n  db.once('open', function callback(){\n    console.log('mydatabase db opened');\n  });\n\n  var userSchema = mongoose.Schema({\n    firstName : String,\n    lastName  : String,\n    username  : String,\n    salt      : String,\n    hashed_pwd: String,\n    roles     : [String]\n  });\n\n  userSchema.methods = {\n    authenticate: function(passwordToMatch){\n      return hashPwd(this.salt, passwordToMatch) <mark>= this.hashed_pwd;\n    }\n  }\n\n  var User = mongoose.model('User', userSchema);\n\n  User.find([]).exec(function(err, collection){\n    if(collection.length </mark>= 0){\n\n      var salt, hash;\n\n      salt = createSalt();\n      hash = hashPwd(salt, 'jimjim');\n      User.create({\n        firstName : 'Joe',\n        lastName  : 'Eames',\n        username  : 'jimjim',\n        salt      : salt,\n        hashed_pwd: hash,\n        roles: ['admin']\n      });\n\n      salt = createSalt();\n      hash = hashPwd(salt, 'bobbywes');\n      User.create({\n        firstName : 'Bob',\n        lastName  : 'Wes',\n        username  : 'bobbywes',\n        salt      : salt,\n        hashed_pwd: hash,\n        roles: []\n      });\n\n      salt = createSalt();\n      hash = hashPwd(salt, 'jamesmoe');\n      User.create({\n        firstName : 'Moe',\n        lastName  : 'James',\n        username  : 'jamesmoe',\n        salt      : salt,\n        hashed_pwd: hash\n      });\n    }\n  });\n}\n\nfunction createSalt(){  \n  return crypto.randomBytes(128).toString('base64');\n}\n\nfunction hashPwd(salt, pwd){  \n  var hmac = crypto.createHmac('sha1', salt);\n  hmac.setEncoding('hex');\n  hmac.write(pwd);\n  hmac.end();\n  return hmac.read();\n}</code></pre>\n\n<p><strong>[18]</strong> Inside of the <strong>schema</strong>, we're going to add another property to our <strong>users</strong>. This is going to be their roles.</p>\n\n<p>We're going to keep our implementation simple.</p>\n\n<p>We're just going to give our <strong>users</strong> an <strong>array of strings</strong> that indicates which <strong>roles</strong> that they have.</p>\n\n<p>And this syntax is how we indicate that to <strong>Mongoose</strong>.</p>\n\n<p><strong>[42]</strong> Now that we have our <strong>roles property</strong> set up, let's go down to our initial <strong>user</strong>s and add the role <strong>data</strong> to them.</p>\n\n<p>Our first <strong>user</strong>, Joe, we'll make an <strong>admin</strong>.</p>\n\n<p>So, we'll add the <strong>roles property</strong> and give him the string of <strong>admin</strong>.</p>\n\n<p><strong>[53]</strong> Our next <strong>user</strong>, John Papa, will be a typical <strong>user</strong>, so we'll give him the <strong>roles property</strong>, but we'll just give him an <strong>empty array</strong>.</p>\n\n<p><strong>[58]</strong> And, our last <strong>user</strong>, Dan, will also be a typical <strong>user</strong>. And this time, we won't modify his record and we won't add the <strong>roles property</strong>.</p>\n\n<p>Now John and Dan have the same access, except John has an <strong>empty array</strong> and Dan has no <strong>property</strong> at all.</p>\n\n<p>So, now that we've added that information onto our initial <strong>user</strong>s, we've got to regenerate them in the <strong>database</strong>.</p>\n\n<p>So, let's go back to our command line and we'll go into our <strong>Mongo</strong> shell.</p>\n\n<p>We'll switch to our <strong>database</strong>.</p>\n\n<p>And, if we look at the <strong>user</strong>s, we can see that they don't have <strong>role information</strong>.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ mongo\nMongoDB shell version: 3.0.2  \nconnecting to: test  \n&gt; use mydatabase\nswitched to db mydatabase  \n&gt; show collections\nsalons  \nsystem.indexes  \nusers  \n&gt; db.users.find()\n{ \"_id\" : ObjectId(\"5533f6ca2524de491f65888b\"), \"firstName\" : \"Joe\", \"lastName\" : \"Eames\", \"username\" : \"jimjim\", \"salt\" : \"6otUMAhOtD6GWXFp/6/eAh3hDu3/aIX1kQVoEHymv5fM9sss9TI1E9b/g5jn0LtJhxvXVkb0nDyx8XyDlc9gK8ZbHiGwapmrqZSNfsqAUXB6paTPSBUSMaRMHmoT3lufhhjvQCjERHR4zK8Pqp8J6RoxoreAoAofFNqiH+0ITQI=\", \"hashed_pwd\" : \"c76b372800af1f56007d2a939a16b9fe1ba24047\", \"__v\" : 0 }\n{ \"_id\" : ObjectId(\"5533f6ca2524de491f65888c\"), \"firstName\" : \"Bob\", \"lastName\" : \"Wes\", \"username\" : \"bobbywes\", \"salt\" : \"SDTJnaE+oi4iMb6k1LTdKGrpX1rhQbvhq4DmkEN1V9aw+urzFE9mo0b7bbMthJpDDioSkpCfB8DR12qPu1eBb/0T94qb30ocPqqj8QVgB0X0H/TKtVJM2zogJKyfaY8eC4J61eKQ8OuiD1aXi1e3UCOtL+sR1+RN6Gk1Q+9309k=\", \"hashed_pwd\" : \"d1de85b12d6fe7ce8a5153514726cd2dc83bd888\", \"__v\" : 0 }\n{ \"_id\" : ObjectId(\"5533f6ca2524de491f65888d\"), \"firstName\" : \"Moe\", \"lastName\" : \"James\", \"username\" : \"jamesmoe\", \"salt\" : \"GEAtuMQ+0bWKJM/80lmAm3bTP6gyMve06osup1+RLPNRZgqCJH/ew7G0DTEk6r81CUxpOlwg+naNmHOk/20mfSQXzgSZe+M5enJppicGlCRCguWACQgQN6rgBOTfxicgOJLYbSXdXyU+txo3vL3ydRp9YTP0TNc6hZ8HU3uQ7sA=\", \"hashed_pwd\" : \"6351831814383570dafb13117bbb588174eeae74\", \"__v\" : 0 }\n&gt; db.users.remove({})\nWriteResult({ \"nRemoved\" : 3 })  \n&gt; db.users.find()\n&gt;\n</code></pre>\n\n<p>So, now get <strong>Nodemon</strong> to <strong>restart</strong>, which will regenerate our <strong>user</strong>s.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ nodemon server\n19 Apr 21:06:46 - [nodemon] v1.3.7  \n19 Apr 21:06:46 - [nodemon] to restart at any time, enter `rs`  \n19 Apr 21:06:46 - [nodemon] watching: *.*  \n19 Apr 21:06:46 - [nodemon] starting `node server`  \nListening on port 3030...  \nmydatabase db opened  \n</code></pre>\n\n<p>And if we look at our <strong>user</strong>s again, we can see that they now have <strong>roles information</strong> inside of each <strong>user</strong>.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ mongo\nMongoDB shell version: 3.0.2  \nconnecting to: test  \n&gt; use mydatabase\nswitched to db mydatabase  \n&gt; show collections\nsalons  \nsystem.indexes  \nusers  \n&gt; db.users.find()\n{ \"_id\" : ObjectId(\"55345126becfe8198bb9b130\"), \"firstName\" : \"Joe\", \"lastName\" : \"Eames\", \"username\" : \"jimjim\", \"salt\" : \"Y0zYVTXVrRa53S/TOcUmyt5O7KREYO6yFN4BmP+GihsUFbLslmukWPVGhbEB/Gx8L7C2GqCzZdN9Dk4vrlP5iySdyTLO7iDDpZZ2W7EC2BySOolyL83h8mTYhOv2W67RYQJKSlm4eiURL+C8ABjCcNkKtdoUTCuW1qdxq/+Z1qQ=\", \"hashed_pwd\" : \"6ef78eff3e92a54b5b3700a2c91a5b4bf411953b\", \"roles\" : [ \"admin\" ], \"__v\" : 0 }\n{ \"_id\" : ObjectId(\"55345126becfe8198bb9b131\"), \"firstName\" : \"Bob\", \"lastName\" : \"Wes\", \"username\" : \"bobbywes\", \"salt\" : \"yx71tp3PL7SjHYr4ObvJE3T5UEVqKzbLLJ211nVOy+sP4SaJNC8ikuDvEBz97J10Eec25zgw9XYRmemXnyAD2d7rZ7+Xq0CIrPrkqdCLpHAiiEVxhrsEU+xRh2v6+31Ltv4v/BK0GJ8SVp8BLmrodrADMVc3I4lO6CH7IHUIsK8=\", \"hashed_pwd\" : \"59fc8ee2779bdbec89bd29a0d822aca5bc6776e9\", \"roles\" : [ ], \"__v\" : 0 }\n{ \"_id\" : ObjectId(\"55345126becfe8198bb9b132\"), \"firstName\" : \"Moe\", \"lastName\" : \"James\", \"username\" : \"jamesmoe\", \"salt\" : \"MFs3KF3DRcq0+AsATfnLjOnWmhEeBdOqTXTNVSDxq6Im8SGI9b+w/0F7hE83q7YzUkPi+aYxwXzvA0lIL1QicCgSVrh8FREyb8Hz+dUxbhD04huIcCxxlwXwMA7ZElR4vfu+weDvCmMcbU5+ZyJHhmUfwwJUiNk8pr3PpqkdZkk=\", \"hashed_pwd\" : \"8a726e8c930823e95126ef23ebe91f98c7d4e6ec\", \"roles\" : [ ], \"__v\" : 0 }\n&gt;\n</code></pre>\n\n<p>One thing that's interesting is to notice that even though with the last <strong>user</strong> we did not add in a <strong>roles property</strong>, <strong>Mongoose</strong> itself <strong>added the roles property and initialized it to an empty array</strong>.</p>\n\n<hr />\n\n<h6 id=\"gettingclientsidecodetodetermineroles\">Getting client-side code to determine roles</h6>\n\n<p>And, now that we have the <strong>authorization information</strong> inside of our <strong>user</strong> <strong>schema</strong>, we need to go and add the ability for our <strong>client-side</strong> code to determine whether or not a <strong>user</strong> is an <strong>admin</strong>.</p>\n\n<p>Now, there's a couple of ways that we could do this.</p>\n\n<p>We could just add in a <strong>function</strong> that checks the <strong>user's roles property</strong> and looks for an <strong>array</strong> called \"<strong>admin</strong>\" and just call that everywhere we need to determine whether or not a <strong>user</strong> is an <strong>admin</strong>.</p>\n\n<p>But, it would be much better if we actually added in a bit of <strong>modeling</strong>.</p>\n\n<p>The easiest way to do that in <strong>Angular</strong> is to <strong>implement resources</strong>.</p>\n\n<p>So, let's go into our <strong>public directory</strong>, into our <strong>app</strong>, and into our <strong>account</strong>, and let's create a <strong>user resource object</strong>.</p>\n\n<p>I'm going to name this \"<strong>user.js</strong>\".</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ touch public/app/account/myUser.js\n</code></pre>\n\n<p><span class=\"filename\">myUser.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">angular.module('app').factory('myUser', function($resource){  \n  var UserResource = $resource('/api/users/:id', {_id: \"@id\"});\n\n  UserResource.prototype.isAdmin = function(){\n    return this.roles && this.roles.indexOf('admin') > -1;\n  }\n\n  return UserResource;\n});</code></pre>\n\n<p><strong>[1]</strong> This is going to be a <strong>service</strong>(factory).</p>\n\n<p><strong>[1]</strong> And, I'm going to bring in the <strong>$resource</strong> dependency.</p>\n\n<p><strong>[2]</strong> And, I'll create a <strong>variable</strong> called \"<strong>User Resource</strong>\", which will be created by calling the <strong>resource</strong> function, passing in the <strong>URL</strong> to our <strong>user</strong>s.</p>\n\n<p>Now at this point, we don't have any <strong>routes</strong> established in order to <strong>RESTfully</strong> access <strong>user</strong>s, but we're going to go ahead and set our <strong>URL</strong> to the <strong>route</strong> that we'll create sometime in the future when we need to access our <strong>user</strong>s in a <strong>RESTful manner</strong>.</p>\n\n<p>And, that will be <strong>api/users</strong> and then the <strong>ID</strong>. And then, we'll tell <strong>Angular</strong> what the <strong>ID</strong> is.</p>\n\n<p>And now, we've got our resource created.</p>\n\n<p><strong>[4]</strong> Let's add a new <strong>method</strong> to that <strong>resource</strong> that will tell whether or not that <strong>user</strong> is an <strong>admin</strong>. This will add the \"<strong>isAdmin</strong>\" method onto every instance of a <strong>user resource</strong>.</p>\n\n<p><strong>[8]</strong> And then, finally, we just <strong>return that resource object</strong>.</p>\n\n<p>Now, you may be wondering why we created a <strong>user resource</strong> when we're not accessing our <strong>users</strong> in a <strong>RESTful</strong> way.</p>\n\n<p>The reason is, we can still create instances of this <strong>class</strong> on the <strong>client</strong> whenever we need a <strong>user</strong>, and there are two places where we do that. </p>\n\n<p>One, where we <strong>log the user in</strong>, which is an \"<strong>auth</strong>\".</p>\n\n<p><span class=\"filename\">auth.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"1,7-9\"><code class=\"language-javascript\">angular.module('app').factory('auth', function($http, identity, $q, myUser){  \n  return {\n    authenticateUser: function(username, password){\n      var deferred = $q.defer();\n      $http.post('/login', {username:username, password:password}).then(function(response){\n        if(response.data.success){\n          var user = new myUser();\n          angular.extend(user, response.data.user);\n          identity.currentUser = user;\n          deferred.resolve(true);\n        }else{\n          deferred.resolve(false);\n        }\n      });\n      return deferred.promise;\n    },\n    logoutUser: function(){\n      var deferred = $q.defer();\n      $http.post('/logout', {logout:true}).then(function(){\n        identity.currentUser = undefined;\n        deferred.resolve();\n      });\n      return deferred.promise;\n    }\n  }\n});</code></pre>\n\n<p><strong>[1]</strong> We'll need to bring in the \"<strong>user</strong>\" dependency.</p>\n\n<p><strong>[7]</strong> So, let's switch this so that it takes the <strong>data</strong> from the <strong>response</strong> and creates a <strong>user resource class</strong> out of it. We'll do that by creating a new instance of the <strong>user resource</strong>.</p>\n\n<p><strong>[8]</strong> And then, we call <strong>angular.extend</strong>, passing in the <strong>user</strong>, and then the <strong>user data from the response</strong>, and that will take the <strong>data</strong> that comes back from the <strong>HTTP POST</strong> and add it into the <strong>user object</strong> that we created.</p>\n\n<p><strong>[9]</strong> And then, here, we just set the current <strong>user</strong> equal to that <strong>user</strong> object.</p>\n\n<blockquote>\n  <p>And now, the current <strong>user</strong> object will have an \"<strong>isAdmin</strong>\" function.</p>\n</blockquote>\n\n<p>The other place where we create a <strong>user</strong> object by hand is in the <strong>identity class</strong> when we checked for <strong>bootstrap</strong>ped <strong>user</strong> data. And here, we'll do essentially the same thing.</p>\n\n<p><span class=\"filename\">identity.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"4-5\"><code class=\"language-javascript\">angular.module('app').factory('identity', function($window, myUser){  \n  var currentUser;\n  if(!!$window.bootstrappedUserObject){\n    currentUser = new myUser();\n    angular.extend(currentUser, $window.bootstrappedUserObject);\n  }\n  return {\n    currentUser: currentUser,\n    isAuthenticated: function(){\n      return !!this.currentUser;\n    }\n  }\n});</code></pre>\n\n<p><strong>[1]</strong> We'll bring in that \"<strong>user</strong>\" service</p>\n\n<p><strong>[4]</strong> here we'll set <strong>current user</strong> equal to a <strong>new instance of that resource</strong>.</p>\n\n<p><strong>[5]</strong> And then, here, we'll just extend that <strong>object</strong> with the <strong>bootstrap data</strong>.</p>\n\n<hr />\n\n<h6 id=\"recognizinganadmin\">Recognizing an admin</h6>\n\n<p>And, now that our <strong>client-side</strong> knows whether or not a <strong>user</strong> is an <strong>admin</strong>, what are we going to do with that knowledge?</p>\n\n<p>Well, let's create a menu item on the <strong>drop-down</strong> box for a <strong>logged-in user</strong> that will take them to an <strong>admin page</strong> for <strong>user</strong>s if they're an <strong>admin</strong>, and doesn't display if they're not.</p>\n\n<p>So, let's open up our <strong>navbar-login</strong> partial</p>\n\n<p><span class=\"filename\">navbar-login.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"13-14\"><code class=\"language-jade\">div(ng-controller=\"navbarLoginController\")  \n  .row.collapse(ng-hide=\"identity.isAuthenticated()\")\n    .large-4.small-4.columns\n      input.form-control(placeholder=\"Email\", ng-model=\"username\")\n    .large-4.small-4.columns\n      input.form-control(type=\"password\", placeholder=\"password\", ng-model=\"password\")\n    .large-4.small-4.columns\n      a.alert.button.expand(ng-click=\"signin(username,password)\") Sign in\n\n  li.has-dropdown(ng-show=\"identity.isAuthenticated()\")\n    a(href=\"#\") {{ identity.currentUser.firstName + \" \" + identity.currentUser.lastName }}\n    ul.dropdown\n      li(ng-show=\"identity.currentUser.isAdmin()\")\n        a(href=\"/admin/user\") User Admin\n      li\n        a(href=\"\", ng-click=\"signout()\") Sign Out</code></pre>\n\n<p><strong>[13]</strong> let's add another <strong>item</strong> to this <strong>drop-down menu</strong></p>\n\n<p><strong>[14]</strong> and this <strong>user admin page</strong> will be at the <strong>URL /admin/user</strong>, and we'll name it \"<strong>user admin</strong>\".</p>\n\n<p><strong>[13]</strong> And, we only want this item to <strong>show</strong> if the <strong>user</strong> is an <strong>admin</strong>.</p>\n\n<p>Now, one more piece that we need to do is to add that <strong>user</strong> resource to our <strong>scripts</strong> file.</p>\n\n<p><span class=\"filename\">scripts.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"13\"><code class=\"language-jade\">script(type=\"text/javascript\", src=\"/vendor/jquery/dist/jquery.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/toastr/toastr.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/foundation/js/foundation.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/foundation/js/foundation/foundation.dropdown.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular/angular.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular-resource/angular-resource.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular-route/angular-route.js\")  \nscript(type=\"text/javascript\", src=\"/app/app.js\")  \nscript(type=\"text/javascript\", src=\"/app/main/mainController.js\")  \nscript(type=\"text/javascript\", src=\"/app/account/navbarLoginController.js\")  \nscript(type=\"text/javascript\", src=\"/app/account/identity.js\")  \nscript(type=\"text/javascript\", src=\"/app/account/auth.js\")  \nscript(type=\"text/javascript\", src=\"/app/account/myUser.js\")  \nscript(type=\"text/javascript\", src=\"/app/common/notifier.js\")</code></pre>\n\n<p>And, at this point, our code is complete and we can demonstrate it. So, refresh the page. And, let's <strong>login</strong> first as Dan.</p>\n\n<p>And if we click the drop-down box, you can see that there's no link there. So, let's sign-out and <strong>login</strong> as Joe, and click the drop-down box.</p>\n\n<p>And now, you can see that there is a link to the <strong>user admin</strong>.</p>\n\n<p>And, if you look down in the bottom left corner, you'll notice that it's putting to the route <strong>/admin/user</strong>.</p>\n\n<p>Now at this point, that doesn't go anywhere, but in the next section, we'll create that page.</p>\n\n<p>So, that's a simple way to add <strong>authorization</strong> to your application.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-refactoring-server-authentication-code\" style=\"width: 50%;\">Refactoring Server Authentication Code</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-implementing-serverside-authorization\" style=\"float: right;width: 50%;text-align: right;\">Implementing Serverside Authorization</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429265189694,"created_by":1,"updated_at":1429821317271,"updated_by":1,"published_at":1429265194700,"published_by":1},{"id":79,"uuid":"7011fce0-7743-4e9a-a525-e629d58ae37b","title":"\u0010Building Angular.js and Node.js with the MEAN stack - Security and Authorization: Implementing Serverside Authorization","slug":"building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-implementing-serverside-authorization","markdown":"> In this section, we're going to implement our **server-side authorization**.\n\nRight now, we really have nothing to protect on the **server-side**. So, let's start by creating some **resources** on the **server** that we might want to limit to just **admins**.\n\nLet's create the beginning of a **RESTful endpoint** that exposes a **list of all of our users**.\n\nSo, let's go into our **routes** file and let's create a **route** that will **return a list of all of our users**.\n\n<span class=\"filename\">routes.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"2,3,6-10\"><code class=\"language-javascript\">var auth     = require('./auth'),\n    mongoose = require('mongoose'),\n    User     = mongoose.model('User');\n\nmodule.exports = function(app){\n  app.get('/api/users', function(req, res){\n    User.find({}).exec(function(err, collection){\n      res.send(collection);\n    });\n  });\n\n  app.get('/partials/*', function(req, res){\n    res.render('./' + req.params[0]);\n  });\n\n  app.post('/login', auth.authenticate);\n  app.post('/logout', function(req, res){\n    req.logout(); // function added by Passport module\n    res.end();\n  });\n\n  app.get('*', function(req, res){\n    res.render('index', {\n      bootstrappedUser: req.user\n    });\n  });\n}</code></pre>\n\n**[6]** So, up here at the top, I'll do **app.get \"API/users\"**. This matches the route that we specified in our **user resource object** in the last section.\n\n<span class=\"filename\">myUser.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"2\"><code class=\"language-javascript\">angular.module('app').factory('myUser', function($resource){\n  var UserResource = $resource('/api/users/:id', {_id: \"@id\"});\n\n  UserResource.prototype.isAdmin = function(){\n    return this.roles && this.roles.indexOf('admin') > -1;\n  };\n\n  return UserResource;\n});</code></pre>\n\n**[2]** For this route, we want to get back a **list of all of our users**. In order to do that, we're going to need our **Mongoose user model**. So, we're going to have to bring in the **Mongoose module**.\n\n**[3]** And then, from there, we can get the **user model**.\n\n**[7]** And now that we have the **user model**, we can use that to get the **list of all of our users**.\n\n**[8]** And then, when that **returns**, we'll just **send back the entire collection**.\n\n---\n\n###### Verify in browser ######\n\nNow, let's go hit that route in the browser and see what the result looks like. \n\n![list of users](/content/images/2015/04/list_of_users.png)\n\nAnd, there's a **list of all of our users in JSON format**.\n\nYou'll notice that I'm able to hit that list **without being logged in**.\n\nSo, let's protect this **resource** so that a **user** has to be **logged in** in order to **request this list**, otherwise, they should receive a **403 status code**.\n\nGo into our **routes handler** and add in a **check to make sure that the user is authorized**.\n\nThat could get really tiresome to do that in all of our **routes**. Thankfully, **Express** has a better way.\n\n> We can actually add a **chain of middleware** into our **app.get call**.\n\nSo, rather than just **passing in one handling function**, we can pass in a **second handling function** right here.\n\nAnd, if \"**next**\" never gets **called inside of this function**, then it won't be **passed on** to this one.\n\nSo, we can implement a very simple piece of code that **checks whether or not the user is authenticated**.\n\n<span class=\"filename\">routes.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"7-12\"><code class=\"language-javascript\">var auth     = require('./auth'),\n    mongoose = require('mongoose'),\n    User     = mongoose.model('User');\n\nmodule.exports = function(app){\n  app.get('/api/users', function(req, res){\n    if(!req.isAuthenticated()){\n      res.status(403);\n      res.end();\n    }else{\n      next();\n    }\n  }, function(req, res){\n    User.find({}).exec(function(err, collection){\n      res.send(collection);\n    });\n  });\n\n  app.get('/partials/*', function(req, res){\n    res.render('./' + req.params[0]);\n  });\n\n  app.post('/login', auth.authenticate);\n  app.post('/logout', function(req, res){\n    req.logout(); // function added by Passport module\n    res.end();\n  });\n\n  app.get('*', function(req, res){\n    res.render('index', {\n      bootstrappedUser: req.user\n    });\n  });\n}</code></pre>\n\n**[7]** We do that by asking **request.isAuthenticated**.\n\n**[8]** If we're not **authenticated**, then we'll **return a 403**\n\n**[9]** and then **end the response**.\n\n**[11]** Otherwise, we'll call \"**next**\".\n\n---\n\n###### Refactoring user authentication ######\n\nNow, even though this separates the **authentication logic out from the actual handling logic**, it still is going to be tiresome to add in this **function** and duplicate it every time we need to make sure that a **user's logged in before they can access a route**.\n\nSo, instead of keeping this here, we'll **extract this out into a function** and then just **call that function whenever we need**.\n\nThe best place to implement that **function** would be in our **auth module**.\n\n<span class=\"filename\">auth.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"18-25\"><code class=\"language-javascript\">var passport = require('passport');\n\nexports.authenticate = function(req, res, next){\n  var auth = passport.authenticate('local', function(err, user){\n    if(err) { return next(err); }\n    if(!user) { return res.send({success:false}) }\n    req.logIn(user, function(err){\n      if(err) { return next(err); }\n      res.send({\n        success: true,\n        user   : user\n      });\n    });\n  });\n  auth(req, res, next);\n};\n\nexports.requireApiLogin = function(req, res){\n  if(!req.isAuthenticated()){\n    res.status(403);\n    res.end();\n  }else{\n    next();\n  }\n};</code></pre>\n\n**[18-25]** So, let's pull this **function** out of the **routes handler** and go into our **auth file**\n\n**[18]** and we'll create a new **function** called \"**requires API login**\", and then we'll paste in the **function** we implemented. Now, the reason I called this function \"**requires API login**\" is if we had other **pages** that actually were behind **login**, we might want to implement a different **function** called \"**requires login**\". In that case, the **implementation** might be a little bit different. Instead of sending a **403** and then I need a **response**, we might want to **redirect them to a friendly page that indicates that they've received a security error**.\n\nNow that I've got this function implemented here, I can go back to my **routes file** and **pass in that function**.\n\n> Now, I **don't want to invoke it**, I just want to **pass the function in**. **Express** itself will actually **invoke the function**, **passing in the request, response, and next objects**.\n\n<span class=\"filename\">routes.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"6\"><code class=\"language-javascript\">var auth     = require('./auth'),\n    mongoose = require('mongoose'),\n    User     = mongoose.model('User');\n\nmodule.exports = function(app){\n  app.get('/api/users', auth.requiresApiLogin, function(req, res){\n    User.find({}).exec(function(err, collection){\n      res.send(collection);\n    });\n  });\n\n  app.get('/partials/*', function(req, res){\n    res.render('./' + req.params[0]);\n  });\n\n  app.post('/login', auth.authenticate);\n  app.post('/logout', function(req, res){\n    req.logout(); // function added by Passport module\n    res.end();\n  });\n\n  app.get('*', function(req, res){\n    res.render('index', {\n      bootstrappedUser: req.user\n    });\n  });\n}</code></pre>\n\n---\n\n###### Verify in the browser ######\n\nNow that I've got that **implementation**, if I go back to the **browser**, we're going to find that **without being logged in, I'm not going to be able to hit this page**.\n\nThe **page is blank** and if we look at the **network tab** and try again, we'll see that we're getting a **403 error**.\n\n![403 Forbidden](/content/images/2015/04/403_Forbidden.png)\n\n---\n\n###### Limiting to only seeing your own user data ######\n\nBut, now we have another problem. If a **user's logged in, then they can get a list of all the users**.\n\nBut, what we really want is for **users** to **have to be an admin in order to see the list of all users**.\n\nSo, let's go back to our **authentication** code.\n\n<span class=\"filename\">routes.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"6\"><code class=\"language-javascript\">var auth     = require('./auth'),\n    mongoose = require('mongoose'),\n    User     = mongoose.model('User');\n\nmodule.exports = function(app){\n  app.get('/api/users', auth.requiresRole('admin'), function(req, res){\n    User.find({}).exec(function(err, collection){\n      res.send(collection);\n    });\n  });\n\n  app.get('/partials/*', function(req, res){\n    res.render('./' + req.params[0]);\n  });\n\n  app.post('/login', auth.authenticate);\n  app.post('/logout', function(req, res){\n    req.logout(); // function added by Passport module\n    res.end();\n  });\n\n  app.get('*', function(req, res){\n    res.render('index', {\n      bootstrappedUser: req.user\n    });\n  });\n}</code></pre>\n\n**[6]** And, instead of using \"**requires API login\"**, let's implement another **function** that lets us **specify our role that the user must have in order to access this route**. What I'd like to be able to call is something like this.\n\nNow, since **Express** is expecting us to **pass in a function**, we're going to have to **return a function from \"requires role\"**. Thankfully, **closures** in **JavaScript** will make this fairly easy for us.\n\n<span class=\"filename\">auth.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">var passport = require('passport');\n\nexports.authenticate = function(req, res, next){\n  var auth = passport.authenticate('local', function(err, user){\n    if(err) { return next(err); }\n    if(!user) { return res.send({success:false}) }\n    req.logIn(user, function(err){\n      if(err) { return next(err); }\n      res.send({\n        success: true,\n        user   : user\n      });\n    });\n  });\n  auth(req, res, next);\n};\n\nexports.requiresApiLogin = function(req, res){\n  if(!req.isAuthenticated()){\n    res.status(403);\n    res.end();\n  }else{\n    next();\n  }\n};\n\nexports.requiresRole = function(role){\n  return function(req, res, next){\n    if(!req.isAuthenticated() || req.user.roles.indexOf(role) === -1){ // if role doesn't match any\n      res.status(403);\n      res.end();\n    }else{\n      next();\n    }\n  };\n};</code></pre>\n\n**[27]** Let's add another **export statement**.\n\n**[28]** And from here, we'll **return a function**. And, since **role was passed in** up here, we can actually **close over that variable and utilize it inside of this function**. \n\n**[30]** Remember, **request.user** contains the **currently authenticated user** and **if that role isn't found**, then we'll do the same thing we did for \"**requires API login**\".\n\nIf a **logged in user** tries to hit this **route** that doesn't have the **role of admin**, then we have no problem. But, if there's **no logged in user**, then the **request.user object's going to be undefined**.\n\nSo, we also need to check that the **request.user object** actually has a **value**.\n\nSo, we'd just need to also add in the **check that the user's been authenticated**.\n\n**[31]** **send back a 403**\n\n**[32]** and **then the response**.\n\n**[34]** Otherwise, we'll just call **next**.\n\n---\n\n###### Verify in browser ######\n\nSo, let's go back to our **browser**.\n\nThe server's restarted, so at this point, **we're not authenticated**. If I refresh the page, then we get a **403**.\n\n![403 Forbidden](/content/images/2015/04/403_Forbidden.png)\n\nLet's go to our page and let's **login as a user that does not have admin access**, and try to hit that **route**. And, we're getting another **403**.\n\n![403 Forbidden](/content/images/2015/04/403_Forbidden.png)\n\nLet's **sign-out and login as an admin**. And, this **user** can actually **see all the list of users**.\n\n![list of users](/content/images/2015/04/list_of_users.png)\n\nSo, now we've created a **resource** on the **server** and shown how to **protect** it by checking **user authorization**.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-implementing-clientside-authorization\" style=\"width: 50%;\">Implementing Clientside Authorization</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-protecting-admin-pages-on-the-client\" style=\"float: right;width: 50%;text-align: right;\">Protecting Admin Pages on the Client</a>","html":"<blockquote>\n  <p>In this section, we're going to implement our <strong>server-side authorization</strong>.</p>\n</blockquote>\n\n<p>Right now, we really have nothing to protect on the <strong>server-side</strong>. So, let's start by creating some <strong>resources</strong> on the <strong>server</strong> that we might want to limit to just <strong>admins</strong>.</p>\n\n<p>Let's create the beginning of a <strong>RESTful endpoint</strong> that exposes a <strong>list of all of our users</strong>.</p>\n\n<p>So, let's go into our <strong>routes</strong> file and let's create a <strong>route</strong> that will <strong>return a list of all of our users</strong>.</p>\n\n<p><span class=\"filename\">routes.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"2,3,6-10\"><code class=\"language-javascript\">var auth     = require('./auth'),  \n    mongoose = require('mongoose'),\n    User     = mongoose.model('User');\n\nmodule.exports = function(app){  \n  app.get('/api/users', function(req, res){\n    User.find({}).exec(function(err, collection){\n      res.send(collection);\n    });\n  });\n\n  app.get('/partials/*', function(req, res){\n    res.render('./' + req.params[0]);\n  });\n\n  app.post('/login', auth.authenticate);\n  app.post('/logout', function(req, res){\n    req.logout(); // function added by Passport module\n    res.end();\n  });\n\n  app.get('*', function(req, res){\n    res.render('index', {\n      bootstrappedUser: req.user\n    });\n  });\n}</code></pre>\n\n<p><strong>[6]</strong> So, up here at the top, I'll do <strong>app.get \"API/users\"</strong>. This matches the route that we specified in our <strong>user resource object</strong> in the last section.</p>\n\n<p><span class=\"filename\">myUser.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"2\"><code class=\"language-javascript\">angular.module('app').factory('myUser', function($resource){  \n  var UserResource = $resource('/api/users/:id', {_id: \"@id\"});\n\n  UserResource.prototype.isAdmin = function(){\n    return this.roles && this.roles.indexOf('admin') > -1;\n  };\n\n  return UserResource;\n});</code></pre>\n\n<p><strong>[2]</strong> For this route, we want to get back a <strong>list of all of our users</strong>. In order to do that, we're going to need our <strong>Mongoose user model</strong>. So, we're going to have to bring in the <strong>Mongoose module</strong>.</p>\n\n<p><strong>[3]</strong> And then, from there, we can get the <strong>user model</strong>.</p>\n\n<p><strong>[7]</strong> And now that we have the <strong>user model</strong>, we can use that to get the <strong>list of all of our users</strong>.</p>\n\n<p><strong>[8]</strong> And then, when that <strong>returns</strong>, we'll just <strong>send back the entire collection</strong>.</p>\n\n<hr />\n\n<h6 id=\"verifyinbrowser\">Verify in browser</h6>\n\n<p>Now, let's go hit that route in the browser and see what the result looks like. </p>\n\n<p><img src=\"/content/images/2015/04/list_of_users.png\" alt=\"list of users\" /></p>\n\n<p>And, there's a <strong>list of all of our users in JSON format</strong>.</p>\n\n<p>You'll notice that I'm able to hit that list <strong>without being logged in</strong>.</p>\n\n<p>So, let's protect this <strong>resource</strong> so that a <strong>user</strong> has to be <strong>logged in</strong> in order to <strong>request this list</strong>, otherwise, they should receive a <strong>403 status code</strong>.</p>\n\n<p>Go into our <strong>routes handler</strong> and add in a <strong>check to make sure that the user is authorized</strong>.</p>\n\n<p>That could get really tiresome to do that in all of our <strong>routes</strong>. Thankfully, <strong>Express</strong> has a better way.</p>\n\n<blockquote>\n  <p>We can actually add a <strong>chain of middleware</strong> into our <strong>app.get call</strong>.</p>\n</blockquote>\n\n<p>So, rather than just <strong>passing in one handling function</strong>, we can pass in a <strong>second handling function</strong> right here.</p>\n\n<p>And, if \"<strong>next</strong>\" never gets <strong>called inside of this function</strong>, then it won't be <strong>passed on</strong> to this one.</p>\n\n<p>So, we can implement a very simple piece of code that <strong>checks whether or not the user is authenticated</strong>.</p>\n\n<p><span class=\"filename\">routes.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"7-12\"><code class=\"language-javascript\">var auth     = require('./auth'),  \n    mongoose = require('mongoose'),\n    User     = mongoose.model('User');\n\nmodule.exports = function(app){  \n  app.get('/api/users', function(req, res){\n    if(!req.isAuthenticated()){\n      res.status(403);\n      res.end();\n    }else{\n      next();\n    }\n  }, function(req, res){\n    User.find({}).exec(function(err, collection){\n      res.send(collection);\n    });\n  });\n\n  app.get('/partials/*', function(req, res){\n    res.render('./' + req.params[0]);\n  });\n\n  app.post('/login', auth.authenticate);\n  app.post('/logout', function(req, res){\n    req.logout(); // function added by Passport module\n    res.end();\n  });\n\n  app.get('*', function(req, res){\n    res.render('index', {\n      bootstrappedUser: req.user\n    });\n  });\n}</code></pre>\n\n<p><strong>[7]</strong> We do that by asking <strong>request.isAuthenticated</strong>.</p>\n\n<p><strong>[8]</strong> If we're not <strong>authenticated</strong>, then we'll <strong>return a 403</strong></p>\n\n<p><strong>[9]</strong> and then <strong>end the response</strong>.</p>\n\n<p><strong>[11]</strong> Otherwise, we'll call \"<strong>next</strong>\".</p>\n\n<hr />\n\n<h6 id=\"refactoringuserauthentication\">Refactoring user authentication</h6>\n\n<p>Now, even though this separates the <strong>authentication logic out from the actual handling logic</strong>, it still is going to be tiresome to add in this <strong>function</strong> and duplicate it every time we need to make sure that a <strong>user's logged in before they can access a route</strong>.</p>\n\n<p>So, instead of keeping this here, we'll <strong>extract this out into a function</strong> and then just <strong>call that function whenever we need</strong>.</p>\n\n<p>The best place to implement that <strong>function</strong> would be in our <strong>auth module</strong>.</p>\n\n<p><span class=\"filename\">auth.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"18-25\"><code class=\"language-javascript\">var passport = require('passport');\n\nexports.authenticate = function(req, res, next){  \n  var auth = passport.authenticate('local', function(err, user){\n    if(err) { return next(err); }\n    if(!user) { return res.send({success:false}) }\n    req.logIn(user, function(err){\n      if(err) { return next(err); }\n      res.send({\n        success: true,\n        user   : user\n      });\n    });\n  });\n  auth(req, res, next);\n};\n\nexports.requireApiLogin = function(req, res){  \n  if(!req.isAuthenticated()){\n    res.status(403);\n    res.end();\n  }else{\n    next();\n  }\n};</code></pre>\n\n<p><strong>[18-25]</strong> So, let's pull this <strong>function</strong> out of the <strong>routes handler</strong> and go into our <strong>auth file</strong></p>\n\n<p><strong>[18]</strong> and we'll create a new <strong>function</strong> called \"<strong>requires API login</strong>\", and then we'll paste in the <strong>function</strong> we implemented. Now, the reason I called this function \"<strong>requires API login</strong>\" is if we had other <strong>pages</strong> that actually were behind <strong>login</strong>, we might want to implement a different <strong>function</strong> called \"<strong>requires login</strong>\". In that case, the <strong>implementation</strong> might be a little bit different. Instead of sending a <strong>403</strong> and then I need a <strong>response</strong>, we might want to <strong>redirect them to a friendly page that indicates that they've received a security error</strong>.</p>\n\n<p>Now that I've got this function implemented here, I can go back to my <strong>routes file</strong> and <strong>pass in that function</strong>.</p>\n\n<blockquote>\n  <p>Now, I <strong>don't want to invoke it</strong>, I just want to <strong>pass the function in</strong>. <strong>Express</strong> itself will actually <strong>invoke the function</strong>, <strong>passing in the request, response, and next objects</strong>.</p>\n</blockquote>\n\n<p><span class=\"filename\">routes.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"6\"><code class=\"language-javascript\">var auth     = require('./auth'),  \n    mongoose = require('mongoose'),\n    User     = mongoose.model('User');\n\nmodule.exports = function(app){  \n  app.get('/api/users', auth.requiresApiLogin, function(req, res){\n    User.find({}).exec(function(err, collection){\n      res.send(collection);\n    });\n  });\n\n  app.get('/partials/*', function(req, res){\n    res.render('./' + req.params[0]);\n  });\n\n  app.post('/login', auth.authenticate);\n  app.post('/logout', function(req, res){\n    req.logout(); // function added by Passport module\n    res.end();\n  });\n\n  app.get('*', function(req, res){\n    res.render('index', {\n      bootstrappedUser: req.user\n    });\n  });\n}</code></pre>\n\n<hr />\n\n<h6 id=\"verifyinthebrowser\">Verify in the browser</h6>\n\n<p>Now that I've got that <strong>implementation</strong>, if I go back to the <strong>browser</strong>, we're going to find that <strong>without being logged in, I'm not going to be able to hit this page</strong>.</p>\n\n<p>The <strong>page is blank</strong> and if we look at the <strong>network tab</strong> and try again, we'll see that we're getting a <strong>403 error</strong>.</p>\n\n<p><img src=\"/content/images/2015/04/403_Forbidden.png\" alt=\"403 Forbidden\" /></p>\n\n<hr />\n\n<h6 id=\"limitingtoonlyseeingyourownuserdata\">Limiting to only seeing your own user data</h6>\n\n<p>But, now we have another problem. If a <strong>user's logged in, then they can get a list of all the users</strong>.</p>\n\n<p>But, what we really want is for <strong>users</strong> to <strong>have to be an admin in order to see the list of all users</strong>.</p>\n\n<p>So, let's go back to our <strong>authentication</strong> code.</p>\n\n<p><span class=\"filename\">routes.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"6\"><code class=\"language-javascript\">var auth     = require('./auth'),  \n    mongoose = require('mongoose'),\n    User     = mongoose.model('User');\n\nmodule.exports = function(app){  \n  app.get('/api/users', auth.requiresRole('admin'), function(req, res){\n    User.find({}).exec(function(err, collection){\n      res.send(collection);\n    });\n  });\n\n  app.get('/partials/*', function(req, res){\n    res.render('./' + req.params[0]);\n  });\n\n  app.post('/login', auth.authenticate);\n  app.post('/logout', function(req, res){\n    req.logout(); // function added by Passport module\n    res.end();\n  });\n\n  app.get('*', function(req, res){\n    res.render('index', {\n      bootstrappedUser: req.user\n    });\n  });\n}</code></pre>\n\n<p><strong>[6]</strong> And, instead of using \"<strong>requires API login\"</strong>, let's implement another <strong>function</strong> that lets us <strong>specify our role that the user must have in order to access this route</strong>. What I'd like to be able to call is something like this.</p>\n\n<p>Now, since <strong>Express</strong> is expecting us to <strong>pass in a function</strong>, we're going to have to <strong>return a function from \"requires role\"</strong>. Thankfully, <strong>closures</strong> in <strong>JavaScript</strong> will make this fairly easy for us.</p>\n\n<p><span class=\"filename\">auth.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">var passport = require('passport');\n\nexports.authenticate = function(req, res, next){  \n  var auth = passport.authenticate('local', function(err, user){\n    if(err) { return next(err); }\n    if(!user) { return res.send({success:false}) }\n    req.logIn(user, function(err){\n      if(err) { return next(err); }\n      res.send({\n        success: true,\n        user   : user\n      });\n    });\n  });\n  auth(req, res, next);\n};\n\nexports.requiresApiLogin = function(req, res){  \n  if(!req.isAuthenticated()){\n    res.status(403);\n    res.end();\n  }else{\n    next();\n  }\n};\n\nexports.requiresRole = function(role){  \n  return function(req, res, next){\n    if(!req.isAuthenticated() || req.user.roles.indexOf(role) === -1){ // if role doesn't match any\n      res.status(403);\n      res.end();\n    }else{\n      next();\n    }\n  };\n};</code></pre>\n\n<p><strong>[27]</strong> Let's add another <strong>export statement</strong>.</p>\n\n<p><strong>[28]</strong> And from here, we'll <strong>return a function</strong>. And, since <strong>role was passed in</strong> up here, we can actually <strong>close over that variable and utilize it inside of this function</strong>. </p>\n\n<p><strong>[30]</strong> Remember, <strong>request.user</strong> contains the <strong>currently authenticated user</strong> and <strong>if that role isn't found</strong>, then we'll do the same thing we did for \"<strong>requires API login</strong>\".</p>\n\n<p>If a <strong>logged in user</strong> tries to hit this <strong>route</strong> that doesn't have the <strong>role of admin</strong>, then we have no problem. But, if there's <strong>no logged in user</strong>, then the <strong>request.user object's going to be undefined</strong>.</p>\n\n<p>So, we also need to check that the <strong>request.user object</strong> actually has a <strong>value</strong>.</p>\n\n<p>So, we'd just need to also add in the <strong>check that the user's been authenticated</strong>.</p>\n\n<p><strong>[31]</strong> <strong>send back a 403</strong></p>\n\n<p><strong>[32]</strong> and <strong>then the response</strong>.</p>\n\n<p><strong>[34]</strong> Otherwise, we'll just call <strong>next</strong>.</p>\n\n<hr />\n\n<h6 id=\"verifyinbrowser\">Verify in browser</h6>\n\n<p>So, let's go back to our <strong>browser</strong>.</p>\n\n<p>The server's restarted, so at this point, <strong>we're not authenticated</strong>. If I refresh the page, then we get a <strong>403</strong>.</p>\n\n<p><img src=\"/content/images/2015/04/403_Forbidden.png\" alt=\"403 Forbidden\" /></p>\n\n<p>Let's go to our page and let's <strong>login as a user that does not have admin access</strong>, and try to hit that <strong>route</strong>. And, we're getting another <strong>403</strong>.</p>\n\n<p><img src=\"/content/images/2015/04/403_Forbidden.png\" alt=\"403 Forbidden\" /></p>\n\n<p>Let's <strong>sign-out and login as an admin</strong>. And, this <strong>user</strong> can actually <strong>see all the list of users</strong>.</p>\n\n<p><img src=\"/content/images/2015/04/list_of_users.png\" alt=\"list of users\" /></p>\n\n<p>So, now we've created a <strong>resource</strong> on the <strong>server</strong> and shown how to <strong>protect</strong> it by checking <strong>user authorization</strong>.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-implementing-clientside-authorization\" style=\"width: 50%;\">Implementing Clientside Authorization</a><a class=\"next-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-protecting-admin-pages-on-the-client\" style=\"float: right;width: 50%;text-align: right;\">Protecting Admin Pages on the Client</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429265317511,"created_by":1,"updated_at":1429821350936,"updated_by":1,"published_at":1429265321908,"published_by":1},{"id":80,"uuid":"2b6f468a-9f8f-4e5a-add6-e95705c051eb","title":"\u0010Building Angular.js and Node.js with the MEAN stack - Security and Authorization: Protecting Admin Pages on the Client","slug":"building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-protecting-admin-pages-on-the-client","markdown":"> In this section, we're going to create an **admin page that lists all the users** and **protect that page on the client so that users who are not admins cannot hit it**.\n\nAnd for the **URL**, we'll match what we've put into the drop-down box when a **user logs in**. So, let's go to our **navbar login** and see what that was.\n\n<span class=\"filename\">navbar-login.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"14\"><code class=\"language-javascript\">div(ng-controller=\"navbarLoginController\")\n  .row.collapse(ng-hide=\"identity.isAuthenticated()\")\n    .large-4.small-4.columns\n      input.form-control(placeholder=\"Email\", ng-model=\"username\")\n    .large-4.small-4.columns\n      input.form-control(type=\"password\", placeholder=\"password\", ng-model=\"password\")\n    .large-4.small-4.columns\n      a.alert.button.expand(ng-click=\"signin(username,password)\") Sign in\n\n  li.has-dropdown(ng-show=\"identity.isAuthenticated()\")\n    a(href=\"#\") {{ identity.currentUser.firstName + \" \" + identity.currentUser.lastName }}\n    ul.dropdown\n      li(ng-show=\"identity.currentUser.isAdmin()\")\n        a(href=\"/admin/users\") User Admin\n      li\n        a(href=\"\", ng-click=\"signout()\") Sign Out</code></pre>\n\n**[14]** So, we have this set to **/admin/user**. I'm going to change this to **\"admin/users\"**. I like that a little bit better.\n\n<span class=\"filename\">app.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">\n</code></pre>\n\n**[15-20]** So, the first thing we have to do to implement that is to go to our **app file** and **create a new route**. So, we'll go down here and I'll duplicate this **route**.\n\n**[16]** And, we'll go back in here and set that to the same thing **\"/admin/users\"**.\n\n**[17]** And for the **template**, we're going to create a new area called \"**admin**\". And for this template, we'll call it \"**user-list**\"\n\n**[18]** and the **controller** will be \"**user list controller**\".\n\nOkay, so now we need to go in and create that **controller**.\n\nLet's go into **public** and I'll create, underneath **app**, that new area called \"**admin**\". And in \"**admin**\", I'll create that new **controller**.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ mkdir public/app/admin\n$ touch public/app/admin/userListController.js\n```\n\nThis will be a pretty straightforward **controller**.\n\n<span class=\"filename\">userListController.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">angular.module('app').controller('userListController', function($scope, myUser){\n  $scope.users = myUser.query();\n});</code></pre>\n\n**[1]** I'll bring in the **$scope**. And, I'm also going to bring in that **\"myUser\" service** we created.\n\n**[2]** And, what I want to do is **get the list of the users** and **put it onto the scope**. So, I'll create a \"**scope.users**\" variable, and this is going to be very easy because \"**myUser**\" is a **resource**. I can just call \"**myUser.query**\" and that will **grab a list of users and put it onto the scope**.\n\nAnd now, let's create our partial file.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ touch public/app/admin/user-list.jade\n```\n\n<span class=\"filename\">user-list.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-jade\">.row\n  table.table\n    tr(ng-repeat=\"user in users\")\n      td {{user.firstName + ' ' + user.lastName}}</code></pre>\n\n**[1]** And, this is just going to have a **row**.\n\n**[3]** And, inside of that we'll put in a **table**, and we'll put in a **row** for **each user object inside of the users list**.\n\n**[4]** And then, we'll just have **one cell inside of each row**. And that **cell** will just contain the **user's name**.\n\nAnd, now we're going to need to add our **controller** to our **list of scripts**. So, we'll go to our **scripts file**.\n\n<span class=\"filename\">scripts.jade</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"15\"><code class=\"language-jade\">script(type=\"text/javascript\", src=\"/vendor/jquery/dist/jquery.js\")\nscript(type=\"text/javascript\", src=\"/vendor/toastr/toastr.js\")\nscript(type=\"text/javascript\", src=\"/vendor/foundation/js/foundation.js\")\nscript(type=\"text/javascript\", src=\"/vendor/foundation/js/foundation/foundation.dropdown.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular/angular.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular-resource/angular-resource.js\")\nscript(type=\"text/javascript\", src=\"/vendor/angular-route/angular-route.js\")\nscript(type=\"text/javascript\", src=\"/app/app.js\")\nscript(type=\"text/javascript\", src=\"/app/main/mainController.js\")\nscript(type=\"text/javascript\", src=\"/app/account/navbarLoginController.js\")\nscript(type=\"text/javascript\", src=\"/app/account/identity.js\")\nscript(type=\"text/javascript\", src=\"/app/common/notifier.js\")\nscript(type=\"text/javascript\", src=\"/app/account/auth.js\")\nscript(type=\"text/javascript\", src=\"/app/account/myUser.js\")\nscript(type=\"text/javascript\", src=\"/app/admin/userListController.js\")</code></pre>\n\n---\n\n###### Verify in browser ######\n\nAnd, now we can go back to the **browser** and we'll **login as an admin**. \n\nAnd, from the **drop-down list**, we've got to use your **admin link**. And if we click it, we get to our **user admin page**.\n\n![list of users seen by admin](/content/images/2015/04/list_of_users_seen_by_admin.png)\n\nNow, that's all well and good, but at this point, if I **login to somebody who isn't an admin**, sure I don't have the **admin link**, but **I can still browse directly to the URL**, and **I still get to the page even though it's blank because the data has been protected on the server**.\n\nNow, that's nice, but I'd like this **user experience** to be a little bit more friendly.\n\nIf somehow a **user had bookmarked this link** and had **come here later on when they didn't have authorization**, I'd like them to **get redirected back to the default page**.\n\nAnd, we can do that using **route resolvers**. So let's go into our **app file** \n\n<span class=\"filename\">app.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">angular.module('app', ['ngResource', 'ngRoute']);\n\nangular.module('app').config(function($routeProvider, $locationProvider){\n  $locationProvider.html5Mode({\n    enabled: true,\n    requireBase: false\n  });\n  $routeProvider\n    .when('/', {\n      templateUrl: '/partials/main/main',\n      controller: 'mainController'\n    })\n  ;\n\n  $routeProvider\n    .when('/admin/users', {\n      templateUrl: '/partials/admin/user-list',\n      controller: 'userListController',\n      resolve: {\n        auth: function(identity, $q){\n          if(identity.currentUser && identity.currentUser.roles.indexOf('admin') > -1){\n            return true;\n          }else{\n            return $q.reject('not authorized');\n          }\n        }\n      }\n    })\n  ;\n\n});\n\nangular.module('app').run(function($rootScope, $location){\n  $rootScope.$on('$routeChangeError', function(evt, current, previous, rejection){\n    if(rejection === 'not authorized'){\n      $location.path('/');\n    }\n  });\n});</code></pre>\n\n**[19]** We're going to add a **route resolver to this route**. Now, a **route resolver** is an **object** and the **keys on this object simply tell you what each route resolver does**.\n\n**[20]** So, we're going to create a **key called \"off\"**. And, the **value has to be a function**. And, this is an **injectable function**, so **I can bring in any dependencies that I might need here**. So for the moment, I'll leave this blank.\n\n**[22]** And now, within here, I can do whatever **checks** I want, and if I **return \"true\"**, then it will **go ahead and redirect to that route**.\n\n**[24]** And if I don't want to **redirect to that route**, then I'm going to **call the q.reject function and pass in a string**, and that will **cause a route change error** that I can **listen to and then take appropriate action**.\n\n**[20]** So, I'm going to want my **identity service** in order to **determine whether or not a user is authorized to hit this route**. And, I also need the **Q service**.\n\n**[21]** So, I'm going to say if the **identity's current user exists** and **identity's current user.roles.indexof**, and then the **role is going to be admin**, is **greater than -1**,\n\n**[22]** then we can **return \"true\"**,\n\n**[24]** **else** we're going to **return q.reject, and we'll pass in a string**. And, here I'm going to use the **string \"not authorized\"**. Now, I can use any **string** that I want, so long as **I look for that same exact string when I listen to route change errors**.\n\nThis is just to help me understand why the **route change error** happened.\n\n**[33]** And now that I've got this **implemented**, I can go down and add another section, and this is going to be a **run section on my app module**.\n\nBy calling \"**run**\", the code within here is going to be **executed after the module's been completely configured**. So, it's going to be **run after the code that's defined above**. I'm going to bring in **rootScope** so that I can **listen to the route change error events**. And, I'm also going to bring in the **location service** so that I can **redirect**.\n\n**[34]** And, I'm going to say \"**rootScope.on**\" and I'm going to listen to a **special event** called \"**route change error**\", **prefixed by the dollar sign**. And, the **handler** for this is going to take in four parameters: **The event itself, a parameter called \"current\", a parameter called \"previous\", which has to do with the routing, and, finally, the rejection reason itself.**\n\n**[35]** And, that's going to be that **string** that I passed into the **q.reject function**. And, inside of here I'll just **check if that rejection equals the string I defined**\n\n**[36]** Then I'm going to **redirect back to the Home page**.\n\n---\n\n###### Verify in browser ######\n\nNow, let's see how this code works in our browser.\n\nSo first, let's try logging in as a **user that has admin** to make sure that we're still able to **access the page**.\n\nAnd, I'll hit that **User Admin route**. We can see I'm able to get there, so let's **sign-out**.\n\nAnd, I'll login as a **user** that **does not have admin access**. And then, I'll go to that **route**.\n\nAnd, you can see that I've just **come back to the Home page**.\n\n![sent home](/content/images/2015/04/sent_home.png)\n\n---\n\n###### Refactoring routes ######\n\nSo, the code that I wrote to **implement** this is **not very readable or maintainable**.\n\nEach **route** is taking a lot of **vertical space**. We don't want to have to take so much **vertical space** every time we **add a new route**.\n\nSo, let's see if we can do some **refactoring** and improve the **readability** and **reusability** of this **code**.\n\nThe first thing I notice is right here, when **we're asking whether or not a user is authorized to hit this route**, it takes a lot of code. \n\nWhat I'd like to do **instead is just ask a question like this**.\n\n<span class=\"filename\">app.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"21\"><code class=\"language-javascript\">angular.module('app', ['ngResource', 'ngRoute']);\n\nangular.module('app').config(function($routeProvider, $locationProvider){\n  $locationProvider.html5Mode({\n    enabled: true,\n    requireBase: false\n  });\n  $routeProvider\n    .when('/', {\n      templateUrl: '/partials/main/main',\n      controller: 'mainController'\n    })\n  ;\n\n  $routeProvider\n    .when('/admin/users', {\n      templateUrl: '/partials/admin/user-list',\n      controller: 'userListController',\n      resolve: {\n        auth: function(identity, $q){\n          if(identity.isAuthorized('admin')){\n            return true;\n          }else{\n            return $q.reject('not authorized');\n          }\n        }\n      }\n    })\n  ;\n\n});\n\nangular.module('app').run(function($rootScope, $location){\n  $rootScope.$on('$routeChangeError', function(evt, current, previous, rejection){\n    if(rejection === 'not authorized'){\n      $location.path('/');\n    }\n  });\n});</code></pre>\n\nSo, let's go to our **identity service**\n\n<span class=\"filename\">identity.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"12-14\"><code class=\"language-javascript\">angular.module('app').factory('identity', function($window, myUser){\n  var currentUser;\n  if(!!$window.bootstrappedUserObject){\n    currentUser = new myUser();\n    angular.extend(currentUser, $window.bootstrappedUserObject);\n  }\n  return {\n    currentUser: currentUser,\n    isAuthenticated: function(){\n      return !!this.currentUser;\n    },\n    isAuthorized: function(role){\n      return !!this.currentUser && this.currentUser.roles.indexOf(role) > -1;\n    }\n  }\n});</code></pre>\n\n**[12]** and **add that function**.\n\n**[13]** We'll check that the **current user exists** and **make sure that the current user has that role**.\n\nSo, that's a good start, but there's more that we can do.\n\nWe have the **\"auth\" service**, but let's extract this code and put it into there.\n\n<span class=\"filename\">auth.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"24-30\"><code class=\"language-javascript\">angular.module('app').factory('auth', function($http, identity, $q, myUser){\n  return {\n    authenticateUser: function(username, password){\n      var deferred = $q.defer();\n      $http.post('/login', {username:username, password:password}).then(function(response){\n        if(response.data.success){\n          var user = new myUser();\n          identity.currentUser = response.data.user;\n          deferred.resolve(true);\n        }else{\n          deferred.resolve(false);\n        }\n      });\n      return deferred.promise;\n    },\n    logoutUser: function(){\n      var deferred = $q.defer();\n      $http.post('/logout', {logout:true}).then(function(){\n        identity.currentUser = undefined;\n        deferred.resolve();\n      });\n      return deferred.promise;\n    },\n    authorizeCurrentUserForRoute: function(role){\n      if(identity.isAuthorized(role)){\n        return true;\n      }else{\n        return $q.reject('not authorized');\n      }\n    }\n  }\n});</code></pre>\n\n**[24]** I'll create a new method called \"**authorize current user for route**\", and that will take in a **role** and it will check that the **user** has that given **role** and, if not, it will **reject** it with the \"**not authorized**\".\n\nAnd now that I've got that code in there, I can call it back from here in the **route resolver**.\n\n<span class=\"filename\">app.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"21\"><code class=\"language-javascript\">angular.module('app', ['ngResource', 'ngRoute']);\n\nangular.module('app').config(function($routeProvider, $locationProvider){\n  $locationProvider.html5Mode({\n    enabled: true,\n    requireBase: false\n  });\n  $routeProvider\n    .when('/', {\n      templateUrl: '/partials/main/main',\n      controller: 'mainController'\n    })\n  ;\n\n  $routeProvider\n    .when('/admin/users', {\n      templateUrl: '/partials/admin/user-list',\n      controller: 'userListController',\n      resolve: {\n        auth: function(identity, $q){\n          return auth.authorizeCurrentUserForRoute('admin');\n        }\n      }\n    })\n  ;\n\n});\n\nangular.module('app').run(function($rootScope, $location){\n  $rootScope.$on('$routeChangeError', function(evt, current, previous, rejection){\n    if(rejection === 'not authorized'){\n      $location.path('/');\n    }\n  });\n});</code></pre>\n\nAnd, that's a little bit better, but it still is taking up way too much room in order to **add a route resolver to this route**.\n\nIf I want to add the same **route resolver to several routes**, it's still going to take up a lot of space.\n\nSo, let's extract this **route resolver out into its own object**.\n\n<span class=\"filename\">app.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"4-10,27\"><code class=\"language-javascript\">angular.module('app', ['ngResource', 'ngRoute']);\n\nangular.module('app').config(function($routeProvider, $locationProvider){\n  var routeRoleChecks = {\n    admin: {\n      auth: function(identity, $q){\n        return auth.authorizeCurrentUserForRoute('admin');\n      }\n    }\n  };\n\n  $locationProvider.html5Mode({\n    enabled: true,\n    requireBase: false\n  });\n  $routeProvider\n    .when('/', {\n      templateUrl: '/partials/main/main',\n      controller: 'mainController'\n    })\n  ;\n\n  $routeProvider\n    .when('/admin/users', {\n      templateUrl: '/partials/admin/user-list',\n      controller: 'userListController',\n      resolve: routeRoleChecks.admin\n    })\n  ;\n\n});\n\nangular.module('app').run(function($rootScope, $location){\n  $rootScope.$on('$routeChangeError', function(evt, current, previous, rejection){\n    if(rejection === 'not authorized'){\n      $location.path('/');\n    }\n  });\n});</code></pre>\n\n**[4]** I'll create an **object** called \"**route role checks**\"\n\n**[5-9]** and I'll create one called \"**admin**\" that will contain that **object**.\n\n**[27]** Now, down here when I want to set the **resolve**, I can just call **routerolechecks.admin** and that will **pass in the correct object that will check the routes and make sure that the user is an admin**.\n\nAnd now, any developers that come and look at this code are probably going to have a pretty good idea that it's checking to make sure that they're an **admin** before letting them hit this **route**, and the details of how that's done are not going to be important.\n\nNow, since we finished up all of our **authentication** and **authorization** code, this may be a good idea for you to go ahead and commit your changes and push them to Heroku.\n\n---\n\n###### Module Summary ######\n\nIn the last two **modules**, we've implemented a lot of code to make **authentication** and **authorization** work.\n\nWe used the **local strategy** available in **Passport** to do this.\n\nThere are lots of other **strategies** that you can use with **Passport** to **enable authentication**.\n\nCheck the **Passport** documentation for more details.\n\nThen, we implemented **encryption** to protect our **passwords**.\n\nWe used a pretty secure **encryption** method, but there are higher security alternatives out there if security is of utmost importance to your **application**.\n\nWe also implemented an **authorization scheme by adding roles to our users and building in some functionality to check a user's role when they are requesting sensitive data or trying to hit specific pages**.\n\nIt falls on us, the developers, to make sure that every **resource** that needs to be **protected by authorization is protected**.\n\nAlthough these features we implemented involve making the **client and server work together seamlessly**, and we saw that with the **MEAN stack** that is not only possible, but pretty straightforward.\n\nBeing able to use **JavaScript** on both the **client** and **server** saves us a lot of contact switching, and using **Angular** means that with only a little **code**, we can put together all kinds of **functionality**.\n\n---\n\n<a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-implementing-serverside-authorization\" style=\"width: 50%;\"></a><a class=\"next-article\" href=\"http://www.google.com\" style=\"float: right;width: 50%;text-align: right;\">Client-side Testing</a>","html":"<blockquote>\n  <p>In this section, we're going to create an <strong>admin page that lists all the users</strong> and <strong>protect that page on the client so that users who are not admins cannot hit it</strong>.</p>\n</blockquote>\n\n<p>And for the <strong>URL</strong>, we'll match what we've put into the drop-down box when a <strong>user logs in</strong>. So, let's go to our <strong>navbar login</strong> and see what that was.</p>\n\n<p><span class=\"filename\">navbar-login.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"14\"><code class=\"language-javascript\">div(ng-controller=\"navbarLoginController\")  \n  .row.collapse(ng-hide=\"identity.isAuthenticated()\")\n    .large-4.small-4.columns\n      input.form-control(placeholder=\"Email\", ng-model=\"username\")\n    .large-4.small-4.columns\n      input.form-control(type=\"password\", placeholder=\"password\", ng-model=\"password\")\n    .large-4.small-4.columns\n      a.alert.button.expand(ng-click=\"signin(username,password)\") Sign in\n\n  li.has-dropdown(ng-show=\"identity.isAuthenticated()\")\n    a(href=\"#\") {{ identity.currentUser.firstName + \" \" + identity.currentUser.lastName }}\n    ul.dropdown\n      li(ng-show=\"identity.currentUser.isAdmin()\")\n        a(href=\"/admin/users\") User Admin\n      li\n        a(href=\"\", ng-click=\"signout()\") Sign Out</code></pre>\n\n<p><strong>[14]</strong> So, we have this set to <strong>/admin/user</strong>. I'm going to change this to <strong>\"admin/users\"</strong>. I like that a little bit better.</p>\n\n<p><span class=\"filename\">app.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">  \n</code></pre>\n\n<p><strong>[15-20]</strong> So, the first thing we have to do to implement that is to go to our <strong>app file</strong> and <strong>create a new route</strong>. So, we'll go down here and I'll duplicate this <strong>route</strong>.</p>\n\n<p><strong>[16]</strong> And, we'll go back in here and set that to the same thing <strong>\"/admin/users\"</strong>.</p>\n\n<p><strong>[17]</strong> And for the <strong>template</strong>, we're going to create a new area called \"<strong>admin</strong>\". And for this template, we'll call it \"<strong>user-list</strong>\"</p>\n\n<p><strong>[18]</strong> and the <strong>controller</strong> will be \"<strong>user list controller</strong>\".</p>\n\n<p>Okay, so now we need to go in and create that <strong>controller</strong>.</p>\n\n<p>Let's go into <strong>public</strong> and I'll create, underneath <strong>app</strong>, that new area called \"<strong>admin</strong>\". And in \"<strong>admin</strong>\", I'll create that new <strong>controller</strong>.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ mkdir public/app/admin\n$ touch public/app/admin/userListController.js\n</code></pre>\n\n<p>This will be a pretty straightforward <strong>controller</strong>.</p>\n\n<p><span class=\"filename\">userListController.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">angular.module('app').controller('userListController', function($scope, myUser){  \n  $scope.users = myUser.query();\n});</code></pre>\n\n<p><strong>[1]</strong> I'll bring in the <strong>$scope</strong>. And, I'm also going to bring in that <strong>\"myUser\" service</strong> we created.</p>\n\n<p><strong>[2]</strong> And, what I want to do is <strong>get the list of the users</strong> and <strong>put it onto the scope</strong>. So, I'll create a \"<strong>scope.users</strong>\" variable, and this is going to be very easy because \"<strong>myUser</strong>\" is a <strong>resource</strong>. I can just call \"<strong>myUser.query</strong>\" and that will <strong>grab a list of users and put it onto the scope</strong>.</p>\n\n<p>And now, let's create our partial file.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ touch public/app/admin/user-list.jade\n</code></pre>\n\n<p><span class=\"filename\">user-list.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-jade\">.row  \n  table.table\n    tr(ng-repeat=\"user in users\")\n      td {{user.firstName + ' ' + user.lastName}}</code></pre>\n\n<p><strong>[1]</strong> And, this is just going to have a <strong>row</strong>.</p>\n\n<p><strong>[3]</strong> And, inside of that we'll put in a <strong>table</strong>, and we'll put in a <strong>row</strong> for <strong>each user object inside of the users list</strong>.</p>\n\n<p><strong>[4]</strong> And then, we'll just have <strong>one cell inside of each row</strong>. And that <strong>cell</strong> will just contain the <strong>user's name</strong>.</p>\n\n<p>And, now we're going to need to add our <strong>controller</strong> to our <strong>list of scripts</strong>. So, we'll go to our <strong>scripts file</strong>.</p>\n\n<p><span class=\"filename\">scripts.jade</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"15\"><code class=\"language-jade\">script(type=\"text/javascript\", src=\"/vendor/jquery/dist/jquery.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/toastr/toastr.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/foundation/js/foundation.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/foundation/js/foundation/foundation.dropdown.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular/angular.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular-resource/angular-resource.js\")  \nscript(type=\"text/javascript\", src=\"/vendor/angular-route/angular-route.js\")  \nscript(type=\"text/javascript\", src=\"/app/app.js\")  \nscript(type=\"text/javascript\", src=\"/app/main/mainController.js\")  \nscript(type=\"text/javascript\", src=\"/app/account/navbarLoginController.js\")  \nscript(type=\"text/javascript\", src=\"/app/account/identity.js\")  \nscript(type=\"text/javascript\", src=\"/app/common/notifier.js\")  \nscript(type=\"text/javascript\", src=\"/app/account/auth.js\")  \nscript(type=\"text/javascript\", src=\"/app/account/myUser.js\")  \nscript(type=\"text/javascript\", src=\"/app/admin/userListController.js\")</code></pre>\n\n<hr />\n\n<h6 id=\"verifyinbrowser\">Verify in browser</h6>\n\n<p>And, now we can go back to the <strong>browser</strong> and we'll <strong>login as an admin</strong>. </p>\n\n<p>And, from the <strong>drop-down list</strong>, we've got to use your <strong>admin link</strong>. And if we click it, we get to our <strong>user admin page</strong>.</p>\n\n<p><img src=\"/content/images/2015/04/list_of_users_seen_by_admin.png\" alt=\"list of users seen by admin\" /></p>\n\n<p>Now, that's all well and good, but at this point, if I <strong>login to somebody who isn't an admin</strong>, sure I don't have the <strong>admin link</strong>, but <strong>I can still browse directly to the URL</strong>, and <strong>I still get to the page even though it's blank because the data has been protected on the server</strong>.</p>\n\n<p>Now, that's nice, but I'd like this <strong>user experience</strong> to be a little bit more friendly.</p>\n\n<p>If somehow a <strong>user had bookmarked this link</strong> and had <strong>come here later on when they didn't have authorization</strong>, I'd like them to <strong>get redirected back to the default page</strong>.</p>\n\n<p>And, we can do that using <strong>route resolvers</strong>. So let's go into our <strong>app file</strong> </p>\n\n<p><span class=\"filename\">app.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">angular.module('app', ['ngResource', 'ngRoute']);\n\nangular.module('app').config(function($routeProvider, $locationProvider){  \n  $locationProvider.html5Mode({\n    enabled: true,\n    requireBase: false\n  });\n  $routeProvider\n    .when('/', {\n      templateUrl: '/partials/main/main',\n      controller: 'mainController'\n    })\n  ;\n\n  $routeProvider\n    .when('/admin/users', {\n      templateUrl: '/partials/admin/user-list',\n      controller: 'userListController',\n      resolve: {\n        auth: function(identity, $q){\n          if(identity.currentUser && identity.currentUser.roles.indexOf('admin') > -1){\n            return true;\n          }else{\n            return $q.reject('not authorized');\n          }\n        }\n      }\n    })\n  ;\n\n});\n\nangular.module('app').run(function($rootScope, $location){  \n  $rootScope.$on('$routeChangeError', function(evt, current, previous, rejection){\n    if(rejection <mark>= 'not authorized'){\n      $location.path('/');\n    }\n  });\n});</code></pre>\n\n<p><strong>[19]</strong> We're going to add a <strong>route resolver to this route</strong>. Now, a <strong>route resolver</strong> is an <strong>object</strong> and the <strong>keys on this object simply tell you what each route resolver does</strong>.</p>\n\n<p><strong>[20]</strong> So, we're going to create a <strong>key called \"off\"</strong>. And, the <strong>value has to be a function</strong>. And, this is an <strong>injectable function</strong>, so <strong>I can bring in any dependencies that I might need here</strong>. So for the moment, I'll leave this blank.</p>\n\n<p><strong>[22]</strong> And now, within here, I can do whatever <strong>checks</strong> I want, and if I <strong>return \"true\"</strong>, then it will <strong>go ahead and redirect to that route</strong>.</p>\n\n<p><strong>[24]</strong> And if I don't want to <strong>redirect to that route</strong>, then I'm going to <strong>call the q.reject function and pass in a string</strong>, and that will <strong>cause a route change error</strong> that I can <strong>listen to and then take appropriate action</strong>.</p>\n\n<p><strong>[20]</strong> So, I'm going to want my <strong>identity service</strong> in order to <strong>determine whether or not a user is authorized to hit this route</strong>. And, I also need the <strong>Q service</strong>.</p>\n\n<p><strong>[21]</strong> So, I'm going to say if the <strong>identity's current user exists</strong> and <strong>identity's current user.roles.indexof</strong>, and then the <strong>role is going to be admin</strong>, is <strong>greater than -1</strong>,</p>\n\n<p><strong>[22]</strong> then we can <strong>return \"true\"</strong>,</p>\n\n<p><strong>[24]</strong> <strong>else</strong> we're going to <strong>return q.reject, and we'll pass in a string</strong>. And, here I'm going to use the <strong>string \"not authorized\"</strong>. Now, I can use any <strong>string</strong> that I want, so long as <strong>I look for that same exact string when I listen to route change errors</strong>.</p>\n\n<p>This is just to help me understand why the <strong>route change error</strong> happened.</p>\n\n<p><strong>[33]</strong> And now that I've got this <strong>implemented</strong>, I can go down and add another section, and this is going to be a <strong>run section on my app module</strong>.</p>\n\n<p>By calling \"<strong>run</strong>\", the code within here is going to be <strong>executed after the module's been completely configured</strong>. So, it's going to be <strong>run after the code that's defined above</strong>. I'm going to bring in <strong>rootScope</strong> so that I can <strong>listen to the route change error events</strong>. And, I'm also going to bring in the <strong>location service</strong> so that I can <strong>redirect</strong>.</p>\n\n<p><strong>[34]</strong> And, I'm going to say \"<strong>rootScope.on</strong>\" and I'm going to listen to a <strong>special event</strong> called \"<strong>route change error</strong>\", <strong>prefixed by the dollar sign</strong>. And, the <strong>handler</strong> for this is going to take in four parameters: <strong>The event itself, a parameter called \"current\", a parameter called \"previous\", which has to do with the routing, and, finally, the rejection reason itself.</strong></p>\n\n<p><strong>[35]</strong> And, that's going to be that <strong>string</strong> that I passed into the <strong>q.reject function</strong>. And, inside of here I'll just <strong>check if that rejection equals the string I defined</strong></p>\n\n<p><strong>[36]</strong> Then I'm going to <strong>redirect back to the Home page</strong>.</p>\n\n<hr />\n\n<h6 id=\"verifyinbrowser\">Verify in browser</h6>\n\n<p>Now, let's see how this code works in our browser.</p>\n\n<p>So first, let's try logging in as a <strong>user that has admin</strong> to make sure that we're still able to <strong>access the page</strong>.</p>\n\n<p>And, I'll hit that <strong>User Admin route</strong>. We can see I'm able to get there, so let's <strong>sign-out</strong>.</p>\n\n<p>And, I'll login as a <strong>user</strong> that <strong>does not have admin access</strong>. And then, I'll go to that <strong>route</strong>.</p>\n\n<p>And, you can see that I've just <strong>come back to the Home page</strong>.</p>\n\n<p><img src=\"/content/images/2015/04/sent_home.png\" alt=\"sent home\" /></p>\n\n<hr />\n\n<h6 id=\"refactoringroutes\">Refactoring routes</h6>\n\n<p>So, the code that I wrote to <strong>implement</strong> this is <strong>not very readable or maintainable</strong>.</p>\n\n<p>Each <strong>route</strong> is taking a lot of <strong>vertical space</strong>. We don't want to have to take so much <strong>vertical space</strong> every time we <strong>add a new route</strong>.</p>\n\n<p>So, let's see if we can do some <strong>refactoring</strong> and improve the <strong>readability</strong> and <strong>reusability</strong> of this <strong>code</strong>.</p>\n\n<p>The first thing I notice is right here, when <strong>we're asking whether or not a user is authorized to hit this route</strong>, it takes a lot of code. </p>\n\n<p>What I'd like to do <strong>instead is just ask a question like this</strong>.</p>\n\n<p><span class=\"filename\">app.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"21\"><code class=\"language-javascript\">angular.module('app', ['ngResource', 'ngRoute']);\n\nangular.module('app').config(function($routeProvider, $locationProvider){  \n  $locationProvider.html5Mode({\n    enabled: true,\n    requireBase: false\n  });\n  $routeProvider\n    .when('/', {\n      templateUrl: '/partials/main/main',\n      controller: 'mainController'\n    })\n  ;\n\n  $routeProvider\n    .when('/admin/users', {\n      templateUrl: '/partials/admin/user-list',\n      controller: 'userListController',\n      resolve: {\n        auth: function(identity, $q){\n          if(identity.isAuthorized('admin')){\n            return true;\n          }else{\n            return $q.reject('not authorized');\n          }\n        }\n      }\n    })\n  ;\n\n});\n\nangular.module('app').run(function($rootScope, $location){  \n  $rootScope.$on('$routeChangeError', function(evt, current, previous, rejection){\n    if(rejection </mark>= 'not authorized'){\n      $location.path('/');\n    }\n  });\n});</code></pre>\n\n<p>So, let's go to our <strong>identity service</strong></p>\n\n<p><span class=\"filename\">identity.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"12-14\"><code class=\"language-javascript\">angular.module('app').factory('identity', function($window, myUser){  \n  var currentUser;\n  if(!!$window.bootstrappedUserObject){\n    currentUser = new myUser();\n    angular.extend(currentUser, $window.bootstrappedUserObject);\n  }\n  return {\n    currentUser: currentUser,\n    isAuthenticated: function(){\n      return !!this.currentUser;\n    },\n    isAuthorized: function(role){\n      return !!this.currentUser && this.currentUser.roles.indexOf(role) > -1;\n    }\n  }\n});</code></pre>\n\n<p><strong>[12]</strong> and <strong>add that function</strong>.</p>\n\n<p><strong>[13]</strong> We'll check that the <strong>current user exists</strong> and <strong>make sure that the current user has that role</strong>.</p>\n\n<p>So, that's a good start, but there's more that we can do.</p>\n\n<p>We have the <strong>\"auth\" service</strong>, but let's extract this code and put it into there.</p>\n\n<p><span class=\"filename\">auth.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"24-30\"><code class=\"language-javascript\">angular.module('app').factory('auth', function($http, identity, $q, myUser){  \n  return {\n    authenticateUser: function(username, password){\n      var deferred = $q.defer();\n      $http.post('/login', {username:username, password:password}).then(function(response){\n        if(response.data.success){\n          var user = new myUser();\n          identity.currentUser = response.data.user;\n          deferred.resolve(true);\n        }else{\n          deferred.resolve(false);\n        }\n      });\n      return deferred.promise;\n    },\n    logoutUser: function(){\n      var deferred = $q.defer();\n      $http.post('/logout', {logout:true}).then(function(){\n        identity.currentUser = undefined;\n        deferred.resolve();\n      });\n      return deferred.promise;\n    },\n    authorizeCurrentUserForRoute: function(role){\n      if(identity.isAuthorized(role)){\n        return true;\n      }else{\n        return $q.reject('not authorized');\n      }\n    }\n  }\n});</code></pre>\n\n<p><strong>[24]</strong> I'll create a new method called \"<strong>authorize current user for route</strong>\", and that will take in a <strong>role</strong> and it will check that the <strong>user</strong> has that given <strong>role</strong> and, if not, it will <strong>reject</strong> it with the \"<strong>not authorized</strong>\".</p>\n\n<p>And now that I've got that code in there, I can call it back from here in the <strong>route resolver</strong>.</p>\n\n<p><span class=\"filename\">app.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"21\"><code class=\"language-javascript\">angular.module('app', ['ngResource', 'ngRoute']);\n\nangular.module('app').config(function($routeProvider, $locationProvider){  \n  $locationProvider.html5Mode({\n    enabled: true,\n    requireBase: false\n  });\n  $routeProvider\n    .when('/', {\n      templateUrl: '/partials/main/main',\n      controller: 'mainController'\n    })\n  ;\n\n  $routeProvider\n    .when('/admin/users', {\n      templateUrl: '/partials/admin/user-list',\n      controller: 'userListController',\n      resolve: {\n        auth: function(identity, $q){\n          return auth.authorizeCurrentUserForRoute('admin');\n        }\n      }\n    })\n  ;\n\n});\n\nangular.module('app').run(function($rootScope, $location){  \n  $rootScope.$on('$routeChangeError', function(evt, current, previous, rejection){\n    if(rejection <mark>= 'not authorized'){\n      $location.path('/');\n    }\n  });\n});</code></pre>\n\n<p>And, that's a little bit better, but it still is taking up way too much room in order to <strong>add a route resolver to this route</strong>.</p>\n\n<p>If I want to add the same <strong>route resolver to several routes</strong>, it's still going to take up a lot of space.</p>\n\n<p>So, let's extract this <strong>route resolver out into its own object</strong>.</p>\n\n<p><span class=\"filename\">app.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"4-10,27\"><code class=\"language-javascript\">angular.module('app', ['ngResource', 'ngRoute']);\n\nangular.module('app').config(function($routeProvider, $locationProvider){  \n  var routeRoleChecks = {\n    admin: {\n      auth: function(identity, $q){\n        return auth.authorizeCurrentUserForRoute('admin');\n      }\n    }\n  };\n\n  $locationProvider.html5Mode({\n    enabled: true,\n    requireBase: false\n  });\n  $routeProvider\n    .when('/', {\n      templateUrl: '/partials/main/main',\n      controller: 'mainController'\n    })\n  ;\n\n  $routeProvider\n    .when('/admin/users', {\n      templateUrl: '/partials/admin/user-list',\n      controller: 'userListController',\n      resolve: routeRoleChecks.admin\n    })\n  ;\n\n});\n\nangular.module('app').run(function($rootScope, $location){  \n  $rootScope.$on('$routeChangeError', function(evt, current, previous, rejection){\n    if(rejection </mark>= 'not authorized'){\n      $location.path('/');\n    }\n  });\n});</code></pre>\n\n<p><strong>[4]</strong> I'll create an <strong>object</strong> called \"<strong>route role checks</strong>\"</p>\n\n<p><strong>[5-9]</strong> and I'll create one called \"<strong>admin</strong>\" that will contain that <strong>object</strong>.</p>\n\n<p><strong>[27]</strong> Now, down here when I want to set the <strong>resolve</strong>, I can just call <strong>routerolechecks.admin</strong> and that will <strong>pass in the correct object that will check the routes and make sure that the user is an admin</strong>.</p>\n\n<p>And now, any developers that come and look at this code are probably going to have a pretty good idea that it's checking to make sure that they're an <strong>admin</strong> before letting them hit this <strong>route</strong>, and the details of how that's done are not going to be important.</p>\n\n<p>Now, since we finished up all of our <strong>authentication</strong> and <strong>authorization</strong> code, this may be a good idea for you to go ahead and commit your changes and push them to Heroku.</p>\n\n<hr />\n\n<h6 id=\"modulesummary\">Module Summary</h6>\n\n<p>In the last two <strong>modules</strong>, we've implemented a lot of code to make <strong>authentication</strong> and <strong>authorization</strong> work.</p>\n\n<p>We used the <strong>local strategy</strong> available in <strong>Passport</strong> to do this.</p>\n\n<p>There are lots of other <strong>strategies</strong> that you can use with <strong>Passport</strong> to <strong>enable authentication</strong>.</p>\n\n<p>Check the <strong>Passport</strong> documentation for more details.</p>\n\n<p>Then, we implemented <strong>encryption</strong> to protect our <strong>passwords</strong>.</p>\n\n<p>We used a pretty secure <strong>encryption</strong> method, but there are higher security alternatives out there if security is of utmost importance to your <strong>application</strong>.</p>\n\n<p>We also implemented an <strong>authorization scheme by adding roles to our users and building in some functionality to check a user's role when they are requesting sensitive data or trying to hit specific pages</strong>.</p>\n\n<p>It falls on us, the developers, to make sure that every <strong>resource</strong> that needs to be <strong>protected by authorization is protected</strong>.</p>\n\n<p>Although these features we implemented involve making the <strong>client and server work together seamlessly</strong>, and we saw that with the <strong>MEAN stack</strong> that is not only possible, but pretty straightforward.</p>\n\n<p>Being able to use <strong>JavaScript</strong> on both the <strong>client</strong> and <strong>server</strong> saves us a lot of contact switching, and using <strong>Angular</strong> means that with only a little <strong>code</strong>, we can put together all kinds of <strong>functionality</strong>.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/building-angular-js-and-node-js-with-the-mean-stack-security-and-authorization-implementing-serverside-authorization\" style=\"width: 50%;\"></a><a class=\"next-article\" href=\"http://www.google.com\" style=\"float: right;width: 50%;text-align: right;\">Client-side Testing</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429265410504,"created_by":1,"updated_at":1429821422437,"updated_by":1,"published_at":1429265720197,"published_by":1},{"id":81,"uuid":"a9a42360-481c-4005-859a-849181c0ad40","title":"Building AngularJS and Node.js Apps with the MEAN Stack - Client-side Testing: Installing Testing Tools","slug":"building-angular-js-and-node-js-apps-with-the-mean-stack-client-side-testing-installing-testing-tools","markdown":"Introduction\n\nHello, I'm Joe Eames. Welcome to the module on Clientside Testing. This module will be fairly brief and not cover the topic of clientside testing in much depth at all. We'll simply set up Karma to run our clientside tests and write a couple trivial tests of our mvUser resource to demonstrate that our tests are working. We'll use the Mocha test runner, since that's fairly popular in the node world, and it can be used to test both your clientside and server-side code. We'll also use the Chai assertion library with Mocha. You should have definitely watched the module on testing Angular in the Angular Fundamentals course before trying this. That module will give you a much better foundation on testing your Angular code. Additionally, you should watch my course on testing clientside JavaScript. That course covers Karma, Sinon Mocha, and Chai in depth.\n\nInstalling Testing Tools\n\nIn this section we're going to install the tools that we need in order to test our clientside code. To do that we'll go to our command line and we're going to install a few dependencies using NPM. We're going to use the save-dev command on this instead of the save command, so that these dependencies are only saved to the dev dependencies section of our package.json file. The tools we're going to install are karma, mocha, karma-mocha, and karma-chai-plugins. Karma, mocha, and karma-mocha obviously install Karma and Mocha, but the Karma-chai-plugins module not only installs chai for use with Karma, but also installs Sinon so that we have a mocking library available. I'll go ahead and install all these. If you've never used Karma on your computer before you will need to do one more thing and install the Karma command line interface globally. I have already done this so I won't do it to my machine, but the command to do that is shown here. Go ahead and execute that now if you haven't already installed that module. Now that we've got those node modules installed, we also need to install another Angular library specific to testing. We're going to use bower to install angular-mocks. (Typing) Now I'm going to specifically tell bower to install angular-mocks version 1.2.0, since that's the version of Angular that I'm using in this module. If you're using the very latest Angular you can always take out the version number and just get the very latest version of angular-mocks. Now that we've got angular-mocks installed let's create our Karma configuration file by using karma init. We're going to hit tab to select mocha. We don't need RequireJS. We'll just leave it as Chrome as the default. For files to include we're going to want to include all of our JS files from our app directory except for the app file itself, so I'm going to add the location public/app/**/*.js.\n\nThat will include the app.js file, but I'll exclude it later on. I also need to include my tests and I'm going to put those in a test directory inside of a test subfolder and that's all I want for now. We'll add to this list in a minute. For the exclude pattern we'll add in the app.js file, and yes we want Karma to watch our files, and now our Karma configuration file has been created. Go back to WebStorm and open up that configuration file and I need to make a couple of changes here. In addition to mocha, I need to also add in chai and sinon-chai. In the files to load I also need to add in my angular libraries, and these have to be added in the correct order, so there's angular, I also need angular-resource, and then I'll need angular-mocks as well. Now our testing tools are installed and we've pretty much got Karma configured to run correctly, there's just one more thing we'll need to do. We're excluding our app.js file, which is where we create the app module that all of our code relies on. We don't want to include the app.js file because it has a whole bunch of other configuration we won't need to test, but the key line of code that our app.js executes that our test code will need is this line right here where it creates the module. Let's begin by creating our testing files by creating the file that's going to contain this line of code and including it in our Karma configuration. I'll start by creating a new test directory, and within that I'm going to create a test app file. Within this file I need to do two things. I need to create the module, now our real module depends not only on ngResource, but also on ngRoute. We're not going to add the ngRoute dependency here because for our unit tests we're not going to be testing any routing. There's one other line of code that I'm going to add into this file and that is to create a toastr object. Toaster, if you'll remember, is a global variable that we wrapped inside of our toastr service, so since the only vendor libraries that we're including inside of our Karma testing is the three angular libraries, and not toastr, I'm just going to create a blank, fake, toastr global object. Now that that file is created I'm going to add it into my Karma configuration file, and I need to add it after all of the angular libraries, but before any of my angular code inside the app directory here. Now at this point, Karma's correctly configured, so we can go ahead and run it in the console. We do that by typing in karma start. Because we used the default name for our karma configuration file, we don't have to pass in a configuration file, but if we had used a different name we'd pass that file name as an additional parameter. Now I don't have any tests written, so we executed 0 tests, but Karma has successfully run, and now we're ready to write some unit tests for our code.","html":"<p>Introduction</p>\n\n<p>Hello, I'm Joe Eames. Welcome to the module on Clientside Testing. This module will be fairly brief and not cover the topic of clientside testing in much depth at all. We'll simply set up Karma to run our clientside tests and write a couple trivial tests of our mvUser resource to demonstrate that our tests are working. We'll use the Mocha test runner, since that's fairly popular in the node world, and it can be used to test both your clientside and server-side code. We'll also use the Chai assertion library with Mocha. You should have definitely watched the module on testing Angular in the Angular Fundamentals course before trying this. That module will give you a much better foundation on testing your Angular code. Additionally, you should watch my course on testing clientside JavaScript. That course covers Karma, Sinon Mocha, and Chai in depth.</p>\n\n<p>Installing Testing Tools</p>\n\n<p>In this section we're going to install the tools that we need in order to test our clientside code. To do that we'll go to our command line and we're going to install a few dependencies using NPM. We're going to use the save-dev command on this instead of the save command, so that these dependencies are only saved to the dev dependencies section of our package.json file. The tools we're going to install are karma, mocha, karma-mocha, and karma-chai-plugins. Karma, mocha, and karma-mocha obviously install Karma and Mocha, but the Karma-chai-plugins module not only installs chai for use with Karma, but also installs Sinon so that we have a mocking library available. I'll go ahead and install all these. If you've never used Karma on your computer before you will need to do one more thing and install the Karma command line interface globally. I have already done this so I won't do it to my machine, but the command to do that is shown here. Go ahead and execute that now if you haven't already installed that module. Now that we've got those node modules installed, we also need to install another Angular library specific to testing. We're going to use bower to install angular-mocks. (Typing) Now I'm going to specifically tell bower to install angular-mocks version 1.2.0, since that's the version of Angular that I'm using in this module. If you're using the very latest Angular you can always take out the version number and just get the very latest version of angular-mocks. Now that we've got angular-mocks installed let's create our Karma configuration file by using karma init. We're going to hit tab to select mocha. We don't need RequireJS. We'll just leave it as Chrome as the default. For files to include we're going to want to include all of our JS files from our app directory except for the app file itself, so I'm going to add the location public/app/<em>*/</em>.js.</p>\n\n<p>That will include the app.js file, but I'll exclude it later on. I also need to include my tests and I'm going to put those in a test directory inside of a test subfolder and that's all I want for now. We'll add to this list in a minute. For the exclude pattern we'll add in the app.js file, and yes we want Karma to watch our files, and now our Karma configuration file has been created. Go back to WebStorm and open up that configuration file and I need to make a couple of changes here. In addition to mocha, I need to also add in chai and sinon-chai. In the files to load I also need to add in my angular libraries, and these have to be added in the correct order, so there's angular, I also need angular-resource, and then I'll need angular-mocks as well. Now our testing tools are installed and we've pretty much got Karma configured to run correctly, there's just one more thing we'll need to do. We're excluding our app.js file, which is where we create the app module that all of our code relies on. We don't want to include the app.js file because it has a whole bunch of other configuration we won't need to test, but the key line of code that our app.js executes that our test code will need is this line right here where it creates the module. Let's begin by creating our testing files by creating the file that's going to contain this line of code and including it in our Karma configuration. I'll start by creating a new test directory, and within that I'm going to create a test app file. Within this file I need to do two things. I need to create the module, now our real module depends not only on ngResource, but also on ngRoute. We're not going to add the ngRoute dependency here because for our unit tests we're not going to be testing any routing. There's one other line of code that I'm going to add into this file and that is to create a toastr object. Toaster, if you'll remember, is a global variable that we wrapped inside of our toastr service, so since the only vendor libraries that we're including inside of our Karma testing is the three angular libraries, and not toastr, I'm just going to create a blank, fake, toastr global object. Now that that file is created I'm going to add it into my Karma configuration file, and I need to add it after all of the angular libraries, but before any of my angular code inside the app directory here. Now at this point, Karma's correctly configured, so we can go ahead and run it in the console. We do that by typing in karma start. Because we used the default name for our karma configuration file, we don't have to pass in a configuration file, but if we had used a different name we'd pass that file name as an additional parameter. Now I don't have any tests written, so we executed 0 tests, but Karma has successfully run, and now we're ready to write some unit tests for our code.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429586834172,"created_by":1,"updated_at":1429820293464,"updated_by":1,"published_at":1429586991892,"published_by":1},{"id":82,"uuid":"b3b6551b-06d8-4937-ab3d-d079a4f6542a","title":"\u0010Building Angular.js and Node.js with the MEAN stack - Client-side Testing: Testing the myUser Service","slug":"building-angular-js-and-node-js-with-the-mean-stack-client-side-testing-testing-the-myuser-service","markdown":"Testing the mvUser Service\n\nIn this module we're going to actually write some tests. We're going to test our mvUser service. Let's take a quick glance at that file and see what tests we might want to write for it. Here's our mvUser service. It has one key piece of functionality that I like to test, and that is the isAdmin function. I'd like to test that it returns true if a user has the role of admin and returns false if a user doesn't, so let's create a test to verify that functionality. Now since the mvUser is inside of the account directory, I'm going to create a parallel directory inside of my test directory. I'll start by creating another directory underneath test that's going to contain all of my tests. In this case, I'm going to call it tests, but you could call it specs or anything else that makes sense to you. Within this I'm going to create an account directory, and then within that I'm going to create the test file for my mvUser service. I'm going to use the spec suffix on this file and all my other test files, but you could use any suffix that makes sense to you or no suffix at all if that's what you prefer. This is simply for ease of use. I find it easy to correlate a file with its test file by simply adding a suffix that is so unique it's not likely to be used under regular coding circumstances, so I chose the suffix spec for specification. In this file I'll start with the describe function, and I'll list the name of the object, and then I'll create a beforeEach, which will invoke my module. Then I'll create another describe for the function that I'm going to test and then within here I'll create the test for this method. My first test is making sure the isAdmin returns false if the user does not have the admin role inside of their roles array. I'll bring in the mvUser service, and then I'll create a new instance of that resource, I'll set its roles property, and then I'll set up my assert. Now that I got my first test written, let's go ahead and run Karma and see if it passes. You can see that Karma ran my test and it was successful. Now let's add our other test. I'm creating essentially the same test except I'm putting the admin role inside of the roles array, and once I save those changes Karma will automatically rerun, and you can see that it's ran both tests, and both of them passed. So, now I've got the start for unit tests for my application. There's a lot more tests that I could write for the code that I've written, but I'll leave that up to you as an exercise to do.\n\nSummary\n\nIn this module we showed how to install Karma with Mocha and Chai to test our clientside angular code. We also wrote a couple tests around the mvUser resource to demonstrate that our isAdmin method was working correctly. The coverage of testing in this module has been fairly brief. Although we didn't dive into anything in much depth, this has laid the groundwork to write all the tests we need to adequately unit test our angular code.","html":"<p>Testing the mvUser Service</p>\n\n<p>In this module we're going to actually write some tests. We're going to test our mvUser service. Let's take a quick glance at that file and see what tests we might want to write for it. Here's our mvUser service. It has one key piece of functionality that I like to test, and that is the isAdmin function. I'd like to test that it returns true if a user has the role of admin and returns false if a user doesn't, so let's create a test to verify that functionality. Now since the mvUser is inside of the account directory, I'm going to create a parallel directory inside of my test directory. I'll start by creating another directory underneath test that's going to contain all of my tests. In this case, I'm going to call it tests, but you could call it specs or anything else that makes sense to you. Within this I'm going to create an account directory, and then within that I'm going to create the test file for my mvUser service. I'm going to use the spec suffix on this file and all my other test files, but you could use any suffix that makes sense to you or no suffix at all if that's what you prefer. This is simply for ease of use. I find it easy to correlate a file with its test file by simply adding a suffix that is so unique it's not likely to be used under regular coding circumstances, so I chose the suffix spec for specification. In this file I'll start with the describe function, and I'll list the name of the object, and then I'll create a beforeEach, which will invoke my module. Then I'll create another describe for the function that I'm going to test and then within here I'll create the test for this method. My first test is making sure the isAdmin returns false if the user does not have the admin role inside of their roles array. I'll bring in the mvUser service, and then I'll create a new instance of that resource, I'll set its roles property, and then I'll set up my assert. Now that I got my first test written, let's go ahead and run Karma and see if it passes. You can see that Karma ran my test and it was successful. Now let's add our other test. I'm creating essentially the same test except I'm putting the admin role inside of the roles array, and once I save those changes Karma will automatically rerun, and you can see that it's ran both tests, and both of them passed. So, now I've got the start for unit tests for my application. There's a lot more tests that I could write for the code that I've written, but I'll leave that up to you as an exercise to do.</p>\n\n<p>Summary</p>\n\n<p>In this module we showed how to install Karma with Mocha and Chai to test our clientside angular code. We also wrote a couple tests around the mvUser resource to demonstrate that our isAdmin method was working correctly. The coverage of testing in this module has been fairly brief. Although we didn't dive into anything in much depth, this has laid the groundwork to write all the tests we need to adequately unit test our angular code.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429587066290,"created_by":1,"updated_at":1429820498151,"updated_by":1,"published_at":1429587082975,"published_by":1},{"id":83,"uuid":"340a9847-4ea7-4171-bf84-d7dcb7401c6e","title":"Introduction to Node.js - Getting Started with Node.js","slug":"introduction-to-node-js-getting-started-with-node-js","markdown":"###### Introduction ######\n\nIn this module, we'll cover:\n\n- an overview of \"Node.js\"\n- building and installing \"Node.js\"\n- developing for \"Node\" with the \"Cloud9 IDE\"\n- an introduction to Node's \"Event Loop\"\n- the ins and outs of writing code with call-backs\n\n---\n\n###### Node.js Background ######\n\n> \"Node.js\" is a server-side \"JavaScript\" platform.\n\nIt was first introduced to the community by its creator, **Ryan Dahl**, at the \"2009 JSConf.eu Conference\". Its presentation was received with a standing ovation.\n\nSince that time, \"Node\" has continued to evolve, with contributions from the community as well as the **project's primary sponsor, cloud computing Company Joyent**.\n\n\"Node\" is among the most popular projects on \"GitHub\", often beating out other heavyweights such as \"jQuery\" and \"Ruby on Rails\".\n\n---\n\nAt a high level, \"Node\" is comprised of three building blocks.\n\n![](https://s3.amazonaws.com/pixbit-playbook/1-node-intro-m1-intro-slides-4.jpg)\n\nThe first is \"Lib UV\", a high performance, cross-platform evented IO library. It's a fairly new addition to \"Node\", and replaces or abstracts several UNIX-only libraries once directly required by the project. \"Lib UV\" was built as a part of porting \"Node.js\" to the \"Windows\" environment.\n\nNext is \"V8\". This is Google's \"JavaScript\" engine, the same engine found in their Chrome web browser. The \"Node\" team makes every effort to leverage \"V8\" out of the box within \"Node\". This makes it easier for the team to include updated versions of \"V8\" in each release of \"Node\", and thereby benefit from Google's continuous innovation of their \"JavaScript\" engine.\n\nThe last component of \"Node\" is the custom \"C++\" and \"JavaScript\" code developed specifically for the \"Node\" platform itself. These three things together make up the \"Node.js\" platform.\n\n---\n\n###### Getting Node.js ######\n\nThere are several ways to get \"Node.js\". \n\nOne handy way I've found to manage my \"Node\" installations in a \"Linux\" or \"Mac\" environment is with \"NVM\", a tool developed by Tim Caswell in the spirit of Ruby's \"RVM\".\n\nIt can be cloned directly from \"GitHub\", and used to install and manage any number of \"Node\" versions.\n\nBecause \"Node\" is evolving so rapidly, tools like \"NVM\" can be helpful not only with the manual task of downloading and building a new release, but also by allowing you to rapidly switch executables for testing your code against multiple versions of \"Node\" all on one system.\n\n![](https://s3.amazonaws.com/pixbit-playbook/1-node-intro-m1-intro-slides-5.jpg)\n\nHere you see the steps to get started.\n\n1. After cloning, simply source the shell script\n- Run \"NVM Install\" with a version number\n- You can switch versions with the \"NVM Use\" statement\n- You can set your default version of \"Node\" with the \"NVM Alias Default\" statement.\n\n[NVM Github Repository](https://github.com/creationix/nvm)\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.25.1/install.sh | bash\n$ nvm install 0.12.2\n$ nvm use 0.12.2\n$ nvm ls\n->  v0.12.2\n    system\n$ nvm alias default v0.12.2\n```\n\n---\n\n###### Experimenting with Node - Set Timeout Example ######\n\nSo let's create a file, and give ourselves something a little more substantial.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ touch timeout.js\n$ vim timeout.js\n```\n\nWe're going to try to set \"Time-out\", and so let's just try one of those here.\n\n<span class=\"filename\">timeout.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">setTimeout(function(){\n  console.log(\"world\");\n}, 1000);\n\nconsole.log(\"hello\");</code></pre>\n\n**[1]** So we're going to call -- have \"Set Time-out\" call a function\n\n**[2]** and print the word \"world\"\n\n**[3]**  after one second.\n\n**[5]** But we're going to have it immediately print the word \"hello\".\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ node timeout.js\nhello\nworld\n```\n\n---\n\n###### Experimenting with Node - Simple HTTP Server Example ######\n\nOkay, so now let's try to run an example that will do a little more than simply set a time-out.\n\n> Let's try to spin up a very simple HTTP server.\n\nNow on the \"Node\" home page, you'll see the code for a very simple web server that just prints out \"Hello, world.\" So what I've done is I've copied that and pasted it into a script called \"Server JSConf.eu\".\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ touch server.js\n$ vim server.js\n```\n\n<span class=\"filename\">server.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">// process.env.PORT and process.env.IP are for Cloud9\n// substitute with your own port and (optionally) IP as required\n\nvar http = require('http');\nhttp.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end('Hello World\\n');\n}).listen(1337);\nconsole.log('Server running!');</code></pre>\n\n**[8]** Now the only thing I've changed is I've taken off the IP address and left just the port number.\n\nWe'll go into more in a later module about what this is really doing, but just take it for granted that we're creating a web server and we are writing back a text-plain header and sending the text \"Hello, World.\"\n\nAnd this web server is going to listen on port 1337, and it's also going to print something out to the console.\n\nSo if we run that:\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ node server.js\n```\n\nWe go to the host name of this VM at that address, and hit \"Return\", and you'll see we get \"Hello, World.\"\n\n![](https://s3.amazonaws.com/pixbit-playbook/hello_world.png)\n\nSo it's printing that out, very, very simple example, but I mean, it's a running web server in a few lines of code.\n\n---\n\n###### Demo: Developing for Node with Cloud9 IDE ######\n\nYou can, of course, edit \"JavaScript\" files for \"Node\" in your favorite text editor and run them from the command line.\n\nHowever, many of the examples in this course will be shown using the free version of the web-based \"**Cloud9 IDE**\".\n\nIt provides browser support for many of the common editing, running, and debugging tasks you'll do as a part of \"Node\" development. In fact, much of \"Cloud9\" itself was written in \"Node.js\".\n\nIn this screenshot, you can see some of the syntax highlighting, and even code completion support, for \"Node.js\" applications. \n\nSo here you can see \"My Dashboard\". What it has down the left is the projects that I'm currently editing, or currently have active on \"Cloud9\".\n\nBut because I've associated with my \"GitHub\" account, it also has all of my projects that are on \"GitHub\".\n\n![](https://s3.amazonaws.com/pixbit-playbook/projects_currently_editing.png)\n\nBut what we want to do here is we're going to go into the project that I've created that has all of the simple code for this course, and that's this \"**PS Intro to Node**\", so let's click on that. And we'll want to start editing.\n\nSo once we get into a particular workspace, it should look familiar to you if you've used any other \"IDE\" before.\n\n![](https://s3.amazonaws.com/pixbit-playbook/c9.png)\n\nIt shares a lot in common with, say, \"Visual Studio\" or \"Eclipse\". It's got a series of menus across the top that you can use to do various functions within the \"IDE\", but one in particular that's unique to \"Cloud9\" is this \"Share\" function.\n\nYou can invite someone by email, \"Twitter\", or \"Facebook\" to come and co-develop a project with you. And I've used this once before and it's really, really impressive to see somebody else editing your file, and running it, and watching the output in the console from someone else running it. That's pretty impressive. Now over here on the side you'll see the tree structure for our project, and the folders and files.\n\n![](https://s3.amazonaws.com/pixbit-playbook/server-js-c9.png)\n\nMost of the examples that we do in this course, we're going to do in \"Cloud9\". It would be great for you to go ahead and sign up for a free account and keep up.\n\n---\n\n###### Node's Event Loop ######\n\n> One of the key concepts \"Node\" brings from the browser to \"JavaScript\" on the server is the \"Event Loop\".\n\n![](https://s3.amazonaws.com/pixbit-playbook/1-node-intro-m1-intro-slides-9.jpg)\n\n**In the browser**, the \"Event Loop\" is constantly listening for **DOM events, so just key presses or mouse clicks**.\n\nSimilarly, **Node's \"Event Loop\" is constantly listening for events on the server side**.\n\nThese events can be externally generated, such as **incoming HTTP requests or TCP connections**, or they can be **timers and other internal events generated by your \"Node\" application itself**.\n\nAdditionally, other events may be **triggered on the response to a request against an external resource**. For example, **asking \"Node\" to open a file for reading will fire an event when the file is opened and ready**. **Sending a message to an external process will fire an event when the message has been sent**. And **making a request of a network resource, such as another web server, will fire an event when the HTTP response is received**.\n\nA key point is that **each of these are handled as discrete events in \"Node\"**. In fact, the events will very likely interleave each other.\n\nFor example, in this diagram, a timer event is received between the request for a file and when the file is ready for reading, \n\nBoth TCP and HTTP events are received while we're sending a message to an external process.\n\n**Node itself doesn't pause and wait for any of these requests to complete. It simply continues to react to events as they arrive.**\n\n---\n\n###### Node Event Loop Example ######\n\nA common example to demonstrate this non-blocking, event-driven approach is a web application that fetches data from a data base.\n\n![](https://s3.amazonaws.com/pixbit-playbook/1-node-intro-m1-intro-slides-10.jpg)\n\nThe application raises an event when an **HTTP request** is received. This event generates a query to the database for some information.\n\nOnce \"Node\" receives an event back from the data base that the query is complete, an **HTTP response** is formulated and sent to the **caller**.\n\nWhile it is waiting for the response from the database, however, \"Node\" is not blocked and is free to handle additional requests.\n\nHere you can see that it receives a second request while still waiting for the first one to complete, and so on, and so forth. \n\nThis non-blocking approach is fundamental to \"Node\", and differentiates it from the more traditional, server-side programming model that requires you to manage multiple threads to achieve this type of concurrency.\n\n---\n\n###### Node Conventions for Writing Asychronous Code ######\n\nWriting code that operates in this **non-blocking**, **asynchronous** **environment** requires a different way of thinking. \n\nHere is a typical approach to querying a database, shown using some JavaScript-looking pseudo code.\n\n> Each function returns a value before the next function is called.\n\n![](https://s3.amazonaws.com/pixbit-playbook/1-node-intro-m1-intro-slides-12.jpg)\n\n> Each statement builds on the results of the prior one.\n\nFirst, we connect to a data base. Then we use that connection to create a statement. From that statement, we execute a query and get back a set of results. Finally, we iterate over those results.\n\n\"Node.js\" code that accomplishes this task would look quite different in this case because each function returns almost immediately, before the actual work has been done. We have to find other ways to convey the ordering of our statements.\n\nIf you look at the **\"Get DB\" connection function**, you'll see in this case it takes two parameters.\n\n- The first is the same connection string as before, but the second parameter is a function.\n\n- What we're saying, in effect, is, **\"Get a connection to the data base, and once you have it, call this function and pass it the connection you just created\"**.\n\nBy crafting the statement this way, we've left \"Node\" free to do other work while it's waiting for the database connection to be established.\n\nThe \"Create Statement\" function is written similarly, except in this case the only parameter is the function to call once the statement has been created.\n\nThese two functions are examples of **using call-backs to write code that will run asynchronously**.\n\nHowever, lest you think functions with return values have disappeared altogether, you'll notice that the \"Execute Query\" function does indeed return a value. In this case, the results object returned from the function does not immediately contain the results of the database query.\n\n**It is a special object called an \"Event Emitter\", which is capable of emitting events in the future**, when each row of the query result becomes available.\n\nHere we're telling \"Node\" to invoke a function when each row event is omitted by the results object.\n\nWe'll learn more about **event emitters** in a later module.\n\n---\n\n###### Node Callback Conventions ######\n\n\"Node\" has adopted some conventions around its use of callbacks, and it's important to cover those briefly here. They'll help set the stage for many of the examples we'll cover in upcoming modules.\n\nLet's start with a function called \"Get Stuff\".\n\nIt takes two parameters. The first one is a regular **input parameter**, and the second is the **callback function to invoke once the \"Get Stuff\" function has completed**.\n\n![](https://s3.amazonaws.com/pixbit-playbook/1-node-intro-m1-intro-slides-13.jpg)\n\n> A \"Node\" convention is that the **callback parameter is always the last parameter passed to the asynchronous function.**\n\nHere that callback is a named function called \"Handle Results\".\n\n---\n\n###### Error Handling Convention ######\n\nAnother convention around the use of call-backs is **error handling**.\n\n> A \"Node\" convention is that **the first value passed to the callback should always be an error parameter**.\n\nWhile \"Node\" does support JavaScript's \"try catch\" syntax, it's much more common to report an error by passing a value as the first parameter to the callback.\n\nAdditionally, **it's very convenient to verify whether a function succeeded by checking for an undefined or \"Falsy\" error value at the top of your callback function**.\n\nIn this example, we used a named variable, \"Handle Results\", to define the function that was later passed as a callback to \"Get Stuff\". This is certainly viable; however, strictly abiding by this approach will leave you with many, many functions that are only used once in your code.\n\n> **For simple call-backs, or those that are only referenced once, it is very common to use anonymous functions as callbacks.** \n\nIn this case, the anonymous function is defined within the parameter list of the calling function. Here's an example of the previous \"Handle Results\" function being added to the \"Git-Stuff\" parameter list as an anonymous function.\n\n![](https://s3.amazonaws.com/pixbit-playbook/1-node-intro-m1-intro-slides-14.jpg)\n\nAnother benefit I've found when using anonymous functions is that they benefit from JavaScript's support of closures. As you cascade down a series of functions and call-backs, you continue to have at your disposal all the variables created along the way (highlighted in yellow).\n\nLet's take a look at some simple examples of writing asynchronous \"JavaScript\" in \"Node.js\" using callbacks.\n\n---\n\n###### Demo: Writing Asychronous Code in Node.js ######\n\nOkay, so now we're going to take a look at writing some asynchronous code for \"Node.js\" using callbacks.\n\nFor now, what I want to **focus on is the function call and the callback**, so what I have here is a function.\n\nAnd the way that it works is **it will double the number you pass in only if the number you pass in is even**.\n\n> If you pass it in as even, it will double it; if you pass in an odd number, you're going to get an error.\n\n<span class=\"filename\">callback.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">var maxTime = 1000;\n\n// If input is even, double it\n// If input is odd, error\n// (call takes random amount of time < 1s)\nvar evenDoubler = function(v, callback) {\n    var waitTime = Math.floor(Math.random()*(maxTime+1));\n    if (v%2) {\n        setTimeout(function() {\n            callback(new Error(\"Odd input\"));\n        }, waitTime);\n    } else {\n        setTimeout(function() {\n            callback(null, v*2, waitTime);\n        }, waitTime);\n    }\n};\n\n// Version 1:  Named function to process results:\n\nvar processResults = function(err, results, time) {\n    if (err) {\n        console.log(\"ERROR: \" + err.message);\n    } else {\n        console.log(\"The results are: \" + results + \" (\" + time + \" ms)\");\n    }\n};\n\nevenDoubler(4, processResults);\n// evenDoubler(5, processResults);\n\nconsole.log(\"-----\");</code></pre>\n\n**[6]** And each call to \"Even Doubler\" is going to\n\n**[7]** take a random amount of time, some time less than one second but it's random each time.\n\n**[29]** If I want to invoke the function \"Even Doubler\", I can call it here.\n\n**[21]** I pass in the number that I want to double, and then the callback to receive the results when the call is done. And this is where this random amount of time comes into play. That's when \"Process Results\" will be called. And the function \"Process Results\" takes three parameters.\n\nNow when we looked at the slides, the **convention that we looked at is that the first parameter to the callback is whether or not there was an error**, and you'll see here we have a **variable called \"err\"**.\n\nAnd after that, I mean, you can really have as many parameters as you want in your callback, and so in this case I have two.\n\nOne is I have the results, which will be the doubled number if there wasn't an error.\n\nAnd then I have a third parameter, which is how long did it take this particular invocation of \"Even Doubler\" to run?\n\n**[22]** Here we inspect \"Error\", and if we find an error,\n\n**[23]** we log that to the console either way.\n\n**[24]** And then if there's not an error,\n\n**[25]** we tell you what the results are and then how long it took to calculate those results.\n\nSo if we invoke here for an even number, let's see what we get. We'll run it.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ node callback.js\n-----\nThe results are: 8 (327 ms)\n```\n\nWe got our dashed line here; that printed first.\n\nEven though we invoked the function first, the first thing to the console was our dashed line.\n\nAnd that's because the invocation, it was going to take a certain amount of time to complete. And while that was completing, \"Node\" went ahead and printed out to the console this dashed line.\n\nAnd then, when \"Even Doubler\" was done doing its work, it called the \"Process Results\" callback, which inspected the error value, and it was null in this case, which is what we would want to see because this is indeed an even number. And then it printed out to the console the fact that the number 2 doubled is 4, and it took 327 milliseconds.\n\nNow, like I said, that number is random. If we run it again, you're going to get a different number.\n\nSo that's what that looks like.\n\nNow let's try and type in another one right underneath it. This time, we will give it an odd number, which should trigger an error. And we'll do both.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ node callback.js\n-----\nERROR: Odd input\nThe results are: 8 (283 ms)\n```\n\nIt's possible they're different in order of invocation because each one's waiting a random amount of time, and it just so happened that the invocation where we passed in a 3 randomly got the highest of the three numbers, and so that's how long it waited.\n\n> When you're dealing with the asynchronous code like this, you don't control when the callback is going to get invoked.\n\n---\n\n###### Conclusion: The \"Christmas Tree\" Problem ######\n\nNow that we've learned how to write code using anonymous call-backs, we should also be careful not to overdo it.\n\nSelecting the right combination of approaches can be crucial in structuring your \"Node.js\" application.\n\nAnonymous functions are very common and very useful, but many novice \"Node\" developers, who rely on them exclusively, find themselves frustrated with the Christmas tree problem.\n\n![](https://s3.amazonaws.com/pixbit-playbook/1-node-intro-m1-intro-slides-15.jpg)\n\nCode like this can be difficult to debug and maintain. This is often cited as a shortcoming of Node's programming model. \n\n> However, the smart use of named functions, as well as modules, event emitters and streams, all of which we'll cover in subsequent videos, will give you the tools you need to write \"Node\" applications that are no more difficult to build and maintain than those of any other server-side programming language.\n\n<a class=\"prev-article\" href=\"http://www.pluralsight.com/courses/node-intro\" style=\"width: 50%;\">Pluralsight Course</a><a class=\"next-article\" href=\"/introduction-to-node-js-modules-require-and-npm\" style=\"float: right;width: 50%;text-align: right;\">Modules, require(), and NPM</a>","html":"<h6 id=\"introduction\">Introduction</h6>\n\n<p>In this module, we'll cover:</p>\n\n<ul>\n<li>an overview of \"Node.js\"</li>\n<li>building and installing \"Node.js\"</li>\n<li>developing for \"Node\" with the \"Cloud9 IDE\"</li>\n<li>an introduction to Node's \"Event Loop\"</li>\n<li>the ins and outs of writing code with call-backs</li>\n</ul>\n\n<hr />\n\n<h6 id=\"nodejsbackground\">Node.js Background</h6>\n\n<blockquote>\n  <p>\"Node.js\" is a server-side \"JavaScript\" platform.</p>\n</blockquote>\n\n<p>It was first introduced to the community by its creator, <strong>Ryan Dahl</strong>, at the \"2009 JSConf.eu Conference\". Its presentation was received with a standing ovation.</p>\n\n<p>Since that time, \"Node\" has continued to evolve, with contributions from the community as well as the <strong>project's primary sponsor, cloud computing Company Joyent</strong>.</p>\n\n<p>\"Node\" is among the most popular projects on \"GitHub\", often beating out other heavyweights such as \"jQuery\" and \"Ruby on Rails\".</p>\n\n<hr />\n\n<p>At a high level, \"Node\" is comprised of three building blocks.</p>\n\n<p><img src=\"https://s3.amazonaws.com/pixbit-playbook/1-node-intro-m1-intro-slides-4.jpg\" alt=\"\" /></p>\n\n<p>The first is \"Lib UV\", a high performance, cross-platform evented IO library. It's a fairly new addition to \"Node\", and replaces or abstracts several UNIX-only libraries once directly required by the project. \"Lib UV\" was built as a part of porting \"Node.js\" to the \"Windows\" environment.</p>\n\n<p>Next is \"V8\". This is Google's \"JavaScript\" engine, the same engine found in their Chrome web browser. The \"Node\" team makes every effort to leverage \"V8\" out of the box within \"Node\". This makes it easier for the team to include updated versions of \"V8\" in each release of \"Node\", and thereby benefit from Google's continuous innovation of their \"JavaScript\" engine.</p>\n\n<p>The last component of \"Node\" is the custom \"C++\" and \"JavaScript\" code developed specifically for the \"Node\" platform itself. These three things together make up the \"Node.js\" platform.</p>\n\n<hr />\n\n<h6 id=\"gettingnodejs\">Getting Node.js</h6>\n\n<p>There are several ways to get \"Node.js\". </p>\n\n<p>One handy way I've found to manage my \"Node\" installations in a \"Linux\" or \"Mac\" environment is with \"NVM\", a tool developed by Tim Caswell in the spirit of Ruby's \"RVM\".</p>\n\n<p>It can be cloned directly from \"GitHub\", and used to install and manage any number of \"Node\" versions.</p>\n\n<p>Because \"Node\" is evolving so rapidly, tools like \"NVM\" can be helpful not only with the manual task of downloading and building a new release, but also by allowing you to rapidly switch executables for testing your code against multiple versions of \"Node\" all on one system.</p>\n\n<p><img src=\"https://s3.amazonaws.com/pixbit-playbook/1-node-intro-m1-intro-slides-5.jpg\" alt=\"\" /></p>\n\n<p>Here you see the steps to get started.</p>\n\n<ol>\n<li>After cloning, simply source the shell script  </li>\n<li>Run \"NVM Install\" with a version number</li>\n<li>You can switch versions with the \"NVM Use\" statement</li>\n<li>You can set your default version of \"Node\" with the \"NVM Alias Default\" statement.</li>\n</ol>\n\n<p><a href=\"https://github.com/creationix/nvm\">NVM Github Repository</a></p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.25.1/install.sh | bash\n$ nvm install 0.12.2\n$ nvm use 0.12.2\n$ nvm ls\n-&gt;  v0.12.2\n    system\n$ nvm alias default v0.12.2\n</code></pre>\n\n<hr />\n\n<h6 id=\"experimentingwithnodesettimeoutexample\">Experimenting with Node - Set Timeout Example</h6>\n\n<p>So let's create a file, and give ourselves something a little more substantial.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ touch timeout.js\n$ vim timeout.js\n</code></pre>\n\n<p>We're going to try to set \"Time-out\", and so let's just try one of those here.</p>\n\n<p><span class=\"filename\">timeout.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">setTimeout(function(){  \n  console.log(\"world\");\n}, 1000);\n\nconsole.log(\"hello\");</code></pre>\n\n<p><strong>[1]</strong> So we're going to call -- have \"Set Time-out\" call a function</p>\n\n<p><strong>[2]</strong> and print the word \"world\"</p>\n\n<p><strong>[3]</strong>  after one second.</p>\n\n<p><strong>[5]</strong> But we're going to have it immediately print the word \"hello\".</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ node timeout.js\nhello  \nworld  \n</code></pre>\n\n<hr />\n\n<h6 id=\"experimentingwithnodesimplehttpserverexample\">Experimenting with Node - Simple HTTP Server Example</h6>\n\n<p>Okay, so now let's try to run an example that will do a little more than simply set a time-out.</p>\n\n<blockquote>\n  <p>Let's try to spin up a very simple HTTP server.</p>\n</blockquote>\n\n<p>Now on the \"Node\" home page, you'll see the code for a very simple web server that just prints out \"Hello, world.\" So what I've done is I've copied that and pasted it into a script called \"Server JSConf.eu\".</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ touch server.js\n$ vim server.js\n</code></pre>\n\n<p><span class=\"filename\">server.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">// process.env.PORT and process.env.IP are for Cloud9  \n// substitute with your own port and (optionally) IP as required\n\nvar http = require('http');  \nhttp.createServer(function (req, res) {  \n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end('Hello World\\n');\n}).listen(1337);\nconsole.log('Server running!');</code></pre>\n\n<p><strong>[8]</strong> Now the only thing I've changed is I've taken off the IP address and left just the port number.</p>\n\n<p>We'll go into more in a later module about what this is really doing, but just take it for granted that we're creating a web server and we are writing back a text-plain header and sending the text \"Hello, World.\"</p>\n\n<p>And this web server is going to listen on port 1337, and it's also going to print something out to the console.</p>\n\n<p>So if we run that:</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ node server.js\n</code></pre>\n\n<p>We go to the host name of this VM at that address, and hit \"Return\", and you'll see we get \"Hello, World.\"</p>\n\n<p><img src=\"https://s3.amazonaws.com/pixbit-playbook/hello_world.png\" alt=\"\" /></p>\n\n<p>So it's printing that out, very, very simple example, but I mean, it's a running web server in a few lines of code.</p>\n\n<hr />\n\n<h6 id=\"demodevelopingfornodewithcloud9ide\">Demo: Developing for Node with Cloud9 IDE</h6>\n\n<p>You can, of course, edit \"JavaScript\" files for \"Node\" in your favorite text editor and run them from the command line.</p>\n\n<p>However, many of the examples in this course will be shown using the free version of the web-based \"<strong>Cloud9 IDE</strong>\".</p>\n\n<p>It provides browser support for many of the common editing, running, and debugging tasks you'll do as a part of \"Node\" development. In fact, much of \"Cloud9\" itself was written in \"Node.js\".</p>\n\n<p>In this screenshot, you can see some of the syntax highlighting, and even code completion support, for \"Node.js\" applications. </p>\n\n<p>So here you can see \"My Dashboard\". What it has down the left is the projects that I'm currently editing, or currently have active on \"Cloud9\".</p>\n\n<p>But because I've associated with my \"GitHub\" account, it also has all of my projects that are on \"GitHub\".</p>\n\n<p><img src=\"https://s3.amazonaws.com/pixbit-playbook/projects_currently_editing.png\" alt=\"\" /></p>\n\n<p>But what we want to do here is we're going to go into the project that I've created that has all of the simple code for this course, and that's this \"<strong>PS Intro to Node</strong>\", so let's click on that. And we'll want to start editing.</p>\n\n<p>So once we get into a particular workspace, it should look familiar to you if you've used any other \"IDE\" before.</p>\n\n<p><img src=\"https://s3.amazonaws.com/pixbit-playbook/c9.png\" alt=\"\" /></p>\n\n<p>It shares a lot in common with, say, \"Visual Studio\" or \"Eclipse\". It's got a series of menus across the top that you can use to do various functions within the \"IDE\", but one in particular that's unique to \"Cloud9\" is this \"Share\" function.</p>\n\n<p>You can invite someone by email, \"Twitter\", or \"Facebook\" to come and co-develop a project with you. And I've used this once before and it's really, really impressive to see somebody else editing your file, and running it, and watching the output in the console from someone else running it. That's pretty impressive. Now over here on the side you'll see the tree structure for our project, and the folders and files.</p>\n\n<p><img src=\"https://s3.amazonaws.com/pixbit-playbook/server-js-c9.png\" alt=\"\" /></p>\n\n<p>Most of the examples that we do in this course, we're going to do in \"Cloud9\". It would be great for you to go ahead and sign up for a free account and keep up.</p>\n\n<hr />\n\n<h6 id=\"nodeseventloop\">Node's Event Loop</h6>\n\n<blockquote>\n  <p>One of the key concepts \"Node\" brings from the browser to \"JavaScript\" on the server is the \"Event Loop\".</p>\n</blockquote>\n\n<p><img src=\"https://s3.amazonaws.com/pixbit-playbook/1-node-intro-m1-intro-slides-9.jpg\" alt=\"\" /></p>\n\n<p><strong>In the browser</strong>, the \"Event Loop\" is constantly listening for <strong>DOM events, so just key presses or mouse clicks</strong>.</p>\n\n<p>Similarly, <strong>Node's \"Event Loop\" is constantly listening for events on the server side</strong>.</p>\n\n<p>These events can be externally generated, such as <strong>incoming HTTP requests or TCP connections</strong>, or they can be <strong>timers and other internal events generated by your \"Node\" application itself</strong>.</p>\n\n<p>Additionally, other events may be <strong>triggered on the response to a request against an external resource</strong>. For example, <strong>asking \"Node\" to open a file for reading will fire an event when the file is opened and ready</strong>. <strong>Sending a message to an external process will fire an event when the message has been sent</strong>. And <strong>making a request of a network resource, such as another web server, will fire an event when the HTTP response is received</strong>.</p>\n\n<p>A key point is that <strong>each of these are handled as discrete events in \"Node\"</strong>. In fact, the events will very likely interleave each other.</p>\n\n<p>For example, in this diagram, a timer event is received between the request for a file and when the file is ready for reading, </p>\n\n<p>Both TCP and HTTP events are received while we're sending a message to an external process.</p>\n\n<p><strong>Node itself doesn't pause and wait for any of these requests to complete. It simply continues to react to events as they arrive.</strong></p>\n\n<hr />\n\n<h6 id=\"nodeeventloopexample\">Node Event Loop Example</h6>\n\n<p>A common example to demonstrate this non-blocking, event-driven approach is a web application that fetches data from a data base.</p>\n\n<p><img src=\"https://s3.amazonaws.com/pixbit-playbook/1-node-intro-m1-intro-slides-10.jpg\" alt=\"\" /></p>\n\n<p>The application raises an event when an <strong>HTTP request</strong> is received. This event generates a query to the database for some information.</p>\n\n<p>Once \"Node\" receives an event back from the data base that the query is complete, an <strong>HTTP response</strong> is formulated and sent to the <strong>caller</strong>.</p>\n\n<p>While it is waiting for the response from the database, however, \"Node\" is not blocked and is free to handle additional requests.</p>\n\n<p>Here you can see that it receives a second request while still waiting for the first one to complete, and so on, and so forth. </p>\n\n<p>This non-blocking approach is fundamental to \"Node\", and differentiates it from the more traditional, server-side programming model that requires you to manage multiple threads to achieve this type of concurrency.</p>\n\n<hr />\n\n<h6 id=\"nodeconventionsforwritingasychronouscode\">Node Conventions for Writing Asychronous Code</h6>\n\n<p>Writing code that operates in this <strong>non-blocking</strong>, <strong>asynchronous</strong> <strong>environment</strong> requires a different way of thinking. </p>\n\n<p>Here is a typical approach to querying a database, shown using some JavaScript-looking pseudo code.</p>\n\n<blockquote>\n  <p>Each function returns a value before the next function is called.</p>\n</blockquote>\n\n<p><img src=\"https://s3.amazonaws.com/pixbit-playbook/1-node-intro-m1-intro-slides-12.jpg\" alt=\"\" /></p>\n\n<blockquote>\n  <p>Each statement builds on the results of the prior one.</p>\n</blockquote>\n\n<p>First, we connect to a data base. Then we use that connection to create a statement. From that statement, we execute a query and get back a set of results. Finally, we iterate over those results.</p>\n\n<p>\"Node.js\" code that accomplishes this task would look quite different in this case because each function returns almost immediately, before the actual work has been done. We have to find other ways to convey the ordering of our statements.</p>\n\n<p>If you look at the <strong>\"Get DB\" connection function</strong>, you'll see in this case it takes two parameters.</p>\n\n<ul>\n<li><p>The first is the same connection string as before, but the second parameter is a function.</p></li>\n<li><p>What we're saying, in effect, is, <strong>\"Get a connection to the data base, and once you have it, call this function and pass it the connection you just created\"</strong>.</p></li>\n</ul>\n\n<p>By crafting the statement this way, we've left \"Node\" free to do other work while it's waiting for the database connection to be established.</p>\n\n<p>The \"Create Statement\" function is written similarly, except in this case the only parameter is the function to call once the statement has been created.</p>\n\n<p>These two functions are examples of <strong>using call-backs to write code that will run asynchronously</strong>.</p>\n\n<p>However, lest you think functions with return values have disappeared altogether, you'll notice that the \"Execute Query\" function does indeed return a value. In this case, the results object returned from the function does not immediately contain the results of the database query.</p>\n\n<p><strong>It is a special object called an \"Event Emitter\", which is capable of emitting events in the future</strong>, when each row of the query result becomes available.</p>\n\n<p>Here we're telling \"Node\" to invoke a function when each row event is omitted by the results object.</p>\n\n<p>We'll learn more about <strong>event emitters</strong> in a later module.</p>\n\n<hr />\n\n<h6 id=\"nodecallbackconventions\">Node Callback Conventions</h6>\n\n<p>\"Node\" has adopted some conventions around its use of callbacks, and it's important to cover those briefly here. They'll help set the stage for many of the examples we'll cover in upcoming modules.</p>\n\n<p>Let's start with a function called \"Get Stuff\".</p>\n\n<p>It takes two parameters. The first one is a regular <strong>input parameter</strong>, and the second is the <strong>callback function to invoke once the \"Get Stuff\" function has completed</strong>.</p>\n\n<p><img src=\"https://s3.amazonaws.com/pixbit-playbook/1-node-intro-m1-intro-slides-13.jpg\" alt=\"\" /></p>\n\n<blockquote>\n  <p>A \"Node\" convention is that the <strong>callback parameter is always the last parameter passed to the asynchronous function.</strong></p>\n</blockquote>\n\n<p>Here that callback is a named function called \"Handle Results\".</p>\n\n<hr />\n\n<h6 id=\"errorhandlingconvention\">Error Handling Convention</h6>\n\n<p>Another convention around the use of call-backs is <strong>error handling</strong>.</p>\n\n<blockquote>\n  <p>A \"Node\" convention is that <strong>the first value passed to the callback should always be an error parameter</strong>.</p>\n</blockquote>\n\n<p>While \"Node\" does support JavaScript's \"try catch\" syntax, it's much more common to report an error by passing a value as the first parameter to the callback.</p>\n\n<p>Additionally, <strong>it's very convenient to verify whether a function succeeded by checking for an undefined or \"Falsy\" error value at the top of your callback function</strong>.</p>\n\n<p>In this example, we used a named variable, \"Handle Results\", to define the function that was later passed as a callback to \"Get Stuff\". This is certainly viable; however, strictly abiding by this approach will leave you with many, many functions that are only used once in your code.</p>\n\n<blockquote>\n  <p><strong>For simple call-backs, or those that are only referenced once, it is very common to use anonymous functions as callbacks.</strong> </p>\n</blockquote>\n\n<p>In this case, the anonymous function is defined within the parameter list of the calling function. Here's an example of the previous \"Handle Results\" function being added to the \"Git-Stuff\" parameter list as an anonymous function.</p>\n\n<p><img src=\"https://s3.amazonaws.com/pixbit-playbook/1-node-intro-m1-intro-slides-14.jpg\" alt=\"\" /></p>\n\n<p>Another benefit I've found when using anonymous functions is that they benefit from JavaScript's support of closures. As you cascade down a series of functions and call-backs, you continue to have at your disposal all the variables created along the way (highlighted in yellow).</p>\n\n<p>Let's take a look at some simple examples of writing asynchronous \"JavaScript\" in \"Node.js\" using callbacks.</p>\n\n<hr />\n\n<h6 id=\"demowritingasychronouscodeinnodejs\">Demo: Writing Asychronous Code in Node.js</h6>\n\n<p>Okay, so now we're going to take a look at writing some asynchronous code for \"Node.js\" using callbacks.</p>\n\n<p>For now, what I want to <strong>focus on is the function call and the callback</strong>, so what I have here is a function.</p>\n\n<p>And the way that it works is <strong>it will double the number you pass in only if the number you pass in is even</strong>.</p>\n\n<blockquote>\n  <p>If you pass it in as even, it will double it; if you pass in an odd number, you're going to get an error.</p>\n</blockquote>\n\n<p><span class=\"filename\">callback.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">var maxTime = 1000;\n\n// If input is even, double it\n// If input is odd, error\n// (call takes random amount of time < 1s)\nvar evenDoubler = function(v, callback) {  \n    var waitTime = Math.floor(Math.random()*(maxTime+1));\n    if (v%2) {\n        setTimeout(function() {\n            callback(new Error(\"Odd input\"));\n        }, waitTime);\n    } else {\n        setTimeout(function() {\n            callback(null, v*2, waitTime);\n        }, waitTime);\n    }\n};\n\n// Version 1:  Named function to process results:\n\nvar processResults = function(err, results, time) {  \n    if (err) {\n        console.log(\"ERROR: \" + err.message);\n    } else {\n        console.log(\"The results are: \" + results + \" (\" + time + \" ms)\");\n    }\n};\n\nevenDoubler(4, processResults);  \n// evenDoubler(5, processResults);\n\nconsole.log(\"-----\");</code></pre>\n\n<p><strong>[6]</strong> And each call to \"Even Doubler\" is going to</p>\n\n<p><strong>[7]</strong> take a random amount of time, some time less than one second but it's random each time.</p>\n\n<p><strong>[29]</strong> If I want to invoke the function \"Even Doubler\", I can call it here.</p>\n\n<p><strong>[21]</strong> I pass in the number that I want to double, and then the callback to receive the results when the call is done. And this is where this random amount of time comes into play. That's when \"Process Results\" will be called. And the function \"Process Results\" takes three parameters.</p>\n\n<p>Now when we looked at the slides, the <strong>convention that we looked at is that the first parameter to the callback is whether or not there was an error</strong>, and you'll see here we have a <strong>variable called \"err\"</strong>.</p>\n\n<p>And after that, I mean, you can really have as many parameters as you want in your callback, and so in this case I have two.</p>\n\n<p>One is I have the results, which will be the doubled number if there wasn't an error.</p>\n\n<p>And then I have a third parameter, which is how long did it take this particular invocation of \"Even Doubler\" to run?</p>\n\n<p><strong>[22]</strong> Here we inspect \"Error\", and if we find an error,</p>\n\n<p><strong>[23]</strong> we log that to the console either way.</p>\n\n<p><strong>[24]</strong> And then if there's not an error,</p>\n\n<p><strong>[25]</strong> we tell you what the results are and then how long it took to calculate those results.</p>\n\n<p>So if we invoke here for an even number, let's see what we get. We'll run it.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ node callback.js\n-----\nThe results are: 8 (327 ms)  \n</code></pre>\n\n<p>We got our dashed line here; that printed first.</p>\n\n<p>Even though we invoked the function first, the first thing to the console was our dashed line.</p>\n\n<p>And that's because the invocation, it was going to take a certain amount of time to complete. And while that was completing, \"Node\" went ahead and printed out to the console this dashed line.</p>\n\n<p>And then, when \"Even Doubler\" was done doing its work, it called the \"Process Results\" callback, which inspected the error value, and it was null in this case, which is what we would want to see because this is indeed an even number. And then it printed out to the console the fact that the number 2 doubled is 4, and it took 327 milliseconds.</p>\n\n<p>Now, like I said, that number is random. If we run it again, you're going to get a different number.</p>\n\n<p>So that's what that looks like.</p>\n\n<p>Now let's try and type in another one right underneath it. This time, we will give it an odd number, which should trigger an error. And we'll do both.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ node callback.js\n-----\nERROR: Odd input  \nThe results are: 8 (283 ms)  \n</code></pre>\n\n<p>It's possible they're different in order of invocation because each one's waiting a random amount of time, and it just so happened that the invocation where we passed in a 3 randomly got the highest of the three numbers, and so that's how long it waited.</p>\n\n<blockquote>\n  <p>When you're dealing with the asynchronous code like this, you don't control when the callback is going to get invoked.</p>\n</blockquote>\n\n<hr />\n\n<h6 id=\"conclusionthechristmastreeproblem\">Conclusion: The \"Christmas Tree\" Problem</h6>\n\n<p>Now that we've learned how to write code using anonymous call-backs, we should also be careful not to overdo it.</p>\n\n<p>Selecting the right combination of approaches can be crucial in structuring your \"Node.js\" application.</p>\n\n<p>Anonymous functions are very common and very useful, but many novice \"Node\" developers, who rely on them exclusively, find themselves frustrated with the Christmas tree problem.</p>\n\n<p><img src=\"https://s3.amazonaws.com/pixbit-playbook/1-node-intro-m1-intro-slides-15.jpg\" alt=\"\" /></p>\n\n<p>Code like this can be difficult to debug and maintain. This is often cited as a shortcoming of Node's programming model. </p>\n\n<blockquote>\n  <p>However, the smart use of named functions, as well as modules, event emitters and streams, all of which we'll cover in subsequent videos, will give you the tools you need to write \"Node\" applications that are no more difficult to build and maintain than those of any other server-side programming language.</p>\n</blockquote>\n\n<p><a class=\"prev-article\" href=\"http://www.pluralsight.com/courses/node-intro\" style=\"width: 50%;\">Pluralsight Course</a><a class=\"next-article\" href=\"/introduction-to-node-js-modules-require-and-npm\" style=\"float: right;width: 50%;text-align: right;\">Modules, require(), and NPM</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1431204042945,"created_by":1,"updated_at":1431265421225,"updated_by":1,"published_at":1431204133519,"published_by":1},{"id":84,"uuid":"7899a60c-3aa0-47f7-9cae-7ddc1e9e537b","title":"Introduction to Node.js - Modules, require(), and NPM","slug":"introduction-to-node-js-modules-require-and-npm","markdown":"###### Introduction, Accessing Built-in Modules ######\n\nIn this module we're going to cover:\n\n- how to include Node modules in your application\n- the three most common sources of Node modules\n- how to create and publish your own Node modules\n\nModules are the way to bring external functionality to your Node application.\n\n![](https://s3.amazonaws.com/pixbit-playbook/2-node-intro-m2-modules-slides-3.jpg)\n\nThe **require function loads a module and assigns it to a variable for your application to use**.\n\n**Modules make their functionality available by explicitly exporting it for use in other applications**.\n\n- A module can export specific variables and these variables can also be functions.\n- Sometimes a module may export an object which you can instantiate in your code.\n\nHere too, you'll notice an informal naming convention. A **module which simply exports a set of variables is often assigned to a camel case variable starting with a lowercase letter**; foo in this example.\n\nHowever, **a module which is designed to be instantiated will be assigned a camel case variable with an initial capital**; Bar in this example.\n\nFinally, there may be cases where you only need a single variable or function out of a large module. You can import just the one function you need by specifying the variable name immediately after the require function call.\n\n---\n\n###### Sources of Modules: Built-in Modules ######\n\nThere are three main sources of modules that you can bring into your project with the require function.\n\nThe first is **Node's built-in modules**.\n\nWhile Node provides a few functions in its global name space such as set timeout and set interval, there are many modules that shift with Node that must be explicitly included in your project in order to be used.\n\n![](https://s3.amazonaws.com/pixbit-playbook/2-node-intro-m2-modules-slides-4.jpg)\n\nThese module names passed to the require function are simple string identifiers, such as **fs** here.\n\nSome of the built-in Node modules include **fs** for accessing the file system, **http** for creating and responding to http requests, **crypto** for performing cryptographic functions, and **os** for accessing attributes of the underlying operating system.\n\nLet's take a look at some examples of using require to access Node's built-in modules.\n\n---\n\n###### Demo: Accessing Built-in Modules ######\n\nOkay, so we're going to take a look at a very simple example of using Node's built-in modules and including those via require. \n\n<span class=\"filename\">built-ins.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">var os = require('os');\n\nvar toMb = function(f) {\n    return(Math.round((f/1024/1024)*100)/100);\n}\n\nconsole.log('Host: ' + os.hostname());\nconsole.log('15 min. load average: ' + os.loadavg()[2]);\nconsole.log(toMb(os.freemem()) + ' of ' + toMb(os.totalmem()) + ' Mb free');</code></pre>\n\n**[1]** So, here at the top of our script you'll see the require function, require and then here we're just requiring the **os** module.\n\nNow, to get access to the os module we didn't have to do anything special in our Node installation, it just comes with **Node**, **but it's not included in your project by default so we have to include it by calling require os and we're assigning that to the os variable.**\n\nThis is a module that will give you some information about the operating system that your script is running on.\n\n**[7]** In this case we're going to **print out the hostname**,\n\n**[8]** we're going to print out the 15 minute load average, which is the third element in the array, and\n\n**[9]** we're going to print out the free memory and the total memory.\n\n**[3-5]** And I have this little function here just to convert what it gives me back to Megabytes.\n\nThe **os** is one of the more simple ones, but it gives you an idea of the require.\n\nSo now let's run this and take a look at the console.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ node built-ins.js\nHost: Edwins-Mac-Pro\n15 min. load average: 1.80712890625\n3026.76 of 12288 Mb free\n```\n\nSo you'll see the host name, the load average and then the memory statistics here.\n\nSo, the **os** module is a handy way to get access to this information in your Node application, but more importantly this is a very simple example of how you would:\n\n1. require in an external module using require\n- assign it to a variable\n- use it in your script\n\n---\n\n###### Using require() to Modularize Your Application ######\n\nAnother use of the require function is to access functionality located within other files in your project.\n\n![](https://s3.amazonaws.com/pixbit-playbook/2-node-intro-m2-modules-slides-6.jpg)\n\nIn Node's module system each of your JavaScript files is a module and can expose functionality to be required by other files.\n\nThis is a great way to modularize your code, making it easier to develop and maintain.\n\nIn this case the require syntax is more rich and can include file system-like semantics. For example, you can require a file in the same directory, in a subdirectory, or in another navigable directory.\n\n> **Note the dot slash prefix (./) is always required in this case and the js suffix (.js) of the file is omitted.**\n\nAside from the syntax of the module name, require operates the same as before, meaning that you can still require a single variable from another JavaScript file like this.\n\n**The way you make variables available to other JavaScript files is by assigning values to the module.exports object.**\n\n![](https://s3.amazonaws.com/pixbit-playbook/2-node-intro-m2-modules-slides-7.jpg)\n\nFor example, let's take a look at **one.js**.\n\nIt has the variable count assigned the value of two and doIt assigned a function.\n\nWe've made the function available to external callers by adding it to module.exports. Similarly the variable foo with the value bar is also exported.\n\nNow, in two.js we require the file **one.js** using this syntax.\n\nNext we can invoke the function doIt since it was exported in one.js and we have similar access to the foo.\n\nHowever, since the count variable in **one.js** was not exported it is not available in two.js.\n\nOnly those variables defined as a part of module.exports are available externally. \n\nNext, let's take a look at an example of exporting and requiring variables between JavaScript files.\n\n---\n\n###### Demo: Accessing Application Files with require() ######\n\nOkay, so now we're going to take a look at using **require** to import one JavaScript file into another JavaScript file.\n\nAnd to start off we're going to take a look at a file called **mathfun.js**.\n\n<span class=\"filename\">mathfun.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">// for use with 2-file-modules.js\n\nvar maxTime = 1000;\n\n// If input is even, double it\n// If input is odd, error\n// (call takes random amount of time < 1s)\nvar evenDoubler = function(v, callback) {\n    var waitTime = Math.floor(Math.random()*(maxTime+1));\n    if (v%2) {\n        setTimeout(function() {\n            callback(new Error(\"Odd input\"));\n        }, waitTime);\n    } else {\n        setTimeout(function() {\n            callback(null, v*2, waitTime);\n        }, waitTime);\n    }\n};\n\nmodule.exports.evenDoubler = evenDoubler;\n\nmodule.exports.foo = \"bar\";</code></pre>\n\nWhat we've done is we've taken the **evenDoubler** function from our last module and brought it forward here and put it in **mathfun.js** and really this **maxTime** and the function definition are identical to what we looked at last time.\n\n**[21]** But now we've added a line here and **assigned evenDoubler to module.exports** and -- which should make it available to other scripts that want to use it.\n\n**[23]** And then while we were here we decided to go ahead and just set a foo variable to the value of bar. Treated as a module this has exported two variables evenDoubler and foo.\n\nSo now let's go see what it looks like to require that in another script.\n\n<span class=\"filename\">file-modules.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"2,14\"><code class=\"language-javascript\">// Load mathfun.js from same directory\nvar mathfun = require('./mathfun');\n\nvar processResults = function(err, results, time) {\n    if (err) {\n        console.log(\"ERROR: \" + err.message);\n    } else {\n        console.log(\"The results are: \" + results + \" (\" + time + \" ms)\");\n    }\n};\n\nfor (var i = 0; i<10; i++) {\n    console.log(\"Calling 'evenDoubler' with paramter '\" + i + \"'\");\n    mathfun.evenDoubler(i, processResults);\n}\nconsole.log(\"-----\");\n\nconsole.log(\"The 'foo' variable from module 'mathfun' = \" + mathfun.foo);\n\n// Should return undefined, since maxTime is not exported\nconsole.log(\"The 'maxtime' variable is not exported: \" + mathfun.maxTime);</code></pre>\n\n**[2]** So up here you can see we've called the require function and passed in dot slash mathfun. The dot slash says look in the current directory and find me a JavaScript file named mathfun. Now we don't put the .js here, but that's assumed.\n\n**[4-10]** Process results and the four loop, that's all just really a carryover from the prior video so I'm not going to go through that.\n\n**[14]** But what you'll notice here is when I invoke evenDoubler now, I am **prefixing it with mathfun** because that function has actually surfaced through this variable, mathfun. So we're calling it **mathfun.evenDoubler**, just like we called it evenDoubler before.\n\n**[18]** Then down here we're also going to try to call the foo variable in mathfun which we should get back bar for that\n\n**[21]** and even though it shouldn't work we're going to go ahead and try to print out a value of maxTime. If you'll remember from mathfun js, it is set here but it's not exported. So it should not be visible inside of this file.\n\nSo let's run this.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ node file-modules.js\nCalling 'evenDoubler' with paramter '0'\nCalling 'evenDoubler' with paramter '1'\nCalling 'evenDoubler' with paramter '2'\nCalling 'evenDoubler' with paramter '3'\nCalling 'evenDoubler' with paramter '4'\nCalling 'evenDoubler' with paramter '5'\nCalling 'evenDoubler' with paramter '6'\nCalling 'evenDoubler' with paramter '7'\nCalling 'evenDoubler' with paramter '8'\nCalling 'evenDoubler' with paramter '9'\n-----\nThe 'foo' variable from module 'mathfun' = bar\nThe 'maxtime' variable is not exported: undefined\nThe results are: 0 (11 ms)\nThe results are: 4 (95 ms)\nERROR: Odd input\nERROR: Odd input\nThe results are: 8 (342 ms)\nERROR: Odd input\nERROR: Odd input\nThe results are: 12 (654 ms)\nERROR: Odd input\nThe results are: 16 (991 ms)\n```\n\nOkay, so I'm not going to go over the bulk of the output, this is just a carryover from last time.\n\nYou'll see we printed out our invocations and then we printed out our results down here. But you'll notice that the function calls were made so the calls to evenDoubler were made in the mathfun module and also when we accessed the foo variable we did get the value bar back, like we expected and when we tried to access maxTime we got undefined because that variable was not exported.\n\nSo, that is a quick look at what it looks like to **import one JavaScript file into another using the require statement**.\n\n---\n\n###### Finding 3rd Party Modules via NPM ######\n\nThe final source for Node modules we're going to cover is the Node Package Manager or NPM registry.\n\nIt is home to many third party modules available for download and use in your Node applications.\n\n![](https://s3.amazonaws.com/pixbit-playbook/2-node-intro-m2-modules-slides-9.jpg)\n\nModules are installed from the NPM registry by using the NPM command that is installed with Node. NPM install and then the module name will download and install this module into a Node modules folder inside your project.\n\n![](https://s3.amazonaws.com/pixbit-playbook/2-node-intro-m2-modules-slides-10.jpg)\n\nModules that have been downloaded and installed this way can be required with the same simple string identifiers as Node's built-in modules. Node understands how to traverse the Node modules folder structure to load the appropriate JavaScript code.\n\nSimilar to loading a single function from a file, you can also load a specific file from a module by calling require with the relative past to that file within the modules directory structure. While technically feasible, this should be done with extreme care. Pulling a single file from deep within the directory structure of a third party module may introduce a level of coupling that the module author never intended.\n\nFinally, some Node modules provide more than variables and functions you can access within your Node application. They also provide utilities you can invoke from the command line. Since these modules have a scope beyond any one application, you will want to install them outside of your current projects directory tree.\n\nYou can do this by invoking NPM install with the dash G flag for global. This will install the module along with the appropriate command line executable on your path so they are available both inside and outside of your project.\n\nSome examples of Node modules that provide command line utilities include the **express web framework**, the **Mocha test framework**, and the module provided by Microsoft for their **Azure cloud platform**.\n\nLet's take a look at installing some third party modules using NPM.\n\n---\n\n###### Demo: Installing and Using 3rd Party Modules ######\n\nSo now we're going to take a look at using the **Node Package Manager or NPM registry** to search for and install third party modules for use within our Node applications.\n\nSo a great place to look for modules that might be of interest to you is the **NPMJS.org website** where you can see statistics about the module ecosystem in general and also some stats about some particular modules, the most depended upon modules which arguably would be the most popular modules. They're the ones that other modules depend on the most and ones that are most recently updated etc.\n\nNow the module that we're interested in this time is the **request** module, which is the second most depended upon module.\n\nAnd when looking at any particular module you'll be able to go to a webpage, see some download statistics and just some general information about the module including their read me file. And so we've decided we would like to install the request module, which is a simplified http request client.\n\nSo let's go back to our project and here now we have a very simple script which uses require to load the request module and assign it to the variable request. We won't go into a whole lot of detail about what it does. I do suggest you look into it further; it really is a great module. It's also very simple to use and simple to explain.\n\n<span class=\"filename\">npm-modules.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">// Be sure to run \"npm install request\" in this directory\n// before running this script\nvar request = require('request');\n\nrequest('http://www.pluralsight.com/', function(error, response, body) {\n    if (!error && response.statusCode === 200) {\n        console.log(body);\n    }\n});</code></pre>\n\n**[5]** So, if you invoke the **request** function and the first parameter you pass in the URL that you would like to receive, then the second parameter is a **callback**.\n\nThe callback takes three parameters; of course it follows the Node convention of taking the error parameter as the first parameter to the callback and then it has two other parameters in the callback; the response object and the body, which is the text of the response.\n\nSo now if we were to run it right now we would get an error because we haven't actually downloaded and installed the request module from the NPM registry.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ node npm-modules.js\nmodule.js:338\n    throw err;\n          ^\nError: Cannot find module 'request'\n    at Function.Module._resolveFilename (module.js:336:15)\n    at Function.Module._load (module.js:278:25)\n    at Module.require (module.js:365:17)\n    at require (module.js:384:17)\n    at Object.<anonymous> (/Users/edwin/Documents/github/pluralsight/introduction-to-node-js/npm-modules.js:3:15)\n    at Module._compile (module.js:460:26)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Function.Module.runMain (module.js:501:10)\n```\n\nSo, we need to get it and download and install it locally and the way that we'll do that is with the NPM command from the command line.\n\nFirst we need to be sure that we're in the right directory where the script file is that we want to run. And so, we need to go down into - and so now we can run the NPM install command and we want to install request.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ npm install request\nrequest@2.55.0 node_modules/request\n├── caseless@0.9.0\n├── json-stringify-safe@5.0.0\n├── aws-sign2@0.5.0\n├── forever-agent@0.6.1\n├── stringstream@0.0.4\n├── oauth-sign@0.6.0\n├── tunnel-agent@0.4.0\n├── isstream@0.1.2\n├── node-uuid@1.4.3\n├── qs@2.4.2\n├── tough-cookie@1.1.0\n├── mime-types@2.0.11 (mime-db@1.9.1)\n├── http-signature@0.10.1 (assert-plus@0.1.5, asn1@0.1.11, ctype@0.5.3)\n├── form-data@0.2.0 (async@0.9.0)\n├── combined-stream@0.0.7 (delayed-stream@0.0.5)\n├── bl@0.9.4 (readable-stream@1.0.33)\n├── hawk@2.3.1 (cryptiles@2.0.4, sntp@1.0.9, boom@2.7.1, hoek@2.13.0)\n└── har-validator@1.7.0 (bluebird@2.9.25, commander@2.8.1, chalk@1.0.0, is-my-json-valid@2.10.1)\n$ node npm-modules.js\n```\n\nOkay, and so now that the module's been installed we should be good to go and we can try to run our script and see what we get.\n\nAnd so what we have is the html and JavaScript that is the Pluralsight homepage, but we did that by using the request function which came as a part of the **request** module.\n\nThis was a third party module that we downloaded from the NPM registry.\n\n---\n\n###### Conclusion: Publishing Your Own Module ######\n\nPublishing your own modules to the NPM registry is very easy and is a great way to share your work with others.\n\nIt's as simple as adding one extra file to your Node project and a couple of extra NPM commands.\n\n![](https://s3.amazonaws.com/pixbit-playbook/2-node-intro-m2-modules-slides-12.jpg)\n\nThe file you need to add to your project root is **package.json**. This file describes your modules to NPM and specifies how they should be installed when downloaded from the registry.\n\nIt only has a couple of required fields; name and version. NPM encourages the use of semantic versioning in your version numbers.\n\nThere are another set of optional fields that are primarily used to describe your module on the NPM website. These will help others find your module as well as your source code repository.\n\nIf your module has any **dependencies**, you should specify those here as well. You'll notice that exact version numbers are not required, ranges are also supported. When NPM installs your module it will also download and install its required dependencies.\n\n**Main** is where you define the entry point into your module. This is what is executed when someone requires your module.\n\nOnce you have this file ready you'll **need to run NPM add user to create an account on the NPM registry**.\n\nWith that in place you simply run **NPM publish dot** from your project's root directory to publish the module to NPM.\n\nOne additional step I recommend is to move to an empty directory, run NPM install on your module and try to use it in a sample Node application.\n\nI know from experience that it is easy to upload a broken module and not realize it because all of the unit tests passed in the working directory before you publish it.\n\n---\n\n###### Review ######\n\nin this module we discussed how to include Node modules in your project using the require statement. The three common sources of Node modules; the built-in modules, your own applications JavaScript files and the NPM registry. And we wrapped up with the brief discussion on how to define and publish your own module to the NPM registry.\n\n---\n\n<a class=\"prev-article\" href=\"/introduction-to-node-js-getting-started-with-node-js\" style=\"width: 50%;\">Getting Started</a><a class=\"next-article\" href=\"/introduction-to-node-js-events-and-streams\" style=\"float: right;width: 50%;text-align: right;\">Events and Streams</a>","html":"<h6 id=\"introductionaccessingbuiltinmodules\">Introduction, Accessing Built-in Modules</h6>\n\n<p>In this module we're going to cover:</p>\n\n<ul>\n<li>how to include Node modules in your application</li>\n<li>the three most common sources of Node modules</li>\n<li>how to create and publish your own Node modules</li>\n</ul>\n\n<p>Modules are the way to bring external functionality to your Node application.</p>\n\n<p><img src=\"https://s3.amazonaws.com/pixbit-playbook/2-node-intro-m2-modules-slides-3.jpg\" alt=\"\" /></p>\n\n<p>The <strong>require function loads a module and assigns it to a variable for your application to use</strong>.</p>\n\n<p><strong>Modules make their functionality available by explicitly exporting it for use in other applications</strong>.</p>\n\n<ul>\n<li>A module can export specific variables and these variables can also be functions.</li>\n<li>Sometimes a module may export an object which you can instantiate in your code.</li>\n</ul>\n\n<p>Here too, you'll notice an informal naming convention. A <strong>module which simply exports a set of variables is often assigned to a camel case variable starting with a lowercase letter</strong>; foo in this example.</p>\n\n<p>However, <strong>a module which is designed to be instantiated will be assigned a camel case variable with an initial capital</strong>; Bar in this example.</p>\n\n<p>Finally, there may be cases where you only need a single variable or function out of a large module. You can import just the one function you need by specifying the variable name immediately after the require function call.</p>\n\n<hr />\n\n<h6 id=\"sourcesofmodulesbuiltinmodules\">Sources of Modules: Built-in Modules</h6>\n\n<p>There are three main sources of modules that you can bring into your project with the require function.</p>\n\n<p>The first is <strong>Node's built-in modules</strong>.</p>\n\n<p>While Node provides a few functions in its global name space such as set timeout and set interval, there are many modules that shift with Node that must be explicitly included in your project in order to be used.</p>\n\n<p><img src=\"https://s3.amazonaws.com/pixbit-playbook/2-node-intro-m2-modules-slides-4.jpg\" alt=\"\" /></p>\n\n<p>These module names passed to the require function are simple string identifiers, such as <strong>fs</strong> here.</p>\n\n<p>Some of the built-in Node modules include <strong>fs</strong> for accessing the file system, <strong>http</strong> for creating and responding to http requests, <strong>crypto</strong> for performing cryptographic functions, and <strong>os</strong> for accessing attributes of the underlying operating system.</p>\n\n<p>Let's take a look at some examples of using require to access Node's built-in modules.</p>\n\n<hr />\n\n<h6 id=\"demoaccessingbuiltinmodules\">Demo: Accessing Built-in Modules</h6>\n\n<p>Okay, so we're going to take a look at a very simple example of using Node's built-in modules and including those via require. </p>\n\n<p><span class=\"filename\">built-ins.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">var os = require('os');\n\nvar toMb = function(f) {  \n    return(Math.round((f/1024/1024)*100)/100);\n}\n\nconsole.log('Host: ' + os.hostname());  \nconsole.log('15 min. load average: ' + os.loadavg()[2]);  \nconsole.log(toMb(os.freemem()) + ' of ' + toMb(os.totalmem()) + ' Mb free');</code></pre>\n\n<p><strong>[1]</strong> So, here at the top of our script you'll see the require function, require and then here we're just requiring the <strong>os</strong> module.</p>\n\n<p>Now, to get access to the os module we didn't have to do anything special in our Node installation, it just comes with <strong>Node</strong>, <strong>but it's not included in your project by default so we have to include it by calling require os and we're assigning that to the os variable.</strong></p>\n\n<p>This is a module that will give you some information about the operating system that your script is running on.</p>\n\n<p><strong>[7]</strong> In this case we're going to <strong>print out the hostname</strong>,</p>\n\n<p><strong>[8]</strong> we're going to print out the 15 minute load average, which is the third element in the array, and</p>\n\n<p><strong>[9]</strong> we're going to print out the free memory and the total memory.</p>\n\n<p><strong>[3-5]</strong> And I have this little function here just to convert what it gives me back to Megabytes.</p>\n\n<p>The <strong>os</strong> is one of the more simple ones, but it gives you an idea of the require.</p>\n\n<p>So now let's run this and take a look at the console.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ node built-ins.js\nHost: Edwins-Mac-Pro  \n15 min. load average: 1.80712890625  \n3026.76 of 12288 Mb free  \n</code></pre>\n\n<p>So you'll see the host name, the load average and then the memory statistics here.</p>\n\n<p>So, the <strong>os</strong> module is a handy way to get access to this information in your Node application, but more importantly this is a very simple example of how you would:</p>\n\n<ol>\n<li>require in an external module using require  </li>\n<li>assign it to a variable</li>\n<li>use it in your script</li>\n</ol>\n\n<hr />\n\n<h6 id=\"usingrequiretomodularizeyourapplication\">Using require() to Modularize Your Application</h6>\n\n<p>Another use of the require function is to access functionality located within other files in your project.</p>\n\n<p><img src=\"https://s3.amazonaws.com/pixbit-playbook/2-node-intro-m2-modules-slides-6.jpg\" alt=\"\" /></p>\n\n<p>In Node's module system each of your JavaScript files is a module and can expose functionality to be required by other files.</p>\n\n<p>This is a great way to modularize your code, making it easier to develop and maintain.</p>\n\n<p>In this case the require syntax is more rich and can include file system-like semantics. For example, you can require a file in the same directory, in a subdirectory, or in another navigable directory.</p>\n\n<blockquote>\n  <p><strong>Note the dot slash prefix (./) is always required in this case and the js suffix (.js) of the file is omitted.</strong></p>\n</blockquote>\n\n<p>Aside from the syntax of the module name, require operates the same as before, meaning that you can still require a single variable from another JavaScript file like this.</p>\n\n<p><strong>The way you make variables available to other JavaScript files is by assigning values to the module.exports object.</strong></p>\n\n<p><img src=\"https://s3.amazonaws.com/pixbit-playbook/2-node-intro-m2-modules-slides-7.jpg\" alt=\"\" /></p>\n\n<p>For example, let's take a look at <strong>one.js</strong>.</p>\n\n<p>It has the variable count assigned the value of two and doIt assigned a function.</p>\n\n<p>We've made the function available to external callers by adding it to module.exports. Similarly the variable foo with the value bar is also exported.</p>\n\n<p>Now, in two.js we require the file <strong>one.js</strong> using this syntax.</p>\n\n<p>Next we can invoke the function doIt since it was exported in one.js and we have similar access to the foo.</p>\n\n<p>However, since the count variable in <strong>one.js</strong> was not exported it is not available in two.js.</p>\n\n<p>Only those variables defined as a part of module.exports are available externally. </p>\n\n<p>Next, let's take a look at an example of exporting and requiring variables between JavaScript files.</p>\n\n<hr />\n\n<h6 id=\"demoaccessingapplicationfileswithrequire\">Demo: Accessing Application Files with require()</h6>\n\n<p>Okay, so now we're going to take a look at using <strong>require</strong> to import one JavaScript file into another JavaScript file.</p>\n\n<p>And to start off we're going to take a look at a file called <strong>mathfun.js</strong>.</p>\n\n<p><span class=\"filename\">mathfun.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">// for use with 2-file-modules.js\n\nvar maxTime = 1000;\n\n// If input is even, double it\n// If input is odd, error\n// (call takes random amount of time < 1s)\nvar evenDoubler = function(v, callback) {  \n    var waitTime = Math.floor(Math.random()*(maxTime+1));\n    if (v%2) {\n        setTimeout(function() {\n            callback(new Error(\"Odd input\"));\n        }, waitTime);\n    } else {\n        setTimeout(function() {\n            callback(null, v*2, waitTime);\n        }, waitTime);\n    }\n};\n\nmodule.exports.evenDoubler = evenDoubler;\n\nmodule.exports.foo = \"bar\";</code></pre>\n\n<p>What we've done is we've taken the <strong>evenDoubler</strong> function from our last module and brought it forward here and put it in <strong>mathfun.js</strong> and really this <strong>maxTime</strong> and the function definition are identical to what we looked at last time.</p>\n\n<p><strong>[21]</strong> But now we've added a line here and <strong>assigned evenDoubler to module.exports</strong> and -- which should make it available to other scripts that want to use it.</p>\n\n<p><strong>[23]</strong> And then while we were here we decided to go ahead and just set a foo variable to the value of bar. Treated as a module this has exported two variables evenDoubler and foo.</p>\n\n<p>So now let's go see what it looks like to require that in another script.</p>\n\n<p><span class=\"filename\">file-modules.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"2,14\"><code class=\"language-javascript\">// Load mathfun.js from same directory  \nvar mathfun = require('./mathfun');\n\nvar processResults = function(err, results, time) {  \n    if (err) {\n        console.log(\"ERROR: \" + err.message);\n    } else {\n        console.log(\"The results are: \" + results + \" (\" + time + \" ms)\");\n    }\n};\n\nfor (var i = 0; i<10; i++) {  \n    console.log(\"Calling 'evenDoubler' with paramter '\" + i + \"'\");\n    mathfun.evenDoubler(i, processResults);\n}\nconsole.log(\"-----\");\n\nconsole.log(\"The 'foo' variable from module 'mathfun' = \" + mathfun.foo);\n\n// Should return undefined, since maxTime is not exported\nconsole.log(\"The 'maxtime' variable is not exported: \" + mathfun.maxTime);</code></pre>\n\n<p><strong>[2]</strong> So up here you can see we've called the require function and passed in dot slash mathfun. The dot slash says look in the current directory and find me a JavaScript file named mathfun. Now we don't put the .js here, but that's assumed.</p>\n\n<p><strong>[4-10]</strong> Process results and the four loop, that's all just really a carryover from the prior video so I'm not going to go through that.</p>\n\n<p><strong>[14]</strong> But what you'll notice here is when I invoke evenDoubler now, I am <strong>prefixing it with mathfun</strong> because that function has actually surfaced through this variable, mathfun. So we're calling it <strong>mathfun.evenDoubler</strong>, just like we called it evenDoubler before.</p>\n\n<p><strong>[18]</strong> Then down here we're also going to try to call the foo variable in mathfun which we should get back bar for that</p>\n\n<p><strong>[21]</strong> and even though it shouldn't work we're going to go ahead and try to print out a value of maxTime. If you'll remember from mathfun js, it is set here but it's not exported. So it should not be visible inside of this file.</p>\n\n<p>So let's run this.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ node file-modules.js\nCalling 'evenDoubler' with paramter '0'  \nCalling 'evenDoubler' with paramter '1'  \nCalling 'evenDoubler' with paramter '2'  \nCalling 'evenDoubler' with paramter '3'  \nCalling 'evenDoubler' with paramter '4'  \nCalling 'evenDoubler' with paramter '5'  \nCalling 'evenDoubler' with paramter '6'  \nCalling 'evenDoubler' with paramter '7'  \nCalling 'evenDoubler' with paramter '8'  \nCalling 'evenDoubler' with paramter '9'  \n-----\nThe 'foo' variable from module 'mathfun' = bar  \nThe 'maxtime' variable is not exported: undefined  \nThe results are: 0 (11 ms)  \nThe results are: 4 (95 ms)  \nERROR: Odd input  \nERROR: Odd input  \nThe results are: 8 (342 ms)  \nERROR: Odd input  \nERROR: Odd input  \nThe results are: 12 (654 ms)  \nERROR: Odd input  \nThe results are: 16 (991 ms)  \n</code></pre>\n\n<p>Okay, so I'm not going to go over the bulk of the output, this is just a carryover from last time.</p>\n\n<p>You'll see we printed out our invocations and then we printed out our results down here. But you'll notice that the function calls were made so the calls to evenDoubler were made in the mathfun module and also when we accessed the foo variable we did get the value bar back, like we expected and when we tried to access maxTime we got undefined because that variable was not exported.</p>\n\n<p>So, that is a quick look at what it looks like to <strong>import one JavaScript file into another using the require statement</strong>.</p>\n\n<hr />\n\n<h6 id=\"finding3rdpartymodulesvianpm\">Finding 3rd Party Modules via NPM</h6>\n\n<p>The final source for Node modules we're going to cover is the Node Package Manager or NPM registry.</p>\n\n<p>It is home to many third party modules available for download and use in your Node applications.</p>\n\n<p><img src=\"https://s3.amazonaws.com/pixbit-playbook/2-node-intro-m2-modules-slides-9.jpg\" alt=\"\" /></p>\n\n<p>Modules are installed from the NPM registry by using the NPM command that is installed with Node. NPM install and then the module name will download and install this module into a Node modules folder inside your project.</p>\n\n<p><img src=\"https://s3.amazonaws.com/pixbit-playbook/2-node-intro-m2-modules-slides-10.jpg\" alt=\"\" /></p>\n\n<p>Modules that have been downloaded and installed this way can be required with the same simple string identifiers as Node's built-in modules. Node understands how to traverse the Node modules folder structure to load the appropriate JavaScript code.</p>\n\n<p>Similar to loading a single function from a file, you can also load a specific file from a module by calling require with the relative past to that file within the modules directory structure. While technically feasible, this should be done with extreme care. Pulling a single file from deep within the directory structure of a third party module may introduce a level of coupling that the module author never intended.</p>\n\n<p>Finally, some Node modules provide more than variables and functions you can access within your Node application. They also provide utilities you can invoke from the command line. Since these modules have a scope beyond any one application, you will want to install them outside of your current projects directory tree.</p>\n\n<p>You can do this by invoking NPM install with the dash G flag for global. This will install the module along with the appropriate command line executable on your path so they are available both inside and outside of your project.</p>\n\n<p>Some examples of Node modules that provide command line utilities include the <strong>express web framework</strong>, the <strong>Mocha test framework</strong>, and the module provided by Microsoft for their <strong>Azure cloud platform</strong>.</p>\n\n<p>Let's take a look at installing some third party modules using NPM.</p>\n\n<hr />\n\n<h6 id=\"demoinstallingandusing3rdpartymodules\">Demo: Installing and Using 3rd Party Modules</h6>\n\n<p>So now we're going to take a look at using the <strong>Node Package Manager or NPM registry</strong> to search for and install third party modules for use within our Node applications.</p>\n\n<p>So a great place to look for modules that might be of interest to you is the <strong>NPMJS.org website</strong> where you can see statistics about the module ecosystem in general and also some stats about some particular modules, the most depended upon modules which arguably would be the most popular modules. They're the ones that other modules depend on the most and ones that are most recently updated etc.</p>\n\n<p>Now the module that we're interested in this time is the <strong>request</strong> module, which is the second most depended upon module.</p>\n\n<p>And when looking at any particular module you'll be able to go to a webpage, see some download statistics and just some general information about the module including their read me file. And so we've decided we would like to install the request module, which is a simplified http request client.</p>\n\n<p>So let's go back to our project and here now we have a very simple script which uses require to load the request module and assign it to the variable request. We won't go into a whole lot of detail about what it does. I do suggest you look into it further; it really is a great module. It's also very simple to use and simple to explain.</p>\n\n<p><span class=\"filename\">npm-modules.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">// Be sure to run \"npm install request\" in this directory  \n// before running this script\nvar request = require('request');\n\nrequest('<a href=\"http://www.pluralsight.com/\">http://www.pluralsight.com/</a>', function(error, response, body) {  \n    if (!error && response.statusCode === 200) {\n        console.log(body);\n    }\n});</code></pre>\n\n<p><strong>[5]</strong> So, if you invoke the <strong>request</strong> function and the first parameter you pass in the URL that you would like to receive, then the second parameter is a <strong>callback</strong>.</p>\n\n<p>The callback takes three parameters; of course it follows the Node convention of taking the error parameter as the first parameter to the callback and then it has two other parameters in the callback; the response object and the body, which is the text of the response.</p>\n\n<p>So now if we were to run it right now we would get an error because we haven't actually downloaded and installed the request module from the NPM registry.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ node npm-modules.js\nmodule.js:338  \n    throw err;\n          ^\nError: Cannot find module 'request'  \n    at Function.Module._resolveFilename (module.js:336:15)\n    at Function.Module._load (module.js:278:25)\n    at Module.require (module.js:365:17)\n    at require (module.js:384:17)\n    at Object.&lt;anonymous&gt; (/Users/edwin/Documents/github/pluralsight/introduction-to-node-js/npm-modules.js:3:15)\n    at Module._compile (module.js:460:26)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Function.Module.runMain (module.js:501:10)\n</code></pre>\n\n<p>So, we need to get it and download and install it locally and the way that we'll do that is with the NPM command from the command line.</p>\n\n<p>First we need to be sure that we're in the right directory where the script file is that we want to run. And so, we need to go down into - and so now we can run the NPM install command and we want to install request.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ npm install request\nrequest@2.55.0 node_modules/request  \n├── caseless@0.9.0\n├── json-stringify-safe@5.0.0\n├── aws-sign2@0.5.0\n├── forever-agent@0.6.1\n├── stringstream@0.0.4\n├── oauth-sign@0.6.0\n├── tunnel-agent@0.4.0\n├── isstream@0.1.2\n├── node-uuid@1.4.3\n├── qs@2.4.2\n├── tough-cookie@1.1.0\n├── mime-types@2.0.11 (mime-db@1.9.1)\n├── http-signature@0.10.1 (assert-plus@0.1.5, asn1@0.1.11, ctype@0.5.3)\n├── form-data@0.2.0 (async@0.9.0)\n├── combined-stream@0.0.7 (delayed-stream@0.0.5)\n├── bl@0.9.4 (readable-stream@1.0.33)\n├── hawk@2.3.1 (cryptiles@2.0.4, sntp@1.0.9, boom@2.7.1, hoek@2.13.0)\n└── har-validator@1.7.0 (bluebird@2.9.25, commander@2.8.1, chalk@1.0.0, is-my-json-valid@2.10.1)\n$ node npm-modules.js\n</code></pre>\n\n<p>Okay, and so now that the module's been installed we should be good to go and we can try to run our script and see what we get.</p>\n\n<p>And so what we have is the html and JavaScript that is the Pluralsight homepage, but we did that by using the request function which came as a part of the <strong>request</strong> module.</p>\n\n<p>This was a third party module that we downloaded from the NPM registry.</p>\n\n<hr />\n\n<h6 id=\"conclusionpublishingyourownmodule\">Conclusion: Publishing Your Own Module</h6>\n\n<p>Publishing your own modules to the NPM registry is very easy and is a great way to share your work with others.</p>\n\n<p>It's as simple as adding one extra file to your Node project and a couple of extra NPM commands.</p>\n\n<p><img src=\"https://s3.amazonaws.com/pixbit-playbook/2-node-intro-m2-modules-slides-12.jpg\" alt=\"\" /></p>\n\n<p>The file you need to add to your project root is <strong>package.json</strong>. This file describes your modules to NPM and specifies how they should be installed when downloaded from the registry.</p>\n\n<p>It only has a couple of required fields; name and version. NPM encourages the use of semantic versioning in your version numbers.</p>\n\n<p>There are another set of optional fields that are primarily used to describe your module on the NPM website. These will help others find your module as well as your source code repository.</p>\n\n<p>If your module has any <strong>dependencies</strong>, you should specify those here as well. You'll notice that exact version numbers are not required, ranges are also supported. When NPM installs your module it will also download and install its required dependencies.</p>\n\n<p><strong>Main</strong> is where you define the entry point into your module. This is what is executed when someone requires your module.</p>\n\n<p>Once you have this file ready you'll <strong>need to run NPM add user to create an account on the NPM registry</strong>.</p>\n\n<p>With that in place you simply run <strong>NPM publish dot</strong> from your project's root directory to publish the module to NPM.</p>\n\n<p>One additional step I recommend is to move to an empty directory, run NPM install on your module and try to use it in a sample Node application.</p>\n\n<p>I know from experience that it is easy to upload a broken module and not realize it because all of the unit tests passed in the working directory before you publish it.</p>\n\n<hr />\n\n<h6 id=\"review\">Review</h6>\n\n<p>in this module we discussed how to include Node modules in your project using the require statement. The three common sources of Node modules; the built-in modules, your own applications JavaScript files and the NPM registry. And we wrapped up with the brief discussion on how to define and publish your own module to the NPM registry.</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/introduction-to-node-js-getting-started-with-node-js\" style=\"width: 50%;\">Getting Started</a><a class=\"next-article\" href=\"/introduction-to-node-js-events-and-streams\" style=\"float: right;width: 50%;text-align: right;\">Events and Streams</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1431265382500,"created_by":1,"updated_at":1431272492585,"updated_by":1,"published_at":1431265408845,"published_by":1},{"id":85,"uuid":"a4ebcdfa-d070-46fc-bdca-036da882a269","title":"Introduction to Node.js - Events and Streams","slug":"introduction-to-node-js-events-and-streams","markdown":"###### Introduction ######\n\nIn this module we'll discuss the **differences between callbacks and events**.\n\nWe'll look at **Node's EventEmmiter class** as well as a couple of patterns for using **Event Emitters**.\n\nWe'll then move on to **Readable and WriteableStreams and piping between streams**.\n\n![](https://s3.amazonaws.com/pixbit-playbook/1-node-intro-m3/3-node-intro-m3-streams-slides-2.jpg)\n\nSo let's get started.\n\n---\n\n###### Events and the EventEmitter class ######\n\nSo far, we've looked at callbacks as a way to implement asynchronous non-blocking code.\n\nNode provides another way to achieve this with Events.\n\nHere is a **callback example** similar to what we've seen so far. It's a function which invokes a callback with an array of results.\n\n![](https://s3.amazonaws.com/pixbit-playbook/1-node-intro-m3/3-node-intro-m3-streams-slides-3.jpg)\n\nHere is a similar snippet of code written using **Events**.\n\nIn this case, the **getThem** function returns a value immediately. The value is an instance of the **EventEmmiter** class.\n\n- This **results** object has an **on** function. Here we are specifying that for each **item** event, execute this function passing in the current item.\n- Then, on the **done** event, or when there are no more results, invoke this function.\n- And if there is an **error**, invoke this function and pass in the error that occurred.\n\nSome of the key differences between these two approaches are:\n\n---\n\n###### Callback Model ######\n\n> In the **Callback** Model, you make a **request** and **provide a function to be called when the request is completed**. One request, one reply.\n\nIn the Callback approach, you don't receive any results until you receive all the results.\n\nIn the example above, the callback will not be invoked until the entire items array is ready.\n\nIf these items arrive slowly, the callback will not be invoked until the last item has arrived.\n\nIt also means that the **getThem** function will be **storing the entire list of items in memory while accumulating them prior to invoking the callback with the entire array**.\n\nFinally, the **Callback** scenario, if only by convention, is an all or nothing proposition. While technically possible to invoke a callback with both error and items parameters, this is not the convention and would not be expected. If the error parameter is set, then the call is assumed to have failed.\n\n---\n\n###### Event Model ######\n\n> In the **Event** Model, however, is more of a **publish/subscribe** approach. You can invoke the **on** function repeatedly to provide multiple functions to invoke on each event; in essence, subscribing to the events.\n\nIn the example above, functions associated with the **item** event will be invoked for each item.\n\nThis gives you the opportunity to act on the first item as soon as it arrives and the second item and so forth.\n\nIt also means that the **getThem** function is not accumulating the items in memory.\n\nIn the **evented** scenario, however, an **error** is emitted as a separate event. Notice that the item and done events do not pass in an error parameter as the first value.\n\nIn this evented approach, **the error can be emitted instead of any item events or after some item events have already been omitted**. This access to partial results may be desirable in some situations.\n\n---\n\n###### Node's EventEmitter Class ######\n\nThe **EventEmitter Class** is provided by Node as a construct for building these **event-driven interfaces**.\n\n![](https://s3.amazonaws.com/pixbit-playbook/1-node-intro-m3/3-node-intro-m3-streams-slides-4.jpg)\n\nThe code that is subscribing to events, like the code in our last slide (**results**), will call the **on** function of the **EventEmitter** instance and **specify the event being subscribed to**.\n\nAnd then the code publishing events will call the Emit function and specify the event being emitted. Now **these events themselves are simply strings and can be of any value**.\n\nIn our previous example, we defined three events; **item**, **done**, and **error**.\n\nWhen emitting an event, you can also provide additional arguments after the event name. These will pass as parameters to any functions subscribed to that event.\n\nIn our previous example, this included the item itself (**i**) that was passed to the item event, as well as, the error object passed to the error event.\n\nThis set of events and their arguments constitute an interface, or contract, between the subscriber and the publisher, or emitter.\n\nThere are two common patterns I've seen for using EventEmitters in Node:\n\n- The first is as a return value from a function. This is what we saw on the earlier slide. In this case, an instance of EventEmitter is created directly and returned from a function.\n- Another common pattern is when an object extends EventEmitter and emits events while also providing other functions and values.\n\nLet's take a look at an example of both of these EventEmitter patterns.\n\n---\n\n###### Demo: Returning an EventEmitter from a function ######\n\nSo, in our EventEmitter examples, the first thing we're going to look at is the first pattern that we talked about on the slides, which is the example where you actually **instantiate an EventEmitter and return it from a function call**.\n\n<span class=\"filename\">events.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"4,7,9,11,16,21,25,29\"><code class=\"language-javascript\">var EventEmitter = require('events').EventEmitter;\n\nvar getResource = function(c) {\n    var e = new EventEmitter();\n    process.nextTick(function() {\n        var count = 0;\n        e.emit('start');\n        var t = setInterval(function () {\n            e.emit('data', ++count);\n            if (count === c) {\n                e.emit('end', count);\n                clearInterval(t);\n            }\n        }, 10);\n    });\n    return(e);\n};\n\nvar r = getResource(5);\n\nr.on('start', function() {\n    console.log(\"I've started!\");\n});\n\nr.on('data', function(d) {\n    console.log(\"   I received data -> \" + d);\n});\n\nr.on('end', function(t) {\n    console.log(\"I'm done, with \" + t + \" data events.\");\n});</code></pre>\n\n**[3-17]** So, here we have a getResource function which takes in a number and returns an instance of an EventEmitter that emits three events; a Start event, a Data event, and an End event.\n\n**[7,9,11]** This is a good demonstration of how these event names can be really whatever you want. In our slides we had Item and Done, and Error. In here we have Start, and Data, and End.\n\n**[21-23]** And what we're saying is whenever I see the Start event, I want you to log this to the console.\n\n**[25-27]** And whenever I see the Data event, I want you to log this to the console, including the data that was sent.\n\n**[29-31]** And then, on the End event, let's log this to the console.\n\nLet's run this and see what we get.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ node events.js\nI've started!\n   I received data -> 1\n   I received data -> 2\n   I received data -> 3\n   I received data -> 4\n   I received data -> 5\nI'm done, with 5 data events.\n```\n\nAnd so here you can see we have the I've started which was the reaction to the **start** event. And then we got five **data** events, and one **end** event that says \"I'm done\".\n\nNow the five is because we passed in five and that's how many -- that's the way this function is coded. Whatever number you pass in, that's how many data events you're going to get back.\n\nThat was us subscribing to those events and printing something out to the console.\n\nNow let's take a look at the getResource function itself, and see what it does.\n\n<span class=\"filename\">events.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">var EventEmitter = require('events').EventEmitter;\n\nvar getResource = function(c) {\n    var e = new EventEmitter();\n    process.nextTick(function() {\n        var count = 0;\n        e.emit('start');\n        var t = setInterval(function () {\n            e.emit('data', ++count);\n            if (count === c) {\n                e.emit('end', count);\n                clearInterval(t);\n            }\n        }, 10);\n    });\n    return(e);\n};\n\nvar r = getResource(5);\n\nr.on('start', function() {\n    console.log(\"I've started!\");\n});\n\nr.on('data', function(d) {\n    console.log(\"   I received data -> \" + d);\n});\n\nr.on('end', function(t) {\n    console.log(\"I'm done, with \" + t + \" data events.\");\n});</code></pre>\n\n**[4]** Now the first thing that it does is we instantiate a new **EventEmitter**.\n\n**[1]** And you'll notice that in order to do that, we had to **require an EventEmitter** and by doing that we used Node's built-in events module. Because we only wanted the EventEmitter from that events module, we specified that as part of the required and put that in our own EventEmitter variable.\n\n**[5]** And so we instantiate one of those and then now this **process nextTick** is something we haven't seen before. In our first module we looked at **SetTimeOut** and **SetInterval**. And **process nextTick** is similar but what it really **says is on the very next tick of the event loop I want you to run this function**.\n\nAnd in this example we're really using that to emulate an asynchronous function because what we want is we want the return value here to be called before we start emitting events and as would normally be the case if you were, you know, talking to file system or a database.\n\n**[7]** So what we say is, **on the next tick of the event loop I want you to emit a Start event**. It's our EventEmitter. We're emitting a **start** event.\n\n**[8]** And then now we're going to set an Interval.\n\n**[14]** And what we're saying is, every 10 milliseconds I want you to execute this function.\n\n**[9]** And then this function we're emitting our **data** event. We're keeping a count of how many **data** events we've emitted so far. We start at zero and then we keep a count.\n\n**[10]** And if the count is equal to the number that was passed in,\n\n**[11]** we're going to emit an **end** event\n\n**[12]** and then clear that interval to stop the function from being executed.\n\nThis is an example of the first pattern of using an EventEmitter. Now let's take a look at the second pattern.\n\n---\n\n###### Demo: Inheriting from EventEmitter ######\n\nIn this second example, we're going to take a look at the second pattern we discussed earlier where we have an object that extends the **EventEmitter** class.\n\nSo what we've done is we've taken our original example and basically cut it in half, and we've taken the code that emits the events and separated it out into a separate JavaScript file. So let's start by taking a look at that file.\n\nSo here you'll see we have a function called Resource which takes a number, and I've hidden the contents of the function for now.\n\nWe'll get to that in just a minute.\n\nBut what this function basically does -- this is **r** object, and **r** object extends or inherits from EventEmitter.\n\n<span class=\"filename\">resource.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"3,25\"><code class=\"language-javascript\">// For use with ext-eventemitter.js\n\nvar util = require('util');\nvar EventEmitter = require('events').EventEmitter;\n\nfunction Resource (m) {\n\n    var maxEvents = m;\n    var self = this;\n\n    process.nextTick(function() {\n        var count = 0;\n        self.emit('start');\n        var t = setInterval(function () {\n            self.emit('data', ++count);\n            if (count === maxEvents) {\n                self.emit('end', count);\n                clearInterval(t);\n            }\n        }, 10);\n    });\n\n};\n\nutil.inherits(Resource, EventEmitter);\n\nmodule.exports = Resource;</code></pre>\n\n**[3]** So in order to do that, we're using Node's **util** module which we've **required** here.\n\n**[25]** It's a built-in module and it has an Inherits function. And what we've said is, we want our resource object to inherit from the EventEmitter object, which gives us access to the **on** function and the **emit** function\n\n**[27]** and also, because we want scripts that included this file as a module, to have access to our resource object. We set module.exports equal to resource.\n\nNow if we look down inside the code for the Resource function, you'll see that it's almost identical to what we saw in our getResource function.\n\n**[11]** process.netTick is here.\n\n**[13,15,17]** The Events are emitted here.\n\nThe only difference is that because in our previous example, we were instantiating an **EventEmitter** and **using that instantiated variable to call the Emit function**.\n\nIn this case **because our Resource function inherits from EventEmitter**. It is **our Resource function that's doing the emitting of the events** and so we need to use the \"**this**\" variable to access the current resource that needs to do the emitting.\n\nThis is all packaged up in a Resource.js. So now let's take a look at the JavaScript code that is using this.\n\n<span class=\"filename\">ext-emitter.js</span>\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">var Resource = require('./resource');\n\nvar r = new Resource(7);\n\nr.on('start', function() {\n    console.log(\"I've started!\");\n});\n\nr.on('data', function(d) {\n    console.log(\"   I received data -> \" + d);\n});\n\nr.on('end', function(t) {\n    console.log(\"I'm done, with \" + t + \" data events.\");\n});</code></pre>\n\n**[1]** In our main script file we have a **Require** statement and here, because we're requiring another JavaScript file in our project, we have the dot slash and then the name of the file which is Resource.js, and we're storing it in a Resource variable.\n\n**[3]** So in this example, instead of simply calling a function and getting an instance of an EventEmitter back, we're instantiating our Resource object and getting that back here and the variable **r**.\n\nBut once we do that, we're subscribing to the same events we did before.\n\nSo let's run this and see if we get what we expect.\n\n<span class=\"filename\">Terminal</span>\n```bash\n$ node ext-emitter.js\nI've started!\n   I received data -> 1\n   I received data -> 2\n   I received data -> 3\n   I received data -> 4\n   I received data -> 5\n   I received data -> 6\n   I received data -> 7\nI'm done, with 7 data events.\n```\n\nAnd, yes, as you would expect, we're getting the -- I've started, the **start** event, and then seven **data** events because we passed in a seven, and then the **end** event.\n\nSo the net effect, at least in the console, is the same. But these are the two types of patterns that you'll see from time to time.\n\nYou may have an actual object that you instantiate that emits Events, or you may have a case where you call a function and get an EventEmitter back.\n\n---\n\n###### Readable and Writable Streams, the Pipe function ######\n\nBuilding on the concept of an **EventEmitter** is something that Node calls a **stream**.\n\n![](https://s3.amazonaws.com/pixbit-playbook/1-node-intro-m3/3-node-intro-m3-streams-slides-6.jpg)\n\nA stream extends the EventEmitter class and implements an agreed-upon set of events and other functions. These events provide a unified abstraction for dealing with multiple types of dataflow, including network traffic such as; **http** and **tcp** traffic, **File I/O**, **standard in/out**, and **error**, and more.\n\n> Each stream is an instance of either a **ReadableStream**, meaning something that you would read from, a **WriteableStream**, something that you would write to, or both.\n\nAlso, because of the standard events and functions exposed in both **Readable** and **WriteableStreams**, a **ReadableStream** can be piped to a **WriteableStream**.\n\nThis is conceptually similar to piping commands in Unix where the data read from the **ReadableStream** is piped to the **WriteableStream**.\n\nNode handles the **backpressure** and to address the scenario where a **ReadableStream** provides data faster than a **WriteableStream** can consume it.\n\nThe interface of a **ReadableStream** includes:\n\n- a Boolean indicating whether the stream is currently readable or not\n- a series of events that are emitted when new data arrives or when there is no more data, etc.\n- a series of functions to pause, resume, and destroy the stream\n- as well as the pipe function\n\nAnd the interface to a **WriteableStream** includes:\n\n- a similar Boolean indicating whether this stream is currently writeable\n- events that are emitted such as drain when it is safe to write to this stream\n- and pipe when this stream has been passed to a ReadableStream's pipe function\n- functions to write data to the stream\n- and functions to terminate it\n\nWhile you can certainly interact with streams directly by subscribing to events and invoking functions directly, the real power of streams comes from the **pipe** function.\n\nNow that we've briefly covered some of the functions and events and Readable and WriteableStreams, let's see how these work together to provide the pipe functionality.\n\nWhen you invoke the pipe function on a ReadableStream, you pass as a parameter the WriteableStream you want to pipe to.\n\nThis in turn emits the pipe event on the WriteableStream.\n\nThe pipe function then begins an orchestration of events and functions between the two streams.\n\nWhen data arrives to the ReadableStream, the data event is emitted and the write function on the WriteableStream is invoked with this data. If at some point the write function returns a false value indicating that no more data should be written, the pause function of the ReadableStream is called \"to stop the flow of data.\" Then, once the WriteableStream is ready to receive more data, the drain event is emitted and the resume function on the ReadableStream is invoked. Once the ReadableStream is finished, the End event is emitted and the End function on the WriteableStream is invoked. This elaborate dance happens behind a very simple interface and one that is consistent across network, file, and process communication. Let's take a look at some Stream examples.\n\n---\n\n###### Demo: Readable and Writable Streams ######\n\nSo first, we'll take a look at a ReadableStream. So to do this, we're going to use the Request Module. And if you remember from Module Two the Request Module is a third-party module that we've installed from the npm registry. We've already done that here and we're going to Require and Request and store it in the Request variable. One of the nice things about Request is it understands and makes very good use of streams. And so here, by simply calling Request and passing it in the name of a URL, it will return to us a stream. And then, because, if you remember, streams inherit from EventEmitters, we can use the On function to subscribe to some of the events that are emitted from a ReadableStream. So the Data event is emitted whenever new Data has been received, and the End event is emitted when there's no more data to be read. And so we subscribe to these two events and what Request does is the stream that it gives you back is actually the body of the Response of the Request. So, in our example, it should be the html of the Pluralsight Homepage, and so as the Data for that Homepage comes back, we'll get some number of Data events and the function that we're asking it to invoke on the Data event. The parameter that's passed to it is the actual Data that it received. And so we want to log that to the console, and then our tags -- or if you want to call them that, that we added. So let's go back to the bottom. Done is there. So our End event was emitted and we printed Done. Now let's scroll back through and look for our Data with the angle brackets. So if we see (scrolling sound) -- there's one. So that means this was the start of one of the chunks. (Scrolling sound) And we keep scrolling. And there's another one. (Scrolling sound) And so on and so forth. So what happens is as the html is being returned from the http request, those Data events are being fired and pieces of the html are being sent to the functions being registered to that Data event. And, of course, we're just printing them to the console. This is how you would interact with the ReadableStream. Next we'll take a look at a WriteableStream. So in this case, the example we're going to use for the WriteableStream is processed.standardout. The Process module has several streams that it makes available. One is StandardIn. One is StandardOut and another is StandardError. So, in this case, we wanted a WriteableStream, so we're going to use StandardOut. And in this case what we're doing is we're simply writing out Hello, and then writing out World. And we're also going to inspect the Boolean variable just to make sure that this StandardOut really is Writeable. So, let's run this. And so it's simple enough. Is it Writeable? Yes, and prints out True. And the Write function does what you would expect. It takes each of those and just simply writes them to StandardOut.\n\n---\n\n###### Demo: Piping Between Streams ######\n\nSo now we're going to take a look at piping a ReadableStream to a WriteableStream. And so we're basically going to combine the previous two examples together. Here, in this case, we have our Request module that we've required and stored in our Request to variable. And similar to our ReadableStream example, we're going to call Request on the Pluralsight Homepage, and store that stream that's returned in the Variable S. But now, instead of listening for events on that ReadableStream, we're going to simply call the pipe function, and we're going to pipe it to our WriteableStream, which in this case, we're going to use the WriteableStream from our second example, Process.StandardOut. And so what this should do is take the html returned from the Request and simply pipe it to the console. So let's run this and see what we get. Piping the Request to StandardOut simply dumps everything that came back just straight to StandardOut. Now, of course, you could also simply chain these together and call Request and because Request is going to return to you a stream you could simply, on the end of the Request, do .pipe and then pipe it to the WriteableStream. This will, in essence, do the exact same thing as the code above it that's commented out. But let's just run it to prove that to ourselves. Yep, and so it does exactly the same thing. Now here is an example that's a little bit different than before. So now what we're going to do is take the same Request of the same Webpage. But now, instead of piping it to the console, what we're going to do is pipe it to a file on the file system. And so to do this, we're using the FS module, which is another built-in Node module, and we're bringing it in and storing it as the FS variable, and FS is for the File System. And so here what we're doing is calling the CreateWriteStream function on the FS module which says I want you to create me a writeable stream that will store the contents in this file and return me that stream. Because the CreateWriteStream function returns a stream, we've simply put that function invocation as the parameter to the pipe function. So here we're saying, okay, I want you to request this Website and I want you to pipe it to the stream returned by the CreateWriteStream function which will create this file. So when we're done, we should be able to run this one line of code, download this html from their Homepage, and write it to a file. Let's try that. ( Typing Sounds ) It ran and it's complete, so now let's do an LS and see what we have. So we have our Pluralsight.html file. In fact, if we (typing sounds) -- we can see that it does have a size to it, and if we want to add to the console we can... ( Typing Sounds ) We can see that that file does indeed contain html from the Pluralsight Homepage. So, in one line of code you can download a Webpage and write it to a file. So what we're going to do for our last example is take our previous one one step further. If you remember from our slides, we mentioned that a stream can either be a ReadableStream, a WriteableStream, or both. In this case we're going to show a stream that is both readable and writeable. So what we've done is taken our Request, a Website -- or a Webpage -- and write it to a file, and we've injected into the middle of it the ability to gzip the data on the way into the file. And so what we have is Node has another built-in module called zlib, and so we've required that. And what we have is our Request function which we never turned to stream, and so on that stream we're calling pipe, and then what we're passing to pipe is actually the results of zlib.creategzip. So what create.gzip does is return a stream that's both readable and writeable that will read in uncompressed content and output compressed content. And so we call that function. We'll get that stream back. We pass that to pipe. The pipe function, as its return value, will return the stream that you passed into pipe. And the reason that it works that way is explicitly so you can chain these together. So, when we pass in the stream that was returned from the create.gzip function into pipe, the return value of this pipe function is actually the stream. So on that stream, we can call pipe. And pipe that output to our CreateWriteStream function call. But in this case, we're going to name the file Pluralsight.html.gz because in this case it's gzipped. So, we'll execute our request, get the Data back, pipe it through our gzip stream and then pipe it onto a file. So, let's run this and see what we get. ( Typing Sounds ) Okay. So it's done. Now let's do an LS (typing sounds) and see what we have. Okay. So now we do have a Pluralsight.html.gz. If you'll notice, it is a good bit smaller than the .html which would lead us to assume that it is obviously compressed. But now, let's actually look at the contents of that file and just to prove it to ourselves. So if we use a zcat command... ( Typing Sounds ) ...to print that out. And there you go. You'll see that it is the actual html. You can get very, very creative with these chaining of the pipes together, and it just shows how much you can do in a very small amount of code with the benefit of this pipe command. And if you remember from the slides of all the back and forth with the pause, and drain, and resume, and all that -- I mean, all of that is in place here in-between each one of these pipes to manage the flow of the data from one to the other.\n\n---\n\n###### Conclusion ######\n\nSo, in conclusion, in this module we examined the differences between callbacks and events for implementing non-blocking asynchronous code. We then looked at the EventEmitter class and two common patterns for using it. From there, we moved on to Readable and WriteableStreams including, piping data from one to the other. I hope this module has been helpful in introducing you to the concepts of EventEmitters and streams and their js. Thank you. ( Silence )\n\n---\n\n<a class=\"prev-article\" href=\"/introduction-to-node-js-modules-require-and-npm/\" style=\"width: 50%;\">Modules, require(), and NPM</a><a class=\"next-article\" href=\"\" style=\"float: right;width: 50%;text-align: right;\"></a>","html":"<h6 id=\"introduction\">Introduction</h6>\n\n<p>In this module we'll discuss the <strong>differences between callbacks and events</strong>.</p>\n\n<p>We'll look at <strong>Node's EventEmmiter class</strong> as well as a couple of patterns for using <strong>Event Emitters</strong>.</p>\n\n<p>We'll then move on to <strong>Readable and WriteableStreams and piping between streams</strong>.</p>\n\n<p><img src=\"https://s3.amazonaws.com/pixbit-playbook/1-node-intro-m3/3-node-intro-m3-streams-slides-2.jpg\" alt=\"\" /></p>\n\n<p>So let's get started.</p>\n\n<hr />\n\n<h6 id=\"eventsandtheeventemitterclass\">Events and the EventEmitter class</h6>\n\n<p>So far, we've looked at callbacks as a way to implement asynchronous non-blocking code.</p>\n\n<p>Node provides another way to achieve this with Events.</p>\n\n<p>Here is a <strong>callback example</strong> similar to what we've seen so far. It's a function which invokes a callback with an array of results.</p>\n\n<p><img src=\"https://s3.amazonaws.com/pixbit-playbook/1-node-intro-m3/3-node-intro-m3-streams-slides-3.jpg\" alt=\"\" /></p>\n\n<p>Here is a similar snippet of code written using <strong>Events</strong>.</p>\n\n<p>In this case, the <strong>getThem</strong> function returns a value immediately. The value is an instance of the <strong>EventEmmiter</strong> class.</p>\n\n<ul>\n<li>This <strong>results</strong> object has an <strong>on</strong> function. Here we are specifying that for each <strong>item</strong> event, execute this function passing in the current item.</li>\n<li>Then, on the <strong>done</strong> event, or when there are no more results, invoke this function.</li>\n<li>And if there is an <strong>error</strong>, invoke this function and pass in the error that occurred.</li>\n</ul>\n\n<p>Some of the key differences between these two approaches are:</p>\n\n<hr />\n\n<h6 id=\"callbackmodel\">Callback Model</h6>\n\n<blockquote>\n  <p>In the <strong>Callback</strong> Model, you make a <strong>request</strong> and <strong>provide a function to be called when the request is completed</strong>. One request, one reply.</p>\n</blockquote>\n\n<p>In the Callback approach, you don't receive any results until you receive all the results.</p>\n\n<p>In the example above, the callback will not be invoked until the entire items array is ready.</p>\n\n<p>If these items arrive slowly, the callback will not be invoked until the last item has arrived.</p>\n\n<p>It also means that the <strong>getThem</strong> function will be <strong>storing the entire list of items in memory while accumulating them prior to invoking the callback with the entire array</strong>.</p>\n\n<p>Finally, the <strong>Callback</strong> scenario, if only by convention, is an all or nothing proposition. While technically possible to invoke a callback with both error and items parameters, this is not the convention and would not be expected. If the error parameter is set, then the call is assumed to have failed.</p>\n\n<hr />\n\n<h6 id=\"eventmodel\">Event Model</h6>\n\n<blockquote>\n  <p>In the <strong>Event</strong> Model, however, is more of a <strong>publish/subscribe</strong> approach. You can invoke the <strong>on</strong> function repeatedly to provide multiple functions to invoke on each event; in essence, subscribing to the events.</p>\n</blockquote>\n\n<p>In the example above, functions associated with the <strong>item</strong> event will be invoked for each item.</p>\n\n<p>This gives you the opportunity to act on the first item as soon as it arrives and the second item and so forth.</p>\n\n<p>It also means that the <strong>getThem</strong> function is not accumulating the items in memory.</p>\n\n<p>In the <strong>evented</strong> scenario, however, an <strong>error</strong> is emitted as a separate event. Notice that the item and done events do not pass in an error parameter as the first value.</p>\n\n<p>In this evented approach, <strong>the error can be emitted instead of any item events or after some item events have already been omitted</strong>. This access to partial results may be desirable in some situations.</p>\n\n<hr />\n\n<h6 id=\"nodeseventemitterclass\">Node's EventEmitter Class</h6>\n\n<p>The <strong>EventEmitter Class</strong> is provided by Node as a construct for building these <strong>event-driven interfaces</strong>.</p>\n\n<p><img src=\"https://s3.amazonaws.com/pixbit-playbook/1-node-intro-m3/3-node-intro-m3-streams-slides-4.jpg\" alt=\"\" /></p>\n\n<p>The code that is subscribing to events, like the code in our last slide (<strong>results</strong>), will call the <strong>on</strong> function of the <strong>EventEmitter</strong> instance and <strong>specify the event being subscribed to</strong>.</p>\n\n<p>And then the code publishing events will call the Emit function and specify the event being emitted. Now <strong>these events themselves are simply strings and can be of any value</strong>.</p>\n\n<p>In our previous example, we defined three events; <strong>item</strong>, <strong>done</strong>, and <strong>error</strong>.</p>\n\n<p>When emitting an event, you can also provide additional arguments after the event name. These will pass as parameters to any functions subscribed to that event.</p>\n\n<p>In our previous example, this included the item itself (<strong>i</strong>) that was passed to the item event, as well as, the error object passed to the error event.</p>\n\n<p>This set of events and their arguments constitute an interface, or contract, between the subscriber and the publisher, or emitter.</p>\n\n<p>There are two common patterns I've seen for using EventEmitters in Node:</p>\n\n<ul>\n<li>The first is as a return value from a function. This is what we saw on the earlier slide. In this case, an instance of EventEmitter is created directly and returned from a function.</li>\n<li>Another common pattern is when an object extends EventEmitter and emits events while also providing other functions and values.</li>\n</ul>\n\n<p>Let's take a look at an example of both of these EventEmitter patterns.</p>\n\n<hr />\n\n<h6 id=\"demoreturninganeventemitterfromafunction\">Demo: Returning an EventEmitter from a function</h6>\n\n<p>So, in our EventEmitter examples, the first thing we're going to look at is the first pattern that we talked about on the slides, which is the example where you actually <strong>instantiate an EventEmitter and return it from a function call</strong>.</p>\n\n<p><span class=\"filename\">events.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"4,7,9,11,16,21,25,29\"><code class=\"language-javascript\">var EventEmitter = require('events').EventEmitter;\n\nvar getResource = function(c) {  \n    var e = new EventEmitter();\n    process.nextTick(function() {\n        var count = 0;\n        e.emit('start');\n        var t = setInterval(function () {\n            e.emit('data', ++count);\n            if (count <mark>= c) {\n                e.emit('end', count);\n                clearInterval(t);\n            }\n        }, 10);\n    });\n    return(e);\n};\n\nvar r = getResource(5);\n\nr.on('start', function() {  \n    console.log(\"I've started!\");\n});\n\nr.on('data', function(d) {  \n    console.log(\"   I received data -> \" + d);\n});\n\nr.on('end', function(t) {  \n    console.log(\"I'm done, with \" + t + \" data events.\");\n});</code></pre>\n\n<p><strong>[3-17]</strong> So, here we have a getResource function which takes in a number and returns an instance of an EventEmitter that emits three events; a Start event, a Data event, and an End event.</p>\n\n<p><strong>[7,9,11]</strong> This is a good demonstration of how these event names can be really whatever you want. In our slides we had Item and Done, and Error. In here we have Start, and Data, and End.</p>\n\n<p><strong>[21-23]</strong> And what we're saying is whenever I see the Start event, I want you to log this to the console.</p>\n\n<p><strong>[25-27]</strong> And whenever I see the Data event, I want you to log this to the console, including the data that was sent.</p>\n\n<p><strong>[29-31]</strong> And then, on the End event, let's log this to the console.</p>\n\n<p>Let's run this and see what we get.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ node events.js\nI've started!  \n   I received data -&gt; 1\n   I received data -&gt; 2\n   I received data -&gt; 3\n   I received data -&gt; 4\n   I received data -&gt; 5\nI'm done, with 5 data events.  \n</code></pre>\n\n<p>And so here you can see we have the I've started which was the reaction to the <strong>start</strong> event. And then we got five <strong>data</strong> events, and one <strong>end</strong> event that says \"I'm done\".</p>\n\n<p>Now the five is because we passed in five and that's how many -- that's the way this function is coded. Whatever number you pass in, that's how many data events you're going to get back.</p>\n\n<p>That was us subscribing to those events and printing something out to the console.</p>\n\n<p>Now let's take a look at the getResource function itself, and see what it does.</p>\n\n<p><span class=\"filename\">events.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">var EventEmitter = require('events').EventEmitter;\n\nvar getResource = function(c) {  \n    var e = new EventEmitter();\n    process.nextTick(function() {\n        var count = 0;\n        e.emit('start');\n        var t = setInterval(function () {\n            e.emit('data', ++count);\n            if (count </mark>= c) {\n                e.emit('end', count);\n                clearInterval(t);\n            }\n        }, 10);\n    });\n    return(e);\n};\n\nvar r = getResource(5);\n\nr.on('start', function() {  \n    console.log(\"I've started!\");\n});\n\nr.on('data', function(d) {  \n    console.log(\"   I received data -> \" + d);\n});\n\nr.on('end', function(t) {  \n    console.log(\"I'm done, with \" + t + \" data events.\");\n});</code></pre>\n\n<p><strong>[4]</strong> Now the first thing that it does is we instantiate a new <strong>EventEmitter</strong>.</p>\n\n<p><strong>[1]</strong> And you'll notice that in order to do that, we had to <strong>require an EventEmitter</strong> and by doing that we used Node's built-in events module. Because we only wanted the EventEmitter from that events module, we specified that as part of the required and put that in our own EventEmitter variable.</p>\n\n<p><strong>[5]</strong> And so we instantiate one of those and then now this <strong>process nextTick</strong> is something we haven't seen before. In our first module we looked at <strong>SetTimeOut</strong> and <strong>SetInterval</strong>. And <strong>process nextTick</strong> is similar but what it really <strong>says is on the very next tick of the event loop I want you to run this function</strong>.</p>\n\n<p>And in this example we're really using that to emulate an asynchronous function because what we want is we want the return value here to be called before we start emitting events and as would normally be the case if you were, you know, talking to file system or a database.</p>\n\n<p><strong>[7]</strong> So what we say is, <strong>on the next tick of the event loop I want you to emit a Start event</strong>. It's our EventEmitter. We're emitting a <strong>start</strong> event.</p>\n\n<p><strong>[8]</strong> And then now we're going to set an Interval.</p>\n\n<p><strong>[14]</strong> And what we're saying is, every 10 milliseconds I want you to execute this function.</p>\n\n<p><strong>[9]</strong> And then this function we're emitting our <strong>data</strong> event. We're keeping a count of how many <strong>data</strong> events we've emitted so far. We start at zero and then we keep a count.</p>\n\n<p><strong>[10]</strong> And if the count is equal to the number that was passed in,</p>\n\n<p><strong>[11]</strong> we're going to emit an <strong>end</strong> event</p>\n\n<p><strong>[12]</strong> and then clear that interval to stop the function from being executed.</p>\n\n<p>This is an example of the first pattern of using an EventEmitter. Now let's take a look at the second pattern.</p>\n\n<hr />\n\n<h6 id=\"demoinheritingfromeventemitter\">Demo: Inheriting from EventEmitter</h6>\n\n<p>In this second example, we're going to take a look at the second pattern we discussed earlier where we have an object that extends the <strong>EventEmitter</strong> class.</p>\n\n<p>So what we've done is we've taken our original example and basically cut it in half, and we've taken the code that emits the events and separated it out into a separate JavaScript file. So let's start by taking a look at that file.</p>\n\n<p>So here you'll see we have a function called Resource which takes a number, and I've hidden the contents of the function for now.</p>\n\n<p>We'll get to that in just a minute.</p>\n\n<p>But what this function basically does -- this is <strong>r</strong> object, and <strong>r</strong> object extends or inherits from EventEmitter.</p>\n\n<p><span class=\"filename\">resource.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"3,25\"><code class=\"language-javascript\">// For use with ext-eventemitter.js\n\nvar util = require('util');  \nvar EventEmitter = require('events').EventEmitter;\n\nfunction Resource (m) {\n\n    var maxEvents = m;\n    var self = this;\n\n    process.nextTick(function() {\n        var count = 0;\n        self.emit('start');\n        var t = setInterval(function () {\n            self.emit('data', ++count);\n            if (count === maxEvents) {\n                self.emit('end', count);\n                clearInterval(t);\n            }\n        }, 10);\n    });\n\n};\n\nutil.inherits(Resource, EventEmitter);\n\nmodule.exports = Resource;</code></pre>\n\n<p><strong>[3]</strong> So in order to do that, we're using Node's <strong>util</strong> module which we've <strong>required</strong> here.</p>\n\n<p><strong>[25]</strong> It's a built-in module and it has an Inherits function. And what we've said is, we want our resource object to inherit from the EventEmitter object, which gives us access to the <strong>on</strong> function and the <strong>emit</strong> function</p>\n\n<p><strong>[27]</strong> and also, because we want scripts that included this file as a module, to have access to our resource object. We set module.exports equal to resource.</p>\n\n<p>Now if we look down inside the code for the Resource function, you'll see that it's almost identical to what we saw in our getResource function.</p>\n\n<p><strong>[11]</strong> process.netTick is here.</p>\n\n<p><strong>[13,15,17]</strong> The Events are emitted here.</p>\n\n<p>The only difference is that because in our previous example, we were instantiating an <strong>EventEmitter</strong> and <strong>using that instantiated variable to call the Emit function</strong>.</p>\n\n<p>In this case <strong>because our Resource function inherits from EventEmitter</strong>. It is <strong>our Resource function that's doing the emitting of the events</strong> and so we need to use the \"<strong>this</strong>\" variable to access the current resource that needs to do the emitting.</p>\n\n<p>This is all packaged up in a Resource.js. So now let's take a look at the JavaScript code that is using this.</p>\n\n<p><span class=\"filename\">ext-emitter.js</span>  </p>\n\n<pre class=\"line-numbers\" data-start=\"\" data-line=\"\"><code class=\"language-javascript\">var Resource = require('./resource');\n\nvar r = new Resource(7);\n\nr.on('start', function() {  \n    console.log(\"I've started!\");\n});\n\nr.on('data', function(d) {  \n    console.log(\"   I received data -> \" + d);\n});\n\nr.on('end', function(t) {  \n    console.log(\"I'm done, with \" + t + \" data events.\");\n});</code></pre>\n\n<p><strong>[1]</strong> In our main script file we have a <strong>Require</strong> statement and here, because we're requiring another JavaScript file in our project, we have the dot slash and then the name of the file which is Resource.js, and we're storing it in a Resource variable.</p>\n\n<p><strong>[3]</strong> So in this example, instead of simply calling a function and getting an instance of an EventEmitter back, we're instantiating our Resource object and getting that back here and the variable <strong>r</strong>.</p>\n\n<p>But once we do that, we're subscribing to the same events we did before.</p>\n\n<p>So let's run this and see if we get what we expect.</p>\n\n<p><span class=\"filename\">Terminal</span>  </p>\n\n<pre><code class=\"language-bash\">$ node ext-emitter.js\nI've started!  \n   I received data -&gt; 1\n   I received data -&gt; 2\n   I received data -&gt; 3\n   I received data -&gt; 4\n   I received data -&gt; 5\n   I received data -&gt; 6\n   I received data -&gt; 7\nI'm done, with 7 data events.  \n</code></pre>\n\n<p>And, yes, as you would expect, we're getting the -- I've started, the <strong>start</strong> event, and then seven <strong>data</strong> events because we passed in a seven, and then the <strong>end</strong> event.</p>\n\n<p>So the net effect, at least in the console, is the same. But these are the two types of patterns that you'll see from time to time.</p>\n\n<p>You may have an actual object that you instantiate that emits Events, or you may have a case where you call a function and get an EventEmitter back.</p>\n\n<hr />\n\n<h6 id=\"readableandwritablestreamsthepipefunction\">Readable and Writable Streams, the Pipe function</h6>\n\n<p>Building on the concept of an <strong>EventEmitter</strong> is something that Node calls a <strong>stream</strong>.</p>\n\n<p><img src=\"https://s3.amazonaws.com/pixbit-playbook/1-node-intro-m3/3-node-intro-m3-streams-slides-6.jpg\" alt=\"\" /></p>\n\n<p>A stream extends the EventEmitter class and implements an agreed-upon set of events and other functions. These events provide a unified abstraction for dealing with multiple types of dataflow, including network traffic such as; <strong>http</strong> and <strong>tcp</strong> traffic, <strong>File I/O</strong>, <strong>standard in/out</strong>, and <strong>error</strong>, and more.</p>\n\n<blockquote>\n  <p>Each stream is an instance of either a <strong>ReadableStream</strong>, meaning something that you would read from, a <strong>WriteableStream</strong>, something that you would write to, or both.</p>\n</blockquote>\n\n<p>Also, because of the standard events and functions exposed in both <strong>Readable</strong> and <strong>WriteableStreams</strong>, a <strong>ReadableStream</strong> can be piped to a <strong>WriteableStream</strong>.</p>\n\n<p>This is conceptually similar to piping commands in Unix where the data read from the <strong>ReadableStream</strong> is piped to the <strong>WriteableStream</strong>.</p>\n\n<p>Node handles the <strong>backpressure</strong> and to address the scenario where a <strong>ReadableStream</strong> provides data faster than a <strong>WriteableStream</strong> can consume it.</p>\n\n<p>The interface of a <strong>ReadableStream</strong> includes:</p>\n\n<ul>\n<li>a Boolean indicating whether the stream is currently readable or not</li>\n<li>a series of events that are emitted when new data arrives or when there is no more data, etc.</li>\n<li>a series of functions to pause, resume, and destroy the stream</li>\n<li>as well as the pipe function</li>\n</ul>\n\n<p>And the interface to a <strong>WriteableStream</strong> includes:</p>\n\n<ul>\n<li>a similar Boolean indicating whether this stream is currently writeable</li>\n<li>events that are emitted such as drain when it is safe to write to this stream</li>\n<li>and pipe when this stream has been passed to a ReadableStream's pipe function</li>\n<li>functions to write data to the stream</li>\n<li>and functions to terminate it</li>\n</ul>\n\n<p>While you can certainly interact with streams directly by subscribing to events and invoking functions directly, the real power of streams comes from the <strong>pipe</strong> function.</p>\n\n<p>Now that we've briefly covered some of the functions and events and Readable and WriteableStreams, let's see how these work together to provide the pipe functionality.</p>\n\n<p>When you invoke the pipe function on a ReadableStream, you pass as a parameter the WriteableStream you want to pipe to.</p>\n\n<p>This in turn emits the pipe event on the WriteableStream.</p>\n\n<p>The pipe function then begins an orchestration of events and functions between the two streams.</p>\n\n<p>When data arrives to the ReadableStream, the data event is emitted and the write function on the WriteableStream is invoked with this data. If at some point the write function returns a false value indicating that no more data should be written, the pause function of the ReadableStream is called \"to stop the flow of data.\" Then, once the WriteableStream is ready to receive more data, the drain event is emitted and the resume function on the ReadableStream is invoked. Once the ReadableStream is finished, the End event is emitted and the End function on the WriteableStream is invoked. This elaborate dance happens behind a very simple interface and one that is consistent across network, file, and process communication. Let's take a look at some Stream examples.</p>\n\n<hr />\n\n<h6 id=\"demoreadableandwritablestreams\">Demo: Readable and Writable Streams</h6>\n\n<p>So first, we'll take a look at a ReadableStream. So to do this, we're going to use the Request Module. And if you remember from Module Two the Request Module is a third-party module that we've installed from the npm registry. We've already done that here and we're going to Require and Request and store it in the Request variable. One of the nice things about Request is it understands and makes very good use of streams. And so here, by simply calling Request and passing it in the name of a URL, it will return to us a stream. And then, because, if you remember, streams inherit from EventEmitters, we can use the On function to subscribe to some of the events that are emitted from a ReadableStream. So the Data event is emitted whenever new Data has been received, and the End event is emitted when there's no more data to be read. And so we subscribe to these two events and what Request does is the stream that it gives you back is actually the body of the Response of the Request. So, in our example, it should be the html of the Pluralsight Homepage, and so as the Data for that Homepage comes back, we'll get some number of Data events and the function that we're asking it to invoke on the Data event. The parameter that's passed to it is the actual Data that it received. And so we want to log that to the console, and then our tags -- or if you want to call them that, that we added. So let's go back to the bottom. Done is there. So our End event was emitted and we printed Done. Now let's scroll back through and look for our Data with the angle brackets. So if we see (scrolling sound) -- there's one. So that means this was the start of one of the chunks. (Scrolling sound) And we keep scrolling. And there's another one. (Scrolling sound) And so on and so forth. So what happens is as the html is being returned from the http request, those Data events are being fired and pieces of the html are being sent to the functions being registered to that Data event. And, of course, we're just printing them to the console. This is how you would interact with the ReadableStream. Next we'll take a look at a WriteableStream. So in this case, the example we're going to use for the WriteableStream is processed.standardout. The Process module has several streams that it makes available. One is StandardIn. One is StandardOut and another is StandardError. So, in this case, we wanted a WriteableStream, so we're going to use StandardOut. And in this case what we're doing is we're simply writing out Hello, and then writing out World. And we're also going to inspect the Boolean variable just to make sure that this StandardOut really is Writeable. So, let's run this. And so it's simple enough. Is it Writeable? Yes, and prints out True. And the Write function does what you would expect. It takes each of those and just simply writes them to StandardOut.</p>\n\n<hr />\n\n<h6 id=\"demopipingbetweenstreams\">Demo: Piping Between Streams</h6>\n\n<p>So now we're going to take a look at piping a ReadableStream to a WriteableStream. And so we're basically going to combine the previous two examples together. Here, in this case, we have our Request module that we've required and stored in our Request to variable. And similar to our ReadableStream example, we're going to call Request on the Pluralsight Homepage, and store that stream that's returned in the Variable S. But now, instead of listening for events on that ReadableStream, we're going to simply call the pipe function, and we're going to pipe it to our WriteableStream, which in this case, we're going to use the WriteableStream from our second example, Process.StandardOut. And so what this should do is take the html returned from the Request and simply pipe it to the console. So let's run this and see what we get. Piping the Request to StandardOut simply dumps everything that came back just straight to StandardOut. Now, of course, you could also simply chain these together and call Request and because Request is going to return to you a stream you could simply, on the end of the Request, do .pipe and then pipe it to the WriteableStream. This will, in essence, do the exact same thing as the code above it that's commented out. But let's just run it to prove that to ourselves. Yep, and so it does exactly the same thing. Now here is an example that's a little bit different than before. So now what we're going to do is take the same Request of the same Webpage. But now, instead of piping it to the console, what we're going to do is pipe it to a file on the file system. And so to do this, we're using the FS module, which is another built-in Node module, and we're bringing it in and storing it as the FS variable, and FS is for the File System. And so here what we're doing is calling the CreateWriteStream function on the FS module which says I want you to create me a writeable stream that will store the contents in this file and return me that stream. Because the CreateWriteStream function returns a stream, we've simply put that function invocation as the parameter to the pipe function. So here we're saying, okay, I want you to request this Website and I want you to pipe it to the stream returned by the CreateWriteStream function which will create this file. So when we're done, we should be able to run this one line of code, download this html from their Homepage, and write it to a file. Let's try that. ( Typing Sounds ) It ran and it's complete, so now let's do an LS and see what we have. So we have our Pluralsight.html file. In fact, if we (typing sounds) -- we can see that it does have a size to it, and if we want to add to the console we can... ( Typing Sounds ) We can see that that file does indeed contain html from the Pluralsight Homepage. So, in one line of code you can download a Webpage and write it to a file. So what we're going to do for our last example is take our previous one one step further. If you remember from our slides, we mentioned that a stream can either be a ReadableStream, a WriteableStream, or both. In this case we're going to show a stream that is both readable and writeable. So what we've done is taken our Request, a Website -- or a Webpage -- and write it to a file, and we've injected into the middle of it the ability to gzip the data on the way into the file. And so what we have is Node has another built-in module called zlib, and so we've required that. And what we have is our Request function which we never turned to stream, and so on that stream we're calling pipe, and then what we're passing to pipe is actually the results of zlib.creategzip. So what create.gzip does is return a stream that's both readable and writeable that will read in uncompressed content and output compressed content. And so we call that function. We'll get that stream back. We pass that to pipe. The pipe function, as its return value, will return the stream that you passed into pipe. And the reason that it works that way is explicitly so you can chain these together. So, when we pass in the stream that was returned from the create.gzip function into pipe, the return value of this pipe function is actually the stream. So on that stream, we can call pipe. And pipe that output to our CreateWriteStream function call. But in this case, we're going to name the file Pluralsight.html.gz because in this case it's gzipped. So, we'll execute our request, get the Data back, pipe it through our gzip stream and then pipe it onto a file. So, let's run this and see what we get. ( Typing Sounds ) Okay. So it's done. Now let's do an LS (typing sounds) and see what we have. Okay. So now we do have a Pluralsight.html.gz. If you'll notice, it is a good bit smaller than the .html which would lead us to assume that it is obviously compressed. But now, let's actually look at the contents of that file and just to prove it to ourselves. So if we use a zcat command... ( Typing Sounds ) ...to print that out. And there you go. You'll see that it is the actual html. You can get very, very creative with these chaining of the pipes together, and it just shows how much you can do in a very small amount of code with the benefit of this pipe command. And if you remember from the slides of all the back and forth with the pause, and drain, and resume, and all that -- I mean, all of that is in place here in-between each one of these pipes to manage the flow of the data from one to the other.</p>\n\n<hr />\n\n<h6 id=\"conclusion\">Conclusion</h6>\n\n<p>So, in conclusion, in this module we examined the differences between callbacks and events for implementing non-blocking asynchronous code. We then looked at the EventEmitter class and two common patterns for using it. From there, we moved on to Readable and WriteableStreams including, piping data from one to the other. I hope this module has been helpful in introducing you to the concepts of EventEmitters and streams and their js. Thank you. ( Silence )</p>\n\n<hr />\n\n<p><a class=\"prev-article\" href=\"/introduction-to-node-js-modules-require-and-npm/\" style=\"width: 50%;\">Modules, require(), and NPM</a><a class=\"next-article\" href=\"\" style=\"float: right;width: 50%;text-align: right;\"></a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1431272408850,"created_by":1,"updated_at":1431317041411,"updated_by":1,"published_at":1431272466329,"published_by":1}],"users":[{"id":1,"uuid":"9f196e17-1d0f-4a7b-9991-e29107b61817","name":"Edwin Estrada","slug":"edwin","password":"$2a$10$JB7SqzvouW3PNx7qqMEQvOaW21hxnDmTycUfq7cn5sDtuLSaBADMK","email":"edwin@thinkpixbit.com","image":"//www.gravatar.com/avatar/e25062cb539202bf3f10410353249f43?s=250&d=mm&r=x","cover":null,"bio":null,"website":null,"location":null,"accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"last_login":1431305495456,"created_at":1430253200250,"created_by":1,"updated_at":1431305495456,"updated_by":1},{"id":2,"uuid":"0eebee16-67a9-4aa5-8803-27de71363fcb","name":"Seth Rhodes","slug":"seth-rhodes","password":"2","email":"seth@thinkpixbit.com","image":null,"cover":null,"bio":null,"website":null,"location":null,"accessibility":null,"status":"locked","language":"en_US","meta_title":null,"meta_description":null,"last_login":1426689361853,"created_at":1431202152725,"created_by":1,"updated_at":1431202152725,"updated_by":1},{"id":3,"uuid":"7d1e7da0-3ac1-4782-8cde-9d51dd2d9102","name":"Edwin Estrada","slug":"edwin-2","password":"2","email":"edwin.estradae@gmail.com","image":"//www.gravatar.com/avatar/c7441ebcd48a51f7c9d3b01829aaf090?s=250&d=mm&r=x","cover":null,"bio":null,"website":null,"location":null,"accessibility":null,"status":"locked","language":"en_US","meta_title":null,"meta_description":null,"last_login":1425396651488,"created_at":1431202153016,"created_by":1,"updated_at":1431202153016,"updated_by":1}],"roles":[{"id":1,"uuid":"4ddddd88-b650-443d-bcf7-bdd6636fa4d9","name":"Administrator","description":"Administrators","created_at":1430253199697,"created_by":1,"updated_at":1430253199697,"updated_by":1},{"id":2,"uuid":"36eb032f-fb17-42e1-a28a-addbf9098376","name":"Editor","description":"Editors","created_at":1430253199697,"created_by":1,"updated_at":1430253199697,"updated_by":1},{"id":3,"uuid":"5575e379-7df5-4e45-b442-4a2e0f0c4b23","name":"Author","description":"Authors","created_at":1430253199697,"created_by":1,"updated_at":1430253199697,"updated_by":1},{"id":4,"uuid":"a4875339-11e9-4ac7-bc74-0519550a7615","name":"Owner","description":"Blog Owner","created_at":1430253199698,"created_by":1,"updated_at":1430253199698,"updated_by":1}],"roles_users":[{"id":1,"role_id":4,"user_id":1},{"id":2,"role_id":1,"user_id":2},{"id":3,"role_id":4,"user_id":3}],"permissions":[{"id":1,"uuid":"4c2982dd-5b2c-4240-9f78-b56e3c027b37","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":1430253199768,"created_by":1,"updated_at":1430253199768,"updated_by":1},{"id":2,"uuid":"a7ee7941-c1d3-416d-88f0-f2f47bb92c0c","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":1430253199770,"created_by":1,"updated_at":1430253199770,"updated_by":1},{"id":3,"uuid":"46cbf814-5728-4dbd-9aee-1591ab79c100","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":1430253199773,"created_by":1,"updated_at":1430253199773,"updated_by":1},{"id":4,"uuid":"979d95f8-91d7-4a83-9e53-b94e288bcf47","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":1430253199775,"created_by":1,"updated_at":1430253199775,"updated_by":1},{"id":5,"uuid":"6fc262b4-067e-479b-a47e-12cddb4314dd","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":1430253199777,"created_by":1,"updated_at":1430253199777,"updated_by":1},{"id":6,"uuid":"fb4bc189-3a80-45f6-a662-0d4a6b1ebbee","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":1430253199781,"created_by":1,"updated_at":1430253199781,"updated_by":1},{"id":7,"uuid":"89e18066-59a2-4099-ba25-a48bdf74d18f","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":1430253199784,"created_by":1,"updated_at":1430253199784,"updated_by":1},{"id":8,"uuid":"bf74209c-4494-4930-bf51-2140fa4af380","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":1430253199787,"created_by":1,"updated_at":1430253199787,"updated_by":1},{"id":9,"uuid":"a78ef452-ca9c-483e-923f-899414714f58","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":1430253199791,"created_by":1,"updated_at":1430253199791,"updated_by":1},{"id":10,"uuid":"ecc45988-95c4-4871-b2e0-5c8066837646","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":1430253199794,"created_by":1,"updated_at":1430253199794,"updated_by":1},{"id":11,"uuid":"4ec38090-1d45-4554-9117-4f4df62c654b","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":1430253199795,"created_by":1,"updated_at":1430253199795,"updated_by":1},{"id":12,"uuid":"e9ddd3a9-ed2d-48f2-a3a3-510783cd7080","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":1430253199798,"created_by":1,"updated_at":1430253199798,"updated_by":1},{"id":13,"uuid":"e5567abc-dbe7-4964-9779-f69af96b1a0d","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":1430253199800,"created_by":1,"updated_at":1430253199800,"updated_by":1},{"id":14,"uuid":"dc9d0f58-24bc-468a-90c3-235d71bad525","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":1430253199802,"created_by":1,"updated_at":1430253199802,"updated_by":1},{"id":15,"uuid":"ce76ad82-aa03-4989-bf63-e805685b22bb","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":1430253199803,"created_by":1,"updated_at":1430253199803,"updated_by":1},{"id":16,"uuid":"ec358757-5c11-44cf-a7fd-3bf3c9ce29c0","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":1430253199806,"created_by":1,"updated_at":1430253199806,"updated_by":1},{"id":17,"uuid":"3e6f5a72-14f5-4e7f-b403-d0c2546969a4","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":1430253199808,"created_by":1,"updated_at":1430253199808,"updated_by":1},{"id":18,"uuid":"af751aa1-31f0-416e-bb56-fc34f12f5916","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":1430253199809,"created_by":1,"updated_at":1430253199809,"updated_by":1},{"id":19,"uuid":"a26a7f35-7df7-4a84-ab0e-042b7fa56b8d","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":1430253199811,"created_by":1,"updated_at":1430253199811,"updated_by":1},{"id":20,"uuid":"3959894e-bc05-47e8-b14c-dc3f95ed2477","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":1430253199814,"created_by":1,"updated_at":1430253199814,"updated_by":1},{"id":21,"uuid":"3b6d7232-3883-4adc-968f-3af88b8e6e61","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":1430253199816,"created_by":1,"updated_at":1430253199816,"updated_by":1},{"id":22,"uuid":"02f8e4b1-3a29-4ebe-b114-67c7db232854","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":1430253199818,"created_by":1,"updated_at":1430253199818,"updated_by":1},{"id":23,"uuid":"7ff0c132-5028-48d9-ba10-bea8c878a9de","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":1430253199820,"created_by":1,"updated_at":1430253199820,"updated_by":1},{"id":24,"uuid":"5313156c-2de1-4a05-9bb6-edcc587a3462","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":1430253199822,"created_by":1,"updated_at":1430253199822,"updated_by":1},{"id":25,"uuid":"f614d7da-ea3d-48a7-8d10-dcbd02572823","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":1430253199823,"created_by":1,"updated_at":1430253199823,"updated_by":1},{"id":26,"uuid":"4cd9189f-4011-45f9-948d-205faf75cd30","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":1430253199824,"created_by":1,"updated_at":1430253199824,"updated_by":1},{"id":27,"uuid":"c8043373-6bb8-4ed8-95d6-4c54243b4841","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":1430253199826,"created_by":1,"updated_at":1430253199826,"updated_by":1},{"id":28,"uuid":"d0fac9cb-ac00-4c08-8894-aee7a937420d","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":1430253199828,"created_by":1,"updated_at":1430253199828,"updated_by":1},{"id":29,"uuid":"d2379b94-8824-4d4f-859b-bc7ce893617d","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":1430253199829,"created_by":1,"updated_at":1430253199829,"updated_by":1},{"id":30,"uuid":"be81888b-5d6a-4db9-9539-441add8f7c03","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":1430253199831,"created_by":1,"updated_at":1430253199831,"updated_by":1}],"permissions_users":[],"permissions_roles":[{"id":1,"role_id":1,"permission_id":1},{"id":2,"role_id":1,"permission_id":2},{"id":3,"role_id":1,"permission_id":3},{"id":4,"role_id":1,"permission_id":4},{"id":5,"role_id":1,"permission_id":5},{"id":6,"role_id":1,"permission_id":6},{"id":7,"role_id":1,"permission_id":7},{"id":8,"role_id":1,"permission_id":8},{"id":9,"role_id":1,"permission_id":9},{"id":10,"role_id":1,"permission_id":10},{"id":11,"role_id":1,"permission_id":11},{"id":12,"role_id":1,"permission_id":12},{"id":13,"role_id":1,"permission_id":13},{"id":14,"role_id":1,"permission_id":14},{"id":15,"role_id":1,"permission_id":15},{"id":16,"role_id":1,"permission_id":16},{"id":17,"role_id":1,"permission_id":17},{"id":18,"role_id":1,"permission_id":18},{"id":19,"role_id":1,"permission_id":19},{"id":20,"role_id":1,"permission_id":20},{"id":21,"role_id":1,"permission_id":21},{"id":22,"role_id":1,"permission_id":22},{"id":23,"role_id":1,"permission_id":23},{"id":24,"role_id":1,"permission_id":24},{"id":25,"role_id":1,"permission_id":25},{"id":26,"role_id":1,"permission_id":26},{"id":27,"role_id":1,"permission_id":27},{"id":28,"role_id":1,"permission_id":28},{"id":29,"role_id":1,"permission_id":29},{"id":30,"role_id":1,"permission_id":30},{"id":31,"role_id":2,"permission_id":8},{"id":32,"role_id":2,"permission_id":9},{"id":33,"role_id":2,"permission_id":10},{"id":34,"role_id":2,"permission_id":11},{"id":35,"role_id":2,"permission_id":12},{"id":36,"role_id":2,"permission_id":13},{"id":37,"role_id":2,"permission_id":14},{"id":38,"role_id":2,"permission_id":16},{"id":39,"role_id":2,"permission_id":17},{"id":40,"role_id":2,"permission_id":18},{"id":41,"role_id":2,"permission_id":19},{"id":42,"role_id":2,"permission_id":20},{"id":43,"role_id":2,"permission_id":21},{"id":44,"role_id":2,"permission_id":24},{"id":45,"role_id":2,"permission_id":25},{"id":46,"role_id":2,"permission_id":26},{"id":47,"role_id":2,"permission_id":27},{"id":48,"role_id":2,"permission_id":28},{"id":49,"role_id":2,"permission_id":29},{"id":50,"role_id":2,"permission_id":30},{"id":51,"role_id":3,"permission_id":8},{"id":52,"role_id":3,"permission_id":9},{"id":53,"role_id":3,"permission_id":11},{"id":54,"role_id":3,"permission_id":13},{"id":55,"role_id":3,"permission_id":14},{"id":56,"role_id":3,"permission_id":16},{"id":57,"role_id":3,"permission_id":17},{"id":58,"role_id":3,"permission_id":18},{"id":59,"role_id":3,"permission_id":20},{"id":60,"role_id":3,"permission_id":24},{"id":61,"role_id":3,"permission_id":25},{"id":62,"role_id":3,"permission_id":30}],"permissions_apps":[],"settings":[{"id":1,"uuid":"dceac590-ea7a-4584-b68e-5207bc13e6a8","key":"databaseVersion","value":"003","type":"core","created_at":1430253200264,"created_by":1,"updated_at":1430253200264,"updated_by":1},{"id":2,"uuid":"792830cb-c3b4-477c-8fea-8e00de2475ba","key":"dbHash","value":"0417f81a-4ac1-4344-95f4-483ee5736ba4","type":"core","created_at":1430253200268,"created_by":1,"updated_at":1430253200354,"updated_by":1},{"id":3,"uuid":"83837c19-87b5-493f-8eae-7453a4decadc","key":"nextUpdateCheck","value":"1431288185","type":"core","created_at":1430253200269,"created_by":1,"updated_at":1431201786179,"updated_by":1},{"id":4,"uuid":"bbf3cec5-4aa5-4d52-97f4-a40f6cb92d80","key":"displayUpdateNotification","value":"0.5.0","type":"core","created_at":1430253200269,"created_by":1,"updated_at":1431201786181,"updated_by":1},{"id":5,"uuid":"69576910-aa52-467a-89b9-599b5223e2ad","key":"title","value":"Playbook","type":"blog","created_at":1430253200271,"created_by":1,"updated_at":1431202153874,"updated_by":1},{"id":6,"uuid":"0305f2bb-28d2-4d85-bbb5-7425bffb1682","key":"description","value":"A fearless adventure in knowing what to do when no one's there telling you what to do.","type":"blog","created_at":1430253200271,"created_by":1,"updated_at":1431202153875,"updated_by":1},{"id":7,"uuid":"9217c76e-e558-4c4e-b953-0fa286649ea6","key":"email","value":"edwin.estradae@gmail.com","type":"blog","created_at":1430253200271,"created_by":1,"updated_at":1431202153875,"updated_by":1},{"id":8,"uuid":"e8c90d21-dc88-424f-a154-594bbd5edb51","key":"logo","value":"/content/images/2015/03/Pixbit-Logo-White-Letters.png","type":"blog","created_at":1430253200272,"created_by":1,"updated_at":1431202153876,"updated_by":1},{"id":9,"uuid":"fa5afdd5-fb25-4f56-85f7-f99cb95084a1","key":"cover","value":"/content/images/2015/03/blue-van-1.jpeg","type":"blog","created_at":1430253200272,"created_by":1,"updated_at":1431202153877,"updated_by":1},{"id":10,"uuid":"5db7c8fa-aeb2-40aa-8d90-bcaee018dc88","key":"defaultLang","value":"en_US","type":"blog","created_at":1430253200272,"created_by":1,"updated_at":1431202153878,"updated_by":1},{"id":11,"uuid":"8f851410-af45-4dc9-9e50-18e09de357c9","key":"postsPerPage","value":"15","type":"blog","created_at":1430253200272,"created_by":1,"updated_at":1431202153878,"updated_by":1},{"id":12,"uuid":"96d872a9-ebb5-450a-9047-74acafc0d586","key":"forceI18n","value":"true","type":"blog","created_at":1430253200272,"created_by":1,"updated_at":1431202153879,"updated_by":1},{"id":13,"uuid":"25a0ca59-deeb-4231-a4f8-eb2411a6be37","key":"permalinks","value":"/:slug/","type":"blog","created_at":1430253200272,"created_by":1,"updated_at":1431202153880,"updated_by":1},{"id":14,"uuid":"173949db-1db8-4365-99f4-77ba1c964ec4","key":"ghost_head","value":"","type":"blog","created_at":1430253200273,"created_by":1,"updated_at":1431202153881,"updated_by":1},{"id":15,"uuid":"2edb8b37-8b1a-47cf-a78e-833678817736","key":"ghost_foot","value":"","type":"blog","created_at":1430253200273,"created_by":1,"updated_at":1431202153881,"updated_by":1},{"id":16,"uuid":"b0ea4ab3-388b-4984-9b1e-961adcf1b4d1","key":"labs","value":"{\"codeInjectionUI\":false}","type":"blog","created_at":1430253200273,"created_by":1,"updated_at":1431202153882,"updated_by":1},{"id":17,"uuid":"5b049d68-c281-4568-875b-00d5118f43d2","key":"navigation","value":"[{\"label\":\"Home\", \"url\":\"/\"}]","type":"blog","created_at":1430253200273,"created_by":1,"updated_at":1430255091578,"updated_by":1},{"id":18,"uuid":"0748057d-95a7-40dc-beb4-2bcd7660b8e7","key":"activeApps","value":"[]","type":"app","created_at":1430253200273,"created_by":1,"updated_at":1431202153883,"updated_by":1},{"id":19,"uuid":"5b56ec0d-bdd1-48fb-bb87-e959831d47f6","key":"installedApps","value":"[]","type":"app","created_at":1430253200274,"created_by":1,"updated_at":1431203092255,"updated_by":1},{"id":20,"uuid":"5271c67b-56eb-460a-b226-6935434fc15e","key":"activeTheme","value":"ghost-theme-fantasma","type":"theme","created_at":1430253200273,"created_by":1,"updated_at":1430255091573,"updated_by":1}],"tags":[{"id":2,"uuid":"53218cc5-3189-4c57-804c-48fb2ff1e68c","name":"Getting Started","slug":"getting-started","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1431202153034,"created_by":1,"updated_at":1431202153034,"updated_by":1},{"id":3,"uuid":"31e49209-d44e-476b-9331-2869a84d2151","name":"MEAN","slug":"mean","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1431202153038,"created_by":3,"updated_at":1431202153038,"updated_by":1},{"id":4,"uuid":"13feffc7-b3f5-47c5-bec5-aafe39d97b33","name":"Angular.js","slug":"angular-js","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1431202153041,"created_by":3,"updated_at":1431202153041,"updated_by":1},{"id":5,"uuid":"b84fcbeb-e748-4c2e-9ddf-f22e8430a81e","name":"Node.js","slug":"node-js","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1431202153047,"created_by":3,"updated_at":1431202153047,"updated_by":1},{"id":6,"uuid":"4d84b233-79e6-4720-8e9a-52e98c093404","name":"request.params","slug":"request-params","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1431202153050,"created_by":1,"updated_at":1431202153050,"updated_by":1},{"id":7,"uuid":"1eb9ef4a-ff7e-4439-a9ca-4d696919d234","name":"partials","slug":"partials","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1431202153053,"created_by":1,"updated_at":1431202153053,"updated_by":1}],"posts_tags":[{"id":2,"post_id":3,"tag_id":3},{"id":3,"post_id":3,"tag_id":4},{"id":4,"post_id":3,"tag_id":5},{"id":5,"post_id":67,"tag_id":6},{"id":6,"post_id":67,"tag_id":7}],"apps":[],"app_settings":[],"app_fields":[]}}]}